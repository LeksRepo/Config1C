
#Область Общие

Функция СформироватьРаскрой(ДокОбъект, СписокДеталей = Неопределено, ПоказатьВесьСписокДеталей = Ложь, Наряды = Ложь) Экспорт
	
	НарядЗадание = Ложь;
	МассивСпецификаций = Новый Массив();
	
	Если ТипЗнч(ДокОбъект) = Тип("ДокументСсылка.НарядЗадание") И СписокДеталей = Неопределено Тогда
		
		НарядЗадание = Истина;
		ПервыйОбход = Истина;
		
		МассивБуквеннойНумерации = Новый ТаблицаЗначений;
		МассивБуквеннойНумерации.Колонки.Добавить("БукваНумерации", Новый ОписаниеТипов("Строка"));
		МассивБуквеннойНумерации.Колонки.Добавить("БуквеннаяНумерация", Новый ОписаниеТипов("Строка"));
		МассивБуквеннойНумерации.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
		Если ДокОбъект.СписокСпецификаций.Количество() > 0 Тогда
			
			НомерСимвола = 64;
			
			Для каждого Строка Из ДокОбъект.СписокСпецификаций Цикл
				
				МассивСпецификаций.Добавить(Строка.Спецификация);
				Дилерский = Строка.Спецификация.Контрагент.Дилер;
				Буква = Символ(НомерСимвола+Строка.НомерСтроки);
				ТаблицаДеталей = ФормированиеСпискаДеталей(Строка.Спецификация, Дилерский, Буква, НарядЗадание);
				
				Если ПервыйОбход Тогда
					СписокДеталей = ТаблицаДеталей.СкопироватьКолонки();
					ПервыйОбход = Ложь;
				КонецЕсли;
				
				Для каждого СтрокаТаблицы Из ТаблицаДеталей Цикл
					НоваяСтрока = СписокДеталей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				КонецЦикла;
				
				НомерСпецификации = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Строка.Спецификация.Номер);
				
				УНасНоваяБуква = МассивБуквеннойНумерации.Добавить();
				УНасНоваяБуква.БукваНумерации = Буква;
				УНасНоваяБуква.БуквеннаяНумерация = Буква + "=" + НомерСпецификации + " ";
				УНасНоваяБуква.Контрагент = Строка.Спецификация.Контрагент;
				
			КонецЦикла;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЗамерятьВремя = Ложь;
	
	Если СписокДеталей = Неопределено Или НарядЗадание Тогда
		
		Дилерский = ?(НарядЗадание, Ложь, ДокОбъект.Контрагент.Дилер);
		ЗамерятьВремя = Истина;
		СписокДеталей = ?(НарядЗадание, СписокДеталей, ФормированиеСпискаДеталей(ДокОбъект, Дилерский));
		
		Если НЕ НарядЗадание Тогда
			МассивСпецификаций.Добавить(ДокОбъект);
		КонецЕсли;
		
		СтруктураДляНулевойВысоты = Новый Структура;
		СтруктураДляНулевойШирины = Новый Структура;
		СтруктураДляНулевойВысоты.Вставить("ВысотаДетали", 0);
		СтруктураДляНулевойШирины.Вставить("ШиринаДетали", 0);
		
		МассивСтрокСНулевойВысотой = СписокДеталей.НайтиСтроки(СтруктураДляНулевойВысоты);
		МассивСтрокСНулевойШириной = СписокДеталей.НайтиСтроки(СтруктураДляНулевойШирины);
		
		Ошибки = Неопределено;
		
		Если МассивСтрокСНулевойВысотой.Количество() > 0 Тогда
			
			Для каждого Строка Из МассивСтрокСНулевойВысотой Цикл
				
				Текст = "Обнаружена деталь с высотой, равной 0, номер строки " + Строка.НомерСтроки;
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , Текст,);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если МассивСтрокСНулевойШириной.Количество() > 0 Тогда
			
			Для каждого Строка Из МассивСтрокСНулевойШириной Цикл
				
				Текст = "Обнаружена деталь с шириной, равной 0, номер строки " + Строка.НомерСтроки;
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , Текст,);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Ошибки <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
			Возврат Неопределено;
			
		КонецЕсли;
		НомерНаряда = "";
		Если НЕ НарядЗадание Тогда
			НомерНаряда = Документы.Спецификация.ПолучитьНарядЗадание(ДокОбъект);
		КонецЕсли;
		
		СтрокаКривогоПила = ФормированиеСтрокиКривогоПила(СписокДеталей, ДокОбъект, НомерНаряда);
		СтрокаКривогоПилаФРС = СтрокаКривогоПила.ФРС;
		СтрокаКривогоПилаСтеколка = СтрокаКривогоПила.Стеколка;
		
		СписокДеталей.Колонки.Удалить("СтрокаДляФлэш");
		СписокДеталей.Колонки.Удалить("КоличествоКривыхДеталей");
		
	КонецЕсли;
	
	Если Наряды Тогда
		НарядЗадание = Истина;
	КонецЕсли;
	
	НачалоФормирования = ?(ЗамерятьВремя, ТекущаяУниверсальнаяДатаВМиллисекундах(), 0);
	
	Структура = РасположитьНаЛистахМетодомРанца(ДокОбъект, СписокДеталей, НарядЗадание, МассивБуквеннойНумерации);
	
	КонецФормирования = ?(ЗамерятьВремя, ТекущаяУниверсальнаяДатаВМиллисекундах(), 0);
	ВремяФормирования = (КонецФормирования - НачалоФормирования) / 1000;
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("РаскройДерево", Структура.Дерево);
	ПараметрыФормирования.Вставить("МассивСпецификаций", МассивСпецификаций);
	ПараметрыФормирования.Вставить("СписокДеталей", СписокДеталей);
	
	ФормированиеHolzma.Сформировать(ПараметрыФормирования);
	
	ДанныеРаскрой = ПолучитьСтрокуДляФлэшИзДерева(Структура.Дерево, ДокОбъект, НарядЗадание, МассивБуквеннойНумерации, ПоказатьВесьСписокДеталей, СписокДеталей);
	
	Структура.Вставить("ДанныеДляРаскроя", ДанныеРаскрой.СтрокаРаскроя);
	Структура.Вставить("КоличествоДеталей", ДанныеРаскрой.ОбщееКоличествоДеталей);
	Структура.Вставить("СтрокаКривогоПилаФРС", СтрокаКривогоПилаФРС);
	Структура.Вставить("СтрокаКривогоПилаСтеколка", СтрокаКривогоПилаСтеколка);
	Структура.Вставить("ВремяФормирования", ВремяФормирования);
	
	Возврат Структура;
	
КонецФункции

Функция УдалитьКолонкиНеНужныеДляАлгоритма(СписокДеталей)
	
	//RonEXI: Оставляем только нужные поля для формирования расположения деталей.
	
	МассивКолонок = Новый Массив();
	МассивКолонок.Добавить("Количество");
	МассивКолонок.Добавить("НомерСтроки");
	МассивКолонок.Добавить("Номенклатура");
	МассивКолонок.Добавить("ВысотаДетали");
	МассивКолонок.Добавить("ШиринаДетали");
	МассивКолонок.Добавить("КромкаДляСборнойРамки");
	МассивКолонок.Добавить("Постформинг");
	МассивКолонок.Добавить("ШиринаЛиста");
	МассивКолонок.Добавить("ВысотаЛиста");
	МассивКолонок.Добавить("МожноПовернуть");
	МассивКолонок.Добавить("НомерЛиста");
	МассивКолонок.Добавить("КоординатаX");
	МассивКолонок.Добавить("КоординатаY");
	МассивКолонок.Добавить("ПоворотДетали");
	МассивКолонок.Добавить("Остаток");
	МассивКолонок.Добавить("ИспользуетсяВОстаткахПакета");
	МассивКолонок.Добавить("ПоследнийЛист");
	МассивКолонок.Добавить("ВсегоЛистов");
	МассивКолонок.Добавить("ИД");
	МассивКолонок.Добавить("GUID");
	МассивКолонок.Добавить("Буфер");
	МассивКолонок.Добавить("Дилерский");
	МассивКолонок.Добавить("НомерПакета");
	МассивКолонок.Добавить("СборныйРамочныйФасад");
	МассивКолонок.Добавить("ПакетДеталей");
	МассивКолонок.Добавить("ДетальВПакете");
	МассивКолонок.Добавить("ПорядокПечати");
	МассивКолонок.Добавить("ДетальРазмещена");
	МассивКолонок.Добавить("НаименованиеДетали");
	
	СтрокаКолонок = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивКолонок, ",");
	
	НовыйСписокДеталей = СписокДеталей.Скопировать(, СтрокаКолонок);
	
	Возврат НовыйСписокДеталей;
	
КонецФункции

Процедура ДобавитьКолонки(СписокДеталей)
	
	//RonEXI: Эта функция наверное была для перекроя для этикеток. Пока не удаляю.
	
	Если СписокДеталей.Колонки.Найти("ИспользуетсяВОстаткахПакета") = Неопределено Тогда
		СписокДеталей.Колонки.Добавить("ИспользуетсяВОстаткахПакета", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если СписокДеталей.Колонки.Найти("ПоследнийЛист") = Неопределено Тогда
		СписокДеталей.Колонки.Добавить("ПоследнийЛист", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если СписокДеталей.Колонки.Найти("ВсегоЛистов") = Неопределено Тогда
		СписокДеталей.Колонки.Добавить("ВсегоЛистов", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если СписокДеталей.Колонки.Найти("СборныйРамочныйФасад") = Неопределено Тогда
		СписокДеталей.Колонки.Добавить("СборныйРамочныйФасад", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если СписокДеталей.Колонки.Найти("Дилерский") = Неопределено Тогда
		СписокДеталей.Колонки.Добавить("Дилерский", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьОшибкуПревышениеРазмера(Структура, СтрокаДеталь)
	
	ТекстОшибки = "Ошибка формирования раскроя на материал '%1'.%2Размеры детали (%3 х %4) превышают размеры листа (%5 х %6).";
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
	СтрокаДеталь.Номенклатура,
	Символы.ПС,
	СтрокаДеталь.ШиринаДетали,
	СтрокаДеталь.ВысотаДетали,
	СтрокаДеталь.ШиринаЛиста,
	СтрокаДеталь.ВысотаЛиста);
	Структура.Вставить("Ошибка", Истина);
	Структура.Вставить("ТекстОшибки", ТекстОшибки);
	
КонецФункции

#КонецОбласти

#Область Сбор_деталей

Функция СформироватьПараметрыЭтикеток(Деталь, Буква = "")
	
	СтрокаДанных = "";
	
	Данные = Новый Структура;
	Данные.Вставить("Буква");
	Данные.Вставить("НомерДетали");
	Данные.Вставить("НомерИзделия");
	Данные.Вставить("Количество");
	Данные.Вставить("Тип");
	Данные.Вставить("СхемаЯщика");
	Данные.Вставить("НомерДеталиИзделия");
	Данные.Вставить("Сборка");
	Данные.Вставить("Присадки");
	Данные.Вставить("РучкаСтрока");
	Данные.Вставить("ПрипускСклейка");
	Данные.Вставить("НоменклатураСклейка");
	Данные.Вставить("ПрипускМелкаяДеталь");
	
	Данные.Буква = Буква;
	Данные.НомерДетали = Деталь.НомерСтроки;
	Данные.НомерИзделия = ?(ЗначениеЗаполнено(Деталь.НомерИзделия), Деталь.НомерИзделия, "");
	Данные.Количество = ?(Деталь.КоличествоОдинаковых>0,Деталь.КоличествоОдинаковых,1);
	Данные.РучкаСтрока = ?(ЗначениеЗаполнено(Деталь.РучкаСтрока), Строка(Деталь.РучкаСтрока), "");
	Данные.ПрипускМелкаяДеталь = Деталь.ПрипускМелкаяДеталь;
	
	Мас = Новый Массив();
	
	НаСклейку = Деталь.ДетальДляСклеивания;
	
	Если НаСклейку Тогда
		Данные.ПрипускСклейка = Деталь.ПрипускСклейка;
		Данные.НоменклатураСклейка = Деталь.Комментарий;
	КонецЕсли;
	
	НаКриволинейку = (ЗначениеЗаполнено(Деталь.СтрокаДляФлэш) 
				   И (Деталь.КривойПилСверху > 0 
	              	  ИЛИ Деталь.КривойПилСнизу > 0 
	              	  ИЛИ Деталь.КривойПилСлева > 0 
				  	  ИЛИ Деталь.КривойПилСправа  > 0))
	ИЛИ (Деталь.КоличествоКривыхДеталей > 0 
	  И (Деталь.КривойПилСверху > 0 
	 	 ИЛИ Деталь.КривойПилСнизу > 0 
  	 	 ИЛИ Деталь.КривойПилСлева > 0 
     	 ИЛИ Деталь.КривойПилСправа  > 0))
	ИЛИ Деталь.РадиусЛевоВерх > 0
	ИЛИ Деталь.РадиусЛевоНиз > 0
	ИЛИ Деталь.РадиусПравоВерх > 0
	ИЛИ Деталь.РадиусПравоНиз > 0
	ИЛИ Деталь.КриволинейныйВыпилПодРучку > 0
	ИЛИ Деталь.Номенклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Столешница;
	
	НаДвери = Деталь.ЭтоДверь;
	
	НаЯщики = Деталь.ЭтоЯщик
	И (Деталь.Номенклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ДВП 
	ИЛИ Деталь.Номенклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ЛДСП10);
	
	НаСборку = (Деталь.НомерИзделия > 0
	И Деталь.Сборка
	И Деталь.Номенклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ДВП);
	
	Если Деталь.ЭтоПуфик ИЛИ Деталь.ЭтоКаретнаяСтяжка Тогда
		 НаСборку = Истина;
	КонецЕсли;
	
	НаОтк = НЕ ЗначениеЗаполнено(Деталь.ВыборМебельнойКромкиСверху)
	И НЕ ЗначениеЗаполнено(Деталь.ВыборМебельнойКромкиСнизу)
	И НЕ ЗначениеЗаполнено(Деталь.ВыборМебельнойКромкиСлева)
	И НЕ ЗначениеЗаполнено(Деталь.ВыборМебельнойКромкиСправа);
	
	//RonEXI: Тут чтобы детали из редактора не шли на ОТК
	Если НаОтк
		 И ((ЗначениеЗаполнено(Деталь.СтрокаДляФлэш) И НЕ НаКриволинейку)
		     ИЛИ (Деталь.КоличествоКривыхДеталей > 0 И НЕ НаКриволинейку)) Тогда
			 НаОтк = Ложь;
	КонецЕсли;
		
	Если НаСклейку И НаКриволинейку Тогда
		Данные.Тип = "СКЛ/КРИВ";
	ИначеЕсли НаСклейку Тогда
		Данные.Тип = "СКЛЕЙ";
	ИначеЕсли НаКриволинейку Тогда
		Данные.Тип = "КРИВ";
	ИначеЕсли НаДвери Тогда
		Данные.Тип = "ДВЕР";
	ИначеЕсли НаЯщики Тогда
		Данные.Тип = "ЯЩИК";
	ИначеЕсли НаСборку Тогда
		Данные.Тип = "СБОР";
	ИначеЕсли НаОтк Тогда
		Данные.Тип = "ОТК";
	Иначе
		Данные.Тип = "";
	КонецЕсли;
	
	Данные.СхемаЯщика = ?(ЗначениеЗаполнено(Деталь.СхемаЯщика), Деталь.СхемаЯщика, "");
	Данные.НомерДеталиИзделия = ?(ЗначениеЗаполнено(Деталь.НомерДеталиИзделия),Деталь.НомерДеталиИзделия,"");
	Данные.Сборка = ?(Деталь.Сборка,1,0);
	Данные.Присадки = ?(ЗначениеЗаполнено(Деталь.НомерИзделия), Деталь.Идентификатор, "");
	
	Для каждого Свойство Из Данные Цикл
		СтрокаДанных = СтрокаДанных + Свойство.Значение + "◘";
	КонецЦикла;
	
	Возврат СтрокаДанных;
	
КонецФункции

Функция СформироватьНаименованиеДетали(Деталь, Буква = "") Экспорт
	
	НаименованиеДетали = ?(ЗначениеЗаполнено(Деталь.НаименованиеДетали), Деталь.НаименованиеДетали, "");
	НаименованиеДетали = ?(Буква <> "", Буква + " " + НаименованиеДетали + " ", НаименованиеДетали);
	ДанныеДетали = Деталь.ВидДетали;
	
	СтруктураНадпись = Новый Структура;
	СтруктураНадпись.Вставить("НомерДетали");
	СтруктураНадпись.Вставить("НомерИзделия");
	СтруктураНадпись.Вставить("ЯщикДверьИдентификатор");
	СтруктураНадпись.Вставить("Пакет");
	СтруктураНадпись.Вставить("Постформинг");
	СтруктураНадпись.Вставить("Обтачивать");
	СтруктураНадпись.Вставить("БезОбточки");
	СтруктураНадпись.Вставить("ФасадСкругленный");
	СтруктураНадпись.Вставить("Склейка");
	СтруктураНадпись.Вставить("НеТорцевать");
	СтруктураНадпись.Вставить("Пуфик");
	СтруктураНадпись.Вставить("КаретнаяСтяжка");
	СтруктураНадпись.Вставить("ПилПодРучку");
	
	СтруктураНадпись.НомерДетали = Деталь.НомерСтроки;
	СтруктураНадпись.НомерИзделия = ?(ЗначениеЗаполнено(Деталь.НомерИзделия), "/" + Деталь.НомерИзделия, "");
	СтруктураНадпись.ЯщикДверьИдентификатор = ?(Деталь.ЭтоЯщик, " ящ", ?(Деталь.ЭтоДверь, " двр", ""));
	СтруктураНадпись.Пакет = ?(Деталь.ДетальВПакете И Деталь.ОсобыйПорядок = "Фасад", " (пак" + Деталь.НомерИзделия + ")", "");
	
	СтруктураНадпись.Постформинг = ?(Деталь.Постформинг И ДанныеДетали.ЭтоСтолешница, "Пформ", "");
	СтруктураНадпись.Обтачивать = ?(Деталь.Обтачивать И ДанныеДетали.ЭтоСтекло, "Обтч ", "");
	СтруктураНадпись.БезОбточки = ?(НЕ Деталь.Обтачивать И ДанныеДетали.ЭтоСтекло, "Без обтч ", "");
	
	Если ДанныеДетали.ЭтоСтекло И ДанныеДетали.ЭтоФасад И Деталь.РадиусФасада <> "" Тогда 
		СтруктураНадпись.ФасадСкругленный = "ФАСАД Скруг " + Деталь.РадиусФасада;
	ИначеЕсли ДанныеДетали.ЭтоФасад Тогда
		СтруктураНадпись.ФасадСкругленный = "ФАСАД";
	Иначе
		СтруктураНадпись.ФасадСкругленный = "";
	КонецЕсли;
	
	СтруктураНадпись.Склейка = ?(Деталь.ДетальДляСклеивания, "скл", "");
	СтруктураНадпись.НеТорцевать = ?(Деталь.НеТорцевать, "НЕ ТОРЦЕВАТЬ ПО ДЛИНЕ", "");
	СтруктураНадпись.Пуфик = ?(Деталь.ЭтоПуфик, "пуф", ?(Деталь.ЭтоКаретнаяСтяжка, "кар.стяжка", ""));
	СтруктураНадпись.ПилПодРучку = ?(Деталь.КриволинейныйВыпилПодРучку, "ВЫПИЛ ПОД РУЧКУ", "");
	
	Для каждого Свойство Из СтруктураНадпись Цикл
		
		Если Свойство.Значение <> "" Тогда
			НаименованиеДетали = НаименованиеДетали + Свойство.Значение + " ";
		КонецЕсли;
		
	КонецЦикла;
	
	НаименованиеДетали = СокрЛП(НаименованиеДетали);
	
	Возврат НаименованиеДетали;
	
КонецФункции

Функция ПолучитьМинимальныйРазмерДетали(Подразделение)
	
	МинРазмер = 0;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ВидНастройки", Перечисления.ВидыНастроекПодразделений.МинимальныйРазмерДеталиВРаскрое);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиПодразделенийСрезПоследних.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.НастройкиПодразделений.СрезПоследних(
	|			,
	|			Подразделение = &Подразделение
	|				И ВидНастройки = &ВидНастройки) КАК НастройкиПодразделенийСрезПоследних";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		МинРазмер = Выборка.Значение;
		
	КонецЕсли;
	
	Возврат МинРазмер;
	
КонецФункции

Функция ФормированиеСпискаДеталей(фнДокОбъект, Дилерский = Ложь, Буква = "", НарядЗадание = Ложь)
	
	Ошибки = Неопределено;
	Отказ = Ложь;
	
	тзДетали = фнДокОбъект.СписокДеталей.Выгрузить(,
	"НомерСтроки,
	|ВидДетали,
	|Номенклатура,
	|ВысотаДетали,
	|ШиринаДетали,
	|Количество,
	|Идентификатор,
	|НоменклатураДляСклеивания,
	|ДопНоменклатураДляСклеивания,
	|НомерИзделия,
	|НомерДеталиИзделия,
	|НеТорцевать,
	|СтруктураОтверстий,
	|Комментарий,
	|РадиусЛевоВерх,
	|РадиусЛевоНиз,
	|РадиусПравоВерх,
	|РадиусПравоНиз,
	|КривойПилСверху,
	|КривойПилСлева,
	|КривойПилСнизу,
	|КривойПилСправа,
	|СтрокаДляФлэш,
	|ВыборМебельнойКромкиСверху,
	|ВыборМебельнойКромкиСлева,
	|ВыборМебельнойКромкиСнизу,
	|ВыборМебельнойКромкиСправа,
	|КромкаДляСборнойРамки,
	|ШиринаСборнойРамки,
	|Срез,
	|КоличествоПетель,
	|Обтачивать, 
	|Постформинг,
	|РадиусФасада,
	|ЕвропазВерх,
	|ЕвропазНиз,
	|ЕвропазЛево,
	|ЕвропазПраво,
	|Ручка,
	|КантыИзРедактора,
	|ИдентификаторПетли");
	тзДетали.Колонки.Добавить("ШиринаЛиста", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ВысотаЛиста", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("МожноПовернуть", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("НомерЛиста", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("КоординатаX", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("КоординатаY", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ПоворотДетали", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ОсобыйПорядок", Новый ОписаниеТипов("Строка"));
	тзДетали.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ЭтоЯщик", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ИспользуетсяВОстаткахПакета", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ПоследнийЛист", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ВсегоЛистов", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ЭтоДверь", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ДетальДляСклеивания", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ИД", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("GUID", Новый ОписаниеТипов("Строка"));
	тзДетали.Колонки.Добавить("Буфер", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("Дилерский", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("СборныйРамочныйФасад", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ПакетДеталей", Новый ОписаниеТипов("Массив"));
	тзДетали.Колонки.Добавить("ДетальВПакете", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ПорядокПечати", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ДетальРазмещена", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("СоблюдениеТекстуры", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("НаименованиеДетали", Новый ОписаниеТипов("Строка"));
	тзДетали.Колонки.Добавить("ПараметрыДляЭтикеток", Новый ОписаниеТипов("Строка"));
	тзДетали.Колонки.Добавить("КоличествоОдинаковых", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("КоличествоКривыхДеталей", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ЭтоПуфик", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ЭтоКаретнаяСтяжка", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("КриволинейныйВыпилПодРучку", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("СхемаЯщика", Новый ОписаниеТипов("СправочникСсылка.СхемыЯщиков"));
	тзДетали.Колонки.Добавить("Сборка", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("ДокументСсылка.Спецификация"));
	тзДетали.Колонки.Добавить("ПрипускСклейка", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ПрипускМелкаяДеталь", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("РучкаСтрока", Новый ОписаниеТипов("Строка"));
	
	тзДетали.Индексы.Добавить("ДетальВПакете");
		
	тзКороба = фнДокОбъект.СписокИзделийПоКаталогу.Выгрузить(,"НомерСтроки,Сборка");
	тзКороба.Сортировать("НомерСтроки Возр");
	
	//ЗаполнитьСборку И РучкаСтрока
	
	Для Каждого Деталь ИЗ тзДетали Цикл
		
		Деталь.Спецификация = фнДокОбъект.Ссылка;
		
		Если Деталь.НомерИзделия > 0 Тогда
			Деталь.Сборка = тзКороба[Деталь.НомерИзделия-1].Сборка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Деталь.Ручка) Тогда
			Деталь.РучкаСтрока = Строка(Деталь.Ручка);
		КонецЕсли;
		
	КонецЦикла;
	
	тзДетали.Колонки.Удалить("Ручка"); //Перенесли в реквизит РучкаСтрока;
	
	#Область Ящики
	
	Если фнДокОбъект.СписокЯщики.Количество() > 0 Тогда 
		
		ТаблицаДеталиЯщиков = Документы.Спецификация.РазложитьЯщикиНаДетали(фнДокОбъект);
		
		Для Каждого ДетальЯщика Из ТаблицаДеталиЯщиков Цикл
			
			НоваяДеталь = тзДетали.Добавить();
			НоваяДеталь.ЭтоЯщик = Истина;
			НоваяДеталь.СхемаЯщика = ДетальЯщика.СхемаЯщика;
			НоваяДеталь.Номенклатура = ДетальЯщика.Номенклатура;
			НоваяДеталь.НомерИзделия = ДетальЯщика.НомерИзделия;
			НоваяДеталь.НомерСтроки = ДетальЯщика.НомерСтроки;
			НоваяДеталь.ВысотаДетали = ДетальЯщика.ВысотаДетали;
			НоваяДеталь.ШиринаДетали = ДетальЯщика.ШиринаДетали;
			НоваяДеталь.Количество = ДетальЯщика.Количество;
			НоваяДеталь.ВыборМебельнойКромкиСверху = ДетальЯщика.ВыборМебельнойКромкиСверху;
			НоваяДеталь.ВыборМебельнойКромкиСнизу = ДетальЯщика.ВыборМебельнойКромкиСнизу;
			НоваяДеталь.ВыборМебельнойКромкиСлева = ДетальЯщика.ВыборМебельнойКромкиСлева;
			НоваяДеталь.ВыборМебельнойКромкиСправа = ДетальЯщика.ВыборМебельнойКромкиСправа;
			НоваяДеталь.СтруктураОтверстий = ДетальЯщика.СтруктураОтверстий;
			НоваяДеталь.КриволинейныйВыпилПодРучку = ДетальЯщика.КриволинейныйВыпилПодРучку;
			НоваяДеталь.Спецификация = фнДокОбъект.Ссылка;
			НоваяДеталь.ДетальДляСклеивания = ДетальЯщика.ЭтоСклейка;
			НоваяДеталь.РучкаСтрока = ДетальЯщика.Ручка;
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Двери
	
	СписокДверей = фнДокОбъект.СписокДверей;
	
	Для Каждого Элемент Из СписокДверей Цикл
		
		СписокНоменклатурыДверей = Элемент.Двери.СписокНоменклатуры;
		Для Каждого Строка Из СписокНоменклатурыДверей Цикл
			
			Если ЗначениеЗаполнено(Строка.Длина)
				И ЗначениеЗаполнено(Строка.Ширина)
				И (Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал) Тогда
				
				НоваяСтрока = тзДетали.Добавить();
				НоваяСтрока.Номенклатура = Строка.Номенклатура;
				НоваяСтрока.ВысотаДетали = Строка.Длина;
				НоваяСтрока.ШиринаДетали = Строка.Ширина;
				НоваяСтрока.Количество = Строка.Количество;
				НоваяСтрока.НомерСтроки = Строка.НомерСтроки;
				НоваяСтрока.ЭтоДверь = Истина;
				НоваяСтрока.Спецификация = фнДокОбъект.Ссылка;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	ИД = 1;
	
	Для Каждого Деталь Из тзДетали Цикл
		
		ДанныеДетали = Деталь.ВидДетали;
		
		Деталь.ИД = ИД;
		
		Номенклатура = Деталь.Номенклатура;

		// Проставление размеров листа.
		СтруктураРазмеровЛиста = ЛексСерверПовтИсп.ПолучитьРазмерыЛиста(Номенклатура, фнДокОбъект.Подразделение);
		Деталь.ВысотаЛиста = СтруктураРазмеровЛиста.ВысотаЛиста;
		Деталь.ШиринаЛиста = СтруктураРазмеровЛиста.ШиринаЛиста;
		
		// Заполнение флага МожноПовернуть и разворот деталей вертикально. 
		//Можно повернуть только если вся номенклатура в склейке без текстуры. Доделать позже чтобы разбивка склейки была до поворота детали.
		
		Деталь.СоблюдениеТекстуры = Номенклатура.НаличиеТекстуры;
		
		Если ЗначениеЗаполнено(Деталь.НоменклатураДляСклеивания) И Деталь.НоменклатураДляСклеивания.НаличиеТекстуры Тогда
			 Деталь.СоблюдениеТекстуры = Истина;	
		КонецЕсли;
		 
		Если ЗначениеЗаполнено(Деталь.ДопНоменклатураДляСклеивания) И Деталь.ДопНоменклатураДляСклеивания.НаличиеТекстуры Тогда
			 Деталь.СоблюдениеТекстуры = Истина;	
		КонецЕсли; 
		
		Если НЕ Деталь.СоблюдениеТекстуры и НЕ Деталь.СборныйРамочныйФасад Тогда
			
			Если (Деталь.ВысотаДетали <= Деталь.ШиринаЛиста
				И Деталь.ВысотаДетали <= Деталь.ВысотаЛиста
				И Деталь.ШиринаДетали <= Деталь.ШиринаЛиста
				И Деталь.ШиринаДетали <= Деталь.ВысотаЛиста И не ДанныеДетали.Клееная) или 
				(ДанныеДетали.Клееная и Деталь.ВысотаДетали + ДанныеДетали.ПрипускСклейка <= Деталь.ШиринаЛиста
				И Деталь.ВысотаДетали + ДанныеДетали.ПрипускСклейка <= Деталь.ВысотаЛиста
				И Деталь.ШиринаДетали + ДанныеДетали.ПрипускСклейка <= Деталь.ШиринаЛиста
				И Деталь.ШиринаДетали + ДанныеДетали.ПрипускСклейка <= Деталь.ВысотаЛиста) Тогда
				
				  Деталь.МожноПовернуть = Истина;	   
				
			КонецЕсли;
			
			Если Деталь.МожноПовернуть И
				Деталь.ШиринаДетали > Деталь.ВысотаДетали Тогда
				ПовернутьДеталь(Деталь);
			КонецЕсли;
			
			// Детали с размерами больше листа по одной из сторон
			// можно использовать только повёрнутые.
			// Могут попасть из дверей.
			Если Деталь.ШиринаДетали > Деталь.ШиринаЛиста
				ИЛИ Деталь.ВысотаДетали > Деталь.ВысотаЛиста Тогда
				ПовернутьДеталь(Деталь);
				Деталь.МожноПовернуть = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Порядок печати.
		
		ПорядокПечати = Номенклатура.НоменклатурнаяГруппа.ПорядокПечатиВРаскрое;
		Деталь.ПорядокПечати = ПорядокПечати;
		
		// Разбиваем клееные детали и пуфики.
		
		Если ДанныеДетали.Клееная Тогда
			
			Деталь.ВысотаДетали = Деталь.ВысотаДетали + ДанныеДетали.ПрипускСклейка;
			Деталь.ШиринаДетали = Деталь.ШиринаДетали + ДанныеДетали.ПрипускСклейка;
			Деталь.ДетальДляСклеивания = Истина;
			Деталь.ПрипускСклейка = ДанныеДетали.ПрипускСклейка; 
			
			Деталь.НаименованиеДетали = "Верх ";
			Деталь.ВидДетали = Справочники.ВидыДеталей.ПустаяСсылка();
			Деталь.Комментарий = "Верх:" + Деталь.Номенклатура + " Низ:" + Деталь.НоменклатураДляСклеивания;
			
			НоваяСтрока = тзДетали.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
			НоваяСтрока.Спецификация = фнДокОбъект.Ссылка;
			НоваяСтрока.Номенклатура = Деталь.НоменклатураДляСклеивания;
			НоваяСтрока.СоблюдениеТекстуры = Деталь.НоменклатураДляСклеивания.НаличиеТекстуры;
			НоваяСтрока.НаименованиеДетали = "Низ ";
			НоваяСтрока.ВидДетали = Справочники.ВидыДеталей.ПустаяСсылка();
			
			Если Деталь.НоменклатураДляСклеивания.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Пластик Тогда
				
				НоваяСтрока.ВыборМебельнойКромкиСверху = Справочники.Номенклатура.ПустаяСсылка();
				НоваяСтрока.ВыборМебельнойКромкиСнизу = Справочники.Номенклатура.ПустаяСсылка();
				НоваяСтрока.ВыборМебельнойКромкиСлева = Справочники.Номенклатура.ПустаяСсылка();
				НоваяСтрока.ВыборМебельнойКромкиСправа = Справочники.Номенклатура.ПустаяСсылка();
				
				Деталь.НаименованиеДетали = "Низ ";
				НоваяСтрока.НаименованиеДетали = "Верх ";
				
				Деталь.Комментарий = "Верх:" + Деталь.НоменклатураДляСклеивания + " Низ:" + Деталь.Номенклатура;
				НоваяСтрока.Комментарий = Деталь.Комментарий;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Деталь.ДопНоменклатураДляСклеивания) Тогда
				
				НоваяСтрока2 = тзДетали.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока2, Деталь);
				НоваяСтрока2.Спецификация = фнДокОбъект.Ссылка;
				НоваяСтрока2.Номенклатура = Деталь.ДопНоменклатураДляСклеивания;
				НоваяСтрока2.СоблюдениеТекстуры = Деталь.ДопНоменклатураДляСклеивания.НаличиеТекстуры;
				НоваяСтрока2.ВидДетали = Справочники.ВидыДеталей.ПустаяСсылка();
				
				Деталь.НаименованиеДетали = "Середина3х ";
				НоваяСтрока.НаименованиеДетали = "Верх3х ";
				НоваяСтрока2.НаименованиеДетали = "Низ3х ";
				
				Деталь.Комментарий = "Верх:" + Деталь.НоменклатураДляСклеивания + "Середина:" + Деталь.Номенклатура + " Низ:" + Деталь.ДопНоменклатураДляСклеивания;
				НоваяСтрока.Комментарий = Деталь.Комментарий;
				НоваяСтрока2.Комментарий = Деталь.Комментарий;
				
			КонецЕсли;
			
		ИначеЕсли ДанныеДетали.ЭтоПуфик ИЛИ ДанныеДетали.ЭтоКаретнаяСтяжка Тогда
			
			РазмерыДетали = ПолучитьРазмерыДетали(Деталь);
			
			Деталь.ВысотаДетали = РазмерыДетали.ВысотаТекстура;
			Деталь.ШиринаДетали = РазмерыДетали.ШиринаТекстура;
			Деталь.ВидДетали = Справочники.ВидыДеталей.ПустаяСсылка();
			
			Если ДанныеДетали.ЭтоПуфик Тогда
				Деталь.ЭтоПуфик = Истина;
			КонецЕсли;
			
			Если ДанныеДетали.ЭтоКаретнаяСтяжка Тогда
				Деталь.ЭтоКаретнаяСтяжка = Истина;
			КонецЕсли;

			НоваяСтрока = тзДетали.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
			НоваяСтрока.Спецификация = фнДокОбъект.Ссылка;
			НоваяСтрока.Номенклатура = Деталь.НоменклатураДляСклеивания;
			НоваяСтрока.ВысотаДетали = РазмерыДетали.ВысотаДопНоменклатура;
			НоваяСтрока.ШиринаДетали = РазмерыДетали.ШиринаДопНоменклатура;
			НоваяСтрока.ВидДетали = Справочники.ВидыДеталей.ПустаяСсылка();
			
			Если ДанныеДетали.ЭтоПуфик Тогда
				НоваяСтрока.ЭтоПуфик = Истина;
			КонецЕсли;
			
			Если ДанныеДетали.ЭтоКаретнаяСтяжка Тогда
				НоваяСтрока.ЭтоКаретнаяСтяжка = Истина;
			КонецЕсли;
		КонецЕсли;
		
		СборныйРамочныйФасад = ЗначениеЗаполнено(Деталь.КромкаДляСборнойРамки);
		// Разбиваем детали на отдельные строки. 
		НомерФасада = 0;
		
		Если СборныйРамочныйФасад и НЕ Деталь.СборныйРамочныйФасад Тогда
			
			Для ы = 1 По Деталь.Количество Цикл
				
				Если ы > 1 Тогда
					
					ИД = ИД + 1;
					НоваяСтрока = тзДетали.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
					НоваяСтрока.Спецификация = фнДокОбъект.Ссылка;
					НоваяСтрока.ВыборМебельнойКромкиСверху = Неопределено;
					НоваяСтрока.ВыборМебельнойКромкиСнизу = Неопределено;
					НоваяСтрока.ВыборМебельнойКромкиСлева = Неопределено;
					НоваяСтрока.ВыборМебельнойКромкиСправа = Неопределено;
					НоваяСтрока.СборныйРамочныйФасад = Истина;
					НоваяСтрока.Количество = 1;
					НоваяСтрока.ИД = ИД;
					
				КонецЕсли;
				
				НомерФасада = НомерФасада + 1;
				
				Для з=1 По 2 Цикл
					
					ИД = ИД + 1;
					НоваяСтрока = тзДетали.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
					НоваяСтрока.Спецификация = фнДокОбъект.Ссылка;
					НоваяСтрока.Номенклатура = Деталь.ВыборМебельнойКромкиСправа;
					НоваяСтрока.СоблюдениеТекстуры = НоваяСтрока.Номенклатура.НаличиеТекстуры;
					НоваяСтрока.ВысотаДетали = Деталь.ВысотаДетали + 50 + Деталь.ВыборМебельнойКромкиСверху.ГлубинаДетали * 2;
					НоваяСтрока.ШиринаДетали = Деталь.ШиринаСборнойРамки - Деталь.КромкаДляСборнойРамки.ГлубинаДетали * 2;
					НоваяСтрока.СборныйРамочныйФасад = Истина;
					НоваяСтрока.ВыборМебельнойКромкиСлева = Деталь.КромкаДляСборнойРамки;
					НоваяСтрока.ВыборМебельнойКромкиСправа = Деталь.КромкаДляСборнойРамки;
					НоваяСтрока.КромкаДляСборнойРамки= Справочники.Номенклатура.ПустаяСсылка();
					НоваяСтрока.Количество = 1;
					НоваяСтрока.КоличествоПетель = 0;
					НоваяСтрока.ИД = ИД;
					
					ИД = ИД + 1;
					НоваяСтрока = тзДетали.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
					НоваяСтрока.Спецификация = фнДокОбъект.Ссылка;
					НоваяСтрока.Номенклатура = Деталь.ВыборМебельнойКромкиСправа;
					НоваяСтрока.СоблюдениеТекстуры = НоваяСтрока.Номенклатура.НаличиеТекстуры;
					НоваяСтрока.ВысотаДетали = Деталь.ШиринаДетали + 50 + Деталь.ВыборМебельнойКромкиСверху.ГлубинаДетали * 2;
					НоваяСтрока.ШиринаДетали = Деталь.ШиринаСборнойРамки - Деталь.КромкаДляСборнойРамки.ГлубинаДетали * 2;
					НоваяСтрока.СборныйРамочныйФасад = Истина;
					НоваяСтрока.ВыборМебельнойКромкиСлева = Деталь.КромкаДляСборнойРамки;
					НоваяСтрока.ВыборМебельнойКромкиСправа = Деталь.КромкаДляСборнойРамки;
					НоваяСтрока.КромкаДляСборнойРамки= Справочники.Номенклатура.ПустаяСсылка();
					НоваяСтрока.Количество = 1;
					НоваяСтрока.КоличествоПетель = 0;
					НоваяСтрока.ИД = ИД;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Деталь.ВыборМебельнойКромкиСверху = Неопределено;
			Деталь.ВыборМебельнойКромкиСнизу = Неопределено;
			Деталь.ВыборМебельнойКромкиСлева = Неопределено;
			Деталь.ВыборМебельнойКромкиСправа = Неопределено;
			НоваяСтрока.СборныйРамочныйФасад = Истина;
			Деталь.Количество = 1;
			
		КонецЕсли;
		
		КоличествоКривыхДеталей = Деталь.Количество; 
		
		Если Деталь.Количество > 1 Тогда
			
			Для ы = 2 По Деталь.Количество Цикл
				ИД = ИД + 1;
				НоваяСтрока = тзДетали.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
				НоваяСтрока.Спецификация = фнДокОбъект.Ссылка;
				НоваяСтрока.Количество = 1;
				НоваяСтрока.КоличествоОдинаковых = Деталь.Количество;
				НоваяСтрока.ИД = ИД;
				НоваяСтрока.КоличествоКривыхДеталей = ?(ЗначениеЗаполнено(НоваяСтрока.СтрокаДляФлэш), КоличествоКривыхДеталей, 0);
				НоваяСтрока.СтрокаДляФлэш = "";
			КонецЦикла;
			
			Деталь.КоличествоОдинаковых = Деталь.Количество;
			Деталь.Количество = 1;
			
		КонецЕсли;
		
		Если Деталь.КоличествоКривыхДеталей = 0 Тогда
			Деталь.КоличествоКривыхДеталей = ?(ЗначениеЗаполнено(Деталь.СтрокаДляФлэш), КоличествоКривыхДеталей, 0);
		КонецЕсли;
		
		// УзкоДлинные оставлен для совместимости со старым раскроем
		Если (Деталь.ШиринаЛиста < Деталь.ВысотаДетали
			ИЛИ Деталь.ВысотаЛиста / 2 < Деталь.ВысотаДетали)
			И Деталь.ШиринаДетали <= 201
			И НЕ ДанныеДетали.ЭтоПристенок
			И НЕ ДанныеДетали.ЭтоСтолешница Тогда
			
			Деталь.ОсобыйПорядок = "УзкоДлинные";
			
		КонецЕсли;
		
		// Проверяем пил под углом.
		
		Если ЗначениеЗаполнено(Деталь.КантыИзРедактора) Тогда
			
			КантыИзРедактора = ЗначениеИзСтрокиВнутр(Деталь.КантыИзРедактора);
			МассивКантов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КантыИзРедактора, "|");
			
			КВерх = 0;
			КНиз = 0;
			КЛево = 0;
			КПраво = 0;
			
			Для Каждого СтрокаКант Из МассивКантов Цикл
				
				ПараметрыСреза = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаКант , "_");
				КодСреза = ПараметрыСреза[0];
				
				Если КодСреза = "bevelCut" И ПараметрыСреза.Количество()>3 Тогда 
					
					СторонаСреза = ПараметрыСреза[3];
					
					Если КВерх = 0 И СторонаСреза = "up" Тогда
						КВерх = ДанныеДетали.ПрипускПилПодУглом;
					ИначеЕсли КНиз = 0 И СторонаСреза = "down" Тогда
						КНиз = ДанныеДетали.ПрипускПилПодУглом;
					ИначеЕсли КЛево = 0 И СторонаСреза = "left" Тогда
						КЛево = ДанныеДетали.ПрипускПилПодУглом;
					ИначеЕсли КПраво = 0 И СторонаСреза = "right" Тогда
						КПраво = ДанныеДетали.ПрипускПилПодУглом;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ Деталь.ПоворотДетали Тогда
				Деталь.ВысотаДетали = Деталь.ВысотаДетали + КВерх + КНиз;
				Деталь.ШиринаДетали = Деталь.ШиринаДетали + КЛево + КПраво;
			Иначе
				Деталь.ШиринаДетали = Деталь.ШиринаДетали + КВерх + КНиз;
				Деталь.ВысотаДетали = Деталь.ВысотаДетали + КЛево + КПраво;
			КонецЕсли;
			
		КонецЕсли;
		
		Надпись = СформироватьНаименованиеДетали(Деталь, Буква);
		Деталь.НаименованиеДетали = Надпись;
		
		Деталь.ПараметрыДляЭтикеток = СформироватьПараметрыЭтикеток(Деталь, Буква);
		
		СтруктураРазмеровЛиста = ЛексСерверПовтИсп.ПолучитьРазмерыЛиста(Деталь.Номенклатура, фнДокОбъект.Подразделение);
		ВысотаЛиста = СтруктураРазмеровЛиста.ВысотаЛиста;
		ШиринаЛиста = СтруктураРазмеровЛиста.ШиринаЛиста;
		
		Если Деталь.ШиринаДетали > ШиринаЛиста
			ИЛИ Деталь.ВысотаДетали > ВысотаЛиста Тогда
			
			ТекстОшибки = "Ошибка формирования раскроя на материал '%1'.%2Размеры детали (%3 х %4) превышают размеры листа (%5 х %6).";
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
			Деталь.Номенклатура,
			Символы.ПС,
			Деталь.ШиринаДетали,
			Деталь.ВысотаДетали,
			ШиринаЛиста,
			ВысотаЛиста);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,, ТекстОшибки);
			
		КонецЕсли;
		
		ИД = ИД + 1;
		
	КонецЦикла; // Деталь Из тзДетали
	
	//Увеличим деталь если размер меньше минимального
	
	МинимальныйРазмерДеталиВРаскрое = ПолучитьМинимальныйРазмерДетали(фнДокОбъект.Подразделение);
	
	Для Каждого Деталь ИЗ тзДетали Цикл
		
		Если Деталь.ШиринаДетали > МинимальныйРазмерДеталиВРаскрое
		 ИЛИ Деталь.ВысотаДетали > МинимальныйРазмерДеталиВРаскрое Тогда // Увеличиваем только в том случае если 1 сторона меньше, но не 2 сразу.	
		
			Если Деталь.ШиринаДетали < МинимальныйРазмерДеталиВРаскрое Тогда
				
				 Деталь.ПрипускМелкаяДеталь = МинимальныйРазмерДеталиВРаскрое - Деталь.ШиринаДетали;
				 Деталь.ШиринаДетали = МинимальныйРазмерДеталиВРаскрое; 
				 Деталь.ПараметрыДляЭтикеток = СформироватьПараметрыЭтикеток(Деталь, Буква);
				
			ИначеЕсли Деталь.ВысотаДетали < МинимальныйРазмерДеталиВРаскрое Тогда
				
				 Деталь.ПрипускМелкаяДеталь = МинимальныйРазмерДеталиВРаскрое - Деталь.ВысотаДетали;
				 Деталь.ВысотаДетали = МинимальныйРазмерДеталиВРаскрое; 
				 Деталь.ПараметрыДляЭтикеток = СформироватьПараметрыЭтикеток(Деталь, Буква);
				
			 КонецЕсли;
			 
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	Если Отказ Тогда
		
		ВызватьИсключение "Раскрой не сформирован";
		
	КонецЕсли;
	
	тзДетали.Колонки.Удалить("СоблюдениеТекстуры");
	тзДетали.Колонки.Удалить("ЭтоДверь");
	тзДетали.Колонки.Удалить("ЭтоЯщик");
	
	ТаблицаИспользуемойНоменклатуры = тзДетали.Скопировать(,"Номенклатура");
	ТаблицаИспользуемойНоменклатуры.Свернуть("Номенклатура");
	
	Если НарядЗадание Тогда
		
		Для каждого Строка Из ТаблицаИспользуемойНоменклатуры Цикл
			
			Если Строка.Номенклатура.Неноменклатурный Тогда
				МассивУдаляемыхСтрок = тзДетали.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
				Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
					тзДетали.Удалить(УдаляемаяСтрока);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		//буфер
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТЗ", ТаблицаИспользуемойНоменклатуры);
		Запрос.УстановитьПараметр("Подразделение", фнДокОбъект.Подразделение);
		Запрос.УстановитьПараметр("ДатаОтбора", фнДокОбъект.Дата);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СписокМатериалов.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
		|ПОМЕСТИТЬ СписокМатериалов
		|ИЗ
		|	&ТЗ КАК СписокМатериалов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокМатериалов.Номенклатура,
		|	НастройкиНоменклатуры.ОкруглятьДоЛистов
		|ИЗ
		|	СписокМатериалов КАК СписокМатериалов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиНоменклатуры.СрезПоследних(&ДатаОтбора, Подразделение = &Подразделение) КАК НастройкиНоменклатуры
		|		ПО СписокМатериалов.Номенклатура = НастройкиНоменклатуры.Номенклатура
		|ГДЕ
		|	НастройкиНоменклатуры.ОкруглятьДоЛистов";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МассивСтрокДляБуфера = тзДетали.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
			
			Для каждого ИзменяемаяСтрока Из МассивСтрокДляБуфера Цикл
				ИзменяемаяСтрока.Буфер = Истина;
				Если Дилерский Тогда
					ИзменяемаяСтрока.Дилерский = Истина;
				КонецЕсли;
			КонецЦикла
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат тзДетали;
	
КонецФункции

Функция ПовернутьДеталь(Деталь)
	
	Т = Деталь.ШиринаДетали;
	Деталь.ШиринаДетали = Деталь.ВысотаДетали;
	Деталь.ВысотаДетали = Т;
	Деталь.ПоворотДетали = Истина;
	
КонецФункции

#КонецОбласти

#Область Формирование_раскроя

Процедура ДобавитьНовыйЛист(Знач СписокДеталейНоменклатуры, Знач НомерЛиста, Знач Номенклатура, Знач ВысотаЛиста, Знач ШиринаЛиста, Знач Остатки)
	
	Перем НоваяСтрока;
	
	НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.НомерЛиста = НомерЛиста;
	НоваяСтрока.ВысотаДетали = ВысотаЛиста;
	НоваяСтрока.ШиринаДетали = ШиринаЛиста;
	НоваяСтрока.ВысотаЛиста = ВысотаЛиста;
	НоваяСтрока.ШиринаЛиста = ШиринаЛиста;
	НоваяСтрока.КоординатаX = 0;
	НоваяСтрока.КоординатаY = 0;
	
	НоваяСтрока.GUID = Новый УникальныйИдентификатор();
	
	НоваяСтрока.Остаток = Истина;
	
	Если Остатки <> Неопределено Тогда
		
		Если ТипЗнч(Остатки) = Тип("ТаблицаЗначений") Тогда
			
			СтрокаОстатков = Остатки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОстатков, НоваяСтрока);
			
		ИначеЕсли ТипЗнч(Остатки) = Тип("Массив") Тогда
			
			Остатки.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОптимизацияОстатков(СписокДеталейНоменклатуры,
	НомерЛиста,
	КонечныйНомерЛиста,
	ТолщинаПила,
	ПределыОстатков,
	НоменклатурнаяГруппа,
	НадписьНаОстатке,
	ЕстьШаг = Ложь,
	МассивБуквеннойНумерации)
	
	ПлощадьОстатковПоНоменклатуре = 0;
	ПлощадьОбрезковПоНоменклатуре = 0;
	СписокДеталейНоменклатуры.Сортировать("НомерЛиста, КоординатаY Убыв, КоординатаX Убыв");
	
	Для ТекущийНомерЛиста = КонечныйНомерЛиста + 1 По НомерЛиста Цикл
		
		КоличествоОстатков = 0;
		ПлощадьОстатков = 0;
		ПлощадьОбрезков = 0;
		СреднийОстаток = 0;
		КоличествоОстатков2 = 1;
		ПлощадьОстатков2 = 0;
		СреднийОстаток2 = 0;
		
		ВсеДеталиДилеров = Ложь;
		Если СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток, НомерЛиста, Дилерский", Ложь, ТекущийНомерЛиста, Ложь)).Количество() = 0 Тогда
			ВсеДеталиДилеров = Истина;
		КонецЕсли;
		
		ТаблицаДеталейКонтрагентов = СписокДеталейНоменклатуры.Скопировать(Новый Структура("Остаток, НомерЛиста", Ложь, ТекущийНомерЛиста), "НаименованиеДетали, Дилерский");
		СтруктураПроверкиДеталей = ПроверкаДеталейКонтрагентов(ТаблицаДеталейКонтрагентов, МассивБуквеннойНумерации);
		
		Если НадписьНаОстатке = "Буфер" И ВсеДеталиДилеров И СтруктураПроверкиДеталей.Свойство("ДополнениеНазванияОстатка") Тогда
			ДополнениеНазванияОстатка = СтруктураПроверкиДеталей.ДополнениеНазванияОстатка;
		Иначе
			ДополнениеНазванияОстатка = "";
		КонецЕсли;
		
		МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток, НомерЛиста", Истина, ТекущийНомерЛиста));
		
		Если МассивОстатков.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПределыОстатков) = Тип("СправочникСсылка.СеткаОстатков") Тогда		
			ПШаг = ПределыОстатков.Шаг;
			Шаг = ?(ПШаг > 0, ПШаг, 100);
		Иначе
			Шаг = 100;
		КонецЕсли;
		
		//_____1_____
		Для Каждого ЭлементМассиваОстатков Из МассивОстатков Цикл
			
			Если ПолезныйОстаток(ПределыОстатков, ЭлементМассиваОстатков.ВысотаДетали, ЭлементМассиваОстатков.ШиринаДетали, Шаг) Тогда
				
				ПлощадьОстатков = ПлощадьОстатков + (ЭлементМассиваОстатков.ВысотаДетали * ЭлементМассиваОстатков.ШиринаДетали);
				КоличествоОстатков = КоличествоОстатков + 1;
				ЭлементМассиваОстатков.НаименованиеДетали = НадписьНаОстатке + ДополнениеНазванияОстатка;
				
			Иначе
				
				ПлощадьОбрезков = ПлощадьОбрезков + (ЭлементМассиваОстатков.ВысотаДетали * ЭлементМассиваОстатков.ШиринаДетали);
				
			КонецЕсли;
			
			
		КонецЦикла;
		
		СреднийОстаток = ?(КоличествоОстатков > 0, ПлощадьОстатков / КоличествоОстатков, 0);
		
		//_____ИтоговыеОстатки_____
		Если СреднийОстаток < СреднийОстаток2 Тогда
			
			//применяем 2-ой алгоритм
			МассивОстатков[0].ШиринаДетали = МассивОстатков[0].ШиринаЛиста;
			МассивОстатков[0].КоординатаX = 0;
			ПлощадьОстатковПоНоменклатуре = ПлощадьОстатковПоНоменклатуре + ПлощадьОстатков2;
			
		Иначе
			
			ПлощадьОстатковПоНоменклатуре = ПлощадьОстатковПоНоменклатуре + ПлощадьОстатков;
			
		КонецЕсли;
		ПлощадьОбрезковПоНоменклатуре = ПлощадьОбрезковПоНоменклатуре + ПлощадьОбрезков;
		
		Если ТипЗнч(ПределыОстатков) = Тип("СправочникСсылка.СеткаОстатков") Тогда
			ПШаг = ПределыОстатков.Шаг;
			Шаг = ?(ПШаг > 0, ПШаг, 100);
		Иначе
			Шаг = 100;
		КонецЕсли;
		
		//применение оптимального алгоритма
		МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток, НомерЛиста", Истина, ТекущийНомерЛиста));
		Для Каждого ЭлементМассиваОстатков Из МассивОстатков Цикл
			
			//удаление маленьких остатков
			Если НЕ ПолезныйОстаток(ПределыОстатков, ЭлементМассиваОстатков.ВысотаДетали, ЭлементМассиваОстатков.ШиринаДетали, Шаг)
				Или ЭлементМассиваОстатков.ВысотаДетали <= 0 или ЭлементМассиваОстатков.ШиринаДетали <= 0 Тогда
				
				СписокДеталейНоменклатуры.Удалить(ЭлементМассиваОстатков);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("ПлощадьОстатковПоНоменклатуре", ПлощадьОстатковПоНоменклатуре);
	Структура.Вставить("ПлощадьОбрезковПоНоменклатуре", ПлощадьОбрезковПоНоменклатуре);
	Структура.Вставить("СписокДеталейНоменклатуры", СписокДеталейНоменклатуры);
	
	Возврат Структура;
	
КонецФункции

Функция РазместитьБыстрымАлгоритмом(СписокДеталейНоменклатуры, ТаблицаРазвернутыхДеталей, ТолщинаПила, ПоперечныйПил, ВысотаЛиста, ШиринаЛиста, Номенклатура, НомерЛиста, Знач МассивКусков)
	
	///////////////
	СписокДеталейРазмещенныхНаОстатках = СписокДеталейНоменклатуры.СкопироватьКолонки();
	
	Для каждого Остаток Из МассивКусков Цикл
		
		ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать(Новый Структура("ДетальВПакете", Ложь));
		
		Если ПоперечныйПил Тогда
			ТаблицаДеталей = АлгоритмОРанце(ТаблицаВсехДеталей, Остаток.ШиринаОстатка, Остаток.ВысотаОстатка, ТолщинаПила, Номенклатура, 0, 0, ,Истина);
		Иначе
			ТаблицаДеталей = АлгоритмОРанце(ТаблицаВсехДеталей, Остаток.ВысотаОстатка, Остаток.ШиринаОстатка, ТолщинаПила, Номенклатура, 0, 0, ,Истина);
		КонецЕсли;
		
		Если ТаблицаДеталей.Количество() > 0 Тогда
			
			Если ПоперечныйПил Тогда
				КоординатаY = 0;
			Иначе
				КоординатаX = 0;
			КонецЕсли;
			
			Для Каждого Таблица Из ТаблицаДеталей Цикл
				
				Если ПоперечныйПил Тогда
					КоординатаX = 0;
				Иначе
					КоординатаY = 0;
				КонецЕсли;
				
				Для каждого Деталь Из Таблица.Пакет Цикл
					
					НоваяСтрока = СписокДеталейРазмещенныхНаОстатках.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
					
					Если ПоперечныйПил Тогда
						ВысотаДеталиОбрезка = Деталь.ВысотаДетали;
						НоваяСтрока.ВысотаДетали = Деталь.ШиринаДетали;
						НоваяСтрока.ШиринаДетали = ВысотаДеталиОбрезка;
						НоваяСтрока.ПоворотДетали = НЕ НоваяСтрока.ПоворотДетали; 
					КонецЕсли;
					
					НоваяСтрока.КоординатаY = КоординатаY;
					НоваяСтрока.КоординатаX = КоординатаX;
					НоваяСтрока.ВысотаЛиста = Остаток.ВысотаОстатка;
					НоваяСтрока.ШиринаЛиста = Остаток.ШиринаОстатка;
					НоваяСтрока.ИД = Остаток.НомерСтроки;
					ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
					СписокДеталейНоменклатуры.Удалить(ИсправляемаяСтрока);
					Если ПоперечныйПил Тогда
						КоординатаX = КоординатаX + ТолщинаПила + Деталь.ВысотаДетали;
					Иначе
						КоординатаY = КоординатаY + ТолщинаПила + Деталь.ВысотаДетали;
					КонецЕсли;
					НоваяСтрока.ДетальВПакете = Истина;
					
				КонецЦикла;
				Если ПоперечныйПил Тогда
					КоординатаY = КоординатаY + ТолщинаПила + Таблица.ШиринаПакета;
				Иначе
					КоординатаX = КоординатаX + ТолщинаПила + Таблица.ШиринаПакета;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//////////////////
	//Заход из ФормированиеПакетаДляБольшогоКоличестваДеталей()
	//МассивКусков = отобранные из ОстаткиЛистовогоМатериала, т.е. если МассивКусков.Количество()>0 
	//если заход из ФормированиеПакета()
	//то МассивКусков = Новый Массив, т.е. всегда МассивКусков.Количество()=0
	
	Если МассивКусков.Количество() > 0 Тогда
		
		/////////////////////////размещение деталей в остатки////////////////
		РазмещалиОбрезки = Ложь;
		Если СписокДеталейРазмещенныхНаОстатках.Количество() > 0 Тогда
			РазмещалиОбрезки = Истина;
			СтараяКоордината = -1;
			//НомерОстатка = 1;
			НомерОстатка = -1;
			Для каждого ДетальВОстатках Из СписокДеталейРазмещенныхНаОстатках Цикл
				
				НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальВОстатках);
				РазмещаемаяДеталь = СписокДеталейНоменклатуры.Найти(ДетальВОстатках.GUID, "GUID");
				
				Если НомерОстатка <> ДетальВОстатках.ИД Тогда
					НомерЛиста = НомерЛиста + 1;
					НомерОстатка = ДетальВОстатках.ИД;
				КонецЕсли;
				
				РазмерПредыдущейДетали = 0;
				
				Если РазмерПредыдущейДетали = 0 Тогда
					
					РазмерПредыдущейДетали = ?(ПоперечныйПил, ДетальВОстатках.ВысотаДетали, ДетальВОстатках.ШиринаДетали);
					
				КонецЕсли;
				
				ДобавитьБольшойОстаток = СтараяКоордината <> ?(ПоперечныйПил, ДетальВОстатках.КоординатаY, ДетальВОстатках.КоординатаX);
				ИспользуетсяВОстатках = ДетальВОстатках.ИспользуетсяВОстаткахПакета;
				
				Если НЕ ПоперечныйПил Тогда
					
					ОстатокСлева = РазмерПредыдущейДетали - ДетальВОстатках.ШиринаДетали -ТолщинаПила;
					КоординатаX = ДетальВОстатках.КоординатаX;
					РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры,
					РазмещаемаяДеталь,
					ТолщинаПила,
					ДетальВОстатках.КоординатаY,
					КоординатаX, НомерЛиста,
					ДетальВОстатках.ВысотаЛиста,
					ДетальВОстатках.ШиринаЛиста,
					ДобавитьБольшойОстаток,
					ОстатокСлева,
					ИспользуетсяВОстатках);
					
				Иначе
					
					ОстатокСверху = РазмерПредыдущейДетали - ДетальВОстатках.ВысотаДетали -ТолщинаПила;
					КоординатаY = ДетальВОстатках.КоординатаY;
					РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры,
					РазмещаемаяДеталь,
					ТолщинаПила,
					КоординатаY,
					ДетальВОстатках.КоординатаX,
					НомерЛиста,
					ДетальВОстатках.ВысотаЛиста,
					ДетальВОстатках.ШиринаЛиста,
					ДобавитьБольшойОстаток,
					ОстатокСверху,
					ИспользуетсяВОстатках,
					ПоперечныйПил);
					
				КонецЕсли;
				
				РазмерПредыдущейДетали = ?(ПоперечныйПил, ДетальВОстатках.ВысотаДетали, ДетальВОстатках.ШиринаДетали);
				СтараяКоордината = ?(ПоперечныйПил, ДетальВОстатках.КоординатаY, ДетальВОстатках.КоординатаX);
				
			КонецЦикла;
			
			СписокДеталейРазмещенныхНаОстатках.Очистить();
			
		КонецЕсли;
		
		Если РазмещалиОбрезки Тогда
			
			ТаблицаРазвернутыхДеталей = СписокДеталейНоменклатуры.Скопировать();
			
			Если ПоперечныйПил Тогда
				ТаблицаРазвернутыхДеталей.Сортировать("ВысотаДетали Убыв");
			Иначе
				ТаблицаРазвернутыхДеталей.Сортировать("ШиринаДетали Убыв");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//////////////////////////////////////////////////////////////////
	
	////////////////
	//ТаблицаДляСортировки = СписокДеталейНоменклатуры.СкопироватьКолонки();
	
	Для Каждого Деталь Из ТаблицаРазвернутыхДеталей Цикл
		
		МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток", Истина));
		РазмещаемаяДеталь = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
		
		Если РазмещаемаяДеталь.ДетальРазмещена или РазмещаемаяДеталь.Остаток Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ЭлементМассива Из МассивОстатков Цикл
			
			//Возможность размещения детали на выбранном остатке
			
			ОстатокПоВысоте = ЭлементМассива.ВысотаДетали - Деталь.ВысотаДетали;
			ОстатокПоШирине = ЭлементМассива.ШиринаДетали - Деталь.ШиринаДетали;
			//Возможность размещения детали на выбранном остатке если деталь можно повернуть
			ОстатокПоВысотеПоворот = -1;
			ОстатокПоШиринеПоворот = -1;
			
			Если Деталь.МожноПовернуть Тогда
				ОстатокПоВысотеПоворот = ЭлементМассива.ВысотаДетали - Деталь.ШиринаДетали;
				ОстатокПоШиринеПоворот = ЭлементМассива.ШиринаДетали - Деталь.ВысотаДетали;
			КонецЕсли;
			
			Если ОстатокПоВысотеПоворот >= 0 И ОстатокПоШиринеПоворот >= 0 Тогда
				РазмещаемаяДеталь.ВысотаДетали = Деталь.ВысотаДетали;
				РазмещаемаяДеталь.ШиринаДетали = Деталь.ШиринаДетали;
				РазмещаемаяДеталь.НомерЛиста = ЭлементМассива.НомерЛиста;
				Деталь.ДетальРазмещена = Истина;
				Деталь.НомерЛиста = ЭлементМассива.НомерЛиста;
				
				РазместитьДеталь(СписокДеталейНоменклатуры, РазмещаемаяДеталь, ЭлементМассива, ОстатокПоВысотеПоворот, ОстатокПоШиринеПоворот, ТолщинаПила, Истина, ПоперечныйПил);
				Прервать;
				
			ИначеЕсли ОстатокПоВысоте >= 0 И ОстатокПоШирине >= 0 Тогда
				
				РазместитьДеталь(СписокДеталейНоменклатуры, РазмещаемаяДеталь, ЭлементМассива, ОстатокПоВысоте, ОстатокПоШирине, ТолщинаПила, Ложь, ПоперечныйПил);
				Прервать;
				
			ИначеЕсли МассивОстатков.Найти(ЭлементМассива) + 1 = МассивОстатков.Количество() Тогда
				
				Если (ПоперечныйПил и (Деталь.ВысотаЛиста >= Деталь.ШиринаДетали И Деталь.ШиринаЛиста >= Деталь.ВысотаДетали)) или 
					(НЕ ПоперечныйПил и (Деталь.ВысотаЛиста >= Деталь.ВысотаДетали И Деталь.ШиринаЛиста >= Деталь.ШиринаДетали)) Тогда
					
					Если МассивКусков.Количество() > 1 Тогда
						ПервыйКусок = МассивКусков[0];
						ДобавитьНовыйЛист(СписокДеталейНоменклатуры, НомерЛиста, ПервыйКусок.Номенклатура, ПервыйКусок.ВысотаОстатка, ПервыйКусок.ШиринаОстатка, МассивОстатков);
						МассивКусков.Удалить(0);
					Иначе
						НомерЛиста = НомерЛиста + 1;
						ДобавитьНовыйЛист(СписокДеталейНоменклатуры, НомерЛиста, Номенклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокДеталейНоменклатуры;
	
КонецФункции

Функция ФормированиеПакетаДляБольшогоКоличестваДеталей(Структура)
	
	СписокДеталейНоменклатуры = Структура.СписокДеталей.Скопировать();
	ВысотаЛиста = Структура.ВысотаЛиста;
	ШиринаЛиста = Структура.ШиринаЛиста;
	ТолщинаПила = Структура.ТолщинаПила;
	Номенклатура = Структура.Номенклатура;
	ПоперечныйПил = Структура.ПоперечныйПил;
	ПределыОстатков = Структура.ПределыОстатков;
	Подразделение = Структура.Подразделение;
	БезОкругленияДоЛистов = Структура.БезОкругленияДоЛистов;
	НарядЗадание = Структура.НарядЗадание;
	МассивКусков = Структура.МассивКусков;
	МассивБуквеннойНумерации = Структура.МассивБуквеннойНумерации;
	
	ТаблицаРазвернутыхДеталей = СписокДеталейНоменклатуры.Скопировать();
	МассивНомеровЛистов = Новый Массив;
	НомерЛиста = 0;
	
	Если ПоперечныйПил Тогда
		ТаблицаРазвернутыхДеталей.Сортировать("ВысотаДетали Убыв");
	Иначе
		ТаблицаРазвернутыхДеталей.Сортировать("ШиринаДетали Убыв");
	КонецЕсли;
	
	МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток", Истина));
	
	Если МассивОстатков.Количество() = 0 и ТаблицаРазвернутыхДеталей.Количество() > 0 Тогда
		
		НомерЛиста = НомерЛиста + 1;
		Если МассивКусков.Количество() > 0 Тогда
		Иначе
			ДобавитьНовыйЛист(СписокДеталейНоменклатуры, НомерЛиста, Номенклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокДеталейНоменклатуры = РазместитьБыстрымАлгоритмом(СписокДеталейНоменклатуры,
	ТаблицаРазвернутыхДеталей,
	ТолщинаПила,
	ПоперечныйПил,
	ВысотаЛиста,
	ШиринаЛиста,
	Номенклатура,
	НомерЛиста,
	МассивКусков);
	
	НадписьНаОстатке = "Склад";
	Если СписокДеталейНоменклатуры.Количество() > 0 и СписокДеталейНоменклатуры[0].Буфер Тогда
		НадписьНаОстатке = "Буфер";
	КонецЕсли;
	МассивНомеровОстатков = Новый Массив;
	
	СтруктураДляСтрокиРаскроя = СформироватьСтруктуруДляСтрокиРаскроя(Номенклатура,
	СписокДеталейНоменклатуры,
	ТолщинаПила,
	ПределыОстатков,
	НадписьНаОстатке, ,
	Подразделение,
	БезОкругленияДоЛистов,
	ВысотаЛиста,
	МассивНомеровОстатков,
	МассивБуквеннойНумерации);
	
	Возврат СтруктураДляСтрокиРаскроя;
	
КонецФункции

Функция ФормированиеПакета(Структура)
	
	СписокДеталейНоменклатуры = Структура.СписокДеталей.Скопировать();
	ВысотаЛиста = Структура.ВысотаЛиста;
	ШиринаЛиста = Структура.ШиринаЛиста;
	ТолщинаПила = Структура.ТолщинаПила;
	Номенклатура = Структура.Номенклатура;
	ПоворотДеталей = Структура.ПоворотДеталей;
	ПоперечныйПил = Структура.ПоперечныйПил;
	ПределыОстатков = Структура.ПределыОстатков;
	Подразделение = Структура.Подразделение;
	БезОкругленияДоЛистов = Структура.БезОкругленияДоЛистов;
	НарядЗадание = Структура.НарядЗадание;
	МассивКусков = Новый Массив(Новый ФиксированныйМассив(Структура.МассивКусков));
	МассивБуквеннойНумерации = Структура.МассивБуквеннойНумерации;
	
	НадписьНаОстатке = "Склад";
	Если СписокДеталейНоменклатуры.Количество() > 0 и СписокДеталейНоменклатуры[0].Буфер Тогда
		НадписьНаОстатке = "Буфер";
	КонецЕсли;
	МассивДеталейДляПоворота = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("МожноПовернуть", Ложь));
	МожноВращать = МассивДеталейДляПоворота.Количество() = 0;
	
	Если ПоворотДеталей Тогда //Если детали без текстуры - переворачиваем
		
		Для каждого Строка Из СписокДеталейНоменклатуры Цикл
			Если Строка.МожноПовернуть Тогда
				ВысотаДетальки = Строка.ВысотаДетали;
				Строка.ВысотаДетали = Строка.ШиринаДетали;
				Строка.ШиринаДетали = ВысотаДетальки;
				Строка.ПоворотДетали = НЕ Строка.ПоворотДетали;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОригинальныйСписокДеталей = СписокДеталейНоменклатуры.Скопировать();
	
	СписокДеталейРазмещенныхНаОстатках = СписокДеталейНоменклатуры.СкопироватьКолонки();
	
	СписокДеталейНоменклатуры.Сортировать("ШиринаДетали Возр");
	Отбор = Новый Структура("СборныйРамочныйФасад", Истина);
	Отбор.Вставить("КромкаДляСборнойРамки", Справочники.Номенклатура.ПустаяСсылка());
	МассивРамок = СписокДеталейНоменклатуры.НайтиСтроки(Отбор);
	ЕстьРамки = МассивРамок.Количество() > 0;
	
	Если ЕстьРамки Тогда
		
		ВысотаДетали = 0;
		НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
		СтараяШиринаДетали = 0;
		
		Для каждого Строка Из МассивРамок Цикл
			
			НоваяВысота = ВысотаДетали + Строка.ВысотаДетали + ТолщинаПила;
			
			Если НоваяВысота <= ВысотаЛиста и (Строка.ШиринаДетали = СтараяШиринаДетали или СтараяШиринаДетали = 0) Тогда // НомерПакетаРамок = Строка.НомерПакетаРамок
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.МожноПовернуть = Истина;
				ВысотаДетали = ВысотаДетали + Строка.ВысотаДетали + ТолщинаПила;
				СтрокаДляПоиска = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
				СтараяШиринаДетали = Строка.ШиринаДетали;
				СписокДеталейНоменклатуры.Удалить(СтрокаДляПоиска);
				
			Иначе
				
				НоваяСтрока.ВысотаДетали = ВысотаЛиста;
				ВысотаДетали = Строка.ВысотаДетали;
				НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.МожноПовернуть = Истина;
				СтараяШиринаДетали = Строка.ШиринаДетали;
				СтрокаДляПоиска = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
				СписокДеталейНоменклатуры.Удалить(СтрокаДляПоиска);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока.ВысотаДетали = ВысотаЛиста;
	Иначе
		
		СписокДеталейНоменклатуры = ОригинальныйСписокДеталей;
		
	КонецЕсли;
	//////////////////Раскрой на куски////////////
	Для каждого Остаток Из МассивКусков Цикл
		
		ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать(Новый Структура("ДетальВПакете", Ложь));
		
		Если ПоперечныйПил Тогда
			ТаблицаДеталей = АлгоритмОРанце(ТаблицаВсехДеталей, Остаток.ШиринаОстатка, Остаток.ВысотаОстатка, ТолщинаПила, Номенклатура, ,Истина);
		Иначе
			ТаблицаДеталей = АлгоритмОРанце(ТаблицаВсехДеталей, Остаток.ВысотаОстатка, Остаток.ШиринаОстатка, ТолщинаПила, Номенклатура, ,Истина);
		КонецЕсли;
		
		Если ТаблицаДеталей.Количество() > 0 Тогда
			
			Если ПоперечныйПил Тогда
				КоординатаY = 0;
			Иначе
				КоординатаX = 0;
			КонецЕсли;
			
			Для Каждого Таблица Из ТаблицаДеталей Цикл
				
				Если ПоперечныйПил Тогда
					КоординатаX = 0;
				Иначе
					КоординатаY = 0;
				КонецЕсли;
				
				Для каждого Деталь Из Таблица.Пакет Цикл
					
					НоваяСтрока = СписокДеталейРазмещенныхНаОстатках.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
					
					Если ПоперечныйПил Тогда
						ВысотаДеталиОбрезка = Деталь.ВысотаДетали;
						НоваяСтрока.ВысотаДетали = Деталь.ШиринаДетали;
						НоваяСтрока.ШиринаДетали = ВысотаДеталиОбрезка;
						НоваяСтрока.ПоворотДетали = НЕ НоваяСтрока.ПоворотДетали;
					КонецЕсли;
					
					НоваяСтрока.КоординатаY = КоординатаY;
					НоваяСтрока.КоординатаX = КоординатаX;
					НоваяСтрока.ВысотаЛиста = Остаток.ВысотаОстатка;
					НоваяСтрока.ШиринаЛиста = Остаток.ШиринаОстатка;
					НоваяСтрока.ИД = Остаток.НомерСтроки;
					ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
					СписокДеталейНоменклатуры.Удалить(ИсправляемаяСтрока);
					Если ПоперечныйПил Тогда
						КоординатаX = КоординатаX + ТолщинаПила + Деталь.ВысотаДетали;
					Иначе
						КоординатаY = КоординатаY + ТолщинаПила + Деталь.ВысотаДетали;
					КонецЕсли;
					НоваяСтрока.ДетальВПакете = Истина;
					
				КонецЦикла;
				Если ПоперечныйПил Тогда
					КоординатаY = КоординатаY + ТолщинаПила + Таблица.ШиринаПакета;
				Иначе
					КоординатаX = КоординатаX + ТолщинаПила + Таблица.ШиринаПакета;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	////////////////////////////////////////////
	Если ПоперечныйПил Тогда
		
		СписокДеталейДляПоперечногоПила = СписокДеталейНоменклатуры.СкопироватьКолонки();
		
		Для каждого Строка Из СписокДеталейНоменклатуры Цикл
			
			НоваяСтрока = СписокДеталейДляПоперечногоПила.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ВысотаДетали = Строка.ШиринаДетали;
			НоваяСтрока.ШиринаДетали = Строка.ВысотаДетали;
			НоваяСтрока.ПоворотДетали = НЕ НоваяСтрока.ПоворотДетали; 
			
		КонецЦикла;
		
		ТаблицаПакетов = АлгоритмОРанце(СписокДеталейДляПоперечногоПила, ШиринаЛиста, ВысотаЛиста, ТолщинаПила, Номенклатура, МассивКусков);
		
	Иначе
		
		ТаблицаПакетов = АлгоритмОРанце(СписокДеталейНоменклатуры, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, Номенклатура, МассивКусков);
		
	КонецЕсли;
	
	//Нужна колонка для обозначения деталей, принадлежащих пакету, но использующейся в его остатках
	
	ТаблицаСтолбцов = Новый ТаблицаЗначений;//Для передачи пакетов как деталей в АлгоритмОРанце
	ТаблицаСтолбцов.Колонки.Добавить("ВысотаДетали", Новый ОписаниеТипов("Число"));
	ТаблицаСтолбцов.Колонки.Добавить("ШиринаДетали", Новый ОписаниеТипов("Число"));
	ТаблицаСтолбцов.Колонки.Добавить("ДетальВПакете", Новый ОписаниеТипов("Булево"));
	ТаблицаСтолбцов.Колонки.Добавить("ДетальРазмещена", Новый ОписаниеТипов("Булево"));
	ТаблицаСтолбцов.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Булево"));
	ТаблицаСтолбцов.Колонки.Добавить("GUID", Новый ОписаниеТипов("Строка"));
	ТаблицаСтолбцов.Колонки.Добавить("ИспользуетсяВОстаткахПакета", Новый ОписаниеТипов("Булево"));
	ТаблицаСтолбцов.Колонки.Добавить("КоординатаY", Новый ОписаниеТипов("Число"));
	ТаблицаСтолбцов.Колонки.Добавить("КоординатаX", Новый ОписаниеТипов("Число"));
	НомерЛиста = 0;
	ПроверочныйНомерЛиста = 0;
	
	Для каждого Пакет Из ТаблицаПакетов Цикл
		
		НоваяСтрока = ТаблицаСтолбцов.Добавить();
		//Чтобы адекватно работал алгоритм, придется менять высоту и ширину деталей и листа
		НоваяСтрока.ВысотаДетали = Пакет.ШиринаПакета;
		НоваяСтрока.ШиринаДетали = ?(ПоперечныйПил, ШиринаЛиста, ВысотаЛиста);
		НоваяСтрока.GUID = Строка(Пакет.НомерПакета);
		
	КонецЦикла;
	
	//Запускаем алгоритм для столбцов отдельно
	Если ПоперечныйПил Тогда		
		ТаблицаРазмещенияСтолбцов = АлгоритмОРанце(ТаблицаСтолбцов, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, Номенклатура, МассивКусков, , , , Истина);
	Иначе		
		ТаблицаРазмещенияСтолбцов = АлгоритмОРанце(ТаблицаСтолбцов, ШиринаЛиста, ВысотаЛиста, ТолщинаПила, Номенклатура, МассивКусков, , , , Истина);
	КонецЕсли;
	
	//"Последовательный алгоритм"
	ПлощадьЛиста = Номенклатура.ДлинаДетали * Номенклатура.ШиринаДетали;
	СписокНомеров = Новый СписокЗначений;
	
	Если ТаблицаРазмещенияСтолбцов.Количество() > 3 и НЕ ПоперечныйПил И НЕ МожноВращать Тогда
		
		НомерЛистаДляПересортировки = 0;
		
		Для Каждого Строка Из ТаблицаРазмещенияСтолбцов Цикл
			
			НомерЛистаДляПересортировки = НомерЛистаДляПересортировки + 1;
			ПлощадьДеталейНаЛисте = 0;
			
			Для каждого Столбец Из Строка.Пакет Цикл
				
				СтрокаПоиска = ТаблицаПакетов.Найти(Столбец.GUID, "НомерПакета");
				ПлощадьДеталейНаЛисте = ПлощадьДеталейНаЛисте + СтрокаПоиска.ОбщаяПлощадьДеталей;
				
			КонецЦикла;
			
			ПроцентЗаполненияЛиста = ?(ПлощадьДеталейНаЛисте > 0, ПлощадьДеталейНаЛисте * 100 / ПлощадьЛиста, 100);
			СписокНомеров.Добавить(ПроцентЗаполненияЛиста, НомерЛистаДляПересортировки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокНомеров.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	//Размещаем детали
	МассивНомеровЛистов = Новый Массив;
	ПробуемРаспихатьДеталиВОстатки = Ложь;
	МассивНомеровОстатков = Новый Массив;
	
	Если ТаблицаРазмещенияСтолбцов.Количество() > 0 или МассивКусков.Количество() > 0 Тогда
		
		/////////////////////////размещение деталей в остатки////////////////
		РазмещалиОбрезки = Ложь;
		Если СписокДеталейРазмещенныхНаОстатках.Количество() > 0 Тогда
			
			РазмещалиОбрезки = Истина;
			СтараяКоордината = -1;
			НомерОстатка = -1;
			
			Для каждого ДетальВОстатках Из СписокДеталейРазмещенныхНаОстатках Цикл
				
				МассивНомеровОстатков.Добавить(ДетальВОстатках.ИД);
				НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальВОстатках);
				
				Если НомерОстатка <> ДетальВОстатках.ИД Тогда
					НомерЛиста = НомерЛиста + 1;
					МассивНомеровЛистов.Добавить(НомерЛиста);
					НомерОстатка = ДетальВОстатках.ИД;
				КонецЕсли;
				
				РазмерПредыдущейДетали = 0;
				
				Если РазмерПредыдущейДетали = 0 Тогда
					
					РазмерПредыдущейДетали = ?(ПоперечныйПил, ДетальВОстатках.ВысотаДетали, ДетальВОстатках.ШиринаДетали);
					
				КонецЕсли;
				
				ДобавитьБольшойОстаток = СтараяКоордината <> ?(ПоперечныйПил, ДетальВОстатках.КоординатаY, ДетальВОстатках.КоординатаX);
				ИспользуетсяВОстатках = ДетальВОстатках.ИспользуетсяВОстаткахПакета;
				
				Если НЕ ПоперечныйПил Тогда
					
					ОстатокСлева = РазмерПредыдущейДетали - ДетальВОстатках.ШиринаДетали -ТолщинаПила;
					КоординатаX = ДетальВОстатках.КоординатаX;
					РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры,
					НоваяСтрока,
					ТолщинаПила,
					ДетальВОстатках.КоординатаY,
					КоординатаX,
					НомерЛиста,
					ДетальВОстатках.ВысотаЛиста,
					ДетальВОстатках.ШиринаЛиста,
					ДобавитьБольшойОстаток,
					ОстатокСлева,
					ИспользуетсяВОстатках);
					
				Иначе
					
					ОстатокСверху = РазмерПредыдущейДетали - ДетальВОстатках.ВысотаДетали -ТолщинаПила;
					КоординатаY = ДетальВОстатках.КоординатаY;
					РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры,
					НоваяСтрока,
					ТолщинаПила,
					КоординатаY,
					ДетальВОстатках.КоординатаX,
					НомерЛиста,
					ДетальВОстатках.ВысотаЛиста,
					ДетальВОстатках.ШиринаЛиста,
					ДобавитьБольшойОстаток,
					ОстатокСверху,
					ИспользуетсяВОстатках,
					ПоперечныйПил);
					
				КонецЕсли;
				
				РазмерПредыдущейДетали = ?(ПоперечныйПил, ДетальВОстатках.ВысотаДетали, ДетальВОстатках.ШиринаДетали);
				СтараяКоордината = ?(ПоперечныйПил, ДетальВОстатках.КоординатаY, ДетальВОстатках.КоординатаX);
				
			КонецЦикла;
			
			СписокДеталейРазмещенныхНаОстатках.Очистить();
			
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаРазмещенияСтолбцов Цикл
			
			ПробуемРаспихатьДеталиВОстатки = МожноВращать 
			И ТаблицаРазмещенияСтолбцов.Количество() > 1
			И Строка = ТаблицаРазмещенияСтолбцов[ТаблицаРазмещенияСтолбцов.Количество() - 1] 
			И НЕ ПоперечныйПил;
			
			Если ПробуемРаспихатьДеталиВОстатки Тогда
				
				ПоследнийЛист = Строка.Пакет;
				ТаблицаРазвернутыхДеталей = СписокДеталейНоменклатуры.СкопироватьКолонки();
				
				Для Каждого Ы ИЗ ПоследнийЛист Цикл
					
					СтрокаПоиска = ТаблицаПакетов.Найти(Ы.GUID, "НомерПакета");
					Пакет = СтрокаПоиска.Пакет;
					
					Для Каждого Строка Из Пакет Цикл
						
						НоваяСтрока = ТаблицаРазвернутыхДеталей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
						
					КонецЦикла;
					
				КонецЦикла;
				
				Если ПоперечныйПил Тогда
					ТаблицаРазвернутыхДеталей.Сортировать("ВысотаДетали Убыв");
				Иначе
					ТаблицаРазвернутыхДеталей.Сортировать("ШиринаДетали Убыв");
				КонецЕсли;
				
				МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток", Истина));
				
				Если МассивОстатков.Количество() = 0 и ТаблицаРазвернутыхДеталей.Количество() > 0 Тогда
					
					ИскомыйНомер = ПолучитьНомерЛиста(МассивНомеровЛистов);
					
					НомерЛиста = НомерЛиста + 1;
					ПроверочныйНомерЛиста = ПроверочныйНомерЛиста + 1;
					
					МассивНомеровЛистов.Добавить(ИскомыйНомер);
					ДобавитьНовыйЛист(СписокДеталейНоменклатуры, ИскомыйНомер, Номенклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
					
					
				КонецЕсли;
				
				МассивКусков = Новый Массив;
				СписокДеталейНоменклатуры = РазместитьБыстрымАлгоритмом(СписокДеталейНоменклатуры,
				ТаблицаРазвернутыхДеталей,
				ТолщинаПила,
				ПоперечныйПил,
				ВысотаЛиста,
				ШиринаЛиста,
				Номенклатура,
				НомерЛиста,
				МассивКусков);
				
			КонецЕсли;
			
			Если НЕ ПробуемРаспихатьДеталиВОстатки Тогда
				
				ПроверятьНомерЛиста = СписокНомеров.Количество() > 0;
				ПроверочныйНомерЛиста = ПроверочныйНомерЛиста + 1;
				НомерСтолбца = 0;
				Если НЕ ПроверятьНомерЛиста
					или (ПроверятьНомерЛиста и ПроверочныйНомерЛиста <> Число(СписокНомеров[0].Представление)
					И ПроверочныйНомерЛиста <> Число(СписокНомеров[1].Представление)) Тогда
					НомерЛиста = НомерЛиста + 1;
					МассивНомеровЛистов.Добавить(НомерЛиста);
				КонецЕсли;
				
				Для каждого Столбец Из Строка.Пакет Цикл
					
					СтрокаПоиска = ТаблицаПакетов.Найти(Столбец.GUID, "НомерПакета");
					РазмещаемыйПакет = СтрокаПоиска.Пакет;
					СтарыйНомерСтолбца = НомерСтолбца;
					НомерСтолбца = НомерСтолбца + 1;
					РазмерПредыдущейДетали = 0;
					РазмещаемыйПакет.Сортировать("ИспользуетсяВОстаткахПакета Возр, ШиринаДетали Убыв, КоординатаX Возр, КоординатаY Возр");
					
					Для Каждого Деталь Из РазмещаемыйПакет Цикл
						
						Если НЕ Деталь.ДетальРазмещена
							И (НЕ ПроверятьНомерЛиста 
							ИЛИ (ПроверятьНомерЛиста 
							И ПроверочныйНомерЛиста <> Число(СписокНомеров[0].Представление)
							И ПроверочныйНомерЛиста <> Число(СписокНомеров[1].Представление))) Тогда
							
							РазмещаемаяДеталь = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
							
							Если РазмерПредыдущейДетали = 0 Тогда								
								РазмерПредыдущейДетали = ?(ПоперечныйПил, РазмещаемаяДеталь.ВысотаДетали, РазмещаемаяДеталь.ШиринаДетали);
							КонецЕсли;
							
							ДобавитьБольшойОстаток = СтарыйНомерСтолбца <> НомерСтолбца;
							ИспользуетсяВОстатках = Деталь.ИспользуетсяВОстаткахПакета;
							
							Если НЕ ПоперечныйПил Тогда
								
								ОстатокСлева = РазмерПредыдущейДетали - Деталь.ШиринаДетали -ТолщинаПила;
								КоординатаX = ?(Деталь.КоординатаX > 0, Столбец.КоординатаY + Деталь.КоординатаX, Столбец.КоординатаY);
								РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры,
								РазмещаемаяДеталь,
								ТолщинаПила,
								Деталь.КоординатаY,
								КоординатаX,
								НомерЛиста,
								ВысотаЛиста,
								ШиринаЛиста,
								ДобавитьБольшойОстаток,
								ОстатокСлева,
								ИспользуетсяВОстатках);
								
							Иначе
								
								ОстатокСверху = РазмерПредыдущейДетали - РазмещаемаяДеталь.ВысотаДетали -ТолщинаПила;
								КоординатаX = ?(Деталь.КоординатаY > 0, Столбец.КоординатаX + Деталь.КоординатаY, Столбец.КоординатаX);
								КоординатаY = ?(Деталь.КоординатаX > 0, Столбец.КоординатаY + Деталь.КоординатаX, Столбец.КоординатаY);
								РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры,
								РазмещаемаяДеталь,
								ТолщинаПила,
								КоординатаY,
								КоординатаX,
								НомерЛиста,
								ВысотаЛиста,
								ШиринаЛиста,
								ДобавитьБольшойОстаток,
								ОстатокСверху,
								ИспользуетсяВОстатках,
								ПоперечныйПил);
								
							КонецЕсли;
							
							СтарыйНомерСтолбца = НомерСтолбца;
							РазмерПредыдущейДетали = ?(ПоперечныйПил, РазмещаемаяДеталь.ВысотаДетали, РазмещаемаяДеталь.ШиринаДетали);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли
			
		КонецЦикла;
		
		/////////////////// Собираем в кучу детали из отобранных листов
		
		Если СписокНомеров.Количество() > 0 Тогда
			
			ТаблицаДеталейОтобранныхЛистов = СписокДеталейНоменклатуры.СкопироватьКолонки();
			НовыйНомерЛиста = 0;
			
			Для Каждого Лист Из ТаблицаРазмещенияСтолбцов Цикл
				
				НовыйНомерЛиста = НовыйНомерЛиста + 1;
				
				Если НовыйНомерЛиста = Число(СписокНомеров[0].Представление) Или НовыйНомерЛиста = Число(СписокНомеров[1].Представление) Тогда
					
					Для каждого Столбец Из Лист.Пакет Цикл
						
						СтрокаПоиска = ТаблицаПакетов.Найти(Столбец.GUID, "НомерПакета");
						РазмещаемыйПакет = СтрокаПоиска.Пакет;
						ШиринаПредыдущейДетали = 0;
						РазмещаемыйПакет.Сортировать("ИспользуетсяВОстаткахПакета Возр, ШиринаДетали Убыв, КоординатаX Возр, КоординатаY Возр");
						
						Для Каждого Деталь Из РазмещаемыйПакет Цикл
							
							НоваяСтрока = ТаблицаДеталейОтобранныхЛистов.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТаблицаДеталейОтобранныхЛистов.Сортировать("ШиринаДетали Убыв");
			
			///////////Размещаем
			Для Каждого Деталь Из ТаблицаДеталейОтобранныхЛистов Цикл
				
				РазмещаемаяДеталь = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
				МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток", Истина));
				
				Если МассивОстатков.Количество() = 0 Тогда
					ИскомыйНомер = ПолучитьНомерЛиста(МассивНомеровЛистов);
					МассивНомеровЛистов.Добавить(ИскомыйНомер);
					ДобавитьНовыйЛист(СписокДеталейНоменклатуры, ИскомыйНомер, Номенклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
				КонецЕсли;
				
				Для Каждого ЭлементМассива Из МассивОстатков Цикл
					
					//Возможность размещения детали на выбранном остатке
					ОстатокПоВысоте = ЭлементМассива.ВысотаДетали - Деталь.ВысотаДетали;
					ОстатокПоШирине = ЭлементМассива.ШиринаДетали - Деталь.ШиринаДетали;
					
					//Возможность размещения детали на выбранном остатке если деталь можно повернуть
					ОстатокПоВысотеПоворот = -1;
					ОстатокПоШиринеПоворот = -1;
					Если Деталь.МожноПовернуть Тогда
						
						ОстатокПоВысотеПоворот = ЭлементМассива.ВысотаДетали - Деталь.ШиринаДетали ;
						ОстатокПоШиринеПоворот = ЭлементМассива.ШиринаДетали - Деталь.ВысотаДетали;
						
					КонецЕсли;
					
					Если ОстатокПоВысоте >= 0 И ОстатокПоШирине >= 0 Тогда
						
						РазместитьДеталь(СписокДеталейНоменклатуры, РазмещаемаяДеталь, ЭлементМассива, ОстатокПоВысоте, ОстатокПоШирине, ТолщинаПила);
						Прервать;
						
					ИначеЕсли ОстатокПоВысотеПоворот >= 0 И ОстатокПоШиринеПоворот >= 0 Тогда
						
						РазместитьДеталь(СписокДеталейНоменклатуры, РазмещаемаяДеталь, ЭлементМассива, ОстатокПоВысотеПоворот, ОстатокПоШиринеПоворот, ТолщинаПила, Истина);
						Прервать;
						
					ИначеЕсли МассивОстатков.Найти(ЭлементМассива) + 1 = МассивОстатков.Количество() Тогда
						
						Если (Деталь.ВысотаЛиста >= Деталь.ВысотаДетали И Деталь.ШиринаЛиста >= Деталь.ШиринаДетали) Тогда
							
							ИскомыйНомер = ПолучитьНомерЛиста(МассивНомеровЛистов);
							МассивНомеровЛистов.Добавить(ИскомыйНомер);
							ДобавитьНовыйЛист(СписокДеталейНоменклатуры, ИскомыйНомер, Номенклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
							
						Иначе
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		//////////////////////
		
		СтруктураДляСтрокиРаскроя = СформироватьСтруктуруДляСтрокиРаскроя(Номенклатура, СписокДеталейНоменклатуры, ТолщинаПила, ПределыОстатков, НадписьНаОстатке, ПоворотДеталей, Подразделение, БезОкругленияДоЛистов, ВысотаЛиста, МассивНомеровОстатков, МассивБуквеннойНумерации);
		
		СтруктураДляСтрокиРаскроя.ТаблицаДеталейИтог.Колонки.Добавить("ПоперечныйПил", Новый ОписаниеТипов("Булево"));
		
		Для Каждого Стр ИЗ СтруктураДляСтрокиРаскроя.ТаблицаДеталейИтог Цикл
			
			Стр.ПоперечныйПил = ПоперечныйПил;
			
		КонецЦикла;
		
	Иначе
		
		СтруктураДляСтрокиРаскроя = Новый Структура("ТекстОшибки", "Пустой раскрой по номенклатуре " + Номенклатура);
		
	КонецЕсли;
	
	Возврат СтруктураДляСтрокиРаскроя;
	
КонецФункции

Функция СформироватьСтруктуруДляСтрокиРаскроя(Номенклатура,
	СписокДеталейНоменклатуры,
	ТолщинаПила,
	ПределыОстатков,
	НадписьНаОстатке,
	ПоворотДеталей = Ложь,
	Подразделение,
	БезОкругленияДоЛистов,
	ВысотаЛиста,
	МассивНомеровОстатков,
	МассивБуквеннойНумерации = Неопределено)
	
	СтруктураДляСтрокиРаскроя = Новый Структура;
	
	ОбщаяНоменклатура = ЛексСерверПовтИсп.ПолучитьОбщуюНоменклатуруПолностью(Подразделение);
	
	СтруктураРазмеровЛиста = ЛексСерверПовтИсп.ПолучитьРазмерыЛиста(Номенклатура, Подразделение);
	
	НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
	КоличествоВПогонныхМетрах = НоменклатурнаяГруппа.КоличествоВПогонныхМетрах;
	
	СписокДеталейНоменклатуры.Сортировать("НомерЛиста Убыв");
	МаксимальныйНомерЛиста = ?(СписокДеталейНоменклатуры.Количество() > 0, СписокДеталейНоменклатуры[0].НомерЛиста, 0);
	
	СтруктураОптимальногоОстатка = ОптимизацияОстатков(СписокДеталейНоменклатуры,
	МаксимальныйНомерЛиста,
	0,
	ТолщинаПила,
	ПределыОстатков,
	НоменклатурнаяГруппа,
	НадписьНаОстатке,
	Истина,
	МассивБуквеннойНумерации);
	
	ТаблицаДеталейИтог = СтруктураОптимальногоОстатка.СписокДеталейНоменклатуры;
	ТаблицаПодсчетаЛистов = ТаблицаДеталейИтог.Скопировать();
	ТаблицаПодсчетаЛистов.Свернуть("НомерЛиста, ВысотаЛиста, ШиринаЛиста");
	
	//Считаем количество полных листов и площадь кусков
	
	ПлощадьВсехКусков = 0;
	ВсегоЛистовДаннойНоменклатуры = 0;
	
	Для Каждого Строка Из ТаблицаПодсчетаЛистов Цикл
		
		Если СтруктураРазмеровЛиста.ВысотаЛиста <> Строка.ВысотаЛиста
			ИЛИ СтруктураРазмеровЛиста.ШиринаЛиста <> Строка.ШиринаЛиста Тогда
			
			Если КоличествоВПогонныхМетрах Тогда
				ПлощадьВсехКусков = ПлощадьВсехКусков + Строка.ВысотаЛиста;
			Иначе
				ПлощадьВсехКусков = ПлощадьВсехКусков + Строка.ВысотаЛиста * Строка.ШиринаЛиста;
			КонецЕсли;
			
		Иначе
			ВсегоЛистовДаннойНоменклатуры = ВсегоЛистовДаннойНоменклатуры + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из СписокДеталейНоменклатуры Цикл
		
		Строка.ПоследнийЛист = Строка.НомерЛиста = МаксимальныйНомерЛиста;
		Строка.ВсегоЛистов = ВсегоЛистовДаннойНоменклатуры;
		
	КонецЦикла;
	
	ОптимальныйАлгоритмРаскроя = Строка(НоменклатурнаяГруппа)
	+ "Текстурный - "
	+ Число(ПоворотДеталей)
	+ ", ОстатокЛинии - "
	+ 0
	+ ", Группировка - "
	+ 1
	+ ";";
	
	СтруктураДляСтрокиРаскроя.Вставить("ТаблицаДеталейИтог", ТаблицаДеталейИтог);
	СтруктураДляСтрокиРаскроя.Вставить("ОптимальныйАлгоритмРаскроя", ОптимальныйАлгоритмРаскроя);
	СтруктураДляСтрокиРаскроя.Вставить("КоличествоЛистов", ВсегоЛистовДаннойНоменклатуры);
	МассивОстатков = ТаблицаДеталейИтог.НайтиСтроки(Новый Структура("Остаток", Истина));
	СредняяПлощадьОстатков = ?(МассивОстатков.Количество() > 0, СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре / МассивОстатков.Количество(), 0);
	МощностьРаскроя = СредняяПлощадьОстатков * СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре;
	СтруктураДляСтрокиРаскроя.Вставить("КоличествоОстатков", МассивОстатков.Количество());
	СтруктураДляСтрокиРаскроя.Вставить("СредняяПлощадьОстатков", СредняяПлощадьОстатков);
	СтруктураДляСтрокиРаскроя.Вставить("ПлощадьОстатковПоНоменклатуре", СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре);
	СтруктураДляСтрокиРаскроя.Вставить("МощностьРаскроя", МощностьРаскроя);
	СтруктураДляСтрокиРаскроя.Вставить("МассивНомеровОстатков", МассивНомеровОстатков);
	
	МассивДеталей = ТаблицаДеталейИтог.НайтиСтроки(Новый Структура("Остаток", Ложь));
	ПлощадьДеталей = 0;
	
	Для каждого Деталь Из МассивДеталей Цикл
		
		ПлощадьДеталей = ПлощадьДеталей + Деталь.ВысотаДетали * Деталь.ШиринаДетали;
		
	КонецЦикла;
	
	СписокДеталейНоменклатуры.Сортировать("НомерЛиста Возр");
	
	СтарыйНомерЛиста =0;
	ПлощадьДеталейНаЛисте = 0;
	ПлощадьВсехДеталей = 0;
	СписокНомеров = Новый СписокЗначений;
	
	//Для вычисления площади, которую потом надо добавить к деталям
	
	Для каждого Строка Из СписокДеталейНоменклатуры Цикл
		
		Если Не Строка.Остаток Тогда
			
			Если СтарыйНомерЛиста <> Строка.НомерЛиста Тогда
				
				Если СтарыйНомерЛиста > 0 Тогда
					
					СписокНомеров.Добавить(ПлощадьДеталейНаЛисте, СтарыйНомерЛиста);
					
				КонецЕсли;
				
				СтарыйНомерЛиста = Строка.НомерЛиста;
				ПлощадьДеталейНаЛисте = 0;
				
			КонецЕсли;
			
			Если КоличествоВПогонныхМетрах Тогда
				ПлощадьДеталейНаЛисте = ПлощадьДеталейНаЛисте + Строка.ВысотаДетали;
				ПлощадьВсехДеталей = ПлощадьВсехДеталей + Строка.ВысотаДетали;
			Иначе
				ПлощадьДеталейНаЛисте = ПлощадьДеталейНаЛисте + Строка.ВысотаДетали * Строка.ШиринаДетали;
				ПлощадьВсехДеталей = ПлощадьВсехДеталей +Строка.ВысотаДетали * Строка.ШиринаДетали;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокДеталейНоменклатуры.Количество() > 0 Тогда
		СписокНомеров.Добавить(ПлощадьДеталейНаЛисте, СтарыйНомерЛиста);
	КонецЕсли;
	
	ОкруглятьДоЛистов = Ложь;
	
	СписокНомеров.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НастройкиНоменклатуры.Номенклатура.НоменклатурнаяГруппа.КоличествоВПогонныхМетрах
	|			ТОГДА ЕСТЬNULL(НастройкиНоменклатуры.ОсновнаяПоСкладу.ДлинаДетали, НастройкиНоменклатуры.Номенклатура.ДлинаДетали)
	|		ИНАЧЕ ЕСТЬNULL(НастройкиНоменклатуры.ОсновнаяПоСкладу.ДлинаДетали, НастройкиНоменклатуры.Номенклатура.ДлинаДетали) * ЕСТЬNULL(НастройкиНоменклатуры.ОсновнаяПоСкладу.ШиринаДетали, НастройкиНоменклатуры.Номенклатура.ШиринаДетали)
	|	КОНЕЦ КАК ПлощадьЛиста,
	|	НастройкиНоменклатуры.ОкруглятьДоЛистов
	|ИЗ
	|	РегистрСведений.НастройкиНоменклатуры.СрезПоследних(, Подразделение = &Подразделение) КАК НастройкиНоменклатуры
	|ГДЕ
	|	НастройкиНоменклатуры.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ПлощадьЛиста =?(КоличествоВПогонныхМетрах, Номенклатура.ДлинаДетали, Номенклатура.ДлинаДетали * Номенклатура.ШиринаДетали);
		
	Иначе
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОкруглятьДоЛистов = ВыборкаДетальныеЗаписи.ОкруглятьДоЛистов;
			Если КоличествоВПогонныхМетрах Тогда
				ПлощадьЛиста = ?(ВыборкаДетальныеЗаписи.ПлощадьЛиста > 0, ВыборкаДетальныеЗаписи.ПлощадьЛиста, Номенклатура.ДлинаДетали);
			Иначе
				ПлощадьЛиста = ?(ВыборкаДетальныеЗаписи.ПлощадьЛиста > 0, ВыборкаДетальныеЗаписи.ПлощадьЛиста, Номенклатура.ДлинаДетали * Номенклатура.ШиринаДетали);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПлощадьДеталейПоследнегоЛиста = ?(СписокНомеров.Количество() > 0, СписокНомеров[0].Значение, 0);
	
	Если КоличествоВПогонныхМетрах Тогда
		ПлощадьДеталейПоследнегоЛиста = 0;
		Отбор = Новый Структура("НомерЛиста", МаксимальныйНомерЛиста);
		Отбор.Вставить("Остаток", Ложь);
		МассивДеталейДляПодсчета = СписокДеталейНоменклатуры.НайтиСтроки(Отбор);
		
		Для каждого Деталь Из МассивДеталейДляПодсчета Цикл
			
			ПроверочноеЧисло = ?(Деталь.ВысотаДетали + ТолщинаПила + Деталь.КоординатаY > ВысотаЛиста, ВысотаЛиста, Деталь.ВысотаДетали + ТолщинаПила + Деталь.КоординатаY);
			ПлощадьДеталейПоследнегоЛиста = ?(ПроверочноеЧисло > ПлощадьДеталейПоследнегоЛиста, ПроверочноеЧисло, ПлощадьДеталейПоследнегоЛиста);
			
		КонецЦикла;
		
		Кратность = Номенклатура.Кратность;
		Если Кратность > 0 Тогда
			
			ПлощадьДеталейПоследнегоЛиста = ПлощадьДеталейПоследнегоЛиста / 1000;
			СтруктураКрстности = ЛексСервер.ПосчитатьКратность(Номенклатура, ПлощадьДеталейПоследнегоЛиста);
			ПлощадьДеталейПоследнегоЛиста = СтруктураКрстности.КоличествоМатериала * 1000;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПлощадьДеталейВПогонныхМетрах = 0;
	
	Если КоличествоВПогонныхМетрах Тогда
		
		ТаблицаПодсчетаЛистов.Сортировать("НомерЛиста");
		
		Для Каждого Листочек Из ТаблицаПодсчетаЛистов Цикл
			
			ПроверочноеЧисло = 0;
			ПлощадьДеталейОдногоЛиста = 0;
			
			МассивДеталейДляПодсчета = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток, НомерЛиста", Ложь, Листочек.НомерЛиста));
			
			Если МассивДеталейДляПодсчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого Деталь Из МассивДеталейДляПодсчета Цикл
				
				//посмотрим разницу
				ПроверочноеЧисло = ?(Деталь.ВысотаДетали + ТолщинаПила + Деталь.КоординатаY > Деталь.ВысотаЛиста, Деталь.ВысотаЛиста, Деталь.ВысотаДетали + ТолщинаПила + Деталь.КоординатаY);
				ПлощадьДеталейОдногоЛиста = Макс(ПроверочноеЧисло, ПлощадьДеталейОдногоЛиста);
			КонецЦикла;
			
			
			Кратность = Номенклатура.Кратность;
			Если Кратность > 0 Тогда
				
				ПлощадьДеталейОдногоЛиста = ПлощадьДеталейОдногоЛиста / 1000;
				СтруктураКрстности = ЛексСервер.ПосчитатьКратность(Номенклатура, ПлощадьДеталейОдногоЛиста);
				ПлощадьДеталейОдногоЛиста = СтруктураКрстности.КоличествоМатериала * 1000;
				
			КонецЕсли;
			
			ПлощадьДеталейВПогонныхМетрах = ПлощадьДеталейВПогонныхМетрах + ПлощадьДеталейОдногоЛиста;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Фотопечать = Номенклатура = ОбщаяНоменклатура.СтеклоСФотопечатью4мм 
	ИЛИ Номенклатура = ОбщаяНоменклатура.СтеклоСФотопечатью6мм;
	
	ПростоПлощадьВсехЛистов = ПлощадьЛиста * ВсегоЛистовДаннойНоменклатуры;
	
	Если ОкруглятьДоЛистов Тогда
		
		ПлощадьОбрезковПоНоменклатуре = ПростоПлощадьВсехЛистов + ПлощадьВсехКусков;
		
	Иначе
		
		Если Фотопечать Тогда
			МассивДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток", Ложь));
			ПлощадьОбрезковПоНоменклатуре = 0;
			Для каждого Деталь Из МассивДеталей Цикл
				
				ПлощадьОбрезковПоНоменклатуре = ПлощадьОбрезковПоНоменклатуре + Деталь.ВысотаДетали * Деталь.ШиринаДетали;
				
			КонецЦикла;
			
		Иначе
			
			ПлощадьОбрезковПоНоменклатуре = ?(НЕ КоличествоВПогонныхМетрах, ПлощадьДеталей + СтруктураОптимальногоОстатка.ПлощадьОбрезковПоНоменклатуре, ПлощадьДеталейВПогонныхМетрах)
			+ СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре * Номенклатура.ПроцентОтхода/100;
			
			Если НЕ КоличествоВПогонныхМетрах Тогда
				
				//Добавляем площадь пропила к площади продаваемого материала.
				
				ПлощадьПила = (ПростоПлощадьВсехЛистов + ПлощадьВсехКусков)
				- (ПлощадьДеталей + СтруктураОптимальногоОстатка.ПлощадьОбрезковПоНоменклатуре + СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре); 
				ПлощадьОбрезковПоНоменклатуре = ПлощадьОбрезковПоНоменклатуре + ?(ПлощадьПила > 0, ПлощадьПила, 0);
				
			КонецЕсли;
			
			Если ПлощадьОбрезковПоНоменклатуре > (ПростоПлощадьВсехЛистов + ПлощадьВсехКусков) Тогда
				ПлощадьОбрезковПоНоменклатуре = (ПростоПлощадьВсехЛистов + ПлощадьВсехКусков);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Добавляем процент от торцовки к площади продаваемого материала.
	
	ВысотаЛистаБезТорцовки = СтруктураРазмеровЛиста.ВысотаЛистаБезТорцовки;
	ШиринаЛистаБезТорцовки = СтруктураРазмеровЛиста.ШиринаЛистаБезТорцовки;
	
	Если КоличествоВПогонныхМетрах Тогда
		ПлощадьЛистаСТорцовкой = ВысотаЛистаБезТорцовки;
	Иначе
		ПлощадьЛистаСТорцовкой = ВысотаЛистаБезТорцовки * ШиринаЛистаБезТорцовки;
	КонецЕсли;
	
	ОбщаяПлощадьТорцовки = (ПлощадьЛистаСТорцовкой - ПлощадьЛиста) * ВсегоЛистовДаннойНоменклатуры;
	
	Если ОбщаяПлощадьТорцовки > 0 Тогда
		
		ПродаваемаяПлощадьТорцовки = ОбщаяПлощадьТорцовки * (ПлощадьОбрезковПоНоменклатуре / ПростоПлощадьВсехЛистов);
		ПлощадьОбрезковПоНоменклатуре = Окр(ПлощадьОбрезковПоНоменклатуре + ПродаваемаяПлощадьТорцовки);
		
	КонецЕсли;
	
	СтруктураДляСтрокиРаскроя.Вставить("ПлощадьОбрезковПоНоменклатуре", ПлощадьОбрезковПоНоменклатуре);
	
	СравниваемыйПроцент = ?(ПлощадьДеталей > 0, Окр(СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре / ПлощадьДеталей * 100, 2), 0);
	СтруктураДляСтрокиРаскроя.Вставить("СравниваемыйПроцент", СравниваемыйПроцент);
	
	Возврат СтруктураДляСтрокиРаскроя
	
КонецФункции

Функция ПолучитьНомерЛиста(МассивНомеров)
	
	НомерЛиста = 0;
	ИскомыйНомер = 0;
	
	Пока ТипЗнч(ИскомыйНомер) = Тип("Число") Цикл
		
		НомерЛиста = НомерЛиста + 1;
		ИскомыйНомер = МассивНомеров.Найти(НомерЛиста);
		
	КонецЦикла;
	
	Возврат НомерЛиста
	
КонецФункции

Функция АлгоритмОРанце(Знач СписокДеталейНоменклатуры, Знач ВысотаЛиста, Знач ШиринаЛиста, ТолщинаПила, Номенклатура, МассивОстатков, ПроверкаОстатков = Ложь, СтараяВысотаПакета = 0, ОбходОставшихся = Ложь, РазмещениеСтолбцов = Ложь)
	
	СписокДеталейНоменклатуры.Колонки.Добавить("ДетальПроверена", Новый ОписаниеТипов("Булево"));
	ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать(Новый Структура("ДетальВПакете", Ложь));
	МожетВстретитьсяПостформинг = (ТаблицаВсехДеталей.Колонки.Найти("Постформинг") <> Неопределено);
	ВстретилсяПостформинг = Ложь;
	
	Если МожетВстретитьсяПостформинг Тогда
		
		ВстретилсяПостформинг = ТаблицаВсехДеталей.НайтиСтроки(Новый Структура("Постформинг", Истина)).Количество() > 0;
		ЭтоНеПолныйЛист = (ВысотаЛиста < Номенклатура.ШиринаДетали);
		
		Если ВстретилсяПостформинг И ЭтоНеПолныйЛист Тогда
			
			МассивДеталейСПостформингом = ТаблицаВсехДеталей.НайтиСтроки(Новый Структура("Постформинг", Истина));
			
			Для Каждого Эл ИЗ МассивДеталейСПостформингом Цикл
				ТаблицаВсехДеталей.Удалить(Эл);
			КонецЦикла;
			
			ВстретилсяПостформинг = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаВсехДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
	
	ТаблицаВсехДеталейДляТестов = ТаблицаВсехДеталей.Скопировать();
	ТаблицаОставшихсяДеталей = ТаблицаВсехДеталей.Скопировать();
	ТаблицаПервыхДеталей = ТаблицаВсехДеталей.Скопировать();
	
	ИтогВысотыПоДеталям = ТаблицаВсехДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаВсехДеталей.Количество() - 1);
	
	НомерПакета = 1;
	ТаблицаПакетов = Новый ТаблицаЗначений;
	ТаблицаПакетов.Колонки.Добавить("Пакет", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаПакетов.Колонки.Добавить("ШиринаПакета", Новый ОписаниеТипов("Число"));
	ТаблицаПакетов.Колонки.Добавить("ВысотаПакета", Новый ОписаниеТипов("Число"));
	ТаблицаПакетов.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Строка"));
	ТаблицаПакетов.Колонки.Добавить("ОбщаяПлощадьДеталей", Новый ОписаниеТипов("Число"));
	
	ПоследнееРешение = СписокДеталейНоменклатуры.СкопироватьКолонки();
	ЛучшийСтолбец = СписокДеталейНоменклатуры.СкопироватьКолонки();
	ЛучшаяПолоса = СписокДеталейНоменклатуры.СкопироватьКолонки();
	
	ШиринаОставшегосяКуска = ШиринаЛиста;
	ПоследнийПроцентОстаткаСверху = 100;
	ПоследнийПроцентОстаткаСвободногоПространстваСтолбца = 100;
	ВысотаПакета = 0;
	ШиринаПакета = 0;
	ШиринаПоследнейДетали = 0;
	ПлощадьОстаткаСлева = 0;
	ПоследнийПроцентЗаполненностиПолосы = 0;
	КоличествоЭлементовВТаблице = ТаблицаОставшихсяДеталей.Количество();
	ШиринаСамойУзкойДетали = ?(КоличествоЭлементовВТаблице > 0, ТаблицаОставшихсяДеталей[КоличествоЭлементовВТаблице - 1].ШиринаДетали, 0);
	
	Если ШиринаСамойУзкойДетали <= ШиринаЛиста И ШиринаСамойУзкойДетали > 0 Тогда
		
		Пока (ИтогВысотыПоДеталям > 0 И ИтогВысотыПоДеталям > ВысотаЛиста) ИЛИ ВстретилсяПостформинг = Истина Цикл
			
			ПакетСобран = Ложь;
			ВстретилсяПостформинг = Ложь;
			
			Если ПроверкаОстатков Тогда
				
				ШиринаЛиста = ШиринаОставшегосяКуска;
				
			КонецЕсли;
			
			Если ТаблицаПервыхДеталей.Количество() > 0 И ?(МожетВстретитьсяПостформинг И ТаблицаПервыхДеталей.Получить(0).Постформинг, НЕ ЭтоНеПолныйЛист, Истина) Тогда
				
				ПоследнееРешение.Очистить();
				ПерваяДеталь = ТаблицаПервыхДеталей[0];
				
				Если ПерваяДеталь.Остаток
					ИЛИ ПерваяДеталь.ДетальВПакете
					ИЛИ ПерваяДеталь.ДетальРазмещена
					ИЛИ ПерваяДеталь.ШиринаДетали > ШиринаЛиста 
					ИЛИ ПерваяДеталь.ВысотаДетали > ВысотаЛиста Тогда
					
					СтрокаДляПоиска = ТаблицаВсехДеталей.Найти(ПерваяДеталь.GUID, "GUID");
					ТаблицаВсехДеталей.Удалить(СтрокаДляПоиска);
					
					СтрокаДляПоиска = ТаблицаОставшихсяДеталей.Найти(ПерваяДеталь.GUID, "GUID");
					ТаблицаОставшихсяДеталей.Удалить(СтрокаДляПоиска);
					
					ИсправляемаяСтрока = ТаблицаВсехДеталейДляТестов.Найти(ПерваяДеталь.GUID, "GUID");
					ИсправляемаяСтрока.ДетальВПакете = Истина;
					
					ТаблицаПервыхДеталей.Удалить(ПерваяДеталь);
					
					ИтогВысотыПоДеталям = ТаблицаПервыхДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаПервыхДеталей.Количество() - 1);
					
					Продолжить;
					
				КонецЕсли;
				
				ИсправляемаяСтрока = ТаблицаВсехДеталейДляТестов.Найти(ПерваяДеталь.GUID, "GUID");
				ИсправляемаяСтрока.ДетальВПакете = Истина;
				
				СтрокаДляПоиска = ТаблицаВсехДеталей.Найти(ПерваяДеталь.GUID, "GUID");
				ТаблицаВсехДеталей.Удалить(СтрокаДляПоиска);
				
				СтрокаДляПоиска = ТаблицаОставшихсяДеталей.Найти(ПерваяДеталь.GUID, "GUID");
				ТаблицаОставшихсяДеталей.Удалить(СтрокаДляПоиска);
				
				Если ПерваяДеталь.ВысотаДетали <= ВысотаЛиста Тогда
					
					ВысотаПакета = ПерваяДеталь.ВысотаДетали;
					ПерваяДеталь.ДетальВПакете = Истина;
					
					НоваяСтрока = ПоследнееРешение.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерваяДеталь);
					
					ШиринаПакета = ПерваяДеталь.ШиринаДетали;
					ШиринаПоследнейДетали = ПерваяДеталь.ШиринаДетали;
					ИтогВысотыПоДеталям = ТаблицаПервыхДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаПервыхДеталей.Количество() - 1);
					
				Иначе
					
					ТаблицаПервыхДеталей.Удалить(ПерваяДеталь);
					ИтогВысотыПоДеталям = ТаблицаПервыхДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаПервыхДеталей.Количество() - 1);
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Прервать;
				
			КонецЕсли;
			
			ПлощадьОстаткаСлева = 0;
			
			Для Каждого Элемент Из ТаблицаВсехДеталей Цикл
				
				Если Элемент.Остаток
					ИЛИ Элемент.ДетальВПакете
					ИЛИ Элемент.ДетальРазмещена Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ПакетСобран Тогда
					
					СтрокаДляПоиска = ТаблицаОставшихсяДеталей.Найти(Элемент.GUID, "GUID");
					ТаблицаОставшихсяДеталей.Удалить(СтрокаДляПоиска);
					
					Если Элемент.ВысотаДетали + ПерваяДеталь.ВысотаДетали + ТолщинаПила <= ВысотаЛиста 
						И Элемент.ШиринаДетали <= ШиринаЛиста 
						И ?(МожетВстретитьсяПостформинг, НЕ Элемент.Постформинг, ИСТИНА) Тогда
						
						ПоследнееРешение.Очистить();
						НоваяСтрока = ПоследнееРешение.Добавить();
						
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерваяДеталь);
						
						ШиринаПакета = ПерваяДеталь.ШиринаДетали;
						НоваяСтрока = ПоследнееРешение.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
						ВысотаПакета = Элемент.ВысотаДетали + ПерваяДеталь.ВысотаДетали + ТолщинаПила;
						ПлощадьОстаткаСлева = ?(ШиринаПоследнейДетали > 0 и ШиринаПоследнейДетали <> Элемент.ШиринаДетали, (ШиринаПоследнейДетали - Элемент.ШиринаДетали) * Элемент.ВысотаДетали, 0);
						ШиринаПоследнейДетали = Элемент.ШиринаДетали;
						
					Иначе
						
						Если ?(МожетВстретитьсяПостформинг, Элемент.Постформинг, ЛОЖЬ) Тогда
							ВстретилсяПостформинг = Истина;
						КонецЕсли;
						
						Продолжить;
						
					КонецЕсли;
					
					ПлощадьПолосы = ШиринаПакета * ВысотаЛиста;
					ПлощадьОстаткаСверху = ШиринаПакета * (ВысотаЛиста - ВысотаПакета - ТолщинаПила);
					ОбщаяПлощадь = ПлощадьОстаткаСлева + ПлощадьОстаткаСверху;
					ПроцентСвободногоПространстваСтолбца = ?(ПлощадьПолосы > 0, ОбщаяПлощадь * 100 / ПлощадьПолосы, 100);
					ПроцентОстаткаСверху = ?(ПлощадьПолосы > 0, ПлощадьОстаткаСверху * 100 / ПлощадьПолосы, 100);
					
					Если ПроцентОстаткаСверху < ПоследнийПроцентОстаткаСверху Тогда
						
						ПоследнийПроцентОстаткаСверху = ПроцентОстаткаСверху;
						ЛучшийСтолбец = ПоследнееРешение.Скопировать();
						Если ПроверкаОстатков Тогда
							ЛучшаяПолоса = ПоследнееРешение.Скопировать();
						КонецЕсли;
						
					КонецЕсли;
					
					Для каждого Деталь Из ТаблицаОставшихсяДеталей Цикл
						
						НоваяВысота = ВысотаПакета + Деталь.ВысотаДетали + ТолщинаПила;
						
						Если НоваяВысота <= ВысотаЛиста
							И Деталь.ШиринаДетали <= ШиринаЛиста
							И ?(МожетВстретитьсяПостформинг, НЕ Деталь.Постформинг, ИСТИНА) Тогда
							
							НоваяСтрока = ПоследнееРешение.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
							
							ВысотаПакета = ВысотаПакета + Деталь.ВысотаДетали + ТолщинаПила;
							ПлощадьОстаткаСлева = ?(ШиринаПоследнейДетали > 0 и ШиринаПоследнейДетали <> Деталь.ШиринаДетали, (ШиринаПоследнейДетали - Деталь.ШиринаДетали) * Деталь.ВысотаДетали, 0);
							ШиринаПоследнейДетали = Деталь.ШиринаДетали;
							
						Иначе
							
							Если ?(МожетВстретитьсяПостформинг, Деталь.Постформинг, ЛОЖЬ) Тогда
								ВстретилсяПостформинг = Истина;
							КонецЕсли;
							
							Продолжить;
							
						КонецЕсли;
						
						ПлощадьОстаткаСверху = ШиринаПакета * (ВысотаЛиста - ВысотаПакета - ТолщинаПила);
						ОбщаяПлощадь = ПлощадьОстаткаСлева + ПлощадьОстаткаСверху;
						ПроцентСвободногоПространстваСтолбца = ?(ПлощадьПолосы > 0, ОбщаяПлощадь * 100 / ПлощадьПолосы, 100);
						ПроцентОстаткаСверху = ?(ПлощадьПолосы > 0, ПлощадьОстаткаСверху * 100 / ПлощадьПолосы, 100);
						
						Если ПроцентОстаткаСверху < ПоследнийПроцентОстаткаСверху Тогда
							
							ПоследнийПроцентОстаткаСверху = ПроцентОстаткаСверху;
							ЛучшийСтолбец = ПоследнееРешение.Скопировать();
							Если ПроверкаОстатков Тогда
								ЛучшаяПолоса = ПоследнееРешение.Скопировать();
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					ПлощадьПолосы = ШиринаПакета * ВысотаЛиста;
					//////
					СтруктураДляПроверкиЗаполненности = Неопределено;
					Если НЕ ПроверкаОстатков Тогда
						СтруктураДляПроверкиЗаполненности = ПроверитьВозможностьИспользованияОстатков(ПоследнееРешение, ТаблицаВсехДеталейДляТестов, ТолщинаПила, Номенклатура, ВысотаЛиста);
					КонецЕсли;
					
					ПлощадьДеталейПолосы = 0;
					ПроцентЗаполненностиПолосы = 0;
					Если СтруктураДляПроверкиЗаполненности <> Неопределено Тогда
						Для каждого Строка Из СтруктураДляПроверкиЗаполненности Цикл
							
							ПлощадьДеталейПолосы = ПлощадьДеталейПолосы + Строка.ВысотаДетали * Строка.ШиринаДетали;
							
						КонецЦикла;
						
						ПроцентЗаполненностиПолосы = ?(ПлощадьПолосы > 0, 100 * ПлощадьДеталейПолосы / ПлощадьПолосы, 0);
						
						Если ПроцентЗаполненностиПолосы > ПоследнийПроцентЗаполненностиПолосы Тогда
							
							ПоследнийПроцентЗаполненностиПолосы = ПроцентЗаполненностиПолосы;
							ЛучшаяПолоса = СтруктураДляПроверкиЗаполненности.Скопировать();
							
						КонецЕсли;
						
						ТаблицаВсехДеталейДляТестов = СписокДеталейНоменклатуры.Скопировать();
						ИсправляемаяСтрока = ТаблицаВсехДеталейДляТестов.Найти(ПерваяДеталь.GUID, "GUID");
						ИсправляемаяСтрока.ДетальВПакете = Истина;
						
					КонецЕсли;
					//////
					
					ПлощадьОстаткаСверху = ШиринаПакета * (ВысотаЛиста - ВысотаПакета - ТолщинаПила);
					ПроцентОстаткаСверху = ?(ПлощадьПолосы > 0, ПлощадьОстаткаСверху * 100 / ПлощадьПолосы, 100);
					ОбщаяПлощадь = ПлощадьОстаткаСлева + ПлощадьОстаткаСверху;
					ПроцентСвободногоПространстваСтолбца = ?(ПлощадьПолосы > 0, ОбщаяПлощадь * 100 / ПлощадьПолосы, 100);
					
					Если СтруктураДляПроверкиЗаполненности = Неопределено Тогда
						
						Если ПроцентОстаткаСверху < ПоследнийПроцентОстаткаСверху Тогда
							
							ПоследнийПроцентОстаткаСверху = ПроцентОстаткаСверху;
							ЛучшийСтолбец = ПоследнееРешение.Скопировать();
							Если ПроверкаОстатков Тогда
								ЛучшаяПолоса = ПоследнееРешение.Скопировать();
							КонецЕсли
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПоследнееРешение.Количество() = 1 Тогда
				ЛучшаяПолоса = ПоследнееРешение.Скопировать();
			КонецЕсли;
			
			Если ПроверкаОстатков И ШиринаСамойУзкойДетали > ШиринаОставшегосяКуска Тогда
				
				Прервать;
				
			КонецЕсли;
			
			Если ЛучшаяПолоса.Количество() > 0 Тогда
				
				Для каждого Строка Из ЛучшаяПолоса Цикл
					
					ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
					ИсправляемаяСтрока.ДетальВПакете = Истина;
					
				КонецЦикла;
				
				ВысотаПакета = ЛучшаяПолоса.Итог("ВысотаДетали") + ТолщинаПила * (ЛучшаяПолоса.Количество() - 1);
				ЛучшаяПолоса.Сортировать("ШиринаДетали Убыв");
				ШиринаПакета = ?(ЛучшаяПолоса.Количество() > 0, ЛучшаяПолоса[0].ШиринаДетали, 0);
				
				РешениеДляДобавления = ЛучшаяПолоса.Скопировать();
				ТаблицаПакетов = ДобавитьЛучшееРешение(РешениеДляДобавления, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета, ТолщинаПила, НЕ ПроверкаОстатков);
				НомерПакета = НомерПакета + 1;
				ЛучшаяПолоса.Очистить();
				ШиринаОставшегосяКуска = ШиринаОставшегосяКуска - ШиринаПакета - ТолщинаПила;
				//////////
				
				ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать(Новый Структура("ДетальВПакете", Ложь));
				
				Если МожетВстретитьсяПостформинг Тогда
					
					ВстретилсяПостформинг = ТаблицаВсехДеталей.НайтиСтроки(Новый Структура("Постформинг", Истина)).Количество() > 0;
					ЭтоНеПолныйЛист = (ВысотаЛиста < Номенклатура.ШиринаДетали);
					
					Если ВстретилсяПостформинг И ЭтоНеПолныйЛист Тогда
						
						МассивДеталейСПостформингом = ТаблицаВсехДеталей.НайтиСтроки(Новый Структура("Постформинг", Истина));
						
						Для Каждого Эл ИЗ МассивДеталейСПостформингом Цикл
							ТаблицаВсехДеталей.Удалить(Эл);
						КонецЦикла;
						
						ВстретилсяПостформинг = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТаблицаВсехДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
				
				ТаблицаВсехДеталейДляТестов = ТаблицаВсехДеталей.Скопировать();
				ТаблицаОставшихсяДеталей = ТаблицаВсехДеталей.Скопировать();
				ТаблицаПервыхДеталей = ТаблицаВсехДеталей.Скопировать();
				
				ПоследнееРешение.Очистить();
				
				ИтогВысотыПоДеталям = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
				///////////
				
			КонецЕсли;
			
			ПоследнийПроцентОстаткаСверху = 100;
			ПоследнийПроцентОстаткаСвободногоПространстваСтолбца = 100;
			ВысотаПакета = 0;
			ШиринаПакета = 0;
			ШиринаПоследнейДетали = 0;
			ПлощадьОстаткаСлева = 0;
			ПоследнийПроцентЗаполненностиПолосы = 0;
			
		КонецЦикла; // Пока хватает деталей на целый столбец
		
		Если
			
			НЕ (ИтогВысотыПоДеталям > 0 И ИтогВысотыПоДеталям < ВысотаЛиста И ПроверкаОстатков) 
			И НЕ ОбходОставшихся 
			Тогда
			
			ТаблицаОставшихсяДеталей = СписокДеталейНоменклатуры.Скопировать(Новый Структура("ДетальВПакете", Ложь));
			
			ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
			
			ВысотаПакета = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
			ШиринаПакета = ?(ТаблицаОставшихсяДеталей.Количество() > 0, ТаблицаОставшихсяДеталей[0].ШиринаДетали, 0);
			
			Если ТаблицаОставшихсяДеталей.Количество() > 0
				И СписокДеталейНоменклатуры.Количество() <> ТаблицаОставшихсяДеталей.Количество() Тогда
				
				КоличествоЭлементовВТаблице = ТаблицаОставшихсяДеталей.Количество();
				ШиринаСамойУзкойДетали = ?(КоличествоЭлементовВТаблице > 0, ТаблицаОставшихсяДеталей[КоличествоЭлементовВТаблице - 1].ШиринаДетали, 0);
				
				Если ШиринаСамойУзкойДетали <= ШиринаЛиста Тогда
					
					Пока ВысотаПакета > ВысотаЛиста Цикл
						
						Если ПроверкаОстатков И ШиринаСамойУзкойДетали > ШиринаОставшегосяКуска Тогда
							
							Прервать;
							
						КонецЕсли;
						
						Если ПроверкаОстатков Тогда
							
							ШиринаЛиста = ШиринаОставшегосяКуска;
							
						КонецЕсли;
						
						Если ВысотаПакета <> СтараяВысотаПакета Или СтараяВысотаПакета = 0 Тогда
							
							ТаблицаОставшихсяДеталей.Колонки.Удалить("ДетальПроверена");
							
							НоваяТаблицаПакетов = АлгоритмОРанце(ТаблицаОставшихсяДеталей, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, Номенклатура, ,ПроверкаОстатков, ВысотаПакета, Истина);
							
							Если НоваяТаблицаПакетов.Количество() > 0 Тогда
								
								Для каждого Пакет Из НоваяТаблицаПакетов Цикл
									
									Если Не ПроверкаОстатков Тогда
										
										Для Каждого Строка Из Пакет.Пакет Цикл
											
											ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
											ИсправляемаяСтрока.ДетальВПакете = Истина;
											
										КонецЦикла;
										
									КонецЕсли;
									
									ВысотаПакета = Пакет.Пакет.Итог("ВысотаДетали") + ТолщинаПила * (Пакет.Пакет.Количество() - 1);
									НомерПакета = НомерПакета + 1;
									НоваяСтрока = ТаблицаПакетов.Добавить();
									НоваяСтрока.Пакет = Пакет.Пакет;
									НоваяСтрока.ШиринаПакета = Пакет.ШиринаПакета;
									НоваяСтрока.ВысотаПакета = ВысотаПакета;
									НоваяСтрока.НомерПакета = НомерПакета;
									
									ШиринаОставшегосяКуска = ШиринаОставшегосяКуска - Пакет.ШиринаПакета - ТолщинаПила;
									
								КонецЦикла;
								
							КонецЕсли;
							
							НоваяТаблицаОставшихсяДеталей = СписокДеталейНоменклатуры.Скопировать(Новый Структура("ДетальВПакете", Ложь));
							
							Если НоваяТаблицаОставшихсяДеталей.Количество() = СписокДеталейНоменклатуры.Количество() Тогда
								
								Прервать;
								
							Иначе
								
								ТаблицаОставшихсяДеталей = НоваяТаблицаОставшихсяДеталей;
								ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
								
							КонецЕсли;
							
						Иначе
							
							Прервать;
							
						КонецЕсли;
						
						СтараяВысотаПакета = ВысотаПакета;
						ВысотаПакета = НоваяТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (НоваяТаблицаОставшихсяДеталей.Количество() - 1);
						
					КонецЦикла;
					
				КонецЕсли;
				
				ТаблицаОставшихсяДеталей = СписокДеталейНоменклатуры.Скопировать(Новый Структура("ДетальВПакете", Ложь));
				
				ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
				
				ВысотаПакета = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
				
				Если ТаблицаОставшихсяДеталей.Количество() > 0 И ВысотаПакета <= ВысотаЛиста Тогда
					
					ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
					ШиринаПакета = ТаблицаОставшихсяДеталей[0].ШиринаДетали;
					
					Если НЕ ПроверкаОстатков Или ПроверкаОстатков И ШиринаПакета <= ШиринаОставшегосяКуска Тогда
						
						ТаблицаПакетов = ДобавитьЛучшееРешение(ТаблицаОставшихсяДеталей, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета + 1, ТолщинаПила, НЕ ПроверкаОстатков);
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ВысотаПакета <= ВысотаЛиста И ТаблицаОставшихсяДеталей.Количество() > 0 И ШиринаПакета <= ШиринаЛиста Тогда
				
				ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
				ВысотаПакета = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
				ШиринаПакета = ТаблицаОставшихсяДеталей[0].ШиринаДетали;
				ТаблицаПакетов = ДобавитьЛучшееРешение(ТаблицаОставшихсяДеталей, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета + 1, ТолщинаПила, Истина);
				
			КонецЕсли;
			
		ИначеЕсли ИтогВысотыПоДеталям > 0 И ИтогВысотыПоДеталям < ВысотаЛиста И ПроверкаОстатков Тогда
			
			ШиринаПакета = ТаблицаОставшихсяДеталей[0].ШиринаДетали;
			
			ВысотаПакета = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
			ШиринаЛиста = ШиринаОставшегосяКуска;
			
			Если ШиринаПакета <= ШиринаЛиста Тогда
				
				ТаблицаПакетов = ДобавитьЛучшееРешение(ТаблицаОставшихсяДеталей, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета + 1, ТолщинаПила);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщаяШирина = 0;
		ТаблицаПакетов.Сортировать("ШиринаПакета Убыв");
	КонецЕсли;
	
	Возврат ТаблицаПакетов;
	
КонецФункции

Функция ДобавитьЛучшееРешение(ЛучшееРешение, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета, ТолщинаПила, ПроставлятьКоординаты = Ложь)
	
	КоординатаY = 0;
	ОбщаяПлощадьДеталей = 0;
	Если ПроставлятьКоординаты Тогда
		
		Для каждого Строка Из ЛучшееРешение Цикл
			
			ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
			ИсправляемаяСтрока.ДетальВПакете = Истина;
			ОбщаяПлощадьДеталей = ОбщаяПлощадьДеталей + Строка.ВысотаДетали * Строка.ШиринаДетали;
			
			Если НЕ Строка.ИспользуетсяВОстаткахПакета Тогда
				
				Строка.КоординатаY = КоординатаY;
				КоординатаY = КоординатаY + ТолщинаПила + Строка.ВысотаДетали;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НоваяСтрока = ТаблицаПакетов.Добавить();
	НоваяСтрока.Пакет = ЛучшееРешение;
	НоваяСтрока.ШиринаПакета = ШиринаПакета;
	НоваяСтрока.ВысотаПакета = ВысотаПакета;
	НоваяСтрока.НомерПакета = НомерПакета;
	НоваяСтрока.ОбщаяПлощадьДеталей = ОбщаяПлощадьДеталей;
	
	Возврат ТаблицаПакетов;
	
КонецФункции

Функция ПолезныйОстаток(ПределыОстатков, ВысотаОстатка, ШиринаОстатка, Шаг = 100)
	
	Если ТипЗнч(ПределыОстатков) = Тип("СправочникСсылка.СеткаОстатков") Тогда
		ПределыОстатков = ПределыОстатков.СеткаОстатков;
	КонецЕсли;
	
	ЕстьСетка = ПределыОстатков.Количество() > 0;
	
	ПределДлина = ВысотаОстатка - (ВысотаОстатка % Шаг);
	ПределШирина = ШиринаОстатка - (ШиринаОстатка % Шаг);
	
	ЕстьСтроки = ПределыОстатков.НайтиСтроки(Новый Структура("Высота, Ширина", ПределДлина, ПределШирина)).Количество() > 0;
	
	Если НЕ ЕстьСетка Тогда
		Возврат Истина;
	ИначеЕсли ЕстьСтроки Тогда
		Возврат ПределыОстатков.НайтиСтроки(Новый Структура("Высота, Ширина", ПределДлина, ПределШирина))[0].Значение;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьВозможностьИспользованияОстатков(ЛучшееРешение, СписокДеталейНоменклатуры, ТолщинаПила, Номенклатура, ВысотаЛиста, ПроверкаРазвернутыхДеталей = Ложь)
	
	Если НЕ ПроверкаРазвернутыхДеталей Тогда
		
		Для каждого Строка Из ЛучшееРешение Цикл
			
			ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
			ИсправляемаяСтрока.ДетальВПакете = Истина;
			Строка.ДетальВПакете = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("ШиринаОстатка", Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("ВысотаОстатка", Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("КоординатаY", Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("КоординатаX", Новый ОписаниеТипов("Число"));
	ШиринаОстатка = 0;
	ВысотаОстатка = 0;
	ШиринаПредыдущегоОстатка = ЛучшееРешение[0].ШиринаДетали;
	КоординатаY = 0;
	КоординатаВерхаДетали = 0;
	
	Для каждого Деталь Из ЛучшееРешение Цикл
		
		КоординатаВерхаДетали = КоординатаВерхаДетали + Деталь.ВысотаДетали + ТолщинаПила;
		
		Если Деталь.ШиринаДетали + ТолщинаПила < ШиринаПредыдущегоОстатка и ШиринаПредыдущегоОстатка <> Деталь.ШиринаДетали Тогда
			
			ШиринаОстатка = ШиринаПредыдущегоОстатка - Деталь.ШиринаДетали - ТолщинаПила;
			ВысотаОстатка = ВысотаЛиста - КоординатаY;
			НоваяСтрока = ТаблицаОстатков.Добавить();
			НоваяСтрока.КоординатаY = КоординатаY;
			НоваяСтрока.КоординатаX = Деталь.ШиринаДетали + ТолщинаПила;
			НоваяСтрока.ШиринаОстатка = ШиринаОстатка;
			НоваяСтрока.ВысотаОстатка = ВысотаОстатка;
			ШиринаПредыдущегоОстатка = Деталь.ШиринаДетали;
			
		КонецЕсли;
		
		КоординатаY = КоординатаY + Деталь.ВысотаДетали + ТолщинаПила;
		
	КонецЦикла;
	
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		ТаблицаОстатков.Сортировать("ВысотаОстатка Возр");
		
		Для каждого Остаток Из ТаблицаОстатков Цикл
			
			Если ПроверкаРазвернутыхДеталей Тогда
				
				ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать();
				
			Иначе
				
				ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать(Новый Структура("ДетальВПакете", Ложь));
				
			КонецЕсли;
			
			ТаблицаВсехДеталей.Колонки.Удалить("ДетальПроверена");
			
			ТаблицаДеталей = АлгоритмОРанце(ТаблицаВсехДеталей, Остаток.ВысотаОстатка, Остаток.ШиринаОстатка, ТолщинаПила, Номенклатура, ,Истина);
			
			Если ТаблицаДеталей.Количество() > 0 Тогда
				
				КоординатаX = Остаток.КоординатаX;
				
				Для Каждого Таблица Из ТаблицаДеталей Цикл
					
					КоординатаY = Остаток.КоординатаY;
					
					Для каждого Деталь Из Таблица.Пакет Цикл
						
						НоваяСтрока = ЛучшееРешение.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
						НоваяСтрока.КоординатаY = КоординатаY;
						НоваяСтрока.КоординатаX = КоординатаX;
						НоваяСтрока.ИспользуетсяВОстаткахПакета = Истина;
						Если НЕ ПроверкаРазвернутыхДеталей Тогда
							ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
							ИсправляемаяСтрока.ДетальВПакете = Истина;
						Иначе
							ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
							СписокДеталейНоменклатуры.Удалить(ИсправляемаяСтрока);
						КонецЕсли;
						КоординатаY = КоординатаY + ТолщинаПила + Деталь.ВысотаДетали;
						///////////
						НоваяСтрока.ДетальВПакете = Истина;
						//////////////
						
					КонецЦикла;
					
					КоординатаX = КоординатаX + ТолщинаПила + Таблица.ШиринаПакета;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЛучшееРешение;
	
КонецФункции

Процедура ДобавитьКромкиВМассив(Выборка, МассивВсехКромок)
	
	МассивКромок = Новый Массив;
	МассивКромок.Добавить(Выборка.ВыборМебельнойКромкиСверху);
	МассивКромок.Добавить(Выборка.ВыборМебельнойКромкиСнизу);
	МассивКромок.Добавить(Выборка.ВыборМебельнойКромкиСлева);
	МассивКромок.Добавить(Выборка.ВыборМебельнойКромкиСправа);
	
	Для Каждого Кромка Из МассивКромок Цикл
		
		ЕстьВМассиве = Ложь;
		
		Для Каждого Элемент Из МассивВсехКромок Цикл
			
			Если Кромка = Элемент Тогда
				
				ЕстьВМассиве = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьВМассиве Тогда
			
			МассивВсехКромок.Добавить(Кромка);
			
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Функция ЭтоСтеклоЗеркало(НомГруппа)
	
	Если НомГруппа = Справочники.НоменклатурныеГруппы.Зеркало
	 ИЛИ НомГруппа = Справочники.НоменклатурныеГруппы.ЗеркалоДекоративное
	 ИЛИ НомГруппа = Справочники.НоменклатурныеГруппы.Стекло
     ИЛИ НомГруппа = Справочники.НоменклатурныеГруппы.Стекло6мм
     ИЛИ НомГруппа = Справочники.НоменклатурныеГруппы.Кожа Тогда
		 Возврат Истина; 
 	Иначе
	     Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция РасположитьНаЛистахМетодомРанца(СсылкаДокумента, ПолныйСписокДеталей, НарядЗадание, МассивБуквеннойНумерации)
	
	МассивИтоговогоРасположенияДеталей = Новый Массив;
	СамыйЛучшийПроцентОтхода = "";
	АлгоритмРаскроя = "";
	Подразделение = СсылкаДокумента.Подразделение;
	НомерДокумента = СсылкаДокумента.Номер;

	ПродаваемоеКоличествоМатериала = Новый Соответствие;
	
	//Создаем основу для дерева
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Спецификация");
	Дерево.Колонки.Добавить("Номенклатура");
	Дерево.Колонки.Добавить("ВысотаЛиста");
	Дерево.Колонки.Добавить("ШиринаЛиста");
	Дерево.Колонки.Добавить("ВысотаДетали");
	Дерево.Колонки.Добавить("ШиринаДетали");
	Дерево.Колонки.Добавить("Абсцисса");
	Дерево.Колонки.Добавить("Ордината");
	Дерево.Колонки.Добавить("Остаток");
	Дерево.Колонки.Добавить("НомерЛиста");
	Дерево.Колонки.Добавить("НомерСтроки");
	Дерево.Колонки.Добавить("ИД");
	Дерево.Колонки.Добавить("GUID");
	Дерево.Колонки.Добавить("Количество");
	Дерево.Колонки.Добавить("Идентификатор");
	Дерево.Колонки.Добавить("НоменклатураДляСклеивания");
	Дерево.Колонки.Добавить("ДопНоменклатураДляСклеивания");
	Дерево.Колонки.Добавить("НомерИзделия");
	Дерево.Колонки.Добавить("МожноПовернуть");
	Дерево.Колонки.Добавить("НеТорцевать");
	Дерево.Колонки.Добавить("СтруктураОтверстий");
	Дерево.Колонки.Добавить("Комментарий");
	Дерево.Колонки.Добавить("РадиусФасада");
	Дерево.Колонки.Добавить("ДетальДляСклеивания");
	Дерево.Колонки.Добавить("Обтачивать");
	Дерево.Колонки.Добавить("Постформинг");
	Дерево.Колонки.Добавить("КоличествоПетель");
	Дерево.Колонки.Добавить("НаименованиеДетали");
	Дерево.Колонки.Добавить("ПараметрыДляЭтикеток");
	Дерево.Колонки.Добавить("СхемаЯщика");
	Дерево.Колонки.Добавить("Сборка");
	Дерево.Колонки.Добавить("НомерДеталиИзделия");
	Дерево.Колонки.Добавить("ПоворотДетали");
	Дерево.Колонки.Добавить("ОсобыйПорядок");
	
	Дерево.Колонки.Добавить("ДетальВПакете");
	
	Дерево.Колонки.Добавить("КривойПилСверху");
	Дерево.Колонки.Добавить("КривойПилСправа");
	Дерево.Колонки.Добавить("КривойПилСнизу");
	Дерево.Колонки.Добавить("КривойПилСлева");
	
	Дерево.Колонки.Добавить("ВыборМебельнойКромкиСверху");
	Дерево.Колонки.Добавить("ВыборМебельнойКромкиСправа");
	Дерево.Колонки.Добавить("ВыборМебельнойКромкиСнизу");
	Дерево.Колонки.Добавить("ВыборМебельнойКромкиСлева");
	
	Дерево.Колонки.Добавить("РадиусЛевоВерх");
	Дерево.Колонки.Добавить("РадиусПравоВерх");
	Дерево.Колонки.Добавить("РадиусПравоНиз");
	Дерево.Колонки.Добавить("РадиусЛевоНиз");
	
	Дерево.Колонки.Добавить("ЕвропазВерх");
	Дерево.Колонки.Добавить("ЕвропазНиз");
	Дерево.Колонки.Добавить("ЕвропазЛево");
	Дерево.Колонки.Добавить("ЕвропазПраво");
	
	Дерево.Колонки.Добавить("Срез");
	Дерево.Колонки.Добавить("КоличествоОдинаковых");
	Дерево.Колонки.Добавить("ПрипускСклейка");
	Дерево.Колонки.Добавить("ПрипускМелкаяДеталь");
	Дерево.Колонки.Добавить("ПоперечныйПил");
	
	Дерево.Колонки.Добавить("ИдентификаторПетли");
	
	СтрокаСпецификация = Дерево.Строки.Добавить();
	СтрокаСпецификация.Спецификация = СсылкаДокумента;
	
	Для Каждого Элемент Из ПолныйСписокДеталей Цикл
		Элемент.GUID = Новый УникальныйИдентификатор();
	КонецЦикла;
	
	СписокДеталей = ПолныйСписокДеталей.Скопировать();
	СписокДеталей.Индексы.Добавить("GUID");
	
	СписокДеталей = УдалитьКолонкиНеНужныеДляАлгоритма(СписокДеталей);
	
	//Получаем список изпользуемой номенклатуры в раскрое
	СписокНоменклатуры = СписокДеталей.Скопировать(,"Номенклатура, ПорядокПечати, МожноПовернуть");
	СписокНоменклатуры.Свернуть("Номенклатура, ПорядокПечати", "МожноПовернуть");
	СписокНоменклатуры.Сортировать("ПорядокПечати Возр");
	
	//RonEXI: Порядок печати больше не нужен в таблице деталей.
	СписокДеталей.Колонки.Удалить("ПорядокПечати");
	
	//Таблица листов номенклатуры
	ТаблицаЛистовНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаЛистовНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЛистовНоменклатуры.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаЛистовНоменклатуры.Колонки.Добавить("ПлощадьСДеталямиПоследнегоЛиста", Новый ОписаниеТипов("Число"));
	
	//Сетка остатков
	КонечныйНомерЛиста = 0;
	КоличествоЛистов = 0;
	МассивНомеровИспользуемыхОстатков = Новый Массив;
	
	Для Каждого ЭлементСписка Из СписокНоменклатуры Цикл // цикл по материалам
		
		Если ЭтоСтеклоЗеркало(ЭлементСписка.Номенклатура.НоменклатурнаяГруппа) Тогда
			ТолщинаПила = 0;
		Иначе
			ТолщинаПила = ?(ЗначениеЗаполнено(Подразделение.ТолщинаПропила), Подразделение.ТолщинаПропила, 5);
		КонецЕсли;
			
		ТекущаяНоменклатура = ЭлементСписка.Номенклатура;
		
		//Заполняем номенклатуру в дереве
		СтрокаНоменклатура = СтрокаСпецификация.Строки.Добавить();
		СтрокаНоменклатура.Номенклатура = ТекущаяНоменклатура;
		
		ТекущийНомерЛиста = -1;
		
		ОптимальныйАлгоритмРаскроя = "";
		НоменклатурнаяГруппа = ТекущаяНоменклатура.НоменклатурнаяГруппа;
		
		СтруктураРазмеровЛиста = ЛексСерверПовтИсп.ПолучитьРазмерыЛиста(ТекущаяНоменклатура, Подразделение);
		ВысотаЛиста = СтруктураРазмеровЛиста.ВысотаЛиста;
		ШиринаЛиста = СтруктураРазмеровЛиста.ШиринаЛиста;
		
		МассивОстатков = Новый Массив;
		
		Если НарядЗадание Тогда
			ТаблицаОстатков = СсылкаДокумента.ОстаткиЛистовогоМатериала;
		Иначе
			ТаблицаОстатков = СсылкаДокумента.ОбрезкиЛистовогоМатериала;
		КонецЕсли;
		
		МассивОстатков = ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура", ТекущаяНоменклатура));
		
		КоличествоОстатковИтог = -1;
		ПлощадьОстатковИтог = -1;
		
		Если ТекущаяНоменклатура.СеткаОстатков = Справочники.СеткаОстатков.ПустаяСсылка() Тогда
			ПределыОстатков = ?(НоменклатурнаяГруппа.СеткаОстатков = Справочники.СеткаОстатков.ПустаяСсылка(), Справочники.СеткаОстатков.ПустаяСсылка(), НоменклатурнаяГруппа.СеткаОстатков);
		Иначе
			ПределыОстатков = ТекущаяНоменклатура.СеткаОстатков;
		КонецЕсли;
		
		СписокДеталейНоменклатуры = СписокДеталей.Скопировать(Новый Структура("Номенклатура", ТекущаяНоменклатура));
		КоличествоДеталейНоменклатуры = СписокДеталейНоменклатуры.Итог("Количество");
		
		ЛучшийПроцентОтхода = 0;
		НаименьшееКоличествоЛистов = 999999999;
		МощностьРаскроя = 0;
		СтруктураСЛучшимиРезультатами = Новый Структура;
		СтруктураСЛучшимиРезультатами.Вставить("ТаблицаДеталейИтог", Новый ОписаниеТипов("ТаблицаЗначений"));
		СтруктураСЛучшимиРезультатами.Вставить("ОптимальныйАлгоритмРаскроя", Новый ОписаниеТипов("Строка"));
		СтруктураСЛучшимиРезультатами.Вставить("КоличествоЛистов", Новый ОписаниеТипов("Число"));
		СтруктураСЛучшимиРезультатами.Вставить("ПлощадьОстатковПоНоменклатуре", Новый ОписаниеТипов("Число"));
		СтруктураСЛучшимиРезультатами.Вставить("ПлощадьОбрезковПоНоменклатуре", Новый ОписаниеТипов("Число"));
		СтруктураСЛучшимиРезультатами.Вставить("МощностьРаскроя", Новый ОписаниеТипов("Число"));
		СтруктураСЛучшимиРезультатами.Вставить("СравниваемыйПроцент", Новый ОписаниеТипов("Число"));
		СтруктураСЛучшимиРезультатами.Вставить("МассивНомеровОстатков", Новый ОписаниеТипов("Массив"));
		
		ЛучшийСравниваемыйПроцент = 0;
		ПоперечныйПил = НоменклатурнаяГруппа.ПоперечныйПил;
		БезОкругленияДоЛистов = ?(НарядЗадание, Ложь, СсылкаДокумента.БезОкругленияДоЛистов);
		
		СтруктураДляФормированияПакета = Новый Структура();
		СтруктураДляФормированияПакета.Вставить("СписокДеталей", СписокДеталейНоменклатуры.Скопировать());
		СтруктураДляФормированияПакета.Вставить("ВысотаЛиста", ВысотаЛиста);
		СтруктураДляФормированияПакета.Вставить("ШиринаЛиста", ШиринаЛиста);
		СтруктураДляФормированияПакета.Вставить("ТолщинаПила", ТолщинаПила);
		СтруктураДляФормированияПакета.Вставить("Номенклатура", ТекущаяНоменклатура);
		СтруктураДляФормированияПакета.Вставить("ПоворотДеталей", Ложь);
		СтруктураДляФормированияПакета.Вставить("ПоперечныйПил", ПоперечныйПил);
		СтруктураДляФормированияПакета.Вставить("ПределыОстатков", ПределыОстатков);
		СтруктураДляФормированияПакета.Вставить("Подразделение", Подразделение);
		СтруктураДляФормированияПакета.Вставить("БезОкругленияДоЛистов", БезОкругленияДоЛистов);
		СтруктураДляФормированияПакета.Вставить("НарядЗадание", НарядЗадание);
		СтруктураДляФормированияПакета.Вставить("МассивКусков", МассивОстатков);
		СтруктураДляФормированияПакета.Вставить("МассивБуквеннойНумерации", МассивБуквеннойНумерации);
		
		Если КоличествоДеталейНоменклатуры > 599 Тогда
			
			//Доработать.
			СтруктураДляСтрокиРаскроя = ФормированиеПакетаДляБольшогоКоличестваДеталей(СтруктураДляФормированияПакета);
			ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскроя);
			
		Иначе
			
			//Пакет обычный
			СтруктураДляСтрокиРаскроя = ФормированиеПакета(СтруктураДляФормированияПакета);
			
			Если СтруктураДляСтрокиРаскроя.Свойство("ТекстОшибки") Тогда
				Возврат СтруктураДляСтрокиРаскроя;
			КонецЕсли;
			
			Если СтруктураДляСтрокиРаскроя.Свойство("КоличествоЛистов") Тогда
				
				Если СтруктураДляСтрокиРаскроя.КоличествоЛистов < НаименьшееКоличествоЛистов
					ИЛИ СтруктураДляСтрокиРаскроя.МощностьРаскроя > МощностьРаскроя
					И СтруктураДляСтрокиРаскроя.КоличествоЛистов = НаименьшееКоличествоЛистов Тогда
					
					ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскроя);
					ЛучшийПроцентОтхода = 0;
					ЛучшийСравниваемыйПроцент = СтруктураСЛучшимиРезультатами.СравниваемыйПроцент;
					ЛучшийРазрешенныйПроцентПоШирине = 0;
					НаименьшееКоличествоЛистов = СтруктураСЛучшимиРезультатами.КоличествоЛистов;
					МощностьРаскроя = СтруктураСЛучшимиРезультатами.МощностьРаскроя;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПоперечныйПил Тогда
				
				//Дополнительная проверка на продольный пил.
				СтруктураДляФормированияПакета.ПоперечныйПил = Ложь;
				СтруктураДляСтрокиРаскроя = ФормированиеПакета(СтруктураДляФормированияПакета);
				
				Если СтруктураДляСтрокиРаскроя.Свойство("ТекстОшибки") Тогда
					Возврат СтруктураДляСтрокиРаскроя;
				КонецЕсли;
				
				Если СтруктураДляСтрокиРаскроя.Свойство("КоличествоЛистов") Тогда
					
					Если СтруктураДляСтрокиРаскроя.КоличествоЛистов < НаименьшееКоличествоЛистов
						ИЛИ СтруктураДляСтрокиРаскроя.МощностьРаскроя > МощностьРаскроя
						И СтруктураДляСтрокиРаскроя.КоличествоЛистов = НаименьшееКоличествоЛистов Тогда
						
						ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскроя);
						ЛучшийПроцентОтхода = 0;
						ЛучшийСравниваемыйПроцент = СтруктураСЛучшимиРезультатами.СравниваемыйПроцент;
						ЛучшийРазрешенныйПроцентПоШирине = 0;
						НаименьшееКоличествоЛистов = СтруктураСЛучшимиРезультатами.КоличествоЛистов;
						МощностьРаскроя = СтруктураСЛучшимиРезультатами.МощностьРаскроя;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ТекущаяНоменклатура.НаличиеТекстуры Тогда
				
				//Пакет для повернутых деталей без текстуры.
				
				СтруктураДляФормированияПакета.ПоперечныйПил = ПоперечныйПил;
				СтруктураДляФормированияПакета.ПоворотДеталей = Истина;
				
				СтруктураДляСтрокиРаскрояПовернутыхДеталей = ФормированиеПакета(СтруктураДляФормированияПакета);
				
				Если СтруктураДляСтрокиРаскрояПовернутыхДеталей.Свойство("КоличествоЛистов") Тогда
					
					Если СтруктураДляСтрокиРаскрояПовернутыхДеталей.КоличествоЛистов < НаименьшееКоличествоЛистов
						ИЛИ СтруктураДляСтрокиРаскрояПовернутыхДеталей.МощностьРаскроя > МощностьРаскроя
						И СтруктураДляСтрокиРаскрояПовернутыхДеталей.КоличествоЛистов = НаименьшееКоличествоЛистов Тогда
						
						ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскрояПовернутыхДеталей);
						ЛучшийПроцентОтхода = 0;
						ЛучшийРазрешенныйПроцентПоШирине = 0;
						ЛучшийСравниваемыйПроцент = СтруктураСЛучшимиРезультатами.СравниваемыйПроцент;
						НаименьшееКоличествоЛистов = СтруктураСЛучшимиРезультатами.КоличествоЛистов;
						МощностьРаскроя = СтруктураСЛучшимиРезультатами.МощностьРаскроя;
						
					КонецЕсли;
					
				Иначе
					
					ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскрояПовернутыхДеталей);
					ЛучшийПроцентОтхода = 0;
					НаименьшееКоличествоЛистов = СтруктураСЛучшимиРезультатами.КоличествоЛистов;
					МощностьРаскроя = СтруктураСЛучшимиРезультатами.МощностьРаскроя;
					
				КонецЕсли;
				
				Если ПоперечныйПил Тогда
					
					//Дополнительная проверка на продольный пил.
					
					СтруктураДляФормированияПакета.ПоперечныйПил = Ложь;
					СтруктураДляФормированияПакета.ПоворотДеталей = Истина;
					
					СтруктураДляСтрокиРаскрояПовернутыхДеталей = ФормированиеПакета(СтруктураДляФормированияПакета);
					
					Если СтруктураДляСтрокиРаскрояПовернутыхДеталей.Свойство("КоличествоЛистов") Тогда
						
						Если СтруктураДляСтрокиРаскрояПовернутыхДеталей.КоличествоЛистов < НаименьшееКоличествоЛистов
							ИЛИ СтруктураДляСтрокиРаскрояПовернутыхДеталей.МощностьРаскроя > МощностьРаскроя
							И СтруктураДляСтрокиРаскрояПовернутыхДеталей.КоличествоЛистов = НаименьшееКоличествоЛистов Тогда
							
							ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскрояПовернутыхДеталей);
							ЛучшийПроцентОтхода = 0;
							ЛучшийРазрешенныйПроцентПоШирине = 0;
							ЛучшийСравниваемыйПроцент = СтруктураСЛучшимиРезультатами.СравниваемыйПроцент;
							НаименьшееКоличествоЛистов = СтруктураСЛучшимиРезультатами.КоличествоЛистов;
							МощностьРаскроя = СтруктураСЛучшимиРезультатами.МощностьРаскроя;
							
						КонецЕсли;
						
					Иначе
						
						ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскрояПовернутыхДеталей);
						ЛучшийПроцентОтхода = 0;
						НаименьшееКоличествоЛистов = СтруктураСЛучшимиРезультатами.КоличествоЛистов;
						МощностьРаскроя = СтруктураСЛучшимиРезультатами.МощностьРаскроя;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Столешница Тогда
			СамыйЛучшийПроцентОтхода = СамыйЛучшийПроцентОтхода + " Столешница " + ЛучшийСравниваемыйПроцент;
		ИначеЕсли НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Пристенок Тогда
			СамыйЛучшийПроцентОтхода = СамыйЛучшийПроцентОтхода + " Пристенок " + ЛучшийСравниваемыйПроцент;
		КонецЕсли;
		
		Если НЕ СтруктураДляСтрокиРаскроя.Свойство("КоличествоЛистов") И СтруктураСЛучшимиРезультатами.Свойство("КоличествоЛистов")Тогда
			
			СтруктураДляСтрокиРаскроя = Новый Структура;
			СтруктураДляСтрокиРаскроя.Вставить("ТаблицаДеталейИтог", Новый ОписаниеТипов("ТаблицаЗначений"));
			СтруктураДляСтрокиРаскроя.Вставить("ОптимальныйАлгоритмРаскроя", Новый ОписаниеТипов("Строка"));
			СтруктураДляСтрокиРаскроя.Вставить("КоличествоЛистов", Новый ОписаниеТипов("Число"));
			СтруктураДляСтрокиРаскроя.Вставить("ПлощадьОстатковПоНоменклатуре", Новый ОписаниеТипов("Число"));
			СтруктураДляСтрокиРаскроя.Вставить("ПлощадьОбрезковПоНоменклатуре", Новый ОписаниеТипов("Число"));
			СтруктураДляСтрокиРаскроя.Вставить("МощностьРаскроя", Новый ОписаниеТипов("Число"));
			СтруктураДляСтрокиРаскроя.Вставить("СравниваемыйПроцент", Новый ОписаниеТипов("Число"));
			СтруктураДляСтрокиРаскроя.Вставить("МассивНомеровОстатков", Новый ОписаниеТипов("Массив"));
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураДляСтрокиРаскроя, СтруктураСЛучшимиРезультатами);
		
		Таб = СтруктураДляСтрокиРаскроя.ТаблицаДеталейИтог;
		Таб.Сортировать("НомерЛиста Возр");
		ТекущийНомерЛистаДляДерева = -1;
		ПродаваемоеКоличествоМатериала.Вставить(ТекущаяНоменклатура, СтруктураДляСтрокиРаскроя.ПлощадьОбрезковПоНоменклатуре);
		
		Для каждого СтрокаТаб Из Таб Цикл
			
			Если ТекущийНомерЛистаДляДерева <> СтрокаТаб.НомерЛиста Тогда
				
				СтрокаЛист = СтрокаНоменклатура.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЛист, СтрокаТаб);
				ТекущийНомерЛистаДляДерева = СтрокаТаб.НомерЛиста;
				
			КонецЕсли;
			
			СтрокаДеталь = СтрокаЛист.Строки.Добавить();
			ПолнаяСтрока = ПолныйСписокДеталей.Найти(СтрокаТаб.GUID, "GUID");
			
			Если ПолнаяСтрока <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДеталь, ПолнаяСтрока);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаДеталь, СтрокаТаб);
			
			СтрокаДеталь.Абсцисса = СтрокаТаб.КоординатаX;
			СтрокаДеталь.Ордината = СтрокаТаб.КоординатаY;
			
		КонецЦикла;
		
		Если НарядЗадание Тогда
		
			СтрокаЛистовНоменклатуры = ТаблицаЛистовНоменклатуры.Добавить();
			СтрокаЛистовНоменклатуры.Номенклатура = ЭлементСписка.Номенклатура;
			
			Если СтруктураДляСтрокиРаскроя.КоличествоЛистов > 0 Тогда
				СтрокаЛистовНоменклатуры.Количество = СтруктураДляСтрокиРаскроя.КоличествоЛистов;
			Иначе
				СтрокаЛистовНоменклатуры.Количество = 0;
			КонецЕсли;
			
		Иначе
			
			Если СтруктураДляСтрокиРаскроя.КоличествоЛистов > 0 Тогда
				
				СтрокаЛистовНоменклатуры = ТаблицаЛистовНоменклатуры.Добавить();
				СтрокаЛистовНоменклатуры.Номенклатура = ЭлементСписка.Номенклатура;
				СтрокаЛистовНоменклатуры.Количество = СтруктураДляСтрокиРаскроя.КоличествоЛистов;
				
			КонецЕсли;
			
		КонецЕсли;
		
		АлгоритмРаскроя = АлгоритмРаскроя + СтруктураДляСтрокиРаскроя.ОптимальныйАлгоритмРаскроя;
		
		Для каждого строка Из СписокДеталей Цикл
			Для каждого Деталь Из СтруктураДляСтрокиРаскроя.ТаблицаДеталейИтог Цикл
				
				Если Строка.ИД = Деталь.ИД Тогда
					
					Строка.НомерЛиста = Деталь.НомерЛиста;
					Строка.ПоследнийЛист = Деталь.ПоследнийЛист;
					Строка.ВсегоЛистов = Деталь.ВсегоЛистов;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		Для каждого Значение Из СтруктураДляСтрокиРаскроя.МассивНомеровОстатков Цикл
			
			МассивНомеровИспользуемыхОстатков.Добавить(Значение);
			
		КонецЦикла;
		
	КонецЦикла; // цикл по материалам
	
	НовыйМассив = Новый Массив;
	Соответствие = Новый Соответствие;
	
	Для каждого ЭлементМассива Из МассивНомеровИспользуемыхОстатков Цикл
		
		Соответствие.Вставить(ЭлементМассива);
		
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Соответствие Цикл
		
		НовыйМассив.Добавить(КлючИЗначение.Ключ);
		
	КонецЦикла;
	
	СтруктураРезультатов = Новый Структура;
	СтруктураРезультатов.Вставить("Дерево", Дерево);
	СтруктураРезультатов.Вставить("ТаблицаЛистовНоменклатуры", ТаблицаЛистовНоменклатуры);
	СтруктураРезультатов.Вставить("ТаблицаДеталей", Новый ХранилищеЗначения(СписокДеталей));
	СтруктураРезультатов.Вставить("ПродаваемоеКоличествоМатериала", ПродаваемоеКоличествоМатериала);
	СтруктураРезультатов.Вставить("МассивНомеровИспользуемыхОстатков", НовыйМассив);
	
	Если ЗначениеЗаполнено(СтруктураДляСтрокиРаскроя) Тогда
		СамыйЛучшийПроцентОтхода = ?(СтруктураДляСтрокиРаскроя.СравниваемыйПроцент <> "", СамыйЛучшийПроцентОтхода + " Сп " + НомерДокумента, Строка(СтруктураДляСтрокиРаскроя.СравниваемыйПроцент));
	КонецЕсли;
	
	СтруктураРезультатов.Вставить("ЛучшийПроцентОтхода", СамыйЛучшийПроцентОтхода);
	СтруктураРезультатов.Вставить("АлгоритмРаскроя", АлгоритмРаскроя);
	
	Возврат СтруктураРезультатов;
	
КонецФункции

Процедура ДобавитьСтрокуВСписокДеталей(СписокДеталейНоменклатуры, Индекс, Номенклатура, НомерЛиста, ВысотаОстатка, ШиринаОстатка, ВысотаЛиста, ШиринаЛиста, КоординатаY, КоординатаX)
	
	НоваяСтрока = СписокДеталейНоменклатуры.Вставить(Индекс);
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.НомерЛиста = НомерЛиста;
	НоваяСтрока.ВысотаДетали = ВысотаОстатка;
	НоваяСтрока.ШиринаДетали = ШиринаОстатка;
	НоваяСтрока.ВысотаЛиста = ВысотаЛиста;
	НоваяСтрока.ШиринаЛиста = ШиринаЛиста;
	НоваяСтрока.КоординатаY = КоординатаY;
	НоваяСтрока.КоординатаX = КоординатаX;
	НоваяСтрока.Остаток = Истина;
	
КонецПроцедуры

Процедура РазместитьДеталь(СписокДеталейНоменклатуры, Элемент, ЭлементМассива, ОстатокПоВысоте, ОстатокПоШирине, ТолщинаПила, ПоворотДетали = Ложь, ПоперечныйПил = Ложь)
	
	Если ПоворотДетали Тогда
		ВысотаДеталиБезТекстуры = Элемент.ВысотаДетали;
		Элемент.ВысотаДетали = Элемент.ШиринаДетали;
		Элемент.ШиринаДетали = ВысотаДеталиБезТекстуры;
		Элемент.ПоворотДетали = НЕ Элемент.ПоворотДетали;
	КонецЕсли;
	
	//__________Размешение детали на листе__________
	Элемент.КоординатаY = ЭлементМассива.КоординатаY;
	Элемент.КоординатаX = ЭлементМассива.КоординатаX;
	Элемент.НомерЛиста = ЭлементМассива.НомерЛиста;
	Элемент.ДетальРазмещена = Истина;
	
	//__________Добавление ВСЕХ остатков__________
	ИндексОстатка = СписокДеталейНоменклатуры.Индекс(ЭлементМассива);
	ОстатокПоВысоте = ОстатокПоВысоте - ТолщинаПила;
	ОстатокПоШирине = ОстатокПоШирине - ТолщинаПила;
	
	//позиции остаткам////////////////////////////////////////////////////////////
	Если ПоперечныйПил Тогда
		
		Если ОстатокПоВысоте > 0 Тогда
			КоординатаY = Элемент.КоординатаY + Элемент.ВысотаДетали + ТолщинаПила;
			КоординатаX = Элемент.КоординатаX;
			ДобавитьСтрокуВСписокДеталей(СписокДеталейНоменклатуры, ИндексОстатка, Элемент.Номенклатура, 
			ЭлементМассива.НомерЛиста, ОстатокПоВысоте, ЭлементМассива.ШиринаДетали, Элемент.ВысотаЛиста, Элемент.ШиринаЛиста, КоординатаY, КоординатаX);
		КонецЕсли;
		
		Если ОстатокПоШирине > 0 Тогда
			
			КоординатаY = Элемент.КоординатаY;
			КоординатаX = Элемент.КоординатаX + Элемент.ШиринаДетали + ТолщинаПила;
			
			ДобавитьСтрокуВСписокДеталей(СписокДеталейНоменклатуры, ИндексОстатка, Элемент.Номенклатура, 
			ЭлементМассива.НомерЛиста, Элемент.ВысотаДетали, ОстатокПоШирине, Элемент.ВысотаЛиста, Элемент.ШиринаЛиста, КоординатаY, КоординатаX);
			
		КонецЕсли;
		
	Иначе
		
		Если ОстатокПоШирине > 0 Тогда
			
			КоординатаY = Элемент.КоординатаY;
			КоординатаX = Элемент.КоординатаX + Элемент.ШиринаДетали + ТолщинаПила;
			
			ДобавитьСтрокуВСписокДеталей(СписокДеталейНоменклатуры, ИндексОстатка, Элемент.Номенклатура, 
			ЭлементМассива.НомерЛиста, ЭлементМассива.ВысотаДетали, ОстатокПоШирине, Элемент.ВысотаЛиста, Элемент.ШиринаЛиста, КоординатаY, КоординатаX);
			
		КонецЕсли;
		
		Если ОстатокПоВысоте > 0 Тогда
			
			КоординатаY = Элемент.КоординатаY + Элемент.ВысотаДетали + ТолщинаПила;
			КоординатаX = Элемент.КоординатаX;
			ДобавитьСтрокуВСписокДеталей(СписокДеталейНоменклатуры, ИндексОстатка, Элемент.Номенклатура, 
			ЭлементМассива.НомерЛиста, ОстатокПоВысоте, Элемент.ШиринаДетали, Элемент.ВысотаЛиста, Элемент.ШиринаЛиста, КоординатаY, КоординатаX);
			
		КонецЕсли;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////////
	
	СписокДеталейНоменклатуры.Удалить(ЭлементМассива);
	
КонецПроцедуры

Процедура РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры, Элемент, ТолщинаПила, КоординатаY, КоординатаX, НомерЛиста, ВысотаЛиста, ШиринаЛиста, ДобавитьБольшойОстаток, МаленькийОстатокПоШирине, ИспользуетсяВОстатках, ПоперечныйПил = Ложь)
	
	//__________Размешение детали на листе__________
	Элемент.КоординатаY = КоординатаY;
	Элемент.КоординатаX = КоординатаX;
	Элемент.НомерЛиста = НомерЛиста;
	Элемент.ДетальРазмещена = Истина;
	
	//__________Добавление ВСЕХ остатков__________
	МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток", Истина));
	ЗаменяемыйОстаток = Неопределено;
	
	Для каждого ЭлементМассива Из МассивОстатков Цикл
		
		Если ЭлементМассива.НомерЛиста = НомерЛиста 
			И ЭлементМассива.КоординатаY = КоординатаY
			И ЭлементМассива.КоординатаX = КоординатаX Тогда
			
			ЗаменяемыйОстаток = ЭлементМассива;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаменяемыйОстаток = Неопределено Тогда
		
		ИндексОстатка = СписокДеталейНоменклатуры.Количество();
		
	Иначе
		
		СтрокаДляПоиска = СписокДеталейНоменклатуры.Найти(ЗаменяемыйОстаток.GUID, "GUID");
		ИндексОстатка = СписокДеталейНоменклатуры.Индекс(СтрокаДляПоиска);
		
	КонецЕсли;
	
	ОстатокПоПолосе = ?(ПоперечныйПил, ШиринаЛиста - (КоординатаX + Элемент.ШиринаДетали + ТолщинаПила), ВысотаЛиста - (КоординатаY + Элемент.ВысотаДетали + ТолщинаПила));
	БольшойОстатокПоЛисту = ?(ПоперечныйПил, ВысотаЛиста - (КоординатаY + Элемент.ВысотаДетали + ТолщинаПила), ШиринаЛиста - (КоординатаX + Элемент.ШиринаДетали + ТолщинаПила));
	
	//позиции остаткам////////////////////////////////////////////////////////////
	
	Если ДобавитьБольшойОстаток И БольшойОстатокПоЛисту > 0 Тогда
		ВысотаДетальки = ?(ПоперечныйПил, БольшойОстатокПоЛисту ,Элемент.ВысотаЛиста - КоординатаY);
		ШиринаДетальки = ?(ПоперечныйПил, Элемент.ШиринаЛиста - КоординатаX, БольшойОстатокПоЛисту);
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = НомерЛиста;
		НоваяСтрока.ВысотаДетали = ВысотаДетальки;
		НоваяСтрока.ШиринаДетали = ШиринаДетальки;
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаY = ?(ПоперечныйПил, КоординатаY + Элемент.ВысотаДетали + ТолщинаПила, КоординатаY);
		НоваяСтрока.КоординатаX = ?(ПоперечныйПил, КоординатаX, Элемент.КоординатаX + Элемент.ШиринаДетали + ТолщинаПила);
		НоваяСтрока.GUID = Новый УникальныйИдентификатор;
		НоваяСтрока.Остаток = Истина;
	КонецЕсли;
	
	Если МаленькийОстатокПоШирине > 0 И НЕ ИспользуетсяВОстатках Тогда
		ВысотаДетальки = ?(ПоперечныйПил, МаленькийОстатокПоШирине, Элемент.ВысотаЛиста - КоординатаY);
		ШиринаДетальки = ?(ПоперечныйПил, Элемент.ШиринаЛиста - КоординатаX, МаленькийОстатокПоШирине);
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = НомерЛиста;
		НоваяСтрока.ВысотаДетали = ВысотаДетальки;
		НоваяСтрока.ШиринаДетали = ШиринаДетальки;
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаY = ?(ПоперечныйПил, КоординатаY + Элемент.ВысотаДетали + ТолщинаПила, КоординатаY);
		НоваяСтрока.КоординатаX = ?(ПоперечныйПил, КоординатаX, Элемент.КоординатаX + Элемент.ШиринаДетали + ТолщинаПила);
		НоваяСтрока.GUID = Новый УникальныйИдентификатор;
		НоваяСтрока.Остаток = Истина;
	КонецЕсли;
	
	Если ИспользуетсяВОстатках Тогда
		ВысотаДетальки = ?(ПоперечныйПил, ЗаменяемыйОстаток.ВысотаДетали - Элемент.ВысотаДетали - ТолщинаПила, ЗаменяемыйОстаток.ВысотаДетали);
		ШиринаДетальки = ?(ПоперечныйПил, ЗаменяемыйОстаток.ШиринаДетали, ЗаменяемыйОстаток.ШиринаДетали - Элемент.ШиринаДетали - ТолщинаПила);
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = НомерЛиста;
		НоваяСтрока.ВысотаДетали = ВысотаДетальки;
		НоваяСтрока.ШиринаДетали = ШиринаДетальки;
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаY = ?(ПоперечныйПил, КоординатаY + Элемент.ВысотаДетали + ТолщинаПила, КоординатаY);
		НоваяСтрока.КоординатаX = ?(ПоперечныйПил, КоординатаX, Элемент.КоординатаX + Элемент.ШиринаДетали + ТолщинаПила);
		НоваяСтрока.GUID = Новый УникальныйИдентификатор();
		НоваяСтрока.Остаток = Истина;
		НоваяСтрока.ИспользуетсяВОстаткахПакета = Истина;
	КонецЕсли;
	
	Если ОстатокПоПолосе > 0 Тогда
		
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = НомерЛиста;
		НоваяСтрока.ВысотаДетали = ?(ПоперечныйПил, Элемент.ВысотаДетали ,ОстатокПоПолосе);
		НоваяСтрока.ШиринаДетали = ?(ПоперечныйПил, ОстатокПоПолосе, Элемент.ШиринаДетали);
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаY = ?(ПоперечныйПил, Элемент.КоординатаY, КоординатаY + Элемент.ВысотаДетали + ТолщинаПила);
		НоваяСтрока.КоординатаX = ?(ПоперечныйПил, КоординатаX + Элемент.ШиринаДетали + ТолщинаПила, Элемент.КоординатаX);
		НоваяСтрока.GUID = Новый УникальныйИдентификатор();
		НоваяСтрока.Остаток = Истина;
		
	КонецЕсли;
	
	Если ЗаменяемыйОстаток <> Неопределено Тогда
		
		СписокДеталейНоменклатуры.Удалить(ЗаменяемыйОстаток);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРазмерыДетали(Деталь)
	
	ШиринаТекстура = 0;
	ВысотаТекстура = 0;
	ШиринаДопНоменклатура = 0;
	ВысотаДопНоменклатура = 0;
	
	ДанныеДетали = Деталь.ВидДетали;
	
	ШиринаДетали = Деталь.ШиринаДетали;
	ВысотаДетали = Деталь.ВысотаДетали;
	
	Если ДанныеДетали.ШиринаТекстура <> "" Тогда
		
		Попытка
			Выполнить("ШиринаТекстура = " + ДанныеДетали.ШиринаТекстура);
		Исключение
			Сообщить("Ошибка при формировании формулы: №006");
		КонецПопытки;
		
	КонецЕсли;
	
	Если ДанныеДетали.ВысотаТекстура <> "" Тогда
		
		Попытка
			Выполнить("ВысотаТекстура = " + ДанныеДетали.ВысотаТекстура);
		Исключение
			Сообщить("Ошибка при формировании формулы: №007");
		КонецПопытки;
		
	КонецЕсли;
	
	Если ДанныеДетали.ШиринаДопНоменклатура <> "" Тогда
		
		Попытка
			Выполнить("ШиринаДопНоменклатура = " + ДанныеДетали.ШиринаДопНоменклатура);
		Исключение
			Сообщить("Ошибка при формировании формулы: №008");
		КонецПопытки;
		
	КонецЕсли;
	
	Если ДанныеДетали.ВысотаДопНоменклатура <> "" Тогда
		
		Попытка
			Выполнить("ВысотаДопНоменклатура = " + ДанныеДетали.ВысотаДопНоменклатура);
		Исключение
			Сообщить("Ошибка при формировании формулы: №009");
		КонецПопытки;
		
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("ШиринаТекстура", ШиринаТекстура);
	Данные.Вставить("ВысотаТекстура", ВысотаТекстура);
	Данные.Вставить("ШиринаДопНоменклатура", ШиринаДопНоменклатура);
	Данные.Вставить("ВысотаДопНоменклатура", ВысотаДопНоменклатура);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область Вывод_во_флэш

Функция ПолучитьСтрокуДляФлэшИзДерева(Дерево, СсылкаДокумента, НарядЗадание, МассивБуквеннойНумерации, ПоказатьВесьСписокДеталей, СписокДеталей)
	
	Подразделение = СсылкаДокумента.Подразделение;
	
	Данные = Новый Структура();
	Данные.Вставить("СтрокаРаскроя", "%ЛОГОТИП%☻");
	Данные.Вставить("ОбщееКоличествоДеталей", 0);
	
	Если Дерево.Строки.Количество() > 0 Тогда
		
		Данные.СтрокаРаскроя = ФормированиеСтрокиРаскрояПоРанцу(Данные.СтрокаРаскроя, Дерево, СсылкаДокумента, Подразделение, НарядЗадание, МассивБуквеннойНумерации, ПоказатьВесьСписокДеталей, СписокДеталей);
		Данные.ОбщееКоличествоДеталей = ПосчитатьОбщееКоличествоДеталей(Дерево);
		
	КонецЕсли;
	
	Если Данные.СтрокаРаскроя = "%ЛОГОТИП%☻" Тогда
		Данные.СтрокаРаскроя = "";
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ДобавитьЭлементКСтрокеКривогоПила(Строка, Элемент, Документ, НомерНаряда)
	
	СтрокаНаряд = "";
	БукваНаряд = "НЕТ НАРЯДА";
	НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер, "");
	
	Если ЗначениеЗаполнено(НомерНаряда) Тогда
		
		СтрокаНаряд = " Номер наряда: " + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерНаряда.Наряд.Номер, "");
		
		НомерСимвола = 64;
		Для каждого Спец Из НомерНаряда.Наряд.СписокСпецификаций Цикл
			
			Если Спец.Спецификация = Документ.Ссылка Тогда
				БукваНаряд = Символ(НомерСимвола+Спец.НомерСтроки);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Строка = Строка
	+ Элемент.Номенклатура + "☺"
	+ Элемент.ВыборМебельнойКромкиСверху.КраткоеНаименование + "☺"
	+ Элемент.ВыборМебельнойКромкиСнизу.КраткоеНаименование + "☺"
	+ Элемент.ВыборМебельнойКромкиСлева.КраткоеНаименование + "☺"
	+ Элемент.ВыборМебельнойКромкиСправа.КраткоеНаименование + "☺"
	+ "Номер спец: " + НомерДок + СтрокаНаряд + "☺"
	+ БукваНаряд + " - " + Строка(Элемент.НомерСтроки) + " / " + Элемент.КоличествоКривыхДеталей + " шт." + "☺"
	+ "Комментарий: " + Элемент.Комментарий + "☺"
	+ ?(Элемент.ВидДетали.ЭтоСтекло, ?(Элемент.Обтачивать, "Обтачивать", "Без обточки"), "") + "☺"	
	+ Элемент.НомерСтроки + "☺"
	+ Элемент.СтрокаДляФлэш + "☺☻";
	
	Возврат Строка;
	
КонецФункции

Функция ФормированиеСтрокиКривогоПила(СписокДеталей, НомерДокумента, НомерНаряда)
	
	СтрокаКривогоПилаФРС = "%ЛОГОТИП%☻";
	СтрокаКривогоПилаСтеколка = "%ЛОГОТИП%☻";
	
	Для каждого Элемент Из СписокДеталей Цикл
		
		Если ЗначениеЗаполнено(Элемент.СтрокаДляФлэш) Тогда
			
			УжеБыла = Ложь;
			Если Элемент.КоличествоОдинаковых Тогда
				
			КонецЕсли;
			
			Если Элемент.ВидДетали.ЦеховаяЗона = Перечисления.ЦеховыеЗоны.Стеколка Тогда
				СтрокаКривогоПилаСтеколка = ДобавитьЭлементКСтрокеКривогоПила(СтрокаКривогоПилаСтеколка, Элемент, НомерДокумента, НомерНаряда);
			Иначе
				СтрокаКривогоПилаФРС = ДобавитьЭлементКСтрокеКривогоПила(СтрокаКривогоПилаФРС, Элемент, НомерДокумента, НомерНаряда);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаКривогоПилаФРС = ?(СтрокаКривогоПилаФРС = "%ЛОГОТИП%☻", "", СтрокаКривогоПилаФРС);
	СтрокаКривогоПилаСтеколка = ?(СтрокаКривогоПилаСтеколка = "%ЛОГОТИП%☻", "", СтрокаКривогоПилаСтеколка);
	
	Результат = Новый Структура();
	Результат.Вставить("ФРС", СтрокаКривогоПилаФРС);
	Результат.Вставить("Стеколка", СтрокаКривогоПилаСтеколка);
	
	Возврат Результат;
	
КонецФункции

Функция ПосчитатьОбщееКоличествоДеталей(Дерево)
	
	ОбщееКоличествоДеталей = 0;
	
	Для Каждого ДеревоНоменклатура ИЗ Дерево.Строки[0].Строки Цикл
		
		Для Каждого ДеревоЛисты Из ДеревоНоменклатура.Строки Цикл
			
			Для Каждого ДеревоДеталь Из ДеревоЛисты.Строки Цикл
				
				Если НЕ ДеревоДеталь.Остаток Тогда
					ОбщееКоличествоДеталей = ОбщееКоличествоДеталей + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОбщееКоличествоДеталей;
	
КонецФункции

Функция ФормированиеСтрокиРаскрояПоРанцу(СтрокаРаскроя, Дерево, СсылкаДокумента, Подразделение, НарядЗадание, МассивБуквеннойНумерации, ПоказатьВесьСписокДеталей, СписокДеталей)
	
	МассивВсехКромок = Новый Массив;
	ТаблицаКолонокДерева = Новый ТаблицаЗначений();
	
	ТаблицаКолонокДерева.Колонки.Добавить("GUID", Новый ОписаниеТипов("Строка"));
	ТаблицаКолонокДерева.Колонки.Добавить("Абсцисса", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("ВыборМебельнойКромкиСверху", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаКолонокДерева.Колонки.Добавить("ВыборМебельнойКромкиСнизу", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаКолонокДерева.Колонки.Добавить("ВыборМебельнойКромкиСлева", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаКолонокДерева.Колонки.Добавить("ВыборМебельнойКромкиСправа", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаКолонокДерева.Колонки.Добавить("ВысотаДетали", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("ВысотаЛиста", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("ДетальВПакете", Новый ОписаниеТипов("Булево"));
	ТаблицаКолонокДерева.Колонки.Добавить("ДетальДляСклеивания", Новый ОписаниеТипов("Булево"));
	ТаблицаКолонокДерева.Колонки.Добавить("ИД", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ТаблицаКолонокДерева.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("КоличествоОдинаковых", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("КоличествоПетель", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	ТаблицаКолонокДерева.Колонки.Добавить("КривойПилСверху", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("КривойПилСлева", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("КривойПилСнизу", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("КривойПилСправа", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("МожноПовернуть", Новый ОписаниеТипов("Булево"));
	ТаблицаКолонокДерева.Колонки.Добавить("НаименованиеДетали", Новый ОписаниеТипов("Строка"));
	ТаблицаКолонокДерева.Колонки.Добавить("НеТорцевать", Новый ОписаниеТипов("Булево"));
	ТаблицаКолонокДерева.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаКолонокДерева.Колонки.Добавить("НоменклатураДляСклеивания", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаКолонокДерева.Колонки.Добавить("ДопНоменклатураДляСклеивания", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаКолонокДерева.Колонки.Добавить("НомерДеталиИзделия", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("НомерИзделия", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("НомерЛиста", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("Обтачивать", Новый ОписаниеТипов("Булево"));
	ТаблицаКолонокДерева.Колонки.Добавить("Ордината", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("ОсобыйПорядок", Новый ОписаниеТипов("Строка"));
	ТаблицаКолонокДерева.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Булево"));
	ТаблицаКолонокДерева.Колонки.Добавить("ПараметрыДляЭтикеток", Новый ОписаниеТипов("Строка"));
	ТаблицаКолонокДерева.Колонки.Добавить("ПоворотДетали", Новый ОписаниеТипов("Булево"));
	ТаблицаКолонокДерева.Колонки.Добавить("Постформинг", Новый ОписаниеТипов("Булево"));
	ТаблицаКолонокДерева.Колонки.Добавить("РадиусЛевоВерх", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("РадиусЛевоНиз", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("РадиусПравоВерх", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("РадиусПравоНиз", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("РадиусФасада", Новый ОписаниеТипов("Строка"));
	ТаблицаКолонокДерева.Колонки.Добавить("Сборка", Новый ОписаниеТипов("Булево"));
	ТаблицаКолонокДерева.Колонки.Добавить("Срез", Новый ОписаниеТипов("Булево"));
	ТаблицаКолонокДерева.Колонки.Добавить("СтруктураОтверстий", Новый ОписаниеТипов("Строка"));
	ТаблицаКолонокДерева.Колонки.Добавить("СхемаЯщика", Новый ОписаниеТипов("СправочникСсылка.СхемыЯщиков"));
	ТаблицаКолонокДерева.Колонки.Добавить("ШиринаДетали", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("ШиринаЛиста", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("ЕвропазВерх", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("ЕвропазНиз", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("ЕвропазЛево", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("ЕвропазПраво", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("ПрипускСклейка", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("ПрипускМелкаяДеталь", Новый ОписаниеТипов("Число"));
	ТаблицаКолонокДерева.Колонки.Добавить("ПоперечныйПил", Новый ОписаниеТипов("Булево"));
	ТаблицаКолонокДерева.Колонки.Добавить("ИдентификаторПетли", Новый ОписаниеТипов("Строка"));
	
	МассивКолонокДерева = Новый Массив();
	Для Каждого Колонка ИЗ ТаблицаКолонокДерева.Колонки Цикл
		МассивКолонокДерева.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаДеталей = ТаблицаКолонокДерева.СкопироватьКолонки();
	
	МассивНоменклатуры = Новый Массив();
	
	Для Каждого ДеревоНоменклатура ИЗ Дерево.Строки[0].Строки Цикл
		
		Неноменклатурный = ДеревоНоменклатура.Номенклатура.Неноменклатурный;
		ПроверятьНеобходимостьУдаленияМатериала = Ложь;
		
		Если НЕ НарядЗадание Тогда
			ПроверятьНеобходимостьУдаленияМатериала = Истина;
		КонецЕсли;
		
		Если НЕ Неноменклатурный и ПроверятьНеобходимостьУдаленияМатериала И НЕ ПоказатьВесьСписокДеталей Тогда
			Продолжить;
		Иначе
			МассивНоменклатуры.Добавить(ДеревоНоменклатура.Номенклатура);
		КонецЕсли;
		
		Для Каждого ДеревоЛисты Из ДеревоНоменклатура.Строки Цикл
			
			Для Каждого ДеревоДеталь Из ДеревоЛисты.Строки Цикл
				НоваяСтрока = ТаблицаДеталей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДеревоДеталь);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Срочность = ?(НарядЗадание, "", ?(СсылкаДокумента.Срочный, " СРОЧНЫЙ", ""));
	КомментарийДокумента = ?(НарядЗадание, "", СсылкаДокумента.Комментарий);
	ВидДокумента = ?(НарядЗадание,"Наряд","Спец.");
	Контрагент = ?(НарядЗадание, Справочники.Контрагенты.ПустаяСсылка(), СсылкаДокумента.Контрагент);
	ЕстьПодЗаказ = Ложь;
	ЕстьПредоставленЗаказчиком = Ложь;
	НоменклатураПодЗаказ = "";
	
	Если НарядЗадание Тогда
		
		СписокМатериаловЗаказчика = Новый ТаблицаЗначений();
		СписокМатериаловЗаказчика.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		СписокМатериаловЗаказчика.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
		
		СписокМатериаловПодЗаказ = СписокМатериаловЗаказчика.СкопироватьКолонки();
		
		Для каждого Строка Из СсылкаДокумента.СписокСпецификаций Цикл
			Для каждого СтрокаМатериала Из Строка.Спецификация.СписокМатериаловЗаказчика Цикл
				НоваяСтрока = СписокМатериаловЗаказчика.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериала, "Номенклатура, Комментарий");
			КонецЦикла;
			Для каждого СтрокаМатериала Из Строка.Спецификация.СписокМатериаловПодЗаказ Цикл
				НоваяСтрока = СписокМатериаловПодЗаказ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериала, "Номенклатура, Комментарий");
			КонецЦикла;
		КонецЦикла;
		
		СписокМатериаловЗаказчика.Свернуть("Номенклатура, Комментарий");
		СписокМатериаловПодЗаказ.Свернуть("Номенклатура, Комментарий");
		
	Иначе
		СписокМатериаловЗаказчика = СсылкаДокумента.СписокМатериаловЗаказчика;
		СписокМатериаловПодЗаказ = СсылкаДокумента.СписокМатериаловПодЗаказ;
		ЕстьПодЗаказ = СписокМатериаловПодЗаказ.Количество() > 0;
		ЕстьПредоставленЗаказчиком = СсылкаДокумента.СписокМатериаловЗаказчика.Количество() > 0;
	КонецЕсли;
	
	//Петли
	
	СписокСпец = Новый Массив();
	
	Если ТипЗнч(СсылкаДокумента) = Тип("ДокументСсылка.НарядЗадание") Тогда
		 СписокСпец = СсылкаДокумента.СписокСпецификаций.ВыгрузитьКолонку("Спецификация");
	Иначе
		 СписокСпец.Добавить(СсылкаДокумента.Ссылка);
	КонецЕсли;
	 
	ЗапросНаПетли = Новый Запрос();
	ЗапросНаПетли.УстановитьПараметр("СписокСпец", СписокСпец);
	ЗапросНаПетли.Текст = 
	"ВЫБРАТЬ
	|	СпецификацияПетлиДетали.ИдентификаторДетали,
	|	СпецификацияПетлиДетали.Координата,
	|	СпецификацияПетлиДетали.Сторона
	|ИЗ
	|	Документ.Спецификация.ПетлиДетали КАК СпецификацияПетлиДетали
	|ГДЕ
	|	СпецификацияПетлиДетали.Ссылка В (&СписокСпец)";
	
	ТаблицаПетли = ЗапросНаПетли.Выполнить().Выгрузить();
	
	ЗначенияСторон = Новый Структура();
	ЗначенияСторон.Вставить("Сверху", Перечисления.Стороны.Сверху);
	ЗначенияСторон.Вставить("Снизу", Перечисления.Стороны.Снизу);
	ЗначенияСторон.Вставить("Слева", Перечисления.Стороны.Слева);
	ЗначенияСторон.Вставить("Справа", Перечисления.Стороны.Справа);
	ЗначенияСторон.Вставить("Отсутствует", Перечисления.Стороны.Отсутствует);
	
	//Кромки
	
	ЗапросНаКромки = Новый Запрос;
	ЗапросНаКромки.УстановитьПараметр("ТабДеталей", СписокДеталей);
	ЗапросНаКромки.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	ЗапросНаКромки.УстановитьПараметр("СписокМатериаловЗаказчика", СписокМатериаловЗаказчика);
	ЗапросНаКромки.УстановитьПараметр("СписокМатериаловПодЗаказ", СписокМатериаловПодЗаказ);
	ЗапросНаКромки.Текст =
	"ВЫБРАТЬ
	|	ТабДетали.ВыборМебельнойКромкиСнизу КАК ВыборМебельнойКромкиСнизу,
	|	ТабДетали.ВыборМебельнойКромкиСверху КАК ВыборМебельнойКромкиСверху,
	|	ТабДетали.ВыборМебельнойКромкиСлева КАК ВыборМебельнойКромкиСлева,
	|	ТабДетали.ВыборМебельнойКромкиСправа КАК ВыборМебельнойКромкиСправа,
	|	ТабДетали.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Кромки
	|ИЗ
	|	&ТабДеталей КАК ТабДетали
	|ГДЕ
	|	ТабДетали.Номенклатура В (&МассивНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокМатериаловПодЗаказ.Номенклатура КАК Номенклатура,
	|	СписокМатериаловПодЗаказ.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ВТ_СписокМатериаловПодЗаказ
	|ИЗ
	|	&СписокМатериаловПодЗаказ КАК СписокМатериаловПодЗаказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокМатериаловЗаказчика.Номенклатура КАК Номенклатура,
	|	СписокМатериаловЗаказчика.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ВТ_МатериалЗаказчика
	|ИЗ
	|	&СписокМатериаловЗаказчика КАК СписокМатериаловЗаказчика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Кромки.ВыборМебельнойКромкиСнизу КАК Кромка,
	|	ВТ_Кромки.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВсеКромкиВОдномМесте
	|ИЗ
	|	ВТ_Кромки КАК ВТ_Кромки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Кромки.ВыборМебельнойКромкиСверху,
	|	ВТ_Кромки.Номенклатура
	|ИЗ
	|	ВТ_Кромки КАК ВТ_Кромки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Кромки.ВыборМебельнойКромкиСлева,
	|	ВТ_Кромки.Номенклатура
	|ИЗ
	|	ВТ_Кромки КАК ВТ_Кромки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Кромки.ВыборМебельнойКромкиСправа,
	|	ВТ_Кромки.Номенклатура
	|ИЗ
	|	ВТ_Кромки КАК ВТ_Кромки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеКромкиВОдномМесте.Кромка КАК Кромка,
	|	ВсеКромкиВОдномМесте.Номенклатура КАК Номенклатура 
	|ПОМЕСТИТЬ СгруппированныеКромки
	|ИЗ
	|	ВсеКромкиВОдномМесте КАК ВсеКромкиВОдномМесте
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеКромкиВОдномМесте.Кромка,
	|	ВсеКромкиВОдномМесте.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СгруппированныеКромки.Кромка,
	|	СгруппированныеКромки.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(СгруппированныеКромки.Кромка КАК Справочник.Номенклатура).КраткоеНаименование КАК КраткоеНаименование,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_МатериалЗаказчика.Номенклатура ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Предоставление,
	|	ЕСТЬNULL(ВТ_МатериалЗаказчика.Комментарий, """") КАК Комментарий
	|ИЗ
	|	СгруппированныеКромки КАК СгруппированныеКромки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МатериалЗаказчика КАК ВТ_МатериалЗаказчика
	|		ПО СгруппированныеКромки.Кромка = ВТ_МатериалЗаказчика.Номенклатура
	|ГДЕ
	|	НЕ СгруппированныеКромки.Кромка = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СгруппированныеКромки.Кромка,
	|	СгруппированныеКромки.Номенклатура,
	|	ВЫРАЗИТЬ(СгруппированныеКромки.Кромка КАК Справочник.Номенклатура).КраткоеНаименование,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_СписокМатериаловПодЗаказ.Номенклатура ЕСТЬ NULL
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВТ_СписокМатериаловПодЗаказ.Комментарий, """")
	|ИЗ
	|	СгруппированныеКромки КАК СгруппированныеКромки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокМатериаловПодЗаказ КАК ВТ_СписокМатериаловПодЗаказ
	|		ПО СгруппированныеКромки.Кромка = ВТ_СписокМатериаловПодЗаказ.Номенклатура
	|ГДЕ
	|	НЕ СгруппированныеКромки.Кромка = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	ТаблицаКромок = ЗапросНаКромки.Выполнить().Выгрузить();
	
	МассивКромок = ТаблицаКромок.Скопировать();
	МассивКромок.Свернуть("Кромка");
	МассивКромок = МассивКромок.ВыгрузитьКолонку("Кромка"); 
	
	ТаблицаКромок.Свернуть("Кромка,КраткоеНаименование,Предоставление,Комментарий,Номенклатура");
	
	//Тут удалим задвоенную кромку не под заказ. Задвоена чтобы облегчить запрос.
	
	Для Каждого Кромка ИЗ МассивКромок Цикл
		СтрокиКромок = ТаблицаКромок.НайтиСтроки(Новый Структура("Кромка", Кромка));
		Если СтрокиКромок.Количество() > 1 Тогда
			Для Каждого Кр ИЗ СтрокиКромок Цикл	
				Если Кр.Предоставление = 0 Тогда
					ТаблицаКромок.Удалить(Кр);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//Соответствие номенклатуры
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеНоменклатуры.ПодставляемаяНоменклатура,
	|	СоответствиеНоменклатуры.Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатуры КАК СоответствиеНоменклатуры
	|ГДЕ
	|	СоответствиеНоменклатуры.Подразделение = &Подразделение
	|	И СоответствиеНоменклатуры.Номенклатура В (&МассивНоменклатуры)";
	
	ПодставляемаяНоменклатура = Запрос.Выполнить().Выгрузить();
	
	//Детали
	
	ТаблицаПорядка = Новый ТаблицаЗначений();
	ТаблицаПорядка.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ТаблицаПорядка.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	СчПорядок = 0;
	
	Для Каждого Н Из МассивНоменклатуры Цикл
		
		СтрПорядок = ТаблицаПорядка.Добавить();
		СтрПорядок.Номенклатура = Н;
		СтрПорядок.Порядок = СчПорядок;
		
		СчПорядок = СчПорядок + 1;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДеталей", ТаблицаДеталей);
	Запрос.УстановитьПараметр("ТаблицаПорядка", ТаблицаПорядка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	%ВСЕПОЛЯТАБЛИЦЫДЕТАЛИ%
	|ПОМЕСТИТЬ ТаблицаДеталей
	|ИЗ
	|	&ТаблицаДеталей КАК ТаблицаДеталей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПорядка.Номенклатура,
	|	ТаблицаПорядка.Порядок
	|ПОМЕСТИТЬ ТаблицаПорядка
	|ИЗ
	|	&ТаблицаПорядка КАК ТаблицаПорядка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%ВСЕПОЛЯТАБЛИЦЫДЕТАЛИ%,
	|	ТаблицаДеталей.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаДеталей.Номенклатура.Парковка КАК Парковка
	|ИЗ
	|	ТаблицаДеталей КАК ТаблицаДеталей
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПорядка КАК ТаблицаПорядка
	|	ПО ТаблицаДеталей.Номенклатура = ТаблицаПорядка.Номенклатура
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПорядка.Порядок
	|ИТОГИ
	|	МАКСИМУМ(ТаблицаДеталей.Номенклатура),
	|	МАКСИМУМ(ШиринаЛиста),
	|	МАКСИМУМ(ВысотаЛиста),
	|	МАКСИМУМ(НоменклатурнаяГруппа)
	|ПО
	|	ТаблицаДеталей.Номенклатура,
	|	НомерЛиста";
	
	СтрокаВсехПолей = "";
	Для Каждого Колонка ИЗ МассивКолонокДерева Цикл
		СтрокаВсехПолей = СтрокаВсехПолей + "ТаблицаДеталей."+Колонка+",";
	КонецЦикла;
	
	СтрокаВсехПолей = Лев(СтрокаВсехПолей, СтрДлина(СтрокаВсехПолей)-1);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ВСЕПОЛЯТАБЛИЦЫДЕТАЛИ%",СтрокаВсехПолей);
	
	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СсылкаДокумента.Номер);
	
	Если НарядЗадание И МассивБуквеннойНумерации <> Неопределено и МассивБуквеннойНумерации.Количество() > 0 Тогда
		НомерНаПечать = "";
		Для каждого Элемент Из МассивБуквеннойНумерации Цикл
			НомерНаПечать = НомерНаПечать + Элемент.БуквеннаяНумерация;
		КонецЦикла;
	Иначе
		НомерНаПечать = "Спец: " + НомерНаПечать;
	КонецЕсли;
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		//Формирование строки раскроя
		
		МатериалПодЗаказ = Ложь;
		КомментарийНоменклатура = "";
		ДобавленнаяНадпись = "";
		
		ПодставляемаяНоменклатураТекушая = ПодставляемаяНоменклатура.Скопировать(Новый Структура("Номенклатура", ВыборкаНоменклатура.Номенклатура));
		
		Если ЕстьПодЗаказ Тогда					
			Для каждого СтрокаПодЗаказ Из СписокМатериаловПодЗаказ Цикл	
				Если СтрокаПодЗаказ.Номенклатура = ВыборкаНоменклатура.Номенклатура Тогда
					
					МатериалПодЗаказ = Истина;
					ДобавленнаяНадпись = "ПОД ЗАКАЗ ";
					КомментарийНоменклатура = СтрокаПодЗаказ.Комментарий;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьПредоставленЗаказчиком Тогда	
			Для каждого СтрокаМатЗаказчика Из СписокМатериаловЗаказчика Цикл						
				Если СтрокаМатЗаказчика.Номенклатура = ВыборкаНоменклатура.Номенклатура Тогда
					
					МатериалПодЗаказ = Истина;
					ДобавленнаяНадпись = "ПРЕДОСТАВЛЕН ";
					КомментарийНоменклатура = СтрокаМатЗаказчика.Комментарий;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ВыборкаЛист = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		КоличествоДеталейНоменклатуры = 0;
		
		Пока ВыборкаЛист.Следующий() Цикл
			
			ВыборкаПоДеталям = ВыборкаЛист.Выбрать();
			
			Пока ВыборкаПоДеталям.Следующий() Цикл
				
				Если НЕ ВыборкаПоДеталям.Остаток Тогда
					
					КоличествоДеталейНоменклатуры = КоличествоДеталейНоменклатуры + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ВыборкаЛист.Сбросить();
		
		Пока ВыборкаЛист.Следующий() Цикл
			
			СтрокаКромокДляШапки = "";
			СтрокиКромок = ТаблицаКромок.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаЛист.Номенклатура));
			
			Для Каждого Стр ИЗ СтрокиКромок Цикл
				СтрокаКромокДляШапки = СтрокаКромокДляШапки + "" + Стр.КраткоеНаименование + "◘" 
				+ Стр.Предоставление + "◘"+ Стр.Кромка + "◘" + Стр.Комментарий + "•";
			КонецЦикла;
			
			СтрокаКоличествоДеталей = " Всего деталей: <b>" + КоличествоДеталейНоменклатуры + "</b>";
			
			ШапкаЛиста = Новый Массив;
			
			ШапкаЛиста.Добавить(?(МатериалПодЗаказ, Строка(ВыборкаЛист.Номенклатура) + СтрокаКоличествоДеталей + " - <b>" + ДобавленнаяНадпись + КомментарийНоменклатура + "</b>", Строка(ВыборкаЛист.Номенклатура) + СтрокаКоличествоДеталей)); //0
			ШапкаЛиста.Добавить(СтрокаКромокДляШапки);
			ШапкаЛиста.Добавить(ВыборкаЛист.ШиринаЛиста); //9
			ШапкаЛиста.Добавить(ВыборкаЛист.ВысотаЛиста); //10
			ШапкаЛиста.Добавить(?(ЗначениеЗаполнено(СсылкаДокумента.Ссылка), СсылкаДокумента, "")); //11
			ШапкаЛиста.Добавить(НомерНаПечать + " " + НоменклатураПодЗаказ +" "); //12 + МатериалЗаказчика
			ШапкаЛиста.Добавить("<b>" + КомментарийДокумента + "</b>"); //13
			ШапкаЛиста.Добавить(Контрагент); //14
			ШапкаЛиста.Добавить(ВыборкаЛист.НоменклатурнаяГруппа); //15
			Если НарядЗадание Тогда
				ШапкаЛиста.Добавить(ВыборкаЛист.Парковка); //16
			КонецЕсли;
			
			СтрокаРаскроя = СтрокаРаскроя + СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ШапкаЛиста, "☺") + "☻";
			
			ВыборкаПоДеталям = ВыборкаЛист.Выбрать();
			
			Пока ВыборкаПоДеталям.Следующий() Цикл
				
				ПоворотДетали = ВыборкаПоДеталям.ПоворотДетали;
				
				Номенклатура = ?(ВыборкаПоДеталям.Остаток, ?(ЗначениеЗаполнено(НоменклатураПодЗаказ), "2", "1"), "");
				
				ПравыйНижнийРадиус = ВыборкаПоДеталям.РадиусПравоНиз;
				Если ВыборкаПоДеталям.Срез И ПравыйНижнийРадиус > 0 Тогда
					ПравыйНижнийРадиус = Строка(ВыборкаПоДеталям.РадиусПравоНиз) + "_1";
				КонецЕсли;
				
				КомментарийДеталь = ВыборкаПоДеталям.Комментарий;
				
				Надпись = ВыборкаПоДеталям.НаименованиеДетали;
				ПараметрыДляЭтикеток = ВыборкаПоДеталям.ПараметрыДляЭтикеток;
				
				НеТорцевать = "";
				Если ВыборкаПоДеталям.НеТорцевать Тогда
					НеТорцевать = "1";
				КонецЕсли;
				
				СтрокаОтверстий = "";
				
				ЕвропазСверху = 0;
				ЕвропазСнизу = 0;
				ЕвропазСлева = 0;
				ЕвропазСправа = 0;
				
				Если ВыборкаПоДеталям.КоличествоПетель > 0 Тогда
				
					СтрокиПетли = ТаблицаПетли.НайтиСтроки(Новый Структура("ИдентификаторДетали", Новый УникальныйИдентификатор(ВыборкаПоДеталям.ИдентификаторПетли)));
		
					Если СтрокиПетли.Количество() > 0 Тогда
						СтрокаОтверстий = ПолучитьСтрокуПетли(СтрокиПетли, ЗначенияСторон);
					КонецЕсли;
				
				Иначе
				    //RonEXI: Если не петли то выбираем из структуры отверстий по старому, изза каталога.
					Если ЗначениеЗаполнено(ВыборкаПоДеталям.СтруктураОтверстий) Тогда
						
						Если НЕ ЗначениеЗаполнено(ВыборкаПоДеталям.Идентификатор) Тогда
							СтрокаОтверстийСтруктуры = ЛексСервер.ЗаполнитьРеквизитОтверстиями(СтрокаОтверстий, ВыборкаПоДеталям.СтруктураОтверстий, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали, ПоворотДетали);
							СтрокаОтверстий = ?(ЗначениеЗаполнено(СтрокаОтверстийСтруктуры), СтрокаОтверстийСтруктуры, СтрокаОтверстий);
						КонецЕсли;
						
						//RonEXI: Перешли на отдельные реквизиты для европаза. 
						//СтруктураЕвропазов = ЛексСервер.ПолучитьСтруктуруЕвропазов(ВыборкаПоДеталям.СтруктураОтверстий);
						//ЕвропазСверху = СтруктураЕвропазов.Сверху;
						//ЕвропазСнизу = СтруктураЕвропазов.Снизу;
						//ЕвропазСлева = СтруктураЕвропазов.Слева;
						//ЕвропазСправа = СтруктураЕвропазов.Справа;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ВыборкаПоДеталям.ЕвропазВерх > 0 Тогда
					ЕвропазСверху = ВыборкаПоДеталям.ЕвропазВерх; 	
				КонецЕсли;
				
				Если ВыборкаПоДеталям.ЕвропазНиз > 0 Тогда
					ЕвропазСнизу = ВыборкаПоДеталям.ЕвропазНиз; 	
				КонецЕсли;
				
				Если ВыборкаПоДеталям.ЕвропазЛево > 0 Тогда
					ЕвропазСлева = ВыборкаПоДеталям.ЕвропазЛево; 	
				КонецЕсли;
				
				Если ВыборкаПоДеталям.ЕвропазПраво > 0 Тогда
					ЕвропазСправа = ВыборкаПоДеталям.ЕвропазПраво; 	
				КонецЕсли;
				
				///////////////////////////
				
				ПроверкаКромкиСверху = ПодставляемаяНоменклатураТекушая.Найти(ВыборкаПоДеталям.ВыборМебельнойКромкиСверху, "ПодставляемаяНоменклатура");
				ПроверкаКромкиСнизу = ПодставляемаяНоменклатураТекушая.Найти(ВыборкаПоДеталям.ВыборМебельнойКромкиСнизу, "ПодставляемаяНоменклатура");
				ПроверкаКромкиСлева = ПодставляемаяНоменклатураТекушая.Найти(ВыборкаПоДеталям.ВыборМебельнойКромкиСлева, "ПодставляемаяНоменклатура");
				ПроверкаКромкиСправа = ПодставляемаяНоменклатураТекушая.Найти(ВыборкаПоДеталям.ВыборМебельнойКромкиСправа, "ПодставляемаяНоменклатура");
				
				КраткоеНаменованиеКромкиСверху = ?(ПроверкаКромкиСверху = Неопределено, ВыборкаПоДеталям.ВыборМебельнойКромкиСверху.КраткоеНаименование, Лев(ВыборкаПоДеталям.ВыборМебельнойКромкиСверху.КраткоеНаименование, Найти (ВыборкаПоДеталям.ВыборМебельнойКромкиСверху.КраткоеНаименование, "-")-1));
				КраткоеНаменованиеКромкиСнизу = ?(ПроверкаКромкиСнизу = Неопределено, ВыборкаПоДеталям.ВыборМебельнойКромкиСнизу.КраткоеНаименование, Лев(ВыборкаПоДеталям.ВыборМебельнойКромкиСнизу.КраткоеНаименование, Найти (ВыборкаПоДеталям.ВыборМебельнойКромкиСнизу.КраткоеНаименование, "-")-1));
				КраткоеНаменованиеКромкиСлева = ?(ПроверкаКромкиСлева = Неопределено, ВыборкаПоДеталям.ВыборМебельнойКромкиСлева.КраткоеНаименование, Лев(ВыборкаПоДеталям.ВыборМебельнойКромкиСлева.КраткоеНаименование, Найти (ВыборкаПоДеталям.ВыборМебельнойКромкиСлева.КраткоеНаименование, "-")-1));
				КраткоеНаменованиеКромкиСправа = ?(ПроверкаКромкиСправа = Неопределено, ВыборкаПоДеталям.ВыборМебельнойКромкиСправа.КраткоеНаименование, Лев(ВыборкаПоДеталям.ВыборМебельнойКромкиСправа.КраткоеНаименование, Найти (ВыборкаПоДеталям.ВыборМебельнойКромкиСправа.КраткоеНаименование, "-")-1));
				
				Если ЕстьПредоставленЗаказчиком Тогда
					
					Для каждого Строчка Из СсылкаДокумента.СписокМатериаловЗаказчика Цикл
						
						КраткоеНаменованиеКромкиСверху = ?(Строчка.Номенклатура = ВыборкаПоДеталям.ВыборМебельнойКромкиСверху, КраткоеНаменованиеКромкиСверху + " ["+ Строчка.НомерСтроки + "]", КраткоеНаменованиеКромкиСверху);
						КраткоеНаменованиеКромкиСнизу = ?(Строчка.Номенклатура = ВыборкаПоДеталям.ВыборМебельнойКромкиСнизу, КраткоеНаменованиеКромкиСнизу + " ["+ Строчка.НомерСтроки + "]", КраткоеНаменованиеКромкиСнизу);
						КраткоеНаменованиеКромкиСлева = ?(Строчка.Номенклатура = ВыборкаПоДеталям.ВыборМебельнойКромкиСлева, КраткоеНаменованиеКромкиСлева + " ["+ Строчка.НомерСтроки + "]", КраткоеНаменованиеКромкиСлева);
						КраткоеНаменованиеКромкиСправа = ?(Строчка.Номенклатура = ВыборкаПоДеталям.ВыборМебельнойКромкиСправа, КраткоеНаменованиеКромкиСправа + " ["+ Строчка.НомерСтроки + "]", КраткоеНаменованиеКромкиСправа);
						
					КонецЦикла;
					
				КонецЕсли;
				
				///////////////////////////
				
				СтрокаРаскроя = СтрокаРаскроя
				+ Номенклатура + "☺" // 1 - Номенклатура
				+ ?(ПоворотДетали, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали) + "☺" //2 - Высота детали
				+ ?(ПоворотДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ШиринаДетали) + "☺" //3 - Ширина детали
				+ ВыборкаПоДеталям.РадиусЛевоВерх + "☺" //4
				+ ВыборкаПоДеталям.РадиусПравоВерх + "☺" //5
				+ ПравыйНижнийРадиус + "☺" //6
				+ ВыборкаПоДеталям.РадиусЛевоНиз + "☺" //7
				+ ВыборкаПоДеталям.КривойПилСверху + "☺" //8
				+ ВыборкаПоДеталям.КривойПилСнизу + "☺" //9
				+ ВыборкаПоДеталям.КривойПилСлева + "☺" //10
				+ ВыборкаПоДеталям.КривойПилСправа + "☺" //11
				+ "" + "☺" //12 (Эксц) если 1 - два в круге крестик(рисунок) сверху
				+ "" + "☺" //13 (Эксц) если 1 - два в круге крестик(рисунок) снизу
				+ "" + "☺" //14 (Эксц) если 1 - два в круге крестик(рисунок) слева
				+ "" + "☺" //15 (Эксц) если 1 - два в круге крестик(рисунок) справа
				+ КомментарийДеталь + "☺" //16 - Комментарий
				+ Надпись + "☺" //17
				+ КраткоеНаменованиеКромкиСверху + "☺" //18
				+ КраткоеНаменованиеКромкиСнизу + "☺" //19
				+ КраткоеНаменованиеКромкиСлева + "☺" //20
				+ КраткоеНаменованиеКромкиСправа + "☺" //21
				+ "" + "☺" //22 если 1 - две капельки(рисунок) сверху
				+ "" + "☺" //23 если 1 - две капельки(рисунок) снизу
				+ "" + "☺" //24 если 1 - две капельки(рисунок) слева
				+ "" + "☺" //25 если 1 - две капельки(рисунок) справа
				+ СтрокаОтверстий + "☺" //26
				+ ЕвропазСверху + "☺" //27
				+ ЕвропазСнизу + "☺" //28
				+ ЕвропазСлева + "☺" //29
				+ ЕвропазСправа + "☺" //30
				+ НеТорцевать + "☺" //31
				+ ВыборкаПоДеталям.Ордината + "☺" //32 - координата по У
				+ ВыборкаПоДеталям.Абсцисса + "☺" //33 - координата по Х
				+ Число(ПоворотДетали) + "☺" //34 - признак поворота детали 
				+ ВыборкаПоДеталям.ИД + "☺" //35 - ИД детали
				+ Число(ВыборкаПоДеталям.Номенклатура.ПоперечнаяТекстура) + "☺" //36 - поперечнаяТекстура 
				+ ВыборкаПоДеталям.ПараметрыДляЭтикеток + "☺☻"; // 37 - данные для печати этикеток + конец детали
				
				ДобавитьКромкиВМассив(ВыборкаПоДеталям,МассивВсехКромок);
				
			КонецЦикла; // ПоДеталям
			
			СтрокаРаскроя = СтрокаРаскроя + "♦";
			
		КонецЦикла; // ПоЛистам
		
	КонецЦикла; //ПоНоменклатуре
	
	Возврат СтрокаРаскроя;
	
КонецФункции

Функция ПолучитьСтрокуПетли(МассивСтрок, ЗначенияСторон)
	
	СтрокаПетли = "";
	
	Сторона = "0";
	
	Если МассивСтрок[0].Сторона = ЗначенияСторон.Сверху Тогда 
		Сторона = "1";
	ИначеЕсли  МассивСтрок[0].Сторона = ЗначенияСторон.Снизу Тогда
		Сторона = "2";	
	ИначеЕсли  МассивСтрок[0].Сторона = ЗначенияСторон.Слева Тогда
		Сторона = "3";	
	ИначеЕсли  МассивСтрок[0].Сторона = ЗначенияСторон.Справа Тогда
		Сторона = "4";	
	КонецЕсли;
	
	МассивКоординат = Новый Массив();
	
	Для Каждого К ИЗ МассивСтрок Цикл
		МассивКоординат.Добавить(К.Координата);
	КонецЦикла;
	
	//RonEXI: 3 - это тип для петли.
	СтрокаПетли = "3_" + Сторона + "_" + СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивКоординат, "^");
	
	Возврат СтрокаПетли;
	
КонецФункции

#КонецОбласти

#Область БуферКонтрагенту

Функция ПроверкаДеталейКонтрагентов(ТаблицаНаименованийДеталей, МассивБуквеннойНумерации)
	
	СтруктураПроверкиДеталей = Новый Структура;
	
	Если МассивБуквеннойНумерации <> Неопределено И ЗначениеЗаполнено(МассивБуквеннойНумерации) Тогда
		ТаблицаБуквы = ТаблицаНаименованийДеталей.Скопировать(,"НаименованиеДетали");
		ТаблицаБуквы.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
		Для каждого СтрокаТаблицыДеталей Из ТаблицаБуквы Цикл
			
			НайденнаяСтрокаСКонтрагентом = МассивБуквеннойНумерации.Найти(Лев(СтрокаТаблицыДеталей.НаименованиеДетали, 1), "БукваНумерации");
			
			Если НайденнаяСтрокаСКонтрагентом <> Неопределено Тогда
				СтрокаТаблицыДеталей.Контрагент = НайденнаяСтрокаСКонтрагентом.Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаБуквы.Свернуть("Контрагент");
		Если ТаблицаБуквы.Количество() = 1 Тогда
			ДилерНаименование = СокрЛП(ТаблицаБуквы[0].Контрагент.Префикс);
			СтруктураПроверкиДеталей.Вставить("ДополнениеНазванияОстатка"," / " + ДилерНаименование);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПроверкиДеталей;
	
КонецФункции

#КонецОбласти