#Область Общие

Функция СформироватьРаскрой(ДокОбъект, СписокДеталей = Неопределено, ПоказатьВесьСписокДеталей = Ложь, Наряды = Ложь) Экспорт
	
	НарядЗадание = Ложь;
	Если ТипЗнч(ДокОбъект) = Тип("ДокументСсылка.НарядЗадание") И СписокДеталей = Неопределено Тогда
		НарядЗадание = Истина;
		ПервыйОбход = Истина;
		//МассивБуквеннойНумерации = Новый Массив;
		МассивБуквеннойНумерации = Новый ТаблицаЗначений;
		МассивБуквеннойНумерации.Колонки.Добавить("БукваНумерации", Новый ОписаниеТипов("Строка"));
		МассивБуквеннойНумерации.Колонки.Добавить("БуквеннаяНумерация", Новый ОписаниеТипов("Строка"));
		МассивБуквеннойНумерации.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		Если ДокОбъект.СписокСпецификаций.Количество() > 0 Тогда
			НомерСимвола = 64;
			Для каждого Строка Из ДокОбъект.СписокСпецификаций Цикл
				Дилерский =  Строка.Спецификация.Контрагент.Дилер;
				Буква = Символ(НомерСимвола+Строка.НомерСтроки);
				ТаблицаДеталей =  ФормированиеСпискаДеталей(Строка.Спецификация, Дилерский, Буква, НарядЗадание);
				Если ПервыйОбход Тогда
					СписокДеталей = ТаблицаДеталей.СкопироватьКолонки();
					ПервыйОбход = Ложь;
				КонецЕсли;
				Для каждого СтрокаТаблицы Из ТаблицаДеталей Цикл
					НоваяСтрока = СписокДеталей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				КонецЦикла;
				НомерСпецификации = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Строка.Спецификация.Номер);
				//МассивБуквеннойНумерации.Добавить(Буква + "=" + НомерСпецификации + " ");
				УНасНоваяБуква = МассивБуквеннойНумерации.Добавить();
				УНасНоваяБуква.БукваНумерации = Буква;
				УНасНоваяБуква.БуквеннаяНумерация = Буква + "=" + НомерСпецификации + " ";
				УНасНоваяБуква.Контрагент =  Строка.Спецификация.Контрагент;
			КонецЦикла;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЗамерятьВремя = Ложь;
	
	Если СписокДеталей = Неопределено или НарядЗадание Тогда
		
		Дилерский =  ?(НарядЗадание, Ложь, ДокОбъект.Контрагент.Дилер);
		ЗамерятьВремя = Истина;
		СписокДеталей = ?(НарядЗадание, СписокДеталей, ФормированиеСпискаДеталей(ДокОбъект, Дилерский));
		
		СтруктураДляНулевойВысоты = Новый Структура;
		СтруктураДляНулевойШирины = Новый Структура;
		СтруктураДляНулевойВысоты.Вставить("ВысотаДетали", 0);
		СтруктураДляНулевойШирины.Вставить("ШиринаДетали", 0);
		
		МассивСтрокСНулевойВысотой = СписокДеталей.НайтиСтроки(СтруктураДляНулевойВысоты);
		МассивСтрокСНулевойШириной = СписокДеталей.НайтиСтроки(СтруктураДляНулевойШирины);
		
		Ошибки = Неопределено;
		
		Если МассивСтрокСНулевойВысотой.Количество() > 0 Тогда
			
			Для каждого Строка Из МассивСтрокСНулевойВысотой Цикл
				
				Текст = "Обнаружена деталь с высотой, равной 0, номер строки " + Строка.НомерСтроки;
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , Текст,);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если МассивСтрокСНулевойШириной.Количество() > 0 Тогда
			
			Для каждого Строка Из МассивСтрокСНулевойШириной Цикл
				
				Текст = "Обнаружена деталь с шириной, равной 0, номер строки " + Строка.НомерСтроки;
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , Текст,);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Ошибки <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
			Возврат Неопределено;
			
		КонецЕсли;
		НомерНаряда = "";
		Если не НарядЗадание Тогда
			НомерНаряда = Документы.Спецификация.ПолучитьНарядЗадание(ДокОбъект);
		КонецЕсли;
		
		СтрокаКривогоПила = ФормированиеСтрокиКривогоПила(СписокДеталей, ДокОбъект.Номер, НомерНаряда);
		СтрокаКривогоПилаФРС = СтрокаКривогоПила.ФРС;
		СтрокаКривогоПилаСтеколка = СтрокаКривогоПила.Стеколка;
		
		СписокДеталей.Колонки.Удалить("СтрокаДляФлэш");
		СписокДеталей.Колонки.Удалить("КоличествоКривыхДеталей");
		
	КонецЕсли;
	
	Если СписокДеталей.Колонки.Найти("ИспользуетсяВОстаткахПакета") = Неопределено Тогда
		
		СписокДеталей.Колонки.Добавить("ИспользуетсяВОстаткахПакета", Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
	Если СписокДеталей.Колонки.Найти("ПоследнийЛист") = Неопределено Тогда
		
		СписокДеталей.Колонки.Добавить("ПоследнийЛист", Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
	Если СписокДеталей.Колонки.Найти("ВсегоЛистов") = Неопределено Тогда
		
		СписокДеталей.Колонки.Добавить("ВсегоЛистов", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Если СписокДеталей.Колонки.Найти("СборныйРамочныйФасад") = Неопределено Тогда
		
		СписокДеталей.Колонки.Добавить("СборныйРамочныйФасад", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;

	Если СписокДеталей.Колонки.Найти("Дилерский") = Неопределено Тогда
		
		СписокДеталей.Колонки.Добавить("Дилерский", Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
	НачалоФормирования = ?(ЗамерятьВремя, ТекущаяУниверсальнаяДатаВМиллисекундах(), 0);
	
	Если Наряды Тогда
		НарядЗадание = Истина;
	КонецЕсли;
	
	Структура = РасположитьНаЛистахМетодомРанца(ДокОбъект, СписокДеталей, НарядЗадание, МассивБуквеннойНумерации);
	КонецФормирования = ?(ЗамерятьВремя, ТекущаяУниверсальнаяДатаВМиллисекундах(), 0);
	ВремяФормирования = (КонецФормирования - НачалоФормирования) / 1000;
	СтрокаРаскрой = ПолучитьСтрокуДляФлэшИзДерева(Структура.Дерево, ДокОбъект, НарядЗадание, МассивБуквеннойНумерации, ПоказатьВесьСписокДеталей, СписокДеталей);
	
	Структура.Вставить("ДанныеДляРаскроя", СтрокаРаскрой);
	
	Структура.Вставить("СтрокаКривогоПилаФРС", СтрокаКривогоПилаФРС);
	Структура.Вставить("СтрокаКривогоПилаСтеколка", СтрокаКривогоПилаСтеколка);
	
	Структура.Вставить("ВремяФормирования", ВремяФормирования);
	
	// { Васильев Александр Леонидович [26.05.2015]
	// Интересный путь начинается. :)
	//ТестДЛЛ = РаскройСервер.СформироватьКартинку(Структура.Дерево, СсылкаДокумента);
	// } Васильев Александр Леонидович [26.05.2015]
	
	Возврат Структура;
	
	//КонецЕсли;
	
КонецФункции

Функция СформироватьОшибкуПревышениеРазмера(Структура, СтрокаДеталь)
	
	ТекстОшибки = "Ошибка формирования раскроя на материал '%1'.%2Размеры детали (%3 х %4) превышают размеры листа (%5 х %6).";
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
	СтрокаДеталь.Номенклатура,
	Символы.ПС,
	СтрокаДеталь.ШиринаДетали,
	СтрокаДеталь.ВысотаДетали,
	СтрокаДеталь.ШиринаЛиста,
	СтрокаДеталь.ВысотаЛиста);
	Структура.Вставить("Ошибка", Истина);
	Структура.Вставить("ТекстОшибки", ТекстОшибки);
	
КонецФункции

#КонецОбласти

#Область Сбор_деталей

Функция СформироватьНаименованиеДетали(Деталь, Буква = "") Экспорт
	
	НаименованиеДетали = ?(ЗначениеЗаполнено(Деталь.НаименованиеДетали), Деталь.НаименованиеДетали, "");
	НаименованиеДетали = ?(Буква <> "", Буква + " " + НаименованиеДетали + " ", НаименованиеДетали);
	ДанныеДетали = Деталь.ВидДетали;
	
	СтруктураНадпись = Новый Структура;
	СтруктураНадпись.Вставить("НомерДетали");
	СтруктураНадпись.Вставить("НомерИзделия");
	СтруктураНадпись.Вставить("ЯщикДверьИдентификатор");
	СтруктураНадпись.Вставить("Пакет");
	СтруктураНадпись.Вставить("Постформинг");
	СтруктураНадпись.Вставить("Обтачивать");
	СтруктураНадпись.Вставить("Постформинг");
	СтруктураНадпись.Вставить("БезОбточки");
	СтруктураНадпись.Вставить("ФасадСкругленный");
	СтруктураНадпись.Вставить("Склейка");
	СтруктураНадпись.Вставить("НеТорцевать");
	СтруктураНадпись.Вставить("Пуфик");
	
	СтруктураНадпись.НомерДетали = Деталь.НомерСтроки;
	СтруктураНадпись.НомерИзделия = ?(ЗначениеЗаполнено(Деталь.НомерИзделия), "/" + Деталь.НомерИзделия, "");
	СтруктураНадпись.ЯщикДверьИдентификатор = ?(Деталь.ЭтоЯщик, " ящ", ?(Деталь.ЭтоДверь, " двр", ?(ЗначениеЗаполнено(Деталь.Идентификатор), "/" + Деталь.Идентификатор, "")));
	СтруктураНадпись.Пакет = ?(Деталь.ДетальВПакете И Деталь.ОсобыйПорядок = "Фасад", " (пак" + Деталь.НомерИзделия + ")", "");
	
	СтруктураНадпись.Постформинг = ?(Деталь.Постформинг И ДанныеДетали.ЭтоСтолешница, "Пформ", "");
	СтруктураНадпись.Обтачивать = ?(Деталь.Обтачивать И ДанныеДетали.ЭтоСтекло, "Обтч ", "");
	СтруктураНадпись.БезОбточки = ?(НЕ Деталь.Обтачивать И ДанныеДетали.ЭтоСтекло, "Без обтч ", "");
	СтруктураНадпись.ФасадСкругленный = ?(ДанныеДетали.ЭтоСтекло И ДанныеДетали.ЭтоФасад И Деталь.РадиусФасада <> "", "Скруг " + Деталь.РадиусФасада, "");
	СтруктураНадпись.Склейка = ?(Деталь.ДетальДляСклеивания, "скл", "");
	СтруктураНадпись.НеТорцевать = ?(Деталь.НеТорцевать, "НЕ ТОРЦЕВАТЬ ПО ДЛИНЕ", "");
	СтруктураНадпись.Пуфик = ?(Деталь.ЭтоПуфик, "пуф", "");
	
	Для каждого Свойство Из СтруктураНадпись Цикл
		
		Если Свойство.Значение <> "" Тогда
			НаименованиеДетали = НаименованиеДетали + Свойство.Значение + " ";
		КонецЕсли;	
			
	КонецЦикла;
	
	НаименованиеДетали = СокрЛП(НаименованиеДетали);
	
	Возврат НаименованиеДетали;
	
КонецФункции

Функция ФормированиеСпискаДеталей(фнДокОбъект, Дилерский = Ложь, Буква = "", НарядЗадание = Ложь)
	
	Ошибки = Неопределено;
	Отказ = Ложь;
	
	// { Васильев Александр Леонидович [09.08.2015]
	// Подозрительные колонки:
	// 1. Идентификатор
	// 2. РасположениеПазовИРучкиНаФасадах
	// 3 ОсобыйПорядок
	// 4. ИД ИЛИ GUID
	// 5. Порядок или ПорядокПечати
	// } Васильев Александр Леонидович [09.08.2015]
	
	тзДетали = фнДокОбъект.СписокДеталей.Выгрузить(,
	"НомерСтроки,
	|ВидДетали,
	|Номенклатура,
	|ВысотаДетали,
	|ШиринаДетали,
	|Количество,
	|Идентификатор,
	|НоменклатураДляСклеивания,
	|НомерИзделия,
	|НеТорцевать,
	|СтруктураОтверстий,
	|Комментарий,
	//|РасположениеПазов,
	|РадиусЛевоВерх,
	|РадиусЛевоНиз,
	|РадиусПравоВерх,
	|РадиусПравоНиз,
	|КривойПилСверху,
	|КривойПилСлева,
	|КривойПилСнизу,
	|КривойПилСправа,
	|СтрокаДляФлэш,
	|ВыборМебельнойКромкиСверху,
	|ВыборМебельнойКромкиСлева,
	|ВыборМебельнойКромкиСнизу,
	|ВыборМебельнойКромкиСправа,
	|КромкаДляСборнойРамки,
	|ШиринаСборнойРамки,
	|Срез,
	|КоличествоПетель,
	|ПереключательКромкаСверху,
	|ПереключательКромкаСлева,
	|ПереключательКромкаСнизу,
	|ПереключательКромкаСправа,
	|РасположениеПазовИРучкиНаФасадах,
	|Обтачивать, Постформинг, РадиусФасада");
	тзДетали.Колонки.Добавить("ШиринаЛиста", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ВысотаЛиста", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("МожноПовернуть", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("НомерЛиста", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("КоординатаХ", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("КоординатаУ", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ПоворотДетали", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ОсобыйПорядок", Новый ОписаниеТипов("Строка"));
	тзДетали.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ЭтоЯщик", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ИспользуетсяВОстаткахПакета", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ПоследнийЛист", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ВсегоЛистов", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ЭтоДверь", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ДетальДляСклеивания", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ИД", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("GUID", Новый ОписаниеТипов("Строка"));
	тзДетали.Колонки.Добавить("Буфер", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("Дилерский", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("Кромка1", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзДетали.Колонки.Добавить("Кромка2", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзДетали.Колонки.Добавить("Кромка3", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзДетали.Колонки.Добавить("Кромка4", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзДетали.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число"));
	//тзДетали.Колонки.Добавить("НомерПакетаРамок", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("СборныйРамочныйФасад", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ПакетДеталей", Новый ОписаниеТипов("Массив"));
	тзДетали.Колонки.Добавить("ДетальВПакете", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ПорядокПечати", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ДетальРазмещена", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("СоблюдениеТекстуры", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("НаименованиеДетали", Новый ОписаниеТипов("Строка"));
	тзДетали.Колонки.Добавить("КоличествоКривыхДеталей", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ЭтоПуфик", Новый ОписаниеТипов("Булево"));
	
	#Область Ящики
	
	СписокЯщиков = фнДокОбъект.СписокЯщики;
	
	ТаблицаДеталиЯщиков = Документы.Спецификация.РазложитьЯщикиНаДетали(фнДокОбъект);
	
	Для Каждого ДетальЯщика Из ТаблицаДеталиЯщиков Цикл
		
		НоваяДеталь = тзДетали.Добавить();
		НоваяДеталь.ЭтоЯщик = Истина;
		НоваяДеталь.Номенклатура = ДетальЯщика.Номенклатура;
		НоваяДеталь.НомерИзделия = ДетальЯщика.НомерИзделия;
		НоваяДеталь.НомерСтроки = ДетальЯщика.НомерСтроки;
		НоваяДеталь.ВысотаДетали = ДетальЯщика.ВысотаДетали;
		НоваяДеталь.ШиринаДетали = ДетальЯщика.ШиринаДетали;
		НоваяДеталь.Количество = ДетальЯщика.Количество;
		НоваяДеталь.ВыборМебельнойКромкиСверху = ДетальЯщика.ВыборМебельнойКромкиСверху;
		НоваяДеталь.ВыборМебельнойКромкиСнизу = ДетальЯщика.ВыборМебельнойКромкиСнизу;
		НоваяДеталь.ВыборМебельнойКромкиСлева = ДетальЯщика.ВыборМебельнойКромкиСлева;
		НоваяДеталь.ВыборМебельнойКромкиСправа = ДетальЯщика.ВыборМебельнойКромкиСправа;
		НоваяДеталь.СтруктураОтверстий = ДетальЯщика.СтруктураОтверстий;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область Двери
	
	СписокДверей = фнДокОбъект.СписокДверей;
	
	Для Каждого Элемент Из СписокДверей Цикл
		
		СписокНоменклатурыДверей = Элемент.Двери.СписокНоменклатуры;
		Для Каждого Строка Из СписокНоменклатурыДверей Цикл
			
			Если ЗначениеЗаполнено(Строка.Длина)
				И ЗначениеЗаполнено(Строка.Ширина)
				И (Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал) Тогда
				
				НоваяСтрока = тзДетали.Добавить();
				НоваяСтрока.Номенклатура = Строка.Номенклатура;
				НоваяСтрока.ВысотаДетали = Строка.Длина;
				НоваяСтрока.ШиринаДетали = Строка.Ширина;
				НоваяСтрока.Количество = Строка.Количество;
				НоваяСтрока.НомерСтроки = Строка.НомерСтроки;
				НоваяСтрока.ЭтоДверь = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	ИД = 1;
	
	Для каждого Деталь Из тзДетали Цикл
		
		ДанныеДетали = Деталь.ВидДетали;
		
		Деталь.ИД = ИД;
		Деталь.Порядок = 100;
		
		Номенклатура = Деталь.Номенклатура;
		СвойстваНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "НаличиеТекстуры");
		
		// Проставление размеров листа.
		СтруктураРазмеровЛиста = ЛексСервер.ПолучитьРазмерыЛиста(Номенклатура, фнДокОбъект.Подразделение);
		Деталь.ВысотаЛиста = СтруктураРазмеровЛиста.ВысотаЛиста;
		Деталь.ШиринаЛиста = СтруктураРазмеровЛиста.ШиринаЛиста;
		
		//РазмерыЛиста = ПолучитьРазмерыЛиста(Номенклатура, фнДокОбъект.Подразделение);
		//ЗаполнитьЗначенияСвойств(Деталь, РазмерыЛиста);
		
		// Заполнение флага МожноПовернуть и разворот деталей вертикально.
		Деталь.СоблюдениеТекстуры = СвойстваНоменклатуры.НаличиеТекстуры; // Можно уйти от этого реквизита.
		
		Если НЕ Деталь.СоблюдениеТекстуры и НЕ Деталь.СборныйРамочныйФасад Тогда
			
			Если (Деталь.ВысотаДетали <= Деталь.ШиринаЛиста
				И Деталь.ВысотаДетали <= Деталь.ВысотаЛиста
				И Деталь.ШиринаДетали <= Деталь.ШиринаЛиста
				И Деталь.ШиринаДетали <= Деталь.ВысотаЛиста И не ДанныеДетали.Клееная) или 
				(ДанныеДетали.Клееная и Деталь.ВысотаДетали  + ДанныеДетали.ПрипускСклейка <= Деталь.ШиринаЛиста
				И Деталь.ВысотаДетали  + ДанныеДетали.ПрипускСклейка <= Деталь.ВысотаЛиста
				И Деталь.ШиринаДетали  + ДанныеДетали.ПрипускСклейка <= Деталь.ШиринаЛиста
				И Деталь.ШиринаДетали  + ДанныеДетали.ПрипускСклейка <= Деталь.ВысотаЛиста) Тогда
				
				Деталь.МожноПовернуть = Истина;
				
			КонецЕсли;
			
			Если Деталь.МожноПовернуть И
				Деталь.ШиринаДетали > Деталь.ВысотаДетали Тогда
				ПовернутьДеталь(Деталь);
			КонецЕсли;
			
			// Детали с размерами больше листа по одной из сторон
			// можно использовать только повёрнутые.
			// Могут попасть из дверей.
			Если Деталь.ШиринаДетали > Деталь.ШиринаЛиста
				ИЛИ Деталь.ВысотаДетали > Деталь.ВысотаЛиста Тогда
				ПовернутьДеталь(Деталь);
				Деталь.МожноПовернуть = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Порядок печати.
		НоменклатурнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "НоменклатурнаяГруппа");
		ПорядокПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатурнаяГруппа, "ПорядокПечатиВРаскрое");
		Деталь.ПорядокПечати = ПорядокПечати;
		
		// Разбиваем клееные детали и пуфики.
		
		Если ДанныеДетали.Клееная Тогда
			
			Деталь.ВысотаДетали = Деталь.ВысотаДетали + ДанныеДетали.ПрипускСклейка;
			Деталь.ШиринаДетали = Деталь.ШиринаДетали + ДанныеДетали.ПрипускСклейка;
			Деталь.ДетальДляСклеивания = Истина;
			Деталь.НаименованиеДетали = "Верх ";
			Деталь.ВидДетали = Справочники.ВидыДеталей.ПустаяСсылка();
			
			НоваяСтрока = тзДетали.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
			НоваяСтрока.Номенклатура = Деталь.НоменклатураДляСклеивания;
			НоваяСтрока.НаименованиеДетали = "Низ ";
			НоваяСтрока.ВидДетали = Справочники.ВидыДеталей.ПустаяСсылка();
			
		ИначеЕсли ДанныеДетали.ЭтоПуфик Тогда
			
			РазмерыДетали = ПолучитьРазмерыДетали(Деталь);

			Деталь.ВысотаДетали = РазмерыДетали.ВысотаТекстура;
			Деталь.ШиринаДетали = РазмерыДетали.ШиринаТекстура;
			Деталь.ВидДетали = Справочники.ВидыДеталей.ПустаяСсылка();
			Деталь.ЭтоПуфик = Истина;
			
			НоваяСтрока = тзДетали.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
			НоваяСтрока.Номенклатура = Деталь.НоменклатураДляСклеивания;
			НоваяСтрока.ВысотаДетали = РазмерыДетали.ВысотаДопНоменклатура;
			НоваяСтрока.ШиринаДетали = РазмерыДетали.ШиринаДопНоменклатура;
			НоваяСтрока.ВидДетали = Справочники.ВидыДеталей.ПустаяСсылка();
			НоваяСтрока.ЭтоПуфик = Истина;
			
		КонецЕсли;
		КоличествоКривыхДеталей = 1;
		СборныйРамочныйФасад = ЗначениеЗаполнено(Деталь.КромкаДляСборнойРамки);
		// Разбиваем детали на отдельные строки. 
		НомерФасада = 0;
		
		Если СборныйРамочныйФасад и НЕ Деталь.СборныйРамочныйФасад Тогда
			
			Для ы = 1 По Деталь.Количество Цикл
				
				Если ы > 1 Тогда
					
					ИД = ИД + 1;
					НоваяСтрока = тзДетали.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
					//НоваяСтрока.ВысотаДетали = Деталь.ВысотаДетали + Деталь.ВыборМебельнойКромкиСверху.ГлубинаДетали * 2 - Деталь.ШиринаСборнойРамки * 2 + 20;
					//НоваяСтрока.ШиринаДетали = Деталь.ШиринаДетали + Деталь.ВыборМебельнойКромкиСверху.ГлубинаДетали * 2 - Деталь.ШиринаСборнойРамки * 2 + 20;
					НоваяСтрока.ВыборМебельнойКромкиСверху = Неопределено;
					НоваяСтрока.ВыборМебельнойКромкиСнизу = Неопределено;
					НоваяСтрока.ВыборМебельнойКромкиСлева = Неопределено;
					НоваяСтрока.ВыборМебельнойКромкиСправа = Неопределено;
					НоваяСтрока.СборныйРамочныйФасад = Истина;
					НоваяСтрока.Количество = 1;
					НоваяСтрока.СтрокаДляФлэш = "";
					НоваяСтрока.ИД = ИД;
					
				КонецЕсли;
				
				НомерФасада = НомерФасада + 1;
				
				Для з=1 По 2 Цикл
					
					ИД = ИД + 1;
					НоваяСтрока = тзДетали.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
					НоваяСтрока.Номенклатура = Деталь.ВыборМебельнойКромкиСправа;
					НоваяСтрока.СоблюдениеТекстуры = НоваяСтрока.Номенклатура.НаличиеТекстуры;
					НоваяСтрока.ВысотаДетали = Деталь.ВысотаДетали + 50 + Деталь.ВыборМебельнойКромкиСверху.ГлубинаДетали * 2;
					НоваяСтрока.ШиринаДетали = Деталь.ШиринаСборнойРамки;
					НоваяСтрока.СборныйРамочныйФасад = Истина;
					НоваяСтрока.ВыборМебельнойКромкиСверху = Деталь.КромкаДляСборнойРамки;
					НоваяСтрока.ВыборМебельнойКромкиСнизу = Деталь.КромкаДляСборнойРамки;
					НоваяСтрока.ВыборМебельнойКромкиСлева = Деталь.КромкаДляСборнойРамки;
					НоваяСтрока.ВыборМебельнойКромкиСправа = Деталь.КромкаДляСборнойРамки;
					НоваяСтрока.КромкаДляСборнойРамки= Справочники.Номенклатура.ПустаяСсылка();
					НоваяСтрока.Количество = 1;
					НоваяСтрока.СтрокаДляФлэш = "";
					НоваяСтрока.ИД = ИД;
					//НоваяСтрока.НомерПакетаРамок = НомерФасада;
					
					ИД = ИД + 1;
					НоваяСтрока = тзДетали.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
					НоваяСтрока.Номенклатура = Деталь.ВыборМебельнойКромкиСправа;
					НоваяСтрока.СоблюдениеТекстуры = НоваяСтрока.Номенклатура.НаличиеТекстуры;
					НоваяСтрока.ВысотаДетали = Деталь.ШиринаДетали + 50 + Деталь.ВыборМебельнойКромкиСверху.ГлубинаДетали * 2;
					НоваяСтрока.ШиринаДетали = Деталь.ШиринаСборнойРамки;
					НоваяСтрока.СборныйРамочныйФасад = Истина;
					НоваяСтрока.ВыборМебельнойКромкиСверху = Деталь.КромкаДляСборнойРамки;
					НоваяСтрока.ВыборМебельнойКромкиСнизу = Деталь.КромкаДляСборнойРамки;
					НоваяСтрока.ВыборМебельнойКромкиСлева = Деталь.КромкаДляСборнойРамки;
					НоваяСтрока.ВыборМебельнойКромкиСправа = Деталь.КромкаДляСборнойРамки;
					НоваяСтрока.КромкаДляСборнойРамки= Справочники.Номенклатура.ПустаяСсылка();
					НоваяСтрока.Количество = 1;
					НоваяСтрока.СтрокаДляФлэш = "";
					НоваяСтрока.ИД = ИД;
					//НоваяСтрока.НомерПакетаРамок = НомерФасада;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Деталь.ВыборМебельнойКромкиСверху = Неопределено;
			Деталь.ВыборМебельнойКромкиСнизу = Неопределено;
			Деталь.ВыборМебельнойКромкиСлева = Неопределено;
			Деталь.ВыборМебельнойКромкиСправа = Неопределено;
			НоваяСтрока.СборныйРамочныйФасад = Истина;
			Деталь.Количество = 1;
			
		КонецЕсли;
		
		Если Деталь.Количество > 1 Тогда
			
			Для ы = 2 По Деталь.Количество Цикл
				ИД = ИД + 1;
				НоваяСтрока = тзДетали.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
				НоваяСтрока.Количество = 1;
				НоваяСтрока.СтрокаДляФлэш = "";
				НоваяСтрока.ИД = ИД; // Раньше тут был 0, для чего не знаю.
			КонецЦикла;
			
			КоличествоКривыхДеталей = Деталь.Количество;
			Деталь.Количество = 1;
			
		КонецЕсли;
		
		Деталь.КоличествоКривыхДеталей = ?(ЗначениеЗаполнено(Деталь.СтрокаДляФлэш), КоличествоКривыхДеталей, 0);
		
		// УзкоДлинные оставлен для совместимости со старым раскроем
		Если (Деталь.ШиринаЛиста < Деталь.ВысотаДетали
			ИЛИ Деталь.ВысотаЛиста / 2 < Деталь.ВысотаДетали)
			И Деталь.ШиринаДетали <= 201
			И НЕ ДанныеДетали.ЭтоПристенок
			И НЕ ДанныеДетали.ЭтоСтолешница Тогда
			
			Деталь.Порядок = 1;
			Деталь.ОсобыйПорядок = "УзкоДлинные";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Деталь.СтруктураОтверстий) Тогда
		
			СписокОтверстий = ЗначениеИзСтрокиВнутр(Деталь.СтруктураОтверстий);
			
			Для каждого Строка Из СписокОтверстий Цикл
			
				Если Строка.ВидОтверстий = Перечисления.ВидыОтверстий.Европаз Тогда
				
					Деталь.НаименованиеДетали = Деталь.НаименованиеДетали + " евр" + Строка.Количество + " ";
				
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
		Надпись = СформироватьНаименованиеДетали(Деталь, Буква);
		Деталь.НаименованиеДетали = Надпись;
		
		СтруктураРазмеровЛиста = ЛексСервер.ПолучитьРазмерыЛиста(Деталь.Номенклатура, фнДокОбъект.Подразделение);
		ВысотаЛиста = СтруктураРазмеровЛиста.ВысотаЛиста;
		ШиринаЛиста = СтруктураРазмеровЛиста.ШиринаЛиста;
		
		Если Деталь.ШиринаДетали > ШиринаЛиста
			ИЛИ Деталь.ВысотаДетали > ВысотаЛиста Тогда
			
		ТекстОшибки = "Ошибка формирования раскроя на материал '%1'.%2Размеры детали (%3 х %4) превышают размеры листа (%5 х %6).";
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
		Деталь.Номенклатура,
		Символы.ПС,
		Деталь.ШиринаДетали,
		Деталь.ВысотаДетали,
		ШиринаЛиста,
		ВысотаЛиста);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,, ТекстОшибки);
		
		КонецЕсли;
	
		ИД = ИД + 1;
		
	КонецЦикла; // Деталь Из тзДетали
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	Если Отказ Тогда
		
		ВызватьИсключение "Раскрой не сформирован";
		
	КонецЕсли;
	
	тзДетали.Колонки.Удалить("СоблюдениеТекстуры");
	
	тзДетали.Колонки.Удалить("ЭтоДверь");
	тзДетали.Колонки.Удалить("ЭтоЯщик");
	тзДетали.Колонки.Удалить("ПереключательКромкаСправа");
	тзДетали.Колонки.Удалить("ПереключательКромкаСлева");
	тзДетали.Колонки.Удалить("ПереключательКромкаСверху");
	тзДетали.Колонки.Удалить("ПереключательКромкаСнизу");
	
	ТаблицаИспользуемойНоменклатуры = тзДетали.Скопировать(,"Номенклатура");
	ТаблицаИспользуемойНоменклатуры.Свернуть("Номенклатура");
		
	Если НарядЗадание Тогда
			
		Для каждого Строка Из ТаблицаИспользуемойНоменклатуры Цикл
			
			Если Строка.Номенклатура.Неноменклатурный Тогда
				МассивУдаляемыхСтрок = тзДетали.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
				Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
					тзДетали.Удалить(УдаляемаяСтрока);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		//буфер
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТЗ", ТаблицаИспользуемойНоменклатуры);
		Запрос.УстановитьПараметр("Подразделение", фнДокОбъект.Подразделение);
		Запрос.УстановитьПараметр("ДатаОтбора", фнДокОбъект.Дата);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СписокМатериалов.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
		|ПОМЕСТИТЬ СписокМатериалов
		|ИЗ
		|	&ТЗ КАК СписокМатериалов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокМатериалов.Номенклатура,
		|	НоменклатураПодразделенийСрезПоследних.ОкруглятьДоЛистов
		|ИЗ
		|	СписокМатериалов КАК СписокМатериалов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений.СрезПоследних(&ДатаОтбора, Подразделение = &Подразделение) КАК НоменклатураПодразделенийСрезПоследних
		|		ПО СписокМатериалов.Номенклатура = НоменклатураПодразделенийСрезПоследних.Номенклатура
		|ГДЕ
		|	НоменклатураПодразделенийСрезПоследних.ОкруглятьДоЛистов";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивСтрокДляБуфера = тзДетали.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
			Для каждого ИзменяемаяСтрока Из МассивСтрокДляБуфера Цикл
				ИзменяемаяСтрока.Буфер = Истина;
				Если Дилерский Тогда
					ИзменяемаяСтрока.Дилерский = Истина;
				КонецЕсли;
			КонецЦикла
			
			
		КонецЦикла;  //буфер
	
	КонецЕсли;	
	
	//Для каждого Строка Из фнДокОбъект.СписокМатериаловПодЗаказ Цикл
	//		МассивСтрокДляБуфера = тзДетали.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
	//		Для каждого ИзменяемаяСтрока Из МассивСтрокДляБуфера Цикл
	//			ИзменяемаяСтрока.Буфер = Истина;
	//		КонецЦикла;
	//КонецЦикла;
	//
	//Для каждого Строка Из фнДокОбъект.СписокМатериаловЗаказчика Цикл
	//		МассивСтрокДляБуфера = тзДетали.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
	//		Для каждого ИзменяемаяСтрока Из МассивСтрокДляБуфера Цикл
	//			ИзменяемаяСтрока.Буфер = Истина;
	//		КонецЦикла;
	//КонецЦикла;
	
	Возврат тзДетали;
	
КонецФункции // ФормированиеСпискаДеталей()

// Меняет высоту и ширину детали, проставляет флаг ПоворотДетали
//
// Параметры
//  Деталь  - Строка таблицы значений - Обязательные свойства ВысотаДетали, ШиринаДетали, ПоворотДетали
//
// Возвращаемое значение:
//   Нет   - 
//
Функция ПовернутьДеталь(фнДеталь)
	
	ъ = фнДеталь.ШиринаДетали; // Знаю что можно без третьей переменной, но так наглядней.
	фнДеталь.ШиринаДетали = фнДеталь.ВысотаДетали;
	фнДеталь.ВысотаДетали = ъ;
	фнДеталь.ПоворотДетали = Истина;
	
КонецФункции

// Получает размеры листа номенклатуры для заданного подразделения
//
// Параметры
//  фнНоменклатура  - СправочникСсылка.Номенклатура - Для какой номенклатуры получаем размеры листа
//  фнПодразделение  - СправочникСсылка.Подразделение - Размеры листа на котором подразделении
//
// Возвращаемое значение:
//   Структура   - ШиринаЛиста, ВысотаЛиста
//
Функция ПолучитьРазмерыЛиста(фнНоменклатура, фнПодразделение)
	
	// { Васильев Александр Леонидович [09.08.2015]
	//Номенклатура = ПолучитьОсновнуюПоСкладу(фнНоменклатура, фнПодразделение);
	// Пока не включаем.
	// } Васильев Александр Леонидович [09.08.2015]
	
	Номенклатура = фнНоменклатура;
	СвойстваНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ШиринаДетали, ДлинаДетали");
	
	Результат = Новый Структура;
	Результат.Вставить("ШиринаЛиста", СвойстваНоменклатуры.ШиринаДетали);
	Результат.Вставить("ВысотаЛиста", СвойстваНоменклатуры.ДлинаДетали);
	
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на основную номенклатуру подразделения
//
// Параметры
//  фнНоменклатура  - СправочникСсылка.Номенклатура - Для какой номенклатуры получаем основную
//  фнПодразделение  - СправочникСсылка.Подразделение - Размеры листа на котором подразделении
//
// Возвращаемое значение:
//   СправочникСсылка.Номенклатура   - Основная по складу номенклатура установленная для подразделения
//
Функция ПолучитьОсновнуюПоСкладу(фнНоменклатура, фнПодразделение)
	
	Результат = фнНоменклатура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", фнНоменклатура);
	Запрос.УстановитьПараметр("Подразделение", фнПодразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураПодразделений.ОсновнаяПоСкладу
	|ИЗ
	|	РегистрСведений.НоменклатураПодразделений.СрезПоследних(,Подразделение = &Подразделение) КАК НоменклатураПодразделений
	|ГДЕ
	|	НоменклатураПодразделений.Номенклатура = &Номенклатура
	|	И НоменклатураПодразделений.ОсновнаяПоСкладу <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.ОсновнаяПоСкладу;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Формирование_раскроя

Процедура ДобавитьНовыйЛист(Знач СписокДеталейНоменклатуры, Знач НомерЛиста, Знач Номенклатура, Знач ВысотаЛиста, Знач ШиринаЛиста, Знач Остатки)
	
	Перем НоваяСтрока;
	
	НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.НомерЛиста = НомерЛиста;
	НоваяСтрока.ВысотаДетали = ВысотаЛиста;
	НоваяСтрока.ШиринаДетали = ШиринаЛиста;
	НоваяСтрока.ВысотаЛиста = ВысотаЛиста;
	НоваяСтрока.ШиринаЛиста = ШиринаЛиста;
	НоваяСтрока.КоординатаУ = 0;
	НоваяСтрока.КоординатаХ = 0;
	
	НоваяСтрока.GUID = Новый УникальныйИдентификатор;
	
	НоваяСтрока.Остаток = Истина;
	
	Если Остатки <> Неопределено Тогда
		
		Если ТипЗнч(Остатки) = Тип("ТаблицаЗначений") Тогда
			
			СтрокаОстатков = Остатки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОстатков, НоваяСтрока);
			
		ИначеЕсли ТипЗнч(Остатки) = Тип("Массив") Тогда
			
			Остатки.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОптимизацияОстатков(СписокДеталейНоменклатуры, НомерЛиста, КонечныйНомерЛиста, ТолщинаПила, ПределыОстатков, НоменклатурнаяГруппа, НадписьНаОстатке, ЕстьШаг = Ложь, МассивБуквеннойНумерации)
	
	ПлощадьОстатковПоНоменклатуре = 0;
	ПлощадьОбрезковПоНоменклатуре = 0;
	СписокДеталейНоменклатуры.Сортировать("НомерЛиста, КоординатаУ Убыв, КоординатаХ Убыв");
	
	Для ТекущийНомерЛиста = КонечныйНомерЛиста + 1 По НомерЛиста Цикл
		
		КоличествоОстатков = 0;
		ПлощадьОстатков = 0;
		ПлощадьОбрезков = 0;
		СреднийОстаток = 0;
		КоличествоОстатков2 = 1;
		ПлощадьОстатков2 = 0;
		СреднийОстаток2 = 0;
		
		ВсеДеталиДилеров = Ложь;
		Если СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток, НомерЛиста, Дилерский", Ложь, ТекущийНомерЛиста, Ложь)).Количество() = 0 Тогда
			      ВсеДеталиДилеров = Истина;
		КонецЕсли;
		
		МассивДеталейКонтрагентов =  СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток, НомерЛиста", Ложь, ТекущийНомерЛиста));
		ТаблицаДеталейКонтрагентов =  СписокДеталейНоменклатуры.Скопировать(МассивДеталейКонтрагентов, "НаименованиеДетали, Дилерский");
		СтруктураПроверкиДеталей =  ПроверкаДеталейКонтрагентов(ТаблицаДеталейКонтрагентов, МассивБуквеннойНумерации);
		
		Если НадписьНаОстатке = "Буфер" И ВсеДеталиДилеров И СтруктураПроверкиДеталей.Свойство("ДополнениеНазванияОстатка")  Тогда
				ДополнениеНазванияОстатка = СтруктураПроверкиДеталей.ДополнениеНазванияОстатка;
		Иначе
				ДополнениеНазванияОстатка = "";
		КонецЕсли;
		
		МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток, НомерЛиста", Истина, ТекущийНомерЛиста));
		
		Если МассивОстатков.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//_____1_____
		Для Каждого ЭлементМассиваОстатков Из МассивОстатков Цикл
			
			Если ПолезныйОстаток(ПределыОстатков, ЭлементМассиваОстатков.ВысотаДетали, ЭлементМассиваОстатков.ШиринаДетали) Тогда
				
				ПлощадьОстатков = ПлощадьОстатков + (ЭлементМассиваОстатков.ВысотаДетали * ЭлементМассиваОстатков.ШиринаДетали);
				КоличествоОстатков = КоличествоОстатков + 1;
				ЭлементМассиваОстатков.НаименованиеДетали = НадписьНаОстатке + ДополнениеНазванияОстатка;
				
			Иначе
				
				ПлощадьОбрезков = ПлощадьОбрезков + (ЭлементМассиваОстатков.ВысотаДетали * ЭлементМассиваОстатков.ШиринаДетали);
				
			КонецЕсли;
			
			
		КонецЦикла;
		
		СреднийОстаток = ?(КоличествоОстатков > 0, ПлощадьОстатков / КоличествоОстатков, 0);
		
		//_____ИтоговыеОстатки_____
		Если СреднийОстаток < СреднийОстаток2 Тогда
			
			//применяем 2-ой алгоритм
			МассивОстатков[0].ШиринаДетали = МассивОстатков[0].ШиринаЛиста;
			МассивОстатков[0].КоординатаХ = 0;
			ПлощадьОстатковПоНоменклатуре = ПлощадьОстатковПоНоменклатуре + ПлощадьОстатков2;
			
		Иначе
			
			ПлощадьОстатковПоНоменклатуре = ПлощадьОстатковПоНоменклатуре + ПлощадьОстатков;
			
		КонецЕсли;
		ПлощадьОбрезковПоНоменклатуре = ПлощадьОбрезковПоНоменклатуре + ПлощадьОбрезков;
		
		//применение оптимального алгоритма
		МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток, НомерЛиста", Истина, ТекущийНомерЛиста));
		Для Каждого ЭлементМассиваОстатков Из МассивОстатков Цикл
			
			//удаление маленьких остатков
			Если НЕ ПолезныйОстаток(ПределыОстатков, ЭлементМассиваОстатков.ВысотаДетали, ЭлементМассиваОстатков.ШиринаДетали)
				Или ЭлементМассиваОстатков.ВысотаДетали <= 0 или ЭлементМассиваОстатков.ШиринаДетали <= 0 Тогда
				
				СписокДеталейНоменклатуры.Удалить(ЭлементМассиваОстатков);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("ПлощадьОстатковПоНоменклатуре", ПлощадьОстатковПоНоменклатуре);
	Структура.Вставить("ПлощадьОбрезковПоНоменклатуре", ПлощадьОбрезковПоНоменклатуре);
	Структура.Вставить("СписокДеталейНоменклатуры", СписокДеталейНоменклатуры);
	
	Возврат Структура;
	
КонецФункции

Функция РазместитьБыстрымАлгоритмом(СписокДеталейНоменклатуры, ТаблицаРазвернутыхДеталей, ТолщинаПила, ПоперечныйПил, ВысотаЛиста, ШиринаЛиста, Номенклатура, НомерЛиста, Знач МассивКусков)
	
	///////////////
	СписокДеталейРазмещенныхНаОстатках = СписокДеталейНоменклатуры.СкопироватьКолонки();
		
	Для каждого Остаток Из МассивКусков Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДетальВПакете", Ложь);
		МассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Отбор);
		ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать(МассивВсехДеталей);
		
		Если ПоперечныйПил Тогда
			ТаблицаДеталей = АлгоритмОРанце(ТаблицаВсехДеталей, Остаток.ШиринаОстатка, Остаток.ВысотаОстатка, ТолщинаПила, Номенклатура, 0, 0, ,Истина);
		Иначе
			ТаблицаДеталей = АлгоритмОРанце(ТаблицаВсехДеталей, Остаток.ВысотаОстатка, Остаток.ШиринаОстатка, ТолщинаПила, Номенклатура, 0, 0, ,Истина);
		КонецЕсли;
		
		Если ТаблицаДеталей.Количество() > 0 Тогда
			
			Если ПоперечныйПил Тогда
				КоординатаУ = 0;
			Иначе
				КоординатаХ = 0;
			КонецЕсли;
			
			Для Каждого Таблица Из ТаблицаДеталей Цикл
				
				Если ПоперечныйПил Тогда
					КоординатаХ = 0;
				Иначе
					КоординатаУ = 0;
				КонецЕсли;
				
				Для каждого Деталь Из Таблица.Пакет Цикл
					
					НоваяСтрока = СписокДеталейРазмещенныхНаОстатках.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
					Если ПоперечныйПил Тогда
						ВысотаДеталиОбрезка = Деталь.ВысотаДетали;
						НоваяСтрока.ВысотаДетали = Деталь.ШиринаДетали;
						НоваяСтрока.ШиринаДетали = ВысотаДеталиОбрезка;
					КонецЕсли;
					НоваяСтрока.КоординатаУ = КоординатаУ;
					НоваяСтрока.КоординатаХ = КоординатаХ;
					НоваяСтрока.ВысотаЛиста = Остаток.ВысотаОстатка;
					НоваяСтрока.ШиринаЛиста = Остаток.ШиринаОстатка;
					НоваяСтрока.ИД = Остаток.НомерСтроки;
					ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
					СписокДеталейНоменклатуры.Удалить(ИсправляемаяСтрока);
					Если ПоперечныйПил Тогда
						КоординатаХ = КоординатаХ + ТолщинаПила + Деталь.ВысотаДетали;
					Иначе
						КоординатаУ = КоординатаУ + ТолщинаПила + Деталь.ВысотаДетали;
					КонецЕсли;
					НоваяСтрока.ДетальВПакете = Истина;
					
				КонецЦикла;
				Если ПоперечныйПил Тогда
					КоординатаУ = КоординатаУ + ТолщинаПила + Таблица.ШиринаПакета;
				Иначе
					КоординатаХ = КоординатаХ + ТолщинаПила + Таблица.ШиринаПакета;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//////////////////
	//Заход из ФормированиеПакетаДляБольшогоКоличестваДеталей()
	//МассивКусков = отобранные из ОстаткиЛистовогоМатериала, т.е. если МассивКусков.Количество()>0 
	//если  заход из ФормированиеПакета()
	//то  МассивКусков = Новый Массив, т.е. всегда МассивКусков.Количество()=0
	
	Если МассивКусков.Количество() > 0 Тогда
		
		/////////////////////////размещение деталей в остатки////////////////
		РазмещалиОбрезки = Ложь;
		Если СписокДеталейРазмещенныхНаОстатках.Количество() > 0 Тогда
			РазмещалиОбрезки = Истина;
			СтараяКоордината = -1;
			//НомерОстатка = 1;
			НомерОстатка = -1;
			Для каждого ДетальВОстатках Из СписокДеталейРазмещенныхНаОстатках Цикл
				
				НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальВОстатках);
				РазмещаемаяДеталь = СписокДеталейНоменклатуры.Найти(ДетальВОстатках.GUID, "GUID");
				
				Если НомерОстатка <> ДетальВОстатках.ИД Тогда
					НомерЛиста = НомерЛиста + 1;
					НомерОстатка = ДетальВОстатках.ИД;
				КонецЕсли;
				
				РазмерПредыдущейДетали = 0;
				
				Если РазмерПредыдущейДетали = 0 Тогда
					
					РазмерПредыдущейДетали = ?(ПоперечныйПил, ДетальВОстатках.ВысотаДетали, ДетальВОстатках.ШиринаДетали);
					
				КонецЕсли;
				
				ДобавитьБольшойОстаток = СтараяКоордината <> ?(ПоперечныйПил, ДетальВОстатках.КоординатаУ, ДетальВОстатках.КоординатаХ);
				ИспользуетсяВОстатках = ДетальВОстатках.ИспользуетсяВОстаткахПакета;
				
				Если НЕ ПоперечныйПил Тогда
					
					ОстатокСлева = РазмерПредыдущейДетали - ДетальВОстатках.ШиринаДетали -ТолщинаПила;
					КоординатаХ = ДетальВОстатках.КоординатаХ;
					РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры, РазмещаемаяДеталь, ТолщинаПила, ДетальВОстатках.КоординатаУ, КоординатаХ, НомерЛиста, ДетальВОстатках.ВысотаЛиста, ДетальВОстатках.ШиринаЛиста, ДобавитьБольшойОстаток, ОстатокСлева, ИспользуетсяВОстатках); //ОстатокПоВысоте, ОстатокПоШирине,
					
				Иначе
					
					ОстатокСверху = РазмерПредыдущейДетали - ДетальВОстатках.ВысотаДетали -ТолщинаПила;
					КоординатаУ = ДетальВОстатках.КоординатаУ;
					РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры, РазмещаемаяДеталь, ТолщинаПила, КоординатаУ, ДетальВОстатках.КоординатаХ, НомерЛиста, ДетальВОстатках.ВысотаЛиста, ДетальВОстатках.ШиринаЛиста, ДобавитьБольшойОстаток, ОстатокСверху, ИспользуетсяВОстатках, ПоперечныйПил);
					
				КонецЕсли;
				
				РазмерПредыдущейДетали = ?(ПоперечныйПил, ДетальВОстатках.ВысотаДетали, ДетальВОстатках.ШиринаДетали);
				СтараяКоордината = ?(ПоперечныйПил, ДетальВОстатках.КоординатаУ, ДетальВОстатках.КоординатаХ);
				
			КонецЦикла;
			
			СписокДеталейРазмещенныхНаОстатках.Очистить();
			
		КонецЕсли;
		
		Если РазмещалиОбрезки Тогда
			
			//НомерЛиста = НомерЛиста + 1;
			
			ТаблицаРазвернутыхДеталей = СписокДеталейНоменклатуры.Скопировать();
			
			Если ПоперечныйПил Тогда
				ТаблицаРазвернутыхДеталей.Сортировать("ВысотаДетали Убыв");
			Иначе
				ТаблицаРазвернутыхДеталей.Сортировать("ШиринаДетали Убыв");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		//////////////////////////////////////////////////////////////////
	
	////////////////
	//ТаблицаДляСортировки = СписокДеталейНоменклатуры.СкопироватьКолонки();
	
	Для Каждого Деталь Из ТаблицаРазвернутыхДеталей Цикл
		
		МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток", Истина));
		РазмещаемаяДеталь = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
		
		Если РазмещаемаяДеталь.ДетальРазмещена или РазмещаемаяДеталь.Остаток Тогда
			Продолжить;
		КонецЕсли;
		//Для каждого Строка Из МассивОстатков Цикл
		//
		//	НоваяСтрока = ТаблицаДляСортировки.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		//
		//КонецЦикла;
		
		//Если ПоперечныйПил Тогда
		//	
		//	МассивОстатков = СортировкаПузырьком(МассивОстатков);
		//	//ТаблицаДляСортировки.Сортировать("ВысотаДетали возр");
		//	
		//Иначе
		//	
		//	МассивОстатков = СортировкаПузырьком(МассивОстатков, Истина);
		//	//ТаблицаДляСортировки.Сортировать("ШиринаДетали возр");
		//	
		//КонецЕсли;
		
		Для каждого ЭлементМассива Из МассивОстатков Цикл
			
			//Возможность размещения детали на выбранном остатке
			
			ОстатокПоВысоте = ЭлементМассива.ВысотаДетали - Деталь.ВысотаДетали;
			ОстатокПоШирине = ЭлементМассива.ШиринаДетали - Деталь.ШиринаДетали;
			//Возможность размещения детали на выбранном остатке если деталь можно повернуть
			ОстатокПоВысотеПоворот = -1;
			ОстатокПоШиринеПоворот = -1;
			
			Если Деталь.МожноПовернуть Тогда
				ОстатокПоВысотеПоворот = ЭлементМассива.ВысотаДетали - Деталь.ШиринаДетали;
				ОстатокПоШиринеПоворот = ЭлементМассива.ШиринаДетали - Деталь.ВысотаДетали;
			КонецЕсли;
			
			Если ОстатокПоВысотеПоворот >= 0 И ОстатокПоШиринеПоворот >= 0 Тогда
				РазмещаемаяДеталь.ВысотаДетали = Деталь.ВысотаДетали;
				РазмещаемаяДеталь.ШиринаДетали = Деталь.ШиринаДетали;
				РазмещаемаяДеталь.НомерЛиста = ЭлементМассива.НомерЛиста;
				Деталь.ДетальРазмещена = Истина;
				Деталь.НомерЛиста = ЭлементМассива.НомерЛиста;
				
				РазместитьДеталь(СписокДеталейНоменклатуры, РазмещаемаяДеталь, ЭлементМассива, ОстатокПоВысотеПоворот, ОстатокПоШиринеПоворот, ТолщинаПила, Истина, ПоперечныйПил);
				Прервать;
				
			ИначеЕсли ОстатокПоВысоте >= 0 И ОстатокПоШирине >= 0 Тогда
				
				РазместитьДеталь(СписокДеталейНоменклатуры, РазмещаемаяДеталь, ЭлементМассива, ОстатокПоВысоте, ОстатокПоШирине, ТолщинаПила, Ложь, ПоперечныйПил);
				Прервать;
				
			ИначеЕсли МассивОстатков.Найти(ЭлементМассива) + 1 = МассивОстатков.Количество() Тогда
				
				Если (ПоперечныйПил и (Деталь.ВысотаЛиста >= Деталь.ШиринаДетали И Деталь.ШиринаЛиста >= Деталь.ВысотаДетали)) или 
					(НЕ ПоперечныйПил и (Деталь.ВысотаЛиста >= Деталь.ВысотаДетали И Деталь.ШиринаЛиста >= Деталь.ШиринаДетали)) Тогда
					
					Если МассивКусков.Количество() > 1 Тогда
						ПервыйКусок = МассивКусков[0];
						ДобавитьНовыйЛист(СписокДеталейНоменклатуры, НомерЛиста, ПервыйКусок.Номенклатура, ПервыйКусок.ВысотаОстатка, ПервыйКусок.ШиринаОстатка, МассивОстатков);
						МассивКусков.Удалить(0);
					Иначе
						НомерЛиста = НомерЛиста + 1;
						ДобавитьНовыйЛист(СписокДеталейНоменклатуры, НомерЛиста, Номенклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокДеталейНоменклатуры;
	
КонецФункции

Функция ФормированиеПакетаДляБольшогоКоличестваДеталей(СписокДеталейНоменклатуры, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, Номенклатура, ПоперечныйПил, ПределыОстатков, Подразделение, БезОкругленияДоЛистов, НарядЗадание, МассивКусков)
	
	ТаблицаРазвернутыхДеталей = СписокДеталейНоменклатуры.Скопировать();
	МассивНомеровЛистов = Новый Массив;
	НомерЛиста = 0;
	
	Если ПоперечныйПил Тогда
		ТаблицаРазвернутыхДеталей.Сортировать("ВысотаДетали Убыв");
	Иначе
		ТаблицаРазвернутыхДеталей.Сортировать("ШиринаДетали Убыв");
	КонецЕсли;
	
	МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток", Истина));
	
	Если МассивОстатков.Количество() = 0 и ТаблицаРазвернутыхДеталей.Количество() > 0 Тогда
		
		НомерЛиста = НомерЛиста + 1;
		Если МассивКусков.Количество() > 0 Тогда
			//ПервыйКусок = МассивКусков[0];
			//ДобавитьНовыйЛист(СписокДеталейНоменклатуры, НомерЛиста, ПервыйКусок.Номенклатура, ПервыйКусок.ВысотаОстатка, ПервыйКусок.ШиринаОстатка, МассивОстатков);
			//МассивКусков.Удалить(0);
		Иначе
			ДобавитьНовыйЛист(СписокДеталейНоменклатуры, НомерЛиста, Номенклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
		КонецЕсли;
			
	КонецЕсли;
	
	СписокДеталейНоменклатуры = РазместитьБыстрымАлгоритмом(СписокДеталейНоменклатуры, ТаблицаРазвернутыхДеталей, ТолщинаПила, ПоперечныйПил, ВысотаЛиста, ШиринаЛиста, Номенклатура, НомерЛиста, МассивКусков);
	
	НадписьНаОстатке = "Склад";
	Если СписокДеталейНоменклатуры.Количество() > 0 и СписокДеталейНоменклатуры[0].Буфер Тогда
		НадписьНаОстатке = "Буфер";
		//Если СписокДеталейНоменклатуры[0].Дилерский Тогда
		//      НадписьНаОстатке = НадписьНаОстатке + "/Дилер";
		//КонецЕсли;
	КонецЕсли;
	МассивНомеровОстатков = Новый Массив;

	СтруктураДляСтрокиРаскроя = СформироватьСтруктуруДляСтрокиРаскроя(Номенклатура, СписокДеталейНоменклатуры, ТолщинаПила, ПределыОстатков, НадписьНаОстатке, , Подразделение, БезОкругленияДоЛистов, ВысотаЛиста, МассивНомеровОстатков);
	
	Возврат СтруктураДляСтрокиРаскроя;
	
КонецФункции

Функция ФормированиеПакета(Знач СписокДеталейНоменклатуры, Знач ВысотаЛиста, Знач ШиринаЛиста, ТолщинаПила, Номенклатура, ПоворотДеталей = Ложь, ПоперечныйПил = Ложь, ПределыОстатков, Подразделение, БезОкругленияДоЛистов, НарядЗадание, Знач МассивКусков, МассивБуквеннойНумерации = Неопределено)
	
	НадписьНаОстатке = "Склад";
	Если СписокДеталейНоменклатуры.Количество() > 0 и СписокДеталейНоменклатуры[0].Буфер Тогда
		НадписьНаОстатке = "Буфер";
		//Если СписокДеталейНоменклатуры[0].Дилерский Тогда
		//      НадписьНаОстатке = НадписьНаОстатке + "/Дилер";
		//КонецЕсли;
	КонецЕсли;
	МассивДеталейДляПоворота = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("МожноПовернуть", Ложь));
	МожноВращать = МассивДеталейДляПоворота.Количество() = 0;
	
	Если ПоворотДеталей Тогда //Если детали без текстуры - переворачиваем
		
		Для каждого Строка Из СписокДеталейНоменклатуры Цикл
			Если Строка.МожноПовернуть Тогда
				ВысотаДетальки = Строка.ВысотаДетали;
				Строка.ВысотаДетали = Строка.ШиринаДетали;
				Строка.ШиринаДетали = ВысотаДетальки;
				Строка.ПоворотДетали = НЕ Строка.ПоворотДетали;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	ОригинальныйСписокДеталей = СписокДеталейНоменклатуры.Скопировать();
	СписокДеталейРазмещенныхНаОстатках = СписокДеталейНоменклатуры.СкопироватьКолонки();
	
	СписокДеталейНоменклатуры.Сортировать("ШиринаДетали Возр");
	Отбор = Новый Структура("СборныйРамочныйФасад", Истина);
	Отбор.Вставить("КромкаДляСборнойРамки", Справочники.Номенклатура.ПустаяСсылка());
	МассивРамок = СписокДеталейНоменклатуры.НайтиСтроки(Отбор);
	ЕстьРамки = МассивРамок.Количество() > 0;
	
	Если ЕстьРамки Тогда
		
		ВысотаДетали = 0;
		НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
		СтараяШиринаДетали = 0;
		
		Для каждого Строка Из МассивРамок Цикл
			
			Если ВысотаДетали + Строка.ВысотаДетали + ТолщинаПила <= ВысотаЛиста и (Строка.ШиринаДетали = СтараяШиринаДетали или СтараяШиринаДетали = 0) Тогда     //  НомерПакетаРамок = Строка.НомерПакетаРамок
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.МожноПовернуть = Истина;
				ВысотаДетали = ВысотаДетали + Строка.ВысотаДетали + ТолщинаПила;
				СтрокаДляПоиска = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
				СтараяШиринаДетали = Строка.ШиринаДетали;
				СписокДеталейНоменклатуры.Удалить(СтрокаДляПоиска);
				
			Иначе
				
				НоваяСтрока.ВысотаДетали = ВысотаЛиста;
				ВысотаДетали = Строка.ВысотаДетали;
				НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.МожноПовернуть = Истина;
				СтараяШиринаДетали = Строка.ШиринаДетали;
				СтрокаДляПоиска = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
				СписокДеталейНоменклатуры.Удалить(СтрокаДляПоиска);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока.ВысотаДетали = ВысотаЛиста;
	Иначе
		
		СписокДеталейНоменклатуры = ОригинальныйСписокДеталей;
		
	КонецЕсли;
	//////////////////Раскрой на куски////////////
	Для каждого Остаток Из МассивКусков Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДетальВПакете", Ложь);
		МассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Отбор);
		ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать(МассивВсехДеталей);
		
		Если ПоперечныйПил Тогда
			ТаблицаДеталей = АлгоритмОРанце(ТаблицаВсехДеталей, Остаток.ШиринаОстатка, Остаток.ВысотаОстатка, ТолщинаПила, Номенклатура, ,Истина);
		Иначе
			ТаблицаДеталей = АлгоритмОРанце(ТаблицаВсехДеталей, Остаток.ВысотаОстатка, Остаток.ШиринаОстатка, ТолщинаПила, Номенклатура, ,Истина);
		КонецЕсли;
		
		Если ТаблицаДеталей.Количество() > 0 Тогда
			
			Если ПоперечныйПил Тогда
				КоординатаУ = 0;
			Иначе
				КоординатаХ = 0;
			КонецЕсли;
			
			Для Каждого Таблица Из ТаблицаДеталей Цикл
				
				Если ПоперечныйПил Тогда
					КоординатаХ = 0;
				Иначе
					КоординатаУ = 0;
				КонецЕсли;
				
				Для каждого Деталь Из Таблица.Пакет Цикл
					
					НоваяСтрока = СписокДеталейРазмещенныхНаОстатках.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
					Если ПоперечныйПил Тогда
						ВысотаДеталиОбрезка = Деталь.ВысотаДетали;
						НоваяСтрока.ВысотаДетали = Деталь.ШиринаДетали;
						НоваяСтрока.ШиринаДетали = ВысотаДеталиОбрезка;
					КонецЕсли;
					НоваяСтрока.КоординатаУ = КоординатаУ;
					НоваяСтрока.КоординатаХ = КоординатаХ;
					НоваяСтрока.ВысотаЛиста = Остаток.ВысотаОстатка;
					НоваяСтрока.ШиринаЛиста = Остаток.ШиринаОстатка;
					НоваяСтрока.ИД = Остаток.НомерСтроки;
					//НоваяСтрока.ИД = Остаток.GUID;
					ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
					СписокДеталейНоменклатуры.Удалить(ИсправляемаяСтрока);
					Если ПоперечныйПил Тогда
						КоординатаХ = КоординатаХ + ТолщинаПила + Деталь.ВысотаДетали;
					Иначе
						КоординатаУ = КоординатаУ + ТолщинаПила + Деталь.ВысотаДетали;
					КонецЕсли;
					НоваяСтрока.ДетальВПакете = Истина;
					
				КонецЦикла;
				Если ПоперечныйПил Тогда
					КоординатаУ = КоординатаУ + ТолщинаПила + Таблица.ШиринаПакета;
				Иначе
					КоординатаХ = КоординатаХ + ТолщинаПила + Таблица.ШиринаПакета;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	////////////////////////////////////////////
	Если ПоперечныйПил Тогда
		
		СписокДеталейДляПоперечногоПила = СписокДеталейНоменклатуры.СкопироватьКолонки();
		
		Для каждого Строка Из СписокДеталейНоменклатуры Цикл
			
			НоваяСтрока = СписокДеталейДляПоперечногоПила.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ВысотаДетали = Строка.ШиринаДетали;
			НоваяСтрока.ШиринаДетали = Строка.ВысотаДетали;
			
		КонецЦикла;
		
		ТаблицаПакетов = АлгоритмОРанце(СписокДеталейДляПоперечногоПила, ШиринаЛиста, ВысотаЛиста, ТолщинаПила, Номенклатура, МассивКусков);
		
	Иначе
		
		ТаблицаПакетов = АлгоритмОРанце(СписокДеталейНоменклатуры, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, Номенклатура, МассивКусков);
		
	КонецЕсли;
	
	//Нужна колонка для обозначения деталей, принадлежащих пакету, но использующейся в его остатках
	
	ТаблицаСтолбцов = Новый ТаблицаЗначений;//Для передачи пакетов как деталей в АлгоритмОРанце
	ТаблицаСтолбцов.Колонки.Добавить("ВысотаДетали", Новый ОписаниеТипов("Число"));
	ТаблицаСтолбцов.Колонки.Добавить("ШиринаДетали", Новый ОписаниеТипов("Число"));
	ТаблицаСтолбцов.Колонки.Добавить("ДетальВПакете", Новый ОписаниеТипов("Булево"));
	ТаблицаСтолбцов.Колонки.Добавить("ДетальРазмещена", Новый ОписаниеТипов("Булево"));
	ТаблицаСтолбцов.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Булево"));
	ТаблицаСтолбцов.Колонки.Добавить("GUID", Новый ОписаниеТипов("Строка"));
	ТаблицаСтолбцов.Колонки.Добавить("ИспользуетсяВОстаткахПакета", Новый ОписаниеТипов("Булево"));
	ТаблицаСтолбцов.Колонки.Добавить("КоординатаУ", Новый ОписаниеТипов("Число"));
	ТаблицаСтолбцов.Колонки.Добавить("КоординатаХ", Новый ОписаниеТипов("Число"));
	НомерЛиста = 0;
	ПроверочныйНомерЛиста = 0;
	
	Для каждого Пакет Из ТаблицаПакетов Цикл
		
		НоваяСтрока = ТаблицаСтолбцов.Добавить();
		//Чтобы адекватно работал алгоритм, придется менять высоту и ширину деталей и листа
		НоваяСтрока.ВысотаДетали = Пакет.ШиринаПакета;
		НоваяСтрока.ШиринаДетали = ?(ПоперечныйПил, ШиринаЛиста, ВысотаЛиста);
		НоваяСтрока.GUID = Строка(Пакет.НомерПакета);
		
	КонецЦикла;
	
	//Запускаем алгоритм для столбцов отдельно
	Если ПоперечныйПил Тогда
		
		ТаблицаРазмещенияСтолбцов = АлгоритмОРанце(ТаблицаСтолбцов, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, Номенклатура, МассивКусков, , , , Истина);
		
	Иначе
		
		ТаблицаРазмещенияСтолбцов = АлгоритмОРанце(ТаблицаСтолбцов, ШиринаЛиста, ВысотаЛиста, ТолщинаПила, Номенклатура, МассивКусков, , , , Истина);
		
	КонецЕсли;
	
	//"Последовательный алгоритм"
	ПлощадьЛиста = Номенклатура.ДлинаДетали * Номенклатура.ШиринаДетали;
	СписокНомеров = Новый СписокЗначений;
	
	Если ТаблицаРазмещенияСтолбцов.Количество() > 3 и НЕ ПоперечныйПил И НЕ МожноВращать Тогда
		
		НомерЛистаДляПересортировки = 0;
		
		Для Каждого Строка Из ТаблицаРазмещенияСтолбцов Цикл
			
			НомерЛистаДляПересортировки = НомерЛистаДляПересортировки + 1;
			ПлощадьДеталейНаЛисте = 0;
			
			Для каждого Столбец Из Строка.Пакет Цикл
				
				СтрокаПоиска = ТаблицаПакетов.Найти(Столбец.GUID, "НомерПакета");
				ПлощадьДеталейНаЛисте = ПлощадьДеталейНаЛисте + СтрокаПоиска.ОбщаяПлощадьДеталей;
				
			КонецЦикла;
			
			ПроцентЗаполненияЛиста = ?(ПлощадьДеталейНаЛисте > 0, ПлощадьДеталейНаЛисте * 100 / ПлощадьЛиста, 100);
			СписокНомеров.Добавить(ПроцентЗаполненияЛиста, НомерЛистаДляПересортировки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокНомеров.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		
	//Размещаем детали
	МассивНомеровЛистов = Новый Массив;
	ПробуемРаспихатьДеталиВОстатки = Ложь;
	МассивНомеровОстатков = Новый Массив;

	Если ТаблицаРазмещенияСтолбцов.Количество() > 0 или МассивКусков.Количество() > 0 Тогда
		
		/////////////////////////размещение деталей в остатки////////////////
		РазмещалиОбрезки = Ложь;
		Если СписокДеталейРазмещенныхНаОстатках.Количество() > 0 Тогда
			РазмещалиОбрезки = Истина;
			СтараяКоордината = -1;
			//НомерОстатка = 1;
			НомерОстатка = -1;
			Для каждого ДетальВОстатках Из СписокДеталейРазмещенныхНаОстатках Цикл
				
				МассивНомеровОстатков.Добавить(ДетальВОстатках.ИД);
				НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальВОстатках);
				//РазмещаемаяДеталь = СписокДеталейНоменклатуры.Найти(ДетальВОстатках.GUID, "GUID");
				
				Если НомерОстатка <> ДетальВОстатках.ИД Тогда
					НомерЛиста = НомерЛиста + 1;
					МассивНомеровЛистов.Добавить(НомерЛиста);
					НомерОстатка = ДетальВОстатках.ИД;
				КонецЕсли;
				
				РазмерПредыдущейДетали = 0;
				
				Если РазмерПредыдущейДетали = 0 Тогда
					
					РазмерПредыдущейДетали = ?(ПоперечныйПил, ДетальВОстатках.ВысотаДетали, ДетальВОстатках.ШиринаДетали);
					
				КонецЕсли;
				
				ДобавитьБольшойОстаток = СтараяКоордината <> ?(ПоперечныйПил, ДетальВОстатках.КоординатаУ, ДетальВОстатках.КоординатаХ);
				ИспользуетсяВОстатках = ДетальВОстатках.ИспользуетсяВОстаткахПакета;
				
				Если НЕ ПоперечныйПил Тогда
					
					ОстатокСлева = РазмерПредыдущейДетали - ДетальВОстатках.ШиринаДетали -ТолщинаПила;
					КоординатаХ = ДетальВОстатках.КоординатаХ;
					РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры, НоваяСтрока, ТолщинаПила, ДетальВОстатках.КоординатаУ, КоординатаХ, НомерЛиста, ДетальВОстатках.ВысотаЛиста, ДетальВОстатках.ШиринаЛиста, ДобавитьБольшойОстаток, ОстатокСлева, ИспользуетсяВОстатках); //ОстатокПоВысоте, ОстатокПоШирине,
					
				Иначе
					
					ОстатокСверху = РазмерПредыдущейДетали - ДетальВОстатках.ВысотаДетали -ТолщинаПила;
					КоординатаУ = ДетальВОстатках.КоординатаУ;
					РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры, НоваяСтрока, ТолщинаПила, КоординатаУ, ДетальВОстатках.КоординатаХ, НомерЛиста, ДетальВОстатках.ВысотаЛиста, ДетальВОстатках.ШиринаЛиста, ДобавитьБольшойОстаток, ОстатокСверху, ИспользуетсяВОстатках, ПоперечныйПил);
					
				КонецЕсли;
				
				РазмерПредыдущейДетали = ?(ПоперечныйПил, ДетальВОстатках.ВысотаДетали, ДетальВОстатках.ШиринаДетали);
				СтараяКоордината = ?(ПоперечныйПил, ДетальВОстатках.КоординатаУ, ДетальВОстатках.КоординатаХ);
				
			КонецЦикла;
			
			СписокДеталейРазмещенныхНаОстатках.Очистить();
			
		КонецЕсли;
		
		//Если РазмещалиОбрезки Тогда
		//	
		//	НомерЛиста = НомерЛиста + 1;
		//	МассивНомеровЛистов.Добавить(НомерЛиста);
		//	
		//КонецЕсли;
		//////////////////////////////////////////////////////////////////
		
		Для Каждого Строка Из ТаблицаРазмещенияСтолбцов Цикл
			
			ПробуемРаспихатьДеталиВОстатки = МожноВращать и ТаблицаРазмещенияСтолбцов.Количество() > 1 и Строка = ТаблицаРазмещенияСтолбцов[ТаблицаРазмещенияСтолбцов.Количество() - 1] и НЕ ПоперечныйПил;
			
			Если ПробуемРаспихатьДеталиВОстатки Тогда
				
				ПоследнийЛист = Строка.Пакет;
				ТаблицаРазвернутыхДеталей = СписокДеталейНоменклатуры.СкопироватьКолонки();
				
				Для Каждого Ы ИЗ ПоследнийЛист Цикл
					
					СтрокаПоиска = ТаблицаПакетов.Найти(Ы.GUID, "НомерПакета");
					Пакет = СтрокаПоиска.Пакет;
					
					Для Каждого Строка Из Пакет Цикл
						
						НоваяСтрока = ТаблицаРазвернутыхДеталей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
						
					КонецЦикла;
					
				КонецЦикла;
				
				Если ПоперечныйПил Тогда
					ТаблицаРазвернутыхДеталей.Сортировать("ВысотаДетали Убыв");
				Иначе
					ТаблицаРазвернутыхДеталей.Сортировать("ШиринаДетали Убыв");
				КонецЕсли;
				МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток", Истина));
				Если МассивОстатков.Количество() = 0 и ТаблицаРазвернутыхДеталей.Количество() > 0 Тогда
					
					ИскомыйНомер = ПолучитьНомерЛиста(МассивНомеровЛистов);
					
					НомерЛиста = НомерЛиста + 1;
					ПроверочныйНомерЛиста = ПроверочныйНомерЛиста + 1;
					
					МассивНомеровЛистов.Добавить(ИскомыйНомер);
					ДобавитьНовыйЛист(СписокДеталейНоменклатуры, ИскомыйНомер, Номенклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
					
					
				КонецЕсли;
				
				МассивКусков = Новый Массив;
				СписокДеталейНоменклатуры = РазместитьБыстрымАлгоритмом(СписокДеталейНоменклатуры, ТаблицаРазвернутыхДеталей, ТолщинаПила, ПоперечныйПил, ВысотаЛиста, ШиринаЛиста, Номенклатура, НомерЛиста, МассивКусков);
				
			КонецЕсли;
			
			Если НЕ ПробуемРаспихатьДеталиВОстатки Тогда
				ПроверятьНомерЛиста = СписокНомеров.Количество() > 0;
				ПроверочныйНомерЛиста = ПроверочныйНомерЛиста + 1;
				НомерСтолбца = 0;
				Если НЕ ПроверятьНомерЛиста или (ПроверятьНомерЛиста и ПроверочныйНомерЛиста <> Число(СписокНомеров[0].Представление) И ПроверочныйНомерЛиста <> Число(СписокНомеров[1].Представление)) Тогда
					НомерЛиста = НомерЛиста + 1;
					МассивНомеровЛистов.Добавить(НомерЛиста);
				КонецЕсли;
				
				Для каждого Столбец Из Строка.Пакет Цикл
					
					СтрокаПоиска = ТаблицаПакетов.Найти(Столбец.GUID, "НомерПакета");
					РазмещаемыйПакет = СтрокаПоиска.Пакет;
					СтарыйНомерСтолбца = НомерСтолбца;
					НомерСтолбца = НомерСтолбца + 1;
					РазмерПредыдущейДетали = 0;
					РазмещаемыйПакет.Сортировать("ИспользуетсяВОстаткахПакета Возр, ШиринаДетали Убыв, КоординатаХ Возр, КоординатаУ Возр");
					
					Для Каждого Деталь Из РазмещаемыйПакет Цикл
						
						Если НЕ Деталь.ДетальРазмещена И (НЕ ПроверятьНомерЛиста или (ПроверятьНомерЛиста и ПроверочныйНомерЛиста <> Число(СписокНомеров[0].Представление) И ПроверочныйНомерЛиста <> Число(СписокНомеров[1].Представление))) Тогда
							
							РазмещаемаяДеталь = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
							
							Если РазмерПредыдущейДетали = 0 Тогда
								
								РазмерПредыдущейДетали = ?(ПоперечныйПил, РазмещаемаяДеталь.ВысотаДетали, РазмещаемаяДеталь.ШиринаДетали);
								
							КонецЕсли;
							
							ДобавитьБольшойОстаток = СтарыйНомерСтолбца <> НомерСтолбца;
							ИспользуетсяВОстатках = Деталь.ИспользуетсяВОстаткахПакета;
							
							Если НЕ ПоперечныйПил Тогда
								
								ОстатокСлева = РазмерПредыдущейДетали - Деталь.ШиринаДетали -ТолщинаПила;
								КоординатаХ = ?(Деталь.КоординатаХ > 0, Столбец.КоординатаУ + Деталь.КоординатаХ, Столбец.КоординатаУ);
								РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры, РазмещаемаяДеталь, ТолщинаПила, Деталь.КоординатаУ, КоординатаХ, НомерЛиста, ВысотаЛиста, ШиринаЛиста, ДобавитьБольшойОстаток, ОстатокСлева, ИспользуетсяВОстатках); //ОстатокПоВысоте, ОстатокПоШирине,
								
							Иначе
								
								ОстатокСверху = РазмерПредыдущейДетали - РазмещаемаяДеталь.ВысотаДетали -ТолщинаПила;
								КоординатаХ = ?(Деталь.КоординатаУ > 0, Столбец.КоординатаХ + Деталь.КоординатаУ, Столбец.КоординатаХ);
								КоординатаУ = ?(Деталь.КоординатаХ > 0, Столбец.КоординатаУ + Деталь.КоординатаХ, Столбец.КоординатаУ);
								РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры, РазмещаемаяДеталь, ТолщинаПила, КоординатаУ, КоординатаХ, НомерЛиста, ВысотаЛиста, ШиринаЛиста, ДобавитьБольшойОстаток, ОстатокСверху, ИспользуетсяВОстатках, ПоперечныйПил);
								
							КонецЕсли;
							
							СтарыйНомерСтолбца = НомерСтолбца;
							РазмерПредыдущейДетали = ?(ПоперечныйПил, РазмещаемаяДеталь.ВысотаДетали, РазмещаемаяДеталь.ШиринаДетали);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли
			
		КонецЦикла;
		
		/////////////////// Собираем в кучу детали из отобранных листов
		
		Если СписокНомеров.Количество() > 0 Тогда
			
			ТаблицаДеталейОтобранныхЛистов = СписокДеталейНоменклатуры.СкопироватьКолонки();
			НовыйНомерЛиста = 0;
			
			Для Каждого Лист Из ТаблицаРазмещенияСтолбцов Цикл
				
				НовыйНомерЛиста = НовыйНомерЛиста + 1;
				
				Если НовыйНомерЛиста = Число(СписокНомеров[0].Представление) Или НовыйНомерЛиста = Число(СписокНомеров[1].Представление) Тогда
					
					Для каждого Столбец Из Лист.Пакет Цикл
						
						СтрокаПоиска = ТаблицаПакетов.Найти(Столбец.GUID, "НомерПакета");
						РазмещаемыйПакет = СтрокаПоиска.Пакет;
						ШиринаПредыдущейДетали = 0;
						РазмещаемыйПакет.Сортировать("ИспользуетсяВОстаткахПакета Возр, ШиринаДетали Убыв, КоординатаХ Возр, КоординатаУ Возр");
						
						Для Каждого Деталь Из РазмещаемыйПакет Цикл
							
							НоваяСтрока = ТаблицаДеталейОтобранныхЛистов.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТаблицаДеталейОтобранныхЛистов.Сортировать("ШиринаДетали Убыв");
			
			///////////Размещаем
			Для Каждого Деталь Из ТаблицаДеталейОтобранныхЛистов Цикл
				
				РазмещаемаяДеталь = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
				МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток", Истина));
				
				Если МассивОстатков.Количество() = 0 Тогда
					ИскомыйНомер = ПолучитьНомерЛиста(МассивНомеровЛистов);
					МассивНомеровЛистов.Добавить(ИскомыйНомер);
					ДобавитьНовыйЛист(СписокДеталейНоменклатуры, ИскомыйНомер, Номенклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
				КонецЕсли;
				
				Для Каждого ЭлементМассива Из МассивОстатков Цикл
					
					//Возможность размещения детали на выбранном остатке
					ОстатокПоВысоте = ЭлементМассива.ВысотаДетали - Деталь.ВысотаДетали;
					ОстатокПоШирине = ЭлементМассива.ШиринаДетали - Деталь.ШиринаДетали;
					
					//Возможность размещения детали на выбранном остатке если деталь можно повернуть
					ОстатокПоВысотеПоворот = -1;
					ОстатокПоШиринеПоворот = -1;
					Если Деталь.МожноПовернуть Тогда
						
						ОстатокПоВысотеПоворот = ЭлементМассива.ВысотаДетали - Деталь.ШиринаДетали ;
						ОстатокПоШиринеПоворот = ЭлементМассива.ШиринаДетали - Деталь.ВысотаДетали;
						
					КонецЕсли;
					
					Если ОстатокПоВысоте >= 0 И ОстатокПоШирине >= 0 Тогда
						
						РазместитьДеталь(СписокДеталейНоменклатуры, РазмещаемаяДеталь, ЭлементМассива, ОстатокПоВысоте, ОстатокПоШирине, ТолщинаПила);
						Прервать;
						
					ИначеЕсли ОстатокПоВысотеПоворот >= 0 И ОстатокПоШиринеПоворот >= 0 Тогда
						
						РазместитьДеталь(СписокДеталейНоменклатуры, РазмещаемаяДеталь, ЭлементМассива, ОстатокПоВысотеПоворот, ОстатокПоШиринеПоворот, ТолщинаПила, Истина);
						Прервать;
						
					ИначеЕсли МассивОстатков.Найти(ЭлементМассива) + 1 = МассивОстатков.Количество() Тогда
						
						Если (Деталь.ВысотаЛиста >= Деталь.ВысотаДетали И Деталь.ШиринаЛиста >= Деталь.ШиринаДетали) Тогда
							
							ИскомыйНомер = ПолучитьНомерЛиста(МассивНомеровЛистов);
							МассивНомеровЛистов.Добавить(ИскомыйНомер);
							ДобавитьНовыйЛист(СписокДеталейНоменклатуры, ИскомыйНомер, Номенклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
							
						Иначе
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		//////////////////////
		
		СтруктураДляСтрокиРаскроя = СформироватьСтруктуруДляСтрокиРаскроя(Номенклатура, СписокДеталейНоменклатуры, ТолщинаПила, ПределыОстатков, НадписьНаОстатке, ПоворотДеталей, Подразделение, БезОкругленияДоЛистов, ВысотаЛиста, МассивНомеровОстатков, МассивБуквеннойНумерации);
		
	Иначе
		
		СтруктураДляСтрокиРаскроя = Новый Структура("ТекстОшибки", "Пустой раскрой по номенклатуре " + Номенклатура);
		
	КонецЕсли;
	
	Возврат СтруктураДляСтрокиРаскроя;
	
КонецФункции

Функция СформироватьСтруктуруДляСтрокиРаскроя(Номенклатура, СписокДеталейНоменклатуры, ТолщинаПила, ПределыОстатков, НадписьНаОстатке, ПоворотДеталей = Ложь, Подразделение, БезОкругленияДоЛистов, ВысотаЛиста, МассивНомеровОстатков, МассивБуквеннойНумерации = Неопределено)
	
	СтруктураДляСтрокиРаскроя = Новый Структура;
	
	НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
	СписокДеталейНоменклатуры.Сортировать("НомерЛиста Убыв");
	МаксимальныйНомерЛиста = ?(СписокДеталейНоменклатуры.Количество() > 0, СписокДеталейНоменклатуры[0].НомерЛиста, 0);
	
	СтруктураОптимальногоОстатка = ОптимизацияОстатков(СписокДеталейНоменклатуры, МаксимальныйНомерЛиста , 0, ТолщинаПила, ПределыОстатков, НоменклатурнаяГруппа, НадписьНаОстатке, Истина, МассивБуквеннойНумерации);
	ТаблицаДеталейИтог = СтруктураОптимальногоОстатка.СписокДеталейНоменклатуры;
	ТаблицаПодсчетаЛистов = ТаблицаДеталейИтог.Скопировать();
	ТаблицаПодсчетаЛистов.Свернуть("НомерЛиста");
	ВсегоЛистовДаннойНоменклатуры = ТаблицаПодсчетаЛистов.Количество();
	Для каждого Строка Из СписокДеталейНоменклатуры Цикл
		
		Строка.ПоследнийЛист = Строка.НомерЛиста = МаксимальныйНомерЛиста;
		Строка.ВсегоЛистов = ВсегоЛистовДаннойНоменклатуры;
		
	КонецЦикла;
	
	ОптимальныйАлгоритмРаскроя = Строка(НоменклатурнаяГруппа) + "Текстурный - " + Число(ПоворотДеталей) + 
	", ОстатокЛинии - " + 0 + ", Группировка - " + 1 + ";";
	
	СтруктураДляСтрокиРаскроя.Вставить("ТаблицаДеталейИтог", ТаблицаДеталейИтог);
	СтруктураДляСтрокиРаскроя.Вставить("ОптимальныйАлгоритмРаскроя", ОптимальныйАлгоритмРаскроя);
	СтруктураДляСтрокиРаскроя.Вставить("КоличествоЛистов", ВсегоЛистовДаннойНоменклатуры);
	МассивОстатков = ТаблицаДеталейИтог.НайтиСтроки(Новый Структура("Остаток", Истина));
	СредняяПлощадьОстатков = ?(МассивОстатков.Количество() > 0, СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре / МассивОстатков.Количество(), 0);
	МощностьРаскроя = СредняяПлощадьОстатков * СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре;
	СтруктураДляСтрокиРаскроя.Вставить("КоличествоОстатков", МассивОстатков.Количество());
	СтруктураДляСтрокиРаскроя.Вставить("СредняяПлощадьОстатков", СредняяПлощадьОстатков);
	СтруктураДляСтрокиРаскроя.Вставить("ПлощадьОстатковПоНоменклатуре", СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре);
	СтруктураДляСтрокиРаскроя.Вставить("МощностьРаскроя", МощностьРаскроя);
	СтруктураДляСтрокиРаскроя.Вставить("МассивНомеровОстатков", МассивНомеровОстатков);
	
	//ПлощадьЛистов = НомерЛиста * Номенклатура.ДлинаДетали * Номенклатура.ШиринаДетали;
	
	МассивДеталей = ТаблицаДеталейИтог.НайтиСтроки(Новый Структура("Остаток", Ложь));
	ПлощадьДеталей = 0;
	
	Для каждого Деталь Из МассивДеталей Цикл
		
		ПлощадьДеталей = ПлощадьДеталей + Деталь.ВысотаДетали * Деталь.ШиринаДетали;
		
	КонецЦикла;
	
	ТаблицаВсехДеталейДляТестов = СписокДеталейНоменклатуры.Скопировать();
	СписокДеталейНоменклатуры.Сортировать("НомерЛиста Возр");
	СтарыйНомерЛиста =0;
	ПлощадьДеталейНаЛисте = 0;
	ПлощадьВсехДеталей = 0;
	СписокНомеров = Новый СписокЗначений;
	
	//Для вычисления площади, которую потом надо добавить к деталям
	
	КоличествоВПогонныхМетрах = НоменклатурнаяГруппа.КоличествоВПогонныхМетрах;
	
	Для каждого Строка Из ТаблицаВсехДеталейДляТестов Цикл
		
		Если Не Строка.Остаток Тогда
			
			Если СтарыйНомерЛиста <> Строка.НомерЛиста Тогда
				
				Если СтарыйНомерЛиста > 0 Тогда
					
					СписокНомеров.Добавить(ПлощадьДеталейНаЛисте, СтарыйНомерЛиста);
					
				КонецЕсли;
				
				СтарыйНомерЛиста = Строка.НомерЛиста;
				ПлощадьДеталейНаЛисте = 0;
				
			КонецЕсли;
			
			ПлощадьДеталейНаЛисте = ПлощадьДеталейНаЛисте + ?(КоличествоВПогонныхМетрах, Строка.ВысотаДетали, Строка.ВысотаДетали * Строка.ШиринаДетали);
			ПлощадьВсехДеталей = ПлощадьВсехДеталей + ?(КоличествоВПогонныхМетрах, Строка.ВысотаДетали, Строка.ВысотаДетали * Строка.ШиринаДетали);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаВсехДеталейДляТестов.Количество() > 0 Тогда
		
		СписокНомеров.Добавить(ПлощадьДеталейНаЛисте, СтарыйНомерЛиста);
		
	КонецЕсли;
	
	ОкруглятьДоЛистов = Ложь;
	
	СписокНомеров.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	//ПлощадьЛиста = Номенклатура.ДлинаДетали * Номенклатура.ШиринаДетали;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НоменклатураПодразделений.Номенклатура.НоменклатурнаяГруппа.КоличествоВПогонныхМетрах
	|			ТОГДА НоменклатураПодразделений.Номенклатура.ДлинаДетали
	|		ИНАЧЕ НоменклатураПодразделений.Номенклатура.ДлинаДетали * НоменклатураПодразделений.Номенклатура.ШиринаДетали
	|	КОНЕЦ КАК ПлощадьЛиста,
	|	НоменклатураПодразделений.ОкруглятьДоЛистов
	|ИЗ
	|	РегистрСведений.НоменклатураПодразделений.СрезПоследних(, Подразделение = &Подразделение) КАК НоменклатураПодразделений
	|ГДЕ
	|	НоменклатураПодразделений.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ПлощадьЛиста =?(КоличествоВПогонныхМетрах, Номенклатура.ДлинаДетали, Номенклатура.ДлинаДетали * Номенклатура.ШиринаДетали);
		
	Иначе	
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОкруглятьДоЛистов =  ВыборкаДетальныеЗаписи.ОкруглятьДоЛистов;
			Если НЕ КоличествоВПогонныхМетрах Тогда
				ПлощадьЛиста = ?(ВыборкаДетальныеЗаписи.ПлощадьЛиста > 0, ВыборкаДетальныеЗаписи.ПлощадьЛиста, Номенклатура.ДлинаДетали * Номенклатура.ШиринаДетали);
			Иначе
				ПлощадьЛиста = ?(ВыборкаДетальныеЗаписи.ПлощадьЛиста > 0, ВыборкаДетальныеЗаписи.ПлощадьЛиста, Номенклатура.ДлинаДетали);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
	ПлощадьДеталейПоследнегоЛиста = ?(СписокНомеров.Количество() > 0, СписокНомеров[0].Значение, 0);
	
	Если КоличествоВПогонныхМетрах Тогда
		ПлощадьДеталейПоследнегоЛиста = 0;
		Отбор = Новый Структура("НомерЛиста", МаксимальныйНомерЛиста);
		Отбор.Вставить("Остаток", Ложь);
		МассивДеталейДляПодсчета = СписокДеталейНоменклатуры.НайтиСтроки(Отбор);
		
		Для каждого Деталь Из МассивДеталейДляПодсчета Цикл
			
			ПроверочноеЧисло = ?(Деталь.ВысотаДетали + ТолщинаПила + Деталь.КоординатаУ > ВысотаЛиста, ВысотаЛиста, Деталь.ВысотаДетали + ТолщинаПила + Деталь.КоординатаУ);
			ПлощадьДеталейПоследнегоЛиста = ?(ПроверочноеЧисло > ПлощадьДеталейПоследнегоЛиста, ПроверочноеЧисло, ПлощадьДеталейПоследнегоЛиста);
			
		КонецЦикла;
		
		Кратность = Номенклатура.Кратность;
		Если Кратность > 0 Тогда
			
			ПлощадьДеталейПоследнегоЛиста = ПлощадьДеталейПоследнегоЛиста / 1000;
			СтруктураКрстности = ЛексСервер.ПосчитатьКратность(Номенклатура, ПлощадьДеталейПоследнегоЛиста);
			ПлощадьДеталейПоследнегоЛиста = СтруктураКрстности.КоличествоМатериала * 1000;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//
	ПлощадьДеталейВПогонныхМетрах = 0;
	
	Если КоличествоВПогонныхМетрах Тогда
		
		ТаблицаПодсчетаЛистов.Сортировать("НомерЛиста");
		
		Для Каждого Листочек Из ТаблицаПодсчетаЛистов Цикл
			
			ПроверочноеЧисло = 0;
			ПлощадьДеталейОдногоЛиста = 0;
			
			МассивДеталейДляПодсчета = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток, НомерЛиста", Ложь, Листочек.НомерЛиста));
			
			Если МассивДеталейДляПодсчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого Деталь Из МассивДеталейДляПодсчета Цикл
				
				//посмотрим разницу
				ПроверочноеЧисло = ?(Деталь.ВысотаДетали + ТолщинаПила + Деталь.КоординатаУ > Деталь.ВысотаЛиста, Деталь.ВысотаЛиста, Деталь.ВысотаДетали + ТолщинаПила + Деталь.КоординатаУ);
				ПлощадьДеталейОдногоЛиста = Макс(ПроверочноеЧисло, ПлощадьДеталейОдногоЛиста);
			КонецЦикла;
			
			
			Кратность = Номенклатура.Кратность;
			Если Кратность > 0 Тогда
				
				ПлощадьДеталейОдногоЛиста = ПлощадьДеталейОдногоЛиста / 1000;
				СтруктураКрстности = ЛексСервер.ПосчитатьКратность(Номенклатура, ПлощадьДеталейОдногоЛиста);
				ПлощадьДеталейОдногоЛиста = СтруктураКрстности.КоличествоМатериала * 1000;
				
			КонецЕсли;
			
			ПлощадьДеталейВПогонныхМетрах = ПлощадьДеталейВПогонныхМетрах + ПлощадьДеталейОдногоЛиста;
			
		КонецЦикла;

	КонецЕсли;
	//
	
	Фотопечать = Номенклатура = Справочники.Номенклатура.СтеклоСФотопечатью4мм Или Номенклатура = Справочники.Номенклатура.СтеклоСФотопечатью6мм;
	
	ПростоПлощадьВсехЛистов =  ПлощадьЛиста * ВсегоЛистовДаннойНоменклатуры;
	
	Если ОкруглятьДоЛистов Тогда
		
		ПлощадьОбрезковПоНоменклатуре = ПростоПлощадьВсехЛистов;
		
	Иначе
		Если Фотопечать Тогда
			МассивДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток", Ложь));
			ПлощадьОбрезковПоНоменклатуре = 0;
			Для каждого Деталь Из МассивДеталей Цикл
				
				ПлощадьОбрезковПоНоменклатуре = ПлощадьОбрезковПоНоменклатуре + Деталь.ВысотаДетали * Деталь.ШиринаДетали;
				
			КонецЦикла;
			
		Иначе
			ПлощадьОбрезковПоНоменклатуре = ?(НЕ КоличествоВПогонныхМетрах, ПлощадьДеталей+СтруктураОптимальногоОстатка.ПлощадьОбрезковПоНоменклатуре, ПлощадьДеталейВПогонныхМетрах)
																				  +СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре* Номенклатура.ПроцентОтхода/100;
			Если ПлощадьОбрезковПоНоменклатуре> ПростоПлощадьВсехЛистов  Тогда
				ПлощадьОбрезковПоНоменклатуре = ПростоПлощадьВсехЛистов;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДляСтрокиРаскроя.Вставить("ПлощадьОбрезковПоНоменклатуре", ПлощадьОбрезковПоНоменклатуре);
	
	СравниваемыйПроцент = ?(ПлощадьДеталей > 0, Окр(СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре / ПлощадьДеталей * 100, 2), 0);
	СтруктураДляСтрокиРаскроя.Вставить("СравниваемыйПроцент", СравниваемыйПроцент);
	
	Возврат СтруктураДляСтрокиРаскроя
	
КонецФункции

Функция ПолучитьНомерЛиста(МассивНомеров)
	
	НомерЛиста = 0;
	ИскомыйНомер = 0;
	
	Пока ТипЗнч(ИскомыйНомер) = Тип("Число") Цикл
		
		НомерЛиста = НомерЛиста + 1;
		ИскомыйНомер = МассивНомеров.Найти(НомерЛиста);
		
	КонецЦикла;
	
	Возврат НомерЛиста
	
КонецФункции

Функция АлгоритмОРанце(Знач СписокДеталейНоменклатуры, Знач ВысотаЛиста, Знач ШиринаЛиста, ТолщинаПила, Номенклатура, МассивОстатков, ПроверкаОстатков = Ложь, СтараяВысотаПакета = 0, ОбходОставшихся = Ложь, РазмещениеСтолбцов = Ложь)
	
	МассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("ДетальВПакете", Ложь));
	
	СписокДеталейНоменклатуры.Колонки.Добавить("ДетальПроверена", Новый ОписаниеТипов("Булево"));
	
	ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать(МассивВсехДеталей);

	МожетВстретитьсяПостформинг = (ТаблицаВсехДеталей.Колонки.Найти("Постформинг") <> Неопределено);
	ВстретилсяПостформинг = Ложь;
	
	Если МожетВстретитьсяПостформинг Тогда
		
		ВстретилсяПостформинг = ТаблицаВсехДеталей.НайтиСтроки(Новый Структура("Постформинг", Истина)).Количество() > 0;
		ЭтоНеПолныйЛист = (ВысотаЛиста < Номенклатура.ШиринаДетали);
		
		Если ВстретилсяПостформинг И ЭтоНеПолныйЛист Тогда
			
			МассивДеталейСПостформингом = ТаблицаВсехДеталей.НайтиСтроки(Новый Структура("Постформинг", Истина));
			
			Для Каждого Эл ИЗ МассивДеталейСПостформингом Цикл
				ТаблицаВсехДеталей.Удалить(Эл);	
			КонецЦикла;
			
			ВстретилсяПостформинг = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаВсехДеталейДляТестов = ТаблицаВсехДеталей.Скопировать();
	ТаблицаОставшихсяДеталей = ТаблицаВсехДеталей.Скопировать();	
	ТаблицаПервыхДеталей = ТаблицаВсехДеталей.Скопировать();
	
	ТаблицаВсехДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
	ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
	ТаблицаПервыхДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
		
	ИтогВысотыПоДеталям = ТаблицаВсехДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаВсехДеталей.Количество() - 1);	
	
	НомерПакета = 1;
	ТаблицаПакетов = Новый ТаблицаЗначений;
	ТаблицаПакетов.Колонки.Добавить("Пакет", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаПакетов.Колонки.Добавить("ШиринаПакета", Новый ОписаниеТипов("Число"));
	ТаблицаПакетов.Колонки.Добавить("ВысотаПакета", Новый ОписаниеТипов("Число"));
	ТаблицаПакетов.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Строка"));
	ТаблицаПакетов.Колонки.Добавить("ОбщаяПлощадьДеталей", Новый ОписаниеТипов("Число"));
	
	ПоследнееРешение = СписокДеталейНоменклатуры.СкопироватьКолонки();
	
	ЛучшийСтолбец = СписокДеталейНоменклатуры.СкопироватьКолонки();
	ЛучшаяПолоса = СписокДеталейНоменклатуры.СкопироватьКолонки();
	ШиринаОставшегосяКуска = ШиринаЛиста;
	ПоследнийПроцентОстаткаСверху = 100;
	ПоследнийПроцентОстаткаСвободногоПространстваСтолбца = 100;
	ВысотаПакета = 0;
	ШиринаПакета = 0;
	ШиринаПоследнейДетали = 0;
	ПлощадьОстаткаСлева = 0;
	ПоследнийПроцентЗаполненностиПолосы = 0;
	КоличествоЭлементовВТаблице = ТаблицаОставшихсяДеталей.Количество();
	ШиринаСамойУзкойДетали = ?(КоличествоЭлементовВТаблице > 0, ТаблицаОставшихсяДеталей[КоличествоЭлементовВТаблице - 1].ШиринаДетали, 0);
	
	Если ШиринаСамойУзкойДетали <= ШиринаЛиста И ШиринаСамойУзкойДетали > 0 Тогда
		
		Пока (ИтогВысотыПоДеталям > 0 И ИтогВысотыПоДеталям > ВысотаЛиста) ИЛИ ВстретилсяПостформинг = Истина Цикл
			
			ПакетСобран = Ложь;
			ВстретилсяПостформинг = Ложь;
			
			Если ПроверкаОстатков Тогда
			
				ШиринаЛиста = ШиринаОставшегосяКуска;
			
			КонецЕсли;
			
			Если ТаблицаПервыхДеталей.Количество() > 0 И ?(МожетВстретитьсяПостформинг И ТаблицаПервыхДеталей.Получить(0).Постформинг, НЕ ЭтоНеПолныйЛист, Истина)  Тогда
				
				ПоследнееРешение.Очистить();
				ПерваяДеталь = ТаблицаПервыхДеталей.Получить(0);
				
				Если ПерваяДеталь.Остаток
					ИЛИ ПерваяДеталь.ДетальВПакете
					ИЛИ ПерваяДеталь.ДетальРазмещена
					ИЛИ ПерваяДеталь.ШиринаДетали > ШиринаЛиста или ПерваяДеталь.ВысотаДетали > ВысотаЛиста
					Тогда
					СтрокаДляПоиска = ТаблицаВсехДеталей.Найти(ПерваяДеталь.GUID, "GUID");
					ТаблицаВсехДеталей.Удалить(СтрокаДляПоиска);
					СтрокаДляПоиска = ТаблицаОставшихсяДеталей.Найти(ПерваяДеталь.GUID, "GUID");
					ТаблицаОставшихсяДеталей.Удалить(СтрокаДляПоиска);
					ИсправляемаяСтрока = ТаблицаВсехДеталейДляТестов.Найти(ПерваяДеталь.GUID, "GUID");
					ИсправляемаяСтрока.ДетальВПакете = Истина;
					ТаблицаПервыхДеталей.Удалить(ПерваяДеталь);
					ИтогВысотыПоДеталям = ТаблицаПервыхДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаПервыхДеталей.Количество() - 1);
					
					Продолжить;
					
				КонецЕсли;
				
				ИсправляемаяСтрока = ТаблицаВсехДеталейДляТестов.Найти(ПерваяДеталь.GUID, "GUID");
				ИсправляемаяСтрока.ДетальВПакете = Истина;
				СтрокаДляПоиска = ТаблицаВсехДеталей.Найти(ПерваяДеталь.GUID, "GUID");
				ТаблицаВсехДеталей.Удалить(СтрокаДляПоиска);
				СтрокаДляПоиска = ТаблицаОставшихсяДеталей.Найти(ПерваяДеталь.GUID, "GUID");
				ТаблицаОставшихсяДеталей.Удалить(СтрокаДляПоиска);
				
				Если ПерваяДеталь.ВысотаДетали <= ВысотаЛиста Тогда
					ВысотаПакета = ПерваяДеталь.ВысотаДетали;
					ПерваяДеталь.ДетальВПакете = Истина;
					НоваяСтрока = ПоследнееРешение.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерваяДеталь);
					ШиринаПакета = ПерваяДеталь.ШиринаДетали;
					ШиринаПоследнейДетали = ПерваяДеталь.ШиринаДетали;
					ИтогВысотыПоДеталям = ТаблицаПервыхДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаПервыхДеталей.Количество() - 1);
				Иначе
					ТаблицаПервыхДеталей.Удалить(ПерваяДеталь);
					ИтогВысотыПоДеталям = ТаблицаПервыхДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаПервыхДеталей.Количество() - 1);
					Продолжить;
				КонецЕсли;
			Иначе
				
				Прервать;
				
			КонецЕсли;
			ПлощадьОстаткаСлева = 0;
			
			Для Каждого Элемент Из ТаблицаВсехДеталей Цикл
				
				Если Элемент.Остаток
					ИЛИ Элемент.ДетальВПакете
					ИЛИ Элемент.ДетальРазмещена 
					Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ПакетСобран Тогда
					
					СтрокаДляПоиска = ТаблицаОставшихсяДеталей.Найти(Элемент.GUID, "GUID");
					ТаблицаОставшихсяДеталей.Удалить(СтрокаДляПоиска);
					
					Если Элемент.ВысотаДетали + ПерваяДеталь.ВысотаДетали + ТолщинаПила <= ВысотаЛиста 
					   И Элемент.ШиринаДетали <= ШиринаЛиста 
					   И ?(МожетВстретитьсяПостформинг, НЕ Элемент.Постформинг, ИСТИНА) Тогда
						
						ПоследнееРешение.Очистить();
						НоваяСтрока = ПоследнееРешение.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерваяДеталь);
						ШиринаПакета = ПерваяДеталь.ШиринаДетали;
						НоваяСтрока = ПоследнееРешение.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
						ВысотаПакета = Элемент.ВысотаДетали + ПерваяДеталь.ВысотаДетали + ТолщинаПила;
						ПлощадьОстаткаСлева = ?(ШиринаПоследнейДетали > 0 и ШиринаПоследнейДетали <> Элемент.ШиринаДетали, (ШиринаПоследнейДетали - Элемент.ШиринаДетали) * Элемент.ВысотаДетали, 0);
						ШиринаПоследнейДетали = Элемент.ШиринаДетали;
						
					Иначе
						
						Если ?(МожетВстретитьсяПостформинг, Элемент.Постформинг, ЛОЖЬ) Тогда
							ВстретилсяПостформинг = Истина;
						КонецЕсли;
						
						Продолжить;
						
					КонецЕсли;
					
					ПлощадьПолосы = ШиринаПакета * ВысотаЛиста;
					ПлощадьОстаткаСверху = ШиринаПакета * (ВысотаЛиста - ВысотаПакета - ТолщинаПила);
					ОбщаяПлощадь = ПлощадьОстаткаСлева + ПлощадьОстаткаСверху;
					ПроцентСвободногоПространстваСтолбца = ?(ПлощадьПолосы > 0, ОбщаяПлощадь * 100 / ПлощадьПолосы, 100);
					ПроцентОстаткаСверху = ?(ПлощадьПолосы > 0, ПлощадьОстаткаСверху * 100 / ПлощадьПолосы, 100);
					
					Если ПроцентОстаткаСверху < ПоследнийПроцентОстаткаСверху Тогда
								
						ПоследнийПроцентОстаткаСверху = ПроцентОстаткаСверху;
						ЛучшийСтолбец = ПоследнееРешение.Скопировать();
						Если ПроверкаОстатков Тогда
							ЛучшаяПолоса = ПоследнееРешение.Скопировать();
						КонецЕсли;
						
					КонецЕсли;
					
					Для каждого Деталь Из ТаблицаОставшихсяДеталей Цикл
						
						Если ВысотаПакета + Деталь.ВысотаДетали + ТолщинаПила <= ВысотаЛиста
							И Деталь.ШиринаДетали <= ШиринаЛиста
							И ?(МожетВстретитьсяПостформинг, НЕ Деталь.Постформинг, ИСТИНА) Тогда
							
							НоваяСтрока = ПоследнееРешение.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
							
							ВысотаПакета = ВысотаПакета + Деталь.ВысотаДетали + ТолщинаПила;
							ПлощадьОстаткаСлева = ?(ШиринаПоследнейДетали > 0 и ШиринаПоследнейДетали <> Деталь.ШиринаДетали, (ШиринаПоследнейДетали - Деталь.ШиринаДетали) * Деталь.ВысотаДетали, 0);
							ШиринаПоследнейДетали = Деталь.ШиринаДетали;
							
						Иначе
							
							Если ?(МожетВстретитьсяПостформинг, Деталь.Постформинг, ЛОЖЬ) Тогда
								ВстретилсяПостформинг = Истина;
							КонецЕсли;
							
							Продолжить;
							
						КонецЕсли;
						
						ПлощадьОстаткаСверху = ШиринаПакета * (ВысотаЛиста - ВысотаПакета - ТолщинаПила);
						ОбщаяПлощадь = ПлощадьОстаткаСлева + ПлощадьОстаткаСверху;
						ПроцентСвободногоПространстваСтолбца = ?(ПлощадьПолосы > 0, ОбщаяПлощадь * 100 / ПлощадьПолосы, 100);
						ПроцентОстаткаСверху = ?(ПлощадьПолосы > 0, ПлощадьОстаткаСверху * 100 / ПлощадьПолосы, 100);
						
						Если ПроцентОстаткаСверху < ПоследнийПроцентОстаткаСверху Тогда
							
							ПоследнийПроцентОстаткаСверху = ПроцентОстаткаСверху;
							ЛучшийСтолбец = ПоследнееРешение.Скопировать();
							Если ПроверкаОстатков Тогда
								ЛучшаяПолоса = ПоследнееРешение.Скопировать();
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
						
					ПлощадьПолосы = ШиринаПакета * ВысотаЛиста;
					//////
					СтруктураДляПроверкиЗаполненности = Неопределено;
					Если НЕ ПроверкаОстатков Тогда
						СтруктураДляПроверкиЗаполненности = ПроверитьВозможностьИспользованияОстатков(ПоследнееРешение, ТаблицаВсехДеталейДляТестов, ТолщинаПила, Номенклатура, ВысотаЛиста);
					КонецЕсли;
					
					ПлощадьДеталейПолосы = 0;
					ПроцентЗаполненностиПолосы = 0;
					Если СтруктураДляПроверкиЗаполненности <> Неопределено Тогда
						Для каждого Строка Из СтруктураДляПроверкиЗаполненности Цикл
							
							ПлощадьДеталейПолосы = ПлощадьДеталейПолосы + Строка.ВысотаДетали * Строка.ШиринаДетали;
							
						КонецЦикла;
						
						ПроцентЗаполненностиПолосы = ?(ПлощадьПолосы > 0, 100 * ПлощадьДеталейПолосы / ПлощадьПолосы, 0);
						
						Если ПроцентЗаполненностиПолосы > ПоследнийПроцентЗаполненностиПолосы Тогда
							
							ПоследнийПроцентЗаполненностиПолосы = ПроцентЗаполненностиПолосы;
							ЛучшаяПолоса = СтруктураДляПроверкиЗаполненности.Скопировать();
							
						КонецЕсли;
						
						ТаблицаВсехДеталейДляТестов = СписокДеталейНоменклатуры.Скопировать();
						ИсправляемаяСтрока = ТаблицаВсехДеталейДляТестов.Найти(ПерваяДеталь.GUID, "GUID");
						ИсправляемаяСтрока.ДетальВПакете = Истина;
						
					КонецЕсли;
					//////
					
					ПлощадьОстаткаСверху = ШиринаПакета * (ВысотаЛиста - ВысотаПакета - ТолщинаПила);
					ПроцентОстаткаСверху = ?(ПлощадьПолосы > 0, ПлощадьОстаткаСверху * 100 / ПлощадьПолосы, 100);
					ОбщаяПлощадь = ПлощадьОстаткаСлева + ПлощадьОстаткаСверху;
					ПроцентСвободногоПространстваСтолбца = ?(ПлощадьПолосы > 0, ОбщаяПлощадь * 100 / ПлощадьПолосы, 100);
					
					Если СтруктураДляПроверкиЗаполненности = Неопределено Тогда
						
						Если ПроцентОстаткаСверху < ПоследнийПроцентОстаткаСверху Тогда
							
							ПоследнийПроцентОстаткаСверху = ПроцентОстаткаСверху;
							ЛучшийСтолбец = ПоследнееРешение.Скопировать();
							Если ПроверкаОстатков Тогда
								ЛучшаяПолоса = ПоследнееРешение.Скопировать();
							КонецЕсли
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПоследнееРешение.Количество() = 1 Тогда
				ЛучшаяПолоса = ПоследнееРешение.Скопировать();
			КонецЕсли;
			
			Если ПроверкаОстатков И ШиринаСамойУзкойДетали > ШиринаОставшегосяКуска Тогда
				
				Прервать;
				
			КонецЕсли;
			
			Если ЛучшаяПолоса.Количество() > 0 Тогда
				
					Для каждого Строка Из ЛучшаяПолоса Цикл
						
						ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
						ИсправляемаяСтрока.ДетальВПакете = Истина;
						
					КонецЦикла;
				
				ВысотаПакета = ЛучшаяПолоса.Итог("ВысотаДетали") + ТолщинаПила * (ЛучшаяПолоса.Количество() - 1);
				ЛучшаяПолоса.Сортировать("ШиринаДетали Убыв");
				ШиринаПакета = ?(ЛучшаяПолоса.Количество() > 0, ЛучшаяПолоса[0].ШиринаДетали, 0);
				
				РешениеДляДобавления = ЛучшаяПолоса.Скопировать();
				ТаблицаПакетов = ДобавитьЛучшееРешение(РешениеДляДобавления, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета, ТолщинаПила, НЕ ПроверкаОстатков);
				НомерПакета = НомерПакета + 1;
				ЛучшаяПолоса.Очистить();
				ШиринаОставшегосяКуска = ШиринаОставшегосяКуска - ШиринаПакета - ТолщинаПила;
				//////////
				
				Отбор = Новый Структура;
				Отбор.Вставить("ДетальВПакете", Ложь);
				
				МассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Отбор);
				
				ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать(МассивВсехДеталей);
				
				Если МожетВстретитьсяПостформинг Тогда
		
					ВстретилсяПостформинг = ТаблицаВсехДеталей.НайтиСтроки(Новый Структура("Постформинг", Истина)).Количество() > 0;
					ЭтоНеПолныйЛист = (ВысотаЛиста < Номенклатура.ШиринаДетали);
					
					Если ВстретилсяПостформинг И ЭтоНеПолныйЛист Тогда
						
						МассивДеталейСПостформингом = ТаблицаВсехДеталей.НайтиСтроки(Новый Структура("Постформинг", Истина));
						
						Для Каждого Эл ИЗ МассивДеталейСПостформингом Цикл
							ТаблицаВсехДеталей.Удалить(Эл);	
						КонецЦикла;
						
						ВстретилсяПостформинг = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТаблицаВсехДеталейДляТестов = ТаблицаВсехДеталей.Скопировать();
				ТаблицаОставшихсяДеталей = ТаблицаВсехДеталей.Скопировать();
				ТаблицаПервыхДеталей = ТаблицаВсехДеталей.Скопировать();
				
				ТаблицаВсехДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
				ТаблицаВсехДеталейДляТестов.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
				ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
				ТаблицаПервыхДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
				
				ПоследнееРешение.Очистить();

				ИтогВысотыПоДеталям = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
				///////////
				
			КонецЕсли;
			
			ПоследнийПроцентОстаткаСверху = 100;
			ПоследнийПроцентОстаткаСвободногоПространстваСтолбца = 100;
			ВысотаПакета = 0;
			ШиринаПакета = 0;
			ШиринаПоследнейДетали = 0;
			ПлощадьОстаткаСлева = 0;
			ПоследнийПроцентЗаполненностиПолосы = 0;
			
		КонецЦикла; // Пока хватает деталей на целый столбец
		
		Если
			
			НЕ (ИтогВысотыПоДеталям > 0 И ИтогВысотыПоДеталям < ВысотаЛиста И ПроверкаОстатков) 
			И НЕ ОбходОставшихся 
			Тогда
			
			МассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("ДетальВПакете", Ложь));
			ТаблицаОставшихсяДеталей = СписокДеталейНоменклатуры.Скопировать(МассивВсехДеталей);
			ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");

			ВысотаПакета = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
			ШиринаПакета = ?(ТаблицаОставшихсяДеталей.Количество() > 0, ТаблицаОставшихсяДеталей[0].ШиринаДетали, 0);
			
			Если ТаблицаОставшихсяДеталей.Количество() > 0
				И СписокДеталейНоменклатуры.Количество() <> ТаблицаОставшихсяДеталей.Количество() Тогда
				
				КоличествоЭлементовВТаблице = ТаблицаОставшихсяДеталей.Количество();
				ШиринаСамойУзкойДетали = ?(КоличествоЭлементовВТаблице > 0, ТаблицаОставшихсяДеталей[КоличествоЭлементовВТаблице - 1].ШиринаДетали, 0);
				
				Если ШиринаСамойУзкойДетали <= ШиринаЛиста Тогда
					
					Пока ВысотаПакета > ВысотаЛиста Цикл
						
						Если ПроверкаОстатков И ШиринаСамойУзкойДетали > ШиринаОставшегосяКуска Тогда
							
							Прервать;
							
						КонецЕсли;
						
						Если ПроверкаОстатков Тогда
						
							ШиринаЛиста = ШиринаОставшегосяКуска;
						
						КонецЕсли;
						
						Если ВысотаПакета <> СтараяВысотаПакета Или СтараяВысотаПакета = 0 Тогда
							
							ТаблицаОставшихсяДеталей.Колонки.Удалить("ДетальПроверена");
							
							НоваяТаблицаПакетов = АлгоритмОРанце(ТаблицаОставшихсяДеталей, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, Номенклатура, ,ПроверкаОстатков, ВысотаПакета, Истина);
							
							Если НоваяТаблицаПакетов.Количество() > 0 Тогда
								
								Для каждого Пакет Из НоваяТаблицаПакетов Цикл
									
									Если Не ПроверкаОстатков Тогда
										
										Для Каждого Строка Из Пакет.Пакет Цикл
											
											ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
											ИсправляемаяСтрока.ДетальВПакете = Истина;
											
										КонецЦикла;
										
									КонецЕсли;
									
									ВысотаПакета = Пакет.Пакет.Итог("ВысотаДетали") + ТолщинаПила * (Пакет.Пакет.Количество() - 1);
									НомерПакета = НомерПакета + 1;
									НоваяСтрока = ТаблицаПакетов.Добавить();
									НоваяСтрока.Пакет = Пакет.Пакет;
									НоваяСтрока.ШиринаПакета = Пакет.ШиринаПакета;
									НоваяСтрока.ВысотаПакета = ВысотаПакета;
									НоваяСтрока.НомерПакета = НомерПакета;
									
									ШиринаОставшегосяКуска = ШиринаОставшегосяКуска - Пакет.ШиринаПакета - ТолщинаПила;
									
								КонецЦикла;
								
							КонецЕсли;
							
							НовыйМассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("ДетальВПакете", Ложь));
							НоваяТаблицаОставшихсяДеталей = СписокДеталейНоменклатуры.Скопировать(НовыйМассивВсехДеталей);
							
							Если НоваяТаблицаОставшихсяДеталей.Количество() = СписокДеталейНоменклатуры.Количество() Тогда
								
								Прервать;
								
							Иначе
								
								МассивВсехДеталей = НовыйМассивВсехДеталей;
								ТаблицаОставшихсяДеталей = НоваяТаблицаОставшихсяДеталей;
								ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
								
							КонецЕсли;
							
						Иначе
							
							Прервать;
							
						КонецЕсли;
						
						СтараяВысотаПакета = ВысотаПакета;
						ВысотаПакета = НоваяТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (НоваяТаблицаОставшихсяДеталей.Количество() - 1);
						
					КонецЦикла;
					
				КонецЕсли;
				
				МассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("ДетальВПакете", Ложь));
				ТаблицаОставшихсяДеталей = СписокДеталейНоменклатуры.Скопировать(МассивВсехДеталей);
				ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");

				ВысотаПакета = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
				
				Если ТаблицаОставшихсяДеталей.Количество() > 0 И ВысотаПакета <= ВысотаЛиста Тогда
					
					ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
					ШиринаПакета = ТаблицаОставшихсяДеталей[0].ШиринаДетали;
					
					Если НЕ ПроверкаОстатков Или ПроверкаОстатков И ШиринаПакета <= ШиринаОставшегосяКуска Тогда
						
						ТаблицаПакетов = ДобавитьЛучшееРешение(ТаблицаОставшихсяДеталей, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета + 1, ТолщинаПила, НЕ ПроверкаОстатков);
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ВысотаПакета <= ВысотаЛиста И ТаблицаОставшихсяДеталей.Количество() > 0 И ШиринаПакета <= ШиринаЛиста Тогда
				
				ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
				ВысотаПакета = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
				ШиринаПакета = ТаблицаОставшихсяДеталей[0].ШиринаДетали;
				ТаблицаПакетов = ДобавитьЛучшееРешение(ТаблицаОставшихсяДеталей, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета + 1, ТолщинаПила, Истина);
				
			КонецЕсли;
			
		ИначеЕсли ИтогВысотыПоДеталям > 0 И ИтогВысотыПоДеталям < ВысотаЛиста И ПроверкаОстатков Тогда
			
			ШиринаПакета = ТаблицаОставшихсяДеталей[0].ШиринаДетали;
			
				ВысотаПакета = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
				ШиринаЛиста = ШиринаОставшегосяКуска;
			
			Если ШиринаПакета <= ШиринаЛиста Тогда
				
				ТаблицаПакетов = ДобавитьЛучшееРешение(ТаблицаОставшихсяДеталей, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета + 1, ТолщинаПила);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщаяШирина = 0;
		ТаблицаПакетов.Сортировать("ШиринаПакета Убыв");
	КонецЕсли;
	
	Возврат ТаблицаПакетов;
	
КонецФункции

Функция ДобавитьЛучшееРешение(ЛучшееРешение, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета, ТолщинаПила, ПроставлятьКоординаты = Ложь)
	
	КоординатаУ = 0;
	ОбщаяПлощадьДеталей = 0;
	Если ПроставлятьКоординаты Тогда
		
		Для каждого Строка Из ЛучшееРешение Цикл
			
			ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
			ИсправляемаяСтрока.ДетальВПакете = Истина;
			ОбщаяПлощадьДеталей = ОбщаяПлощадьДеталей + Строка.ВысотаДетали * Строка.ШиринаДетали;
			
			Если НЕ Строка.ИспользуетсяВОстаткахПакета Тогда
				
				Строка.КоординатаУ = КоординатаУ;
				КоординатаУ = КоординатаУ + ТолщинаПила + Строка.ВысотаДетали;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НоваяСтрока = ТаблицаПакетов.Добавить();
	НоваяСтрока.Пакет = ЛучшееРешение;
	НоваяСтрока.ШиринаПакета = ШиринаПакета;
	НоваяСтрока.ВысотаПакета = ВысотаПакета;
	НоваяСтрока.НомерПакета = НомерПакета;
	НоваяСтрока.ОбщаяПлощадьДеталей = ОбщаяПлощадьДеталей;
	
	Возврат ТаблицаПакетов;
	
КонецФункции

Функция ПолезныйОстаток(ПределыОстатков, ВысотаОстатка, ШиринаОстатка, Шаг = 100)
	
	Если ТипЗнч(ПределыОстатков) = Тип("СправочникСсылка.СеткаОстатков") Тогда
		
		Шаг = ?(ПределыОстатков.Шаг > 0, ПределыОстатков.Шаг, 100);
		ПределыОстатков = ПределыОстатков.СеткаОстатков;
		
	КонецЕсли;
	
	ЕстьСетка = ПределыОстатков.Количество() > 0;
	
	ПределДлина = ВысотаОстатка - (ВысотаОстатка % Шаг);
	ПределШирина = ШиринаОстатка - (ШиринаОстатка % Шаг);
	
	//Возврат ПределыОстатков.НайтиСтроки(Новый Структура("Высота, Ширина", ПределДлина, ПределШирина)).Количество() > 0;
	ЕстьСтроки = ПределыОстатков.НайтиСтроки(Новый Структура("Высота, Ширина", ПределДлина, ПределШирина)).Количество() > 0;
	Если НЕ ЕстьСетка Тогда
		Возврат Истина;
	ИначеЕсли ЕстьСтроки Тогда
		Возврат ПределыОстатков.НайтиСтроки(Новый Структура("Высота, Ширина", ПределДлина, ПределШирина))[0].Значение;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьВозможностьИспользованияОстатков(ЛучшееРешение, СписокДеталейНоменклатуры, ТолщинаПила, Номенклатура, ВысотаЛиста, ПроверкаРазвернутыхДеталей = Ложь)
	
	Если НЕ ПроверкаРазвернутыхДеталей Тогда
		
		Для каждого Строка Из ЛучшееРешение Цикл
			
			ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
			ИсправляемаяСтрока.ДетальВПакете = Истина;
			Строка.ДетальВПакете = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("ШиринаОстатка", Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("ВысотаОстатка", Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("КоординатаУ", Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("КоординатаХ", Новый ОписаниеТипов("Число"));
	ШиринаОстатка = 0;
	ВысотаОстатка = 0;
	ШиринаПредыдущегоОстатка = ЛучшееРешение[0].ШиринаДетали;
	КоординатаУ = 0;
	КоординатаВерхаДетали = 0;
	
	Для каждого Деталь Из ЛучшееРешение Цикл
		
		КоординатаВерхаДетали = КоординатаВерхаДетали + Деталь.ВысотаДетали + ТолщинаПила;
		
		Если Деталь.ШиринаДетали + ТолщинаПила < ШиринаПредыдущегоОстатка и ШиринаПредыдущегоОстатка <> Деталь.ШиринаДетали Тогда
			
			ШиринаОстатка = ШиринаПредыдущегоОстатка - Деталь.ШиринаДетали - ТолщинаПила;
			ВысотаОстатка = ВысотаЛиста - КоординатаУ;
			НоваяСтрока = ТаблицаОстатков.Добавить();
			НоваяСтрока.КоординатаУ = КоординатаУ;
			НоваяСтрока.КоординатаХ = Деталь.ШиринаДетали + ТолщинаПила;
			НоваяСтрока.ШиринаОстатка = ШиринаОстатка;
			НоваяСтрока.ВысотаОстатка = ВысотаОстатка;
			ШиринаПредыдущегоОстатка = Деталь.ШиринаДетали;
			
		КонецЕсли;
		
		КоординатаУ = КоординатаУ + Деталь.ВысотаДетали + ТолщинаПила;
		
	КонецЦикла;
	
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		ТаблицаОстатков.Сортировать("ВысотаОстатка Возр");
		
		Для каждого Остаток Из ТаблицаОстатков Цикл
			
			Если ПроверкаРазвернутыхДеталей Тогда
				
				ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать();
				
			Иначе
				
				Отбор = Новый Структура;
				Отбор.Вставить("ДетальВПакете", Ложь);
				МассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Отбор);
				ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать(МассивВсехДеталей);
				
			КонецЕсли;
			
			ТаблицаВсехДеталей.Колонки.Удалить("ДетальПроверена");
			
			ТаблицаДеталей = АлгоритмОРанце(ТаблицаВсехДеталей, Остаток.ВысотаОстатка, Остаток.ШиринаОстатка, ТолщинаПила, Номенклатура, ,Истина);
			
			Если ТаблицаДеталей.Количество() > 0 Тогда
				
				КоординатаХ = Остаток.КоординатаХ;
				
				Для Каждого Таблица Из ТаблицаДеталей Цикл
					
					КоординатаУ = Остаток.КоординатаУ;
					
					Для каждого Деталь Из Таблица.Пакет Цикл
						
						НоваяСтрока = ЛучшееРешение.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
						НоваяСтрока.КоординатаУ = КоординатаУ;
						НоваяСтрока.КоординатаХ = КоординатаХ;
						НоваяСтрока.ИспользуетсяВОстаткахПакета = Истина;
						Если НЕ ПроверкаРазвернутыхДеталей Тогда
							ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
							ИсправляемаяСтрока.ДетальВПакете = Истина;
						Иначе
							ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
							СписокДеталейНоменклатуры.Удалить(ИсправляемаяСтрока);
						КонецЕсли;
						КоординатаУ = КоординатаУ + ТолщинаПила + Деталь.ВысотаДетали;
						///////////
						НоваяСтрока.ДетальВПакете = Истина;
						//////////////
						
					КонецЦикла;
					
					КоординатаХ = КоординатаХ + ТолщинаПила + Таблица.ШиринаПакета;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЛучшееРешение;
	
КонецФункции

Процедура ДобавитьКромкиВМассив(Выборка, МассивВсехКромок)
	
	МассивКромок = Новый Массив;
	МассивКромок.Добавить(Выборка.ВыборМебельнойКромкиСверху);
	МассивКромок.Добавить(Выборка.ВыборМебельнойКромкиСнизу);
	МассивКромок.Добавить(Выборка.ВыборМебельнойКромкиСлева);
	МассивКромок.Добавить(Выборка.ВыборМебельнойКромкиСправа);
	
	Для Каждого Кромка Из МассивКромок Цикл
		
		ЕстьВМассиве = Ложь;
		
		Для Каждого Элемент Из МассивВсехКромок Цикл
			
			Если Кромка = Элемент Тогда
				
				ЕстьВМассиве = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьВМассиве Тогда
			
			МассивВсехКромок.Добавить(Кромка);
			
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Функция РасположитьНаЛистахМетодомРанца(СсылкаДокумента, СписокДеталей, НарядЗадание, МассивБуквеннойНумерации)
	
	МассивИтоговогоРасположенияДеталей = Новый Массив;
	СамыйЛучшийПроцентОтхода = "";
	АлгоритмРаскроя = "";
	Подразделение = СсылкаДокумента.Подразделение;
	НомерДокумента = СсылкаДокумента.Номер;
	ТолщинаПила = ?(ЗначениеЗаполнено(Подразделение.ТолщинаПропила), Подразделение.ТолщинаПропила, 5);
	СоответствиеОбрезков = Новый Соответствие;
	
	//Создаем основу для дерева
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Спецификация");
	Дерево.Колонки.Добавить("Номенклатура");
	Дерево.Колонки.Добавить("ВысотаЛиста");
	Дерево.Колонки.Добавить("ШиринаЛиста");
	Дерево.Колонки.Добавить("ВысотаДетали");
	Дерево.Колонки.Добавить("ШиринаДетали");
	Дерево.Колонки.Добавить("Название");
	Дерево.Колонки.Добавить("Абсцисса");
	Дерево.Колонки.Добавить("Ордината");
	Дерево.Колонки.Добавить("Остаток");
	Дерево.Колонки.Добавить("НомерЛиста");
	Дерево.Колонки.Добавить("НомерСтроки");
	Дерево.Колонки.Добавить("Материал");
	Дерево.Колонки.Добавить("ИД");
	Дерево.Колонки.Добавить("GUID");
	Дерево.Колонки.Добавить("Количество");
	Дерево.Колонки.Добавить("Идентификатор");
	Дерево.Колонки.Добавить("НоменклатураДляСклеивания");
	Дерево.Колонки.Добавить("НомерИзделия");
	Дерево.Колонки.Добавить("МожноПовернуть");
	Дерево.Колонки.Добавить("НеТорцевать");
	Дерево.Колонки.Добавить("СтруктураОтверстий");
	Дерево.Колонки.Добавить("Комментарий");
	Дерево.Колонки.Добавить("РадиусФасада");
	Дерево.Колонки.Добавить("ДетальДляСклеивания");
	Дерево.Колонки.Добавить("Обтачивать");
	Дерево.Колонки.Добавить("Постформинг");
	Дерево.Колонки.Добавить("КоличествоПетель");
	Дерево.Колонки.Добавить("РасположениеПазов");
	Дерево.Колонки.Добавить("РасположениеПазовИРучкиНаФасадах");
	Дерево.Колонки.Добавить("НаименованиеДетали");
	Дерево.Колонки.Добавить("ПоворотДетали");
	Дерево.Колонки.Добавить("Порядок");
	Дерево.Колонки.Добавить("ОсобыйПорядок");
	Дерево.Колонки.Добавить("Кромка1");
	Дерево.Колонки.Добавить("Кромка2");
	Дерево.Колонки.Добавить("Кромка3");
	Дерево.Колонки.Добавить("Кромка4");
	Дерево.Колонки.Добавить("ДетальВПакете");
	
	Дерево.Колонки.Добавить("КривойПилСверху");
	Дерево.Колонки.Добавить("КривойПилСправа");
	Дерево.Колонки.Добавить("КривойПилСнизу");
	Дерево.Колонки.Добавить("КривойПилСлева");
	
	Дерево.Колонки.Добавить("ВыборМебельнойКромкиСверху");
	Дерево.Колонки.Добавить("ВыборМебельнойКромкиСправа");
	Дерево.Колонки.Добавить("ВыборМебельнойКромкиСнизу");
	Дерево.Колонки.Добавить("ВыборМебельнойКромкиСлева");
	
	Дерево.Колонки.Добавить("КромкаСверхуКр");
	Дерево.Колонки.Добавить("КромкаСправаКр");
	Дерево.Колонки.Добавить("КромкаСнизуКр");
	Дерево.Колонки.Добавить("КромкаСлеваКр");
	
	Дерево.Колонки.Добавить("РадиусЛевоВерх");
	Дерево.Колонки.Добавить("РадиусПравоВерх");
	Дерево.Колонки.Добавить("РадиусПравоНиз");
	Дерево.Колонки.Добавить("РадиусЛевоНиз");
	
	Дерево.Колонки.Добавить("СрезЛевоВерх");
	Дерево.Колонки.Добавить("СрезПравоВерх");
	Дерево.Колонки.Добавить("СрезПравоНиз");
	Дерево.Колонки.Добавить("СрезЛевоНиз");
	
	
	СтрокаСпецификация = Дерево.Строки.Добавить();
	СтрокаСпецификация.Спецификация = СсылкаДокумента;
	
	#Область Предварительная_работа_с_деталями
	
	Для Каждого Элемент Из СписокДеталей Цикл
		
		Элемент.GUID = Новый УникальныйИдентификатор();
		
	КонецЦикла;
	
	#КонецОбласти
	
	//Получаем список изпользуемой номенклатуры в раскрое
	СписокНоменклатуры = СписокДеталей.Скопировать(,"Номенклатура, ПорядокПечати, МожноПовернуть");
	СписокНоменклатуры.Свернуть("Номенклатура, ПорядокПечати", "МожноПовернуть");
	СписокНоменклатуры.Сортировать("ПорядокПечати Возр");
	
	//Таблица листов номенклатуры
	ТаблицаЛистовНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаЛистовНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЛистовНоменклатуры.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаЛистовНоменклатуры.Колонки.Добавить("ПлощадьСДеталямиПоследнегоЛиста", Новый ОписаниеТипов("Число"));
	
	//Сетка остатков
	
	КонечныйНомерЛиста = 0;
	КоличествоЛистов = 0;
	МассивНомеровИспользуемыхОстатков = Новый Массив;
	
	Для Каждого ЭлементСписка Из СписокНоменклатуры Цикл // цикл по материалам
		
		ТекущаяНоменклатура = ЭлементСписка.Номенклатура;
		
		//Заполняем номенклатуру в дереве
		СтрокаНоменклатура = СтрокаСпецификация.Строки.Добавить();
		СтрокаНоменклатура.Номенклатура = ТекущаяНоменклатура;
		
		ТекущийНомерЛиста = -1;
		
		ОптимальныйАлгоритмРаскроя = "";
		НоменклатурнаяГруппа = ТекущаяНоменклатура.НоменклатурнаяГруппа;
		
		СтруктураРазмеровЛиста = ЛексСервер.ПолучитьРазмерыЛиста(ТекущаяНоменклатура, Подразделение);
		ВысотаЛиста = СтруктураРазмеровЛиста.ВысотаЛиста;
		ШиринаЛиста = СтруктураРазмеровЛиста.ШиринаЛиста;
		
		МассивОстатков = Новый Массив;
		МассивОстатковДляРазвернутыхДеталей = Новый Массив;
	
		Если НарядЗадание Тогда
			
			ТаблицаОстатков = СсылкаДокумента.ОстаткиЛистовогоМатериала;
			МассивОстатков = ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура", ТекущаяНоменклатура));
			
			сп = Новый СписокЗначений;
			сп.ЗагрузитьЗначения(МассивОстатков);
			МассивОстатковДляРазвернутыхДеталей = сп.ВыгрузитьЗначения();
			
		КонецЕсли;
		
		КоличествоОстатковИтог = -1;
		ПлощадьОстатковИтог = -1;
		
		Если ТекущаяНоменклатура.СеткаОстатков = Справочники.СеткаОстатков.ПустаяСсылка() Тогда
			
			ПределыОстатков = ?(НоменклатурнаяГруппа.СеткаОстатков.СеткаОстатков = Справочники.СеткаОстатков.ПустаяСсылка(), Новый ТаблицаЗначений, НоменклатурнаяГруппа.СеткаОстатков);
			
		Иначе
			
			ПределыОстатков = ТекущаяНоменклатура.СеткаОстатков;
			
		КонецЕсли;
		
		СписокДеталейНоменклатуры = СписокДеталей.Скопировать(Новый Структура("Номенклатура", ТекущаяНоменклатура));
		КоличествоДеталейНоменклатуры = СписокДеталейНоменклатуры.Итог("Количество");
		
		ЛучшийПроцентОтхода = 0;
		НаименьшееКоличествоЛистов = 999999999;
		МощностьРаскроя = 0;
		СтруктураСЛучшимиРезультатами = Новый Структура;
		СтруктураСЛучшимиРезультатами.Вставить("ТаблицаДеталейИтог", Новый ОписаниеТипов("ТаблицаЗначений"));
		СтруктураСЛучшимиРезультатами.Вставить("ОптимальныйАлгоритмРаскроя", Новый ОписаниеТипов("Строка"));
		СтруктураСЛучшимиРезультатами.Вставить("КоличествоЛистов", Новый ОписаниеТипов("Число"));
		СтруктураСЛучшимиРезультатами.Вставить("ПлощадьОстатковПоНоменклатуре", Новый ОписаниеТипов("Число"));
		СтруктураСЛучшимиРезультатами.Вставить("ПлощадьОбрезковПоНоменклатуре", Новый ОписаниеТипов("Число"));
		СтруктураСЛучшимиРезультатами.Вставить("МощностьРаскроя", Новый ОписаниеТипов("Число"));
		СтруктураСЛучшимиРезультатами.Вставить("СравниваемыйПроцент", Новый ОписаниеТипов("Число"));
		СтруктураСЛучшимиРезультатами.Вставить("МассивНомеровОстатков", Новый ОписаниеТипов("Массив"));
		
		ЛучшийСравниваемыйПроцент = 0;
		ПоперечныйПил = НоменклатурнаяГруппа.ПоперечныйПил;
		БезОкругленияДоЛистов = ?(НарядЗадание, Ложь, СсылкаДокумента.БезОкругленияДоЛистов);
		
		СписокДеталейДляФормированияПакетов = СписокДеталейНоменклатуры.Скопировать();
		
		
		Если КоличествоДеталейНоменклатуры > 999 Тогда
			//Доработать.
			СтруктураДляСтрокиРаскроя = ФормированиеПакетаДляБольшогоКоличестваДеталей(СписокДеталейДляФормированияПакетов, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, ТекущаяНоменклатура, ПоперечныйПил, ПределыОстатков, Подразделение, БезОкругленияДоЛистов, НарядЗадание, МассивОстатков);
			ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскроя);
			
		Иначе
			
			СтруктураДляСтрокиРаскроя = ФормированиеПакета(СписокДеталейДляФормированияПакетов, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, ТекущаяНоменклатура, ,ПоперечныйПил, ПределыОстатков, Подразделение, БезОкругленияДоЛистов, НарядЗадание, МассивОстатков, МассивБуквеннойНумерации);
			Если СтруктураДляСтрокиРаскроя.Свойство("ТекстОшибки") Тогда
				Возврат СтруктураДляСтрокиРаскроя;
			КонецЕсли;
			
			Если СтруктураДляСтрокиРаскроя.Свойство("КоличествоЛистов") Тогда
				
				Если СтруктураДляСтрокиРаскроя.КоличествоЛистов < НаименьшееКоличествоЛистов
					ИЛИ СтруктураДляСтрокиРаскроя.МощностьРаскроя > МощностьРаскроя
					И СтруктураДляСтрокиРаскроя.КоличествоЛистов = НаименьшееКоличествоЛистов Тогда
					
					ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскроя);
					ЛучшийПроцентОтхода = 0;
					ЛучшийСравниваемыйПроцент = СтруктураСЛучшимиРезультатами.СравниваемыйПроцент;
					ЛучшийРазрешенныйПроцентПоШирине = 0;
					НаименьшееКоличествоЛистов = СтруктураСЛучшимиРезультатами.КоличествоЛистов;
					МощностьРаскроя = СтруктураСЛучшимиРезультатами.МощностьРаскроя;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ТекущаяНоменклатура.НаличиеТекстуры Тогда
				
				СписокПовернутыхДеталейДляФормированияПакетов = СписокДеталейНоменклатуры.Скопировать();
				СтруктураДляСтрокиРаскрояПовернутыхДеталей = ФормированиеПакета(СписокПовернутыхДеталейДляФормированияПакетов, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, ТекущаяНоменклатура, Истина, ПоперечныйПил, ПределыОстатков, Подразделение, БезОкругленияДоЛистов, НарядЗадание, МассивОстатковДляРазвернутыхДеталей, МассивБуквеннойНумерации);
				Если СтруктураДляСтрокиРаскрояПовернутыхДеталей.Свойство("КоличествоЛистов") Тогда
					
					Если СтруктураДляСтрокиРаскрояПовернутыхДеталей.КоличествоЛистов < НаименьшееКоличествоЛистов
						ИЛИ СтруктураДляСтрокиРаскрояПовернутыхДеталей.МощностьРаскроя > МощностьРаскроя
						И СтруктураДляСтрокиРаскрояПовернутыхДеталей.КоличествоЛистов = НаименьшееКоличествоЛистов Тогда
						
						ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскрояПовернутыхДеталей);
						ЛучшийПроцентОтхода = 0;
						ЛучшийРазрешенныйПроцентПоШирине = 0;
						ЛучшийСравниваемыйПроцент = СтруктураСЛучшимиРезультатами.СравниваемыйПроцент;
						НаименьшееКоличествоЛистов = СтруктураСЛучшимиРезультатами.КоличествоЛистов;
						МощностьРаскроя = СтруктураСЛучшимиРезультатами.МощностьРаскроя;
						
					КонецЕсли;
					
				Иначе
					
					ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскрояПовернутыхДеталей);
					ЛучшийПроцентОтхода = 0;
					НаименьшееКоличествоЛистов = СтруктураСЛучшимиРезультатами.КоличествоЛистов;
					МощностьРаскроя = СтруктураСЛучшимиРезультатами.МощностьРаскроя;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СписокДеталейНоменклатуры = СтруктураСЛучшимиРезультатами;
		Если НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Столешница Тогда
			СамыйЛучшийПроцентОтхода = СамыйЛучшийПроцентОтхода + " Столешница " + ЛучшийСравниваемыйПроцент;
		ИначеЕсли НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Пристенок Тогда
			СамыйЛучшийПроцентОтхода = СамыйЛучшийПроцентОтхода + " Пристенок " + ЛучшийСравниваемыйПроцент;
		КонецЕсли;
		
		Если НЕ СтруктураДляСтрокиРаскроя.Свойство("КоличествоЛистов") И СтруктураСЛучшимиРезультатами.Свойство("КоличествоЛистов")Тогда
		
			СтруктураДляСтрокиРаскроя = Новый Структура;
			СтруктураДляСтрокиРаскроя.Вставить("ТаблицаДеталейИтог", Новый ОписаниеТипов("ТаблицаЗначений"));
			СтруктураДляСтрокиРаскроя.Вставить("ОптимальныйАлгоритмРаскроя", Новый ОписаниеТипов("Строка"));
			СтруктураДляСтрокиРаскроя.Вставить("КоличествоЛистов", Новый ОписаниеТипов("Число"));
			СтруктураДляСтрокиРаскроя.Вставить("ПлощадьОстатковПоНоменклатуре", Новый ОписаниеТипов("Число"));
			СтруктураДляСтрокиРаскроя.Вставить("ПлощадьОбрезковПоНоменклатуре", Новый ОписаниеТипов("Число"));
			СтруктураДляСтрокиРаскроя.Вставить("МощностьРаскроя", Новый ОписаниеТипов("Число"));
			СтруктураДляСтрокиРаскроя.Вставить("СравниваемыйПроцент", Новый ОписаниеТипов("Число"));
			СтруктураДляСтрокиРаскроя.Вставить("МассивНомеровОстатков", Новый ОписаниеТипов("Массив"));
		
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураДляСтрокиРаскроя, СтруктураСЛучшимиРезультатами);
		
		Таб = СтруктураДляСтрокиРаскроя.ТаблицаДеталейИтог;
		Таб.Сортировать("НомерЛиста Возр");
		ТекущийНомерЛистаДляДерева = -1;
		СоответствиеОбрезков.Вставить(ТекущаяНоменклатура, СтруктураДляСтрокиРаскроя.ПлощадьОбрезковПоНоменклатуре);
		
		Для каждого СтрокаТаб Из Таб Цикл
			
			Если ТекущийНомерЛистаДляДерева <> СтрокаТаб.НомерЛиста Тогда
				
				СтрокаЛист = СтрокаНоменклатура.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЛист, СтрокаТаб);
				ТекущийНомерЛистаДляДерева = СтрокаТаб.НомерЛиста;
				
			КонецЕсли;
			
			СтрокаДеталь = СтрокаЛист.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДеталь, СтрокаТаб);
			СтрокаДеталь.Название = СтрокаТаб.НомерСтроки;
			СтрокаДеталь.Абсцисса = СтрокаТаб.КоординатаХ;
			СтрокаДеталь.Ордината = СтрокаТаб.КоординатаУ;
			
			СтрокаДеталь.ВыборМебельнойКромкиСверху = СтрокаТаб.ВыборМебельнойКромкиСверху;
			СтрокаДеталь.ВыборМебельнойКромкиСправа = СтрокаТаб.ВыборМебельнойКромкиСправа;
			СтрокаДеталь.ВыборМебельнойКромкиСнизу = СтрокаТаб.ВыборМебельнойКромкиСнизу;
			СтрокаДеталь.ВыборМебельнойКромкиСлева = СтрокаТаб.ВыборМебельнойКромкиСлева;
			
			СтрокаДеталь.КромкаСверхуКр = СтрокаТаб.ВыборМебельнойКромкиСверху.КраткоеНаименование;
			СтрокаДеталь.КромкаСправаКр = СтрокаТаб.ВыборМебельнойКромкиСправа.КраткоеНаименование;
			СтрокаДеталь.КромкаСнизуКр = СтрокаТаб.ВыборМебельнойКромкиСнизу.КраткоеНаименование;
			СтрокаДеталь.КромкаСлеваКр = СтрокаТаб.ВыборМебельнойКромкиСлева.КраткоеНаименование;
			
			Если СтрокаТаб.Срез Тогда
				СтрокаДеталь.СрезПравоНиз = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаЛистовНоменклатуры = ТаблицаЛистовНоменклатуры.Добавить();
		СтрокаЛистовНоменклатуры.Номенклатура = ЭлементСписка.Номенклатура;
		СтрокаЛистовНоменклатуры.Количество = СтруктураДляСтрокиРаскроя.КоличествоЛистов;
		
		АлгоритмРаскроя = АлгоритмРаскроя + СтруктураДляСтрокиРаскроя.ОптимальныйАлгоритмРаскроя;
		
		Для каждого строка Из СписокДеталей Цикл
			Для каждого Деталь Из СтруктураДляСтрокиРаскроя.ТаблицаДеталейИтог Цикл
			
				Если Строка.ИД = Деталь.ИД Тогда
				
					Строка.НомерЛиста = Деталь.НомерЛиста;
					Строка.ПоследнийЛист = Деталь.ПоследнийЛист;
					Строка.ВсегоЛистов = Деталь.ВсегоЛистов;
				
				КонецЕсли;
			
			КонецЦикла;
		КонецЦикла;
		
		Для каждого Значение Из СтруктураДляСтрокиРаскроя.МассивНомеровОстатков Цикл
		
			МассивНомеровИспользуемыхОстатков.Добавить(Значение);
		
		КонецЦикла;
		
	КонецЦикла; // цикл по материалам
	
	НовыйМассив = Новый Массив;
	Соответствие = Новый Соответствие;
	
	Для каждого ЭлементМассива Из МассивНомеровИспользуемыхОстатков Цикл
		
		Соответствие.Вставить(ЭлементМассива);
		
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Соответствие Цикл
		
		НовыйМассив.Добавить(КлючИЗначение.Ключ);
		
	КонецЦикла;
	
	СтруктураРезультатов = Новый Структура;
	СтруктураРезультатов.Вставить("Дерево", Дерево);
	СтруктураРезультатов.Вставить("ТаблицаЛистовНоменклатуры", ТаблицаЛистовНоменклатуры);
	СтруктураРезультатов.Вставить("ТаблицаДеталей", Новый ХранилищеЗначения(СписокДеталей));
	СтруктураРезультатов.Вставить("СоответствиеОбрезков", СоответствиеОбрезков);
	СтруктураРезультатов.Вставить("МассивНомеровИспользуемыхОстатков", НовыйМассив);
	Если ЗначениеЗаполнено(СтруктураДляСтрокиРаскроя) Тогда
		СамыйЛучшийПроцентОтхода = ?(СтруктураДляСтрокиРаскроя.СравниваемыйПроцент <> "", СамыйЛучшийПроцентОтхода + " Сп " + НомерДокумента, Строка(СтруктураДляСтрокиРаскроя.СравниваемыйПроцент));
	КонецЕсли;
	СтруктураРезультатов.Вставить("ЛучшийПроцентОтхода", СамыйЛучшийПроцентОтхода);
	СтруктураРезультатов.Вставить("АлгоритмРаскроя", АлгоритмРаскроя);
	
	Возврат СтруктураРезультатов;
	
КонецФункции

Процедура ДобавитьСтрокуВСписокДеталей(СписокДеталейНоменклатуры, Индекс, Номенклатура, НомерЛиста, ВысотаОстатка, ШиринаОстатка, ВысотаЛиста, ШиринаЛиста, КоординатаУ, КоординатаХ)
	
	НоваяСтрока = СписокДеталейНоменклатуры.Вставить(Индекс);
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.НомерЛиста = НомерЛиста;
	НоваяСтрока.ВысотаДетали = ВысотаОстатка;
	НоваяСтрока.ШиринаДетали = ШиринаОстатка;
	НоваяСтрока.ВысотаЛиста = ВысотаЛиста;
	НоваяСтрока.ШиринаЛиста = ШиринаЛиста;
	НоваяСтрока.КоординатаУ = КоординатаУ;
	НоваяСтрока.КоординатаХ = КоординатаХ;
	НоваяСтрока.Остаток = Истина;
	
КонецПроцедуры

Процедура РазместитьДеталь(СписокДеталейНоменклатуры, Элемент, ЭлементМассива, ОстатокПоВысоте, ОстатокПоШирине, ТолщинаПила, ПоворотДетали = Ложь, ПоперечныйПил = Ложь)
	
	Если ПоворотДетали Тогда
		ВысотаДеталиБезТекстуры = Элемент.ВысотаДетали;
		Элемент.ВысотаДетали = Элемент.ШиринаДетали;
		Элемент.ШиринаДетали = ВысотаДеталиБезТекстуры;
		Элемент.ПоворотДетали = НЕ Элемент.ПоворотДетали;
	КонецЕсли;
	
	//__________Размешение детали на листе__________
	Элемент.КоординатаУ = ЭлементМассива.КоординатаУ;
	Элемент.КоординатаХ = ЭлементМассива.КоординатаХ;
	Элемент.НомерЛиста = ЭлементМассива.НомерЛиста;
	Элемент.Порядок = 100;
	Элемент.ДетальРазмещена = Истина;
	
	//__________Добавление ВСЕХ остатков__________
	ИндексОстатка = СписокДеталейНоменклатуры.Индекс(ЭлементМассива);
	ОстатокПоВысоте = ОстатокПоВысоте - ТолщинаПила;
	ОстатокПоШирине = ОстатокПоШирине - ТолщинаПила;
	
	//позиции остаткам////////////////////////////////////////////////////////////
	Если ПоперечныйПил Тогда
		
		Если ОстатокПоВысоте > 0 Тогда
			КоординатаУ = Элемент.КоординатаУ + Элемент.ВысотаДетали + ТолщинаПила;
			КоординатаХ = Элемент.КоординатаХ;
			ДобавитьСтрокуВСписокДеталей(СписокДеталейНоменклатуры, ИндексОстатка, Элемент.Номенклатура, 
				ЭлементМассива.НомерЛиста, ОстатокПоВысоте, ЭлементМассива.ШиринаДетали, Элемент.ВысотаЛиста, Элемент.ШиринаЛиста, КоординатаУ, КоординатаХ);
		КонецЕсли;
		
		Если ОстатокПоШирине > 0 Тогда
			
			КоординатаУ = Элемент.КоординатаУ;
			КоординатаХ = Элемент.КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила;
			
			ДобавитьСтрокуВСписокДеталей(СписокДеталейНоменклатуры, ИндексОстатка, Элемент.Номенклатура, 
				ЭлементМассива.НомерЛиста, Элемент.ВысотаДетали, ОстатокПоШирине, Элемент.ВысотаЛиста, Элемент.ШиринаЛиста, КоординатаУ, КоординатаХ);
				
		КонецЕсли;
			
	Иначе
		
		Если ОстатокПоШирине > 0 Тогда
			
			КоординатаУ = Элемент.КоординатаУ;
			КоординатаХ = Элемент.КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила;
			
			ДобавитьСтрокуВСписокДеталей(СписокДеталейНоменклатуры, ИндексОстатка, Элемент.Номенклатура, 
				ЭлементМассива.НомерЛиста, ЭлементМассива.ВысотаДетали, ОстатокПоШирине, Элемент.ВысотаЛиста, Элемент.ШиринаЛиста, КоординатаУ, КоординатаХ);
			
		КонецЕсли;
		
		Если ОстатокПоВысоте > 0 Тогда
			
			КоординатаУ = Элемент.КоординатаУ + Элемент.ВысотаДетали + ТолщинаПила;
			КоординатаХ = Элемент.КоординатаХ;
			ДобавитьСтрокуВСписокДеталей(СписокДеталейНоменклатуры, ИндексОстатка, Элемент.Номенклатура, 
				ЭлементМассива.НомерЛиста, ОстатокПоВысоте, Элемент.ШиринаДетали, Элемент.ВысотаЛиста, Элемент.ШиринаЛиста, КоординатаУ, КоординатаХ);
			
		КонецЕсли;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////////
	
	СписокДеталейНоменклатуры.Удалить(ЭлементМассива);
	
КонецПроцедуры

Процедура РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры, Элемент, ТолщинаПила, КоординатаУ, КоординатаХ, НомерЛиста, ВысотаЛиста, ШиринаЛиста, ДобавитьБольшойОстаток, МаленькийОстатокПоШирине, ИспользуетсяВОстатках, ПоперечныйПил = Ложь)
	
	//__________Размешение детали на листе__________
	Элемент.КоординатаУ = КоординатаУ;
	Элемент.КоординатаХ = КоординатаХ;
	Элемент.НомерЛиста = НомерЛиста;
	Элемент.Порядок = 100;
	Элемент.ДетальРазмещена = Истина;
	
	//__________Добавление ВСЕХ остатков__________
	МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток", Истина));
	ЗаменяемыйОстаток = Неопределено;
	
	Для каждого ЭлементМассива Из МассивОстатков Цикл
		
		Если ЭлементМассива.НомерЛиста = НомерЛиста 
			И ЭлементМассива.КоординатаУ = КоординатаУ
			И ЭлементМассива.КоординатаХ = КоординатаХ Тогда
			
			ЗаменяемыйОстаток = ЭлементМассива;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаменяемыйОстаток = Неопределено Тогда
		
		ИндексОстатка = СписокДеталейНоменклатуры.Количество();
		
	Иначе
		
		СтрокаДляПоиска = СписокДеталейНоменклатуры.Найти(ЗаменяемыйОстаток.GUID, "GUID");
		ИндексОстатка = СписокДеталейНоменклатуры.Индекс(СтрокаДляПоиска);
		
	КонецЕсли;
	
	ОстатокПоПолосе = ?(ПоперечныйПил, ШиринаЛиста - (КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила), ВысотаЛиста - (КоординатаУ + Элемент.ВысотаДетали + ТолщинаПила));
	БольшойОстатокПоЛисту = ?(ПоперечныйПил, ВысотаЛиста - (КоординатаУ + Элемент.ВысотаДетали + ТолщинаПила), ШиринаЛиста - (КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила));
	
	//позиции остаткам////////////////////////////////////////////////////////////
	
	Если ДобавитьБольшойОстаток И БольшойОстатокПоЛисту > 0 Тогда
		ВысотаДетальки = ?(ПоперечныйПил, БольшойОстатокПоЛисту ,Элемент.ВысотаЛиста - КоординатаУ);
		ШиринаДетальки = ?(ПоперечныйПил, Элемент.ШиринаЛиста - КоординатаХ, БольшойОстатокПоЛисту);
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = НомерЛиста;
		НоваяСтрока.ВысотаДетали = ВысотаДетальки;
		НоваяСтрока.ШиринаДетали = ШиринаДетальки;
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаУ = ?(ПоперечныйПил, КоординатаУ + Элемент.ВысотаДетали + ТолщинаПила, КоординатаУ);
		НоваяСтрока.КоординатаХ = ?(ПоперечныйПил, КоординатаХ, Элемент.КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила);
		НоваяСтрока.GUID = Новый УникальныйИдентификатор;
		НоваяСтрока.Остаток = Истина;
	КонецЕсли;
	
	Если МаленькийОстатокПоШирине > 0 И НЕ ИспользуетсяВОстатках Тогда
		ВысотаДетальки = ?(ПоперечныйПил, МаленькийОстатокПоШирине, Элемент.ВысотаЛиста - КоординатаУ);
		ШиринаДетальки = ?(ПоперечныйПил, Элемент.ШиринаЛиста - КоординатаХ, МаленькийОстатокПоШирине);
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = НомерЛиста;
		НоваяСтрока.ВысотаДетали = ВысотаДетальки;
		НоваяСтрока.ШиринаДетали = ШиринаДетальки;
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаУ = ?(ПоперечныйПил, КоординатаУ + Элемент.ВысотаДетали + ТолщинаПила, КоординатаУ);
		НоваяСтрока.КоординатаХ = ?(ПоперечныйПил, КоординатаХ, Элемент.КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила);
		НоваяСтрока.GUID = Новый УникальныйИдентификатор;
		НоваяСтрока.Остаток = Истина;
	КонецЕсли;
	
	Если ИспользуетсяВОстатках Тогда
		ВысотаДетальки = ?(ПоперечныйПил, ЗаменяемыйОстаток.ВысотаДетали - Элемент.ВысотаДетали - ТолщинаПила, ЗаменяемыйОстаток.ВысотаДетали);
		ШиринаДетальки = ?(ПоперечныйПил, ЗаменяемыйОстаток.ШиринаДетали, ЗаменяемыйОстаток.ШиринаДетали - Элемент.ШиринаДетали - ТолщинаПила);
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = НомерЛиста;
		НоваяСтрока.ВысотаДетали = ВысотаДетальки;
		НоваяСтрока.ШиринаДетали = ШиринаДетальки;
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаУ = ?(ПоперечныйПил, КоординатаУ + Элемент.ВысотаДетали + ТолщинаПила, КоординатаУ);
		НоваяСтрока.КоординатаХ = ?(ПоперечныйПил, КоординатаХ, Элемент.КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила);
		НоваяСтрока.GUID = Новый УникальныйИдентификатор;
		НоваяСтрока.Остаток = Истина;
		НоваяСтрока.ИспользуетсяВОстаткахПакета = Истина;
	КонецЕсли;
	
	Если ОстатокПоПолосе > 0 Тогда
		
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = НомерЛиста;
		НоваяСтрока.ВысотаДетали = ?(ПоперечныйПил, Элемент.ВысотаДетали ,ОстатокПоПолосе);
		НоваяСтрока.ШиринаДетали = ?(ПоперечныйПил, ОстатокПоПолосе, Элемент.ШиринаДетали);
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаУ = ?(ПоперечныйПил, Элемент.КоординатаУ, КоординатаУ + Элемент.ВысотаДетали + ТолщинаПила);
		НоваяСтрока.КоординатаХ = ?(ПоперечныйПил, КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила, Элемент.КоординатаХ);
		НоваяСтрока.GUID = Новый УникальныйИдентификатор;
		НоваяСтрока.Остаток = Истина;
		
	КонецЕсли;
	
	Если ЗаменяемыйОстаток <> Неопределено Тогда
	
		СписокДеталейНоменклатуры.Удалить(ЗаменяемыйОстаток);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРазмерыДетали(Деталь)
	
	ШиринаТекстура = 0;
	ВысотаТекстура = 0;
	ШиринаДопНоменклатура = 0;
	ВысотаДопНоменклатура = 0;
	
	ДанныеДетали = Деталь.ВидДетали;
	
	ШиринаДетали = Деталь.ШиринаДетали;
	ВысотаДетали = Деталь.ВысотаДетали;
	
	Если ДанныеДетали.ШиринаТекстура <> "" Тогда
	
		Попытка
			Выполнить("ШиринаТекстура = " + ДанныеДетали.ШиринаТекстура); 
		Исключение
			Сообщить("Ошибка при формировании формулы: №006");
		КонецПопытки;
		
	КонецЕсли;
	
	Если ДанныеДетали.ВысотаТекстура <> "" Тогда
	
		Попытка
			Выполнить("ВысотаТекстура = " + ДанныеДетали.ВысотаТекстура); 
		Исключение
			Сообщить("Ошибка при формировании формулы: №007");
		КонецПопытки;
		
	КонецЕсли;
	
	Если ДанныеДетали.ШиринаДопНоменклатура <> "" Тогда
	
		Попытка
			Выполнить("ШиринаДопНоменклатура = " + ДанныеДетали.ШиринаДопНоменклатура); 
		Исключение
			Сообщить("Ошибка при формировании формулы: №008");
		КонецПопытки;
		
	КонецЕсли;
	
	Если ДанныеДетали.ВысотаДопНоменклатура <> "" Тогда
	
		Попытка
			Выполнить("ВысотаДопНоменклатура = " + ДанныеДетали.ВысотаДопНоменклатура); 
		Исключение
			Сообщить("Ошибка при формировании формулы: №009");
		КонецПопытки;
		
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("ШиринаТекстура", ШиринаТекстура);
	Данные.Вставить("ВысотаТекстура", ВысотаТекстура);
	Данные.Вставить("ШиринаДопНоменклатура", ШиринаДопНоменклатура);
	Данные.Вставить("ВысотаДопНоменклатура", ВысотаДопНоменклатура);
	
	Возврат Данные;
		
КонецФункции

Функция ПроверитьИспользованиеПодразделениемРаскрояНаНаряд(Подразделение)
	
	Значение = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПодразделенийСрезПоследних.Значение
		|ИЗ
		|	РегистрСведений.НастройкиПодразделений.СрезПоследних(
		|			,
		|			Подразделение = &Подразделение
		|				И ВидНастройки = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекПодразделений.ИспользуетсяРаскройНаНаряд)) КАК НастройкиПодразделенийСрезПоследних";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Значение = ВыборкаДетальныеЗаписи.Значение;
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции


#КонецОбласти

#Область Вывод_во_флэш

Функция ПолучитьСтрокуДляФлэшИзДерева(Дерево, СсылкаДокумента, НарядЗадание, МассивБуквеннойНумерации, ПоказатьВесьСписокДеталей, СписокДеталей)
	
	Подразделение = СсылкаДокумента.Подразделение;
	ДанныеДляРаскроя = "%ЛОГОТИП%☻";
	
	Если Дерево.Строки.Количество() > 0 Тогда
		
		ДанныеДляРаскроя = ФормированиеСтрокиРаскрояПоРанцу(ДанныеДляРаскроя, Дерево, СсылкаДокумента, Подразделение, НарядЗадание, МассивБуквеннойНумерации, ПоказатьВесьСписокДеталей, СписокДеталей);
		
	КонецЕсли;
	
	ПустойРаскрой = (ДанныеДляРаскроя = "%ЛОГОТИП%☻");
	
	Возврат ?(ПустойРаскрой, "", ДанныеДляРаскроя);
	
КонецФункции

Функция ДобавитьЭлементКСтрокеКривогоПила(Строка, Элемент, НомерДокумента, НомерНаряда)
	
	Строка = Строка
			+ Элемент.Номенклатура + "☺"
			+ Элемент.ВыборМебельнойКромкиСверху.КраткоеНаименование + "☺"
			+ Элемент.ВыборМебельнойКромкиСнизу.КраткоеНаименование + "☺"
			+ Элемент.ВыборМебельнойКромкиСлева.КраткоеНаименование + "☺"
			+ Элемент.ВыборМебельнойКромкиСправа.КраткоеНаименование + "☺"
			+ "Номер " + НомерДокумента + " " + НомерНаряда + "☺"
			+ "Количество деталей: " + Элемент.КоличествоКривыхДеталей + "☺"
			+ "№ детали " + Элемент.НомерСтроки + " Комментарий: " + Элемент.Комментарий + "☺"
			+ ?(Элемент.ВидДетали.ЭтоСтекло, ?(Элемент.Обтачивать, "Обтачивать", "Без обточки"), "") + "☺"	
			+ Элемент.НомерСтроки + "☺"
			+ Элемент.СтрокаДляФлэш + "☺☻";
	
	Возврат Строка;
	
КонецФункции

Функция ФормированиеСтрокиКривогоПила(СписокДеталей, НомерДокумента, НомерНаряда)
	
	СтрокаКривогоПилаФРС = "%ЛОГОТИП%☻";
	СтрокаКривогоПилаСтеколка = "%ЛОГОТИП%☻";
	
	Для каждого Элемент Из СписокДеталей Цикл
		
		Если ЗначениеЗаполнено(Элемент.СтрокаДляФлэш) Тогда
			
			Если Элемент.ВидДетали.ЦеховаяЗона = Перечисления.ЦеховыеЗоны.Стеколка Тогда			
				СтрокаКривогоПилаСтеколка = ДобавитьЭлементКСтрокеКривогоПила(СтрокаКривогоПилаСтеколка, Элемент, НомерДокумента, НомерНаряда);				
			Иначе			
				СтрокаКривогоПилаФРС = ДобавитьЭлементКСтрокеКривогоПила(СтрокаКривогоПилаФРС, Элемент, НомерДокумента, НомерНаряда);				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаКривогоПилаФРС = ?(СтрокаКривогоПилаФРС = "%ЛОГОТИП%☻", "", СтрокаКривогоПилаФРС);
	СтрокаКривогоПилаСтеколка = ?(СтрокаКривогоПилаСтеколка = "%ЛОГОТИП%☻", "", СтрокаКривогоПилаСтеколка);

	Результат = Новый Структура();	 
	Результат.Вставить("ФРС", СтрокаКривогоПилаФРС);
	Результат.Вставить("Стеколка", СтрокаКривогоПилаСтеколка);
	
	Возврат Результат;
	
КонецФункции

Функция ФормированиеСтрокиРаскрояПоРанцу(СтрокаРаскроя, Дерево, СсылкаДокумента, Подразделение, НарядЗадание, МассивБуквеннойНумерации, ПоказатьВесьСписокДеталей, СписокДеталей)
	
	МассивВсехКромок = Новый Массив;
	ИспользуетсяРаскройНаНаряд = ПроверитьИспользованиеПодразделениемРаскрояНаНаряд(Подразделение);
	
	Для Каждого СтрокаДерева ИЗ Дерево.Строки[0].Строки Цикл
		
		ТаблицаДеталей = Новый ТаблицаЗначений;
		
		Для каждого СтрокаДерева Из СтрокаДерева.Строки Цикл
			Если НарядЗадание Тогда
				ТаблицаДеталей = СсылкаДокумента.СписокСпецификаций[0].Спецификация.СписокДеталей.ВыгрузитьКолонки("НомерСтроки, Номенклатура, ВысотаДетали, ШиринаДетали, Количество,
				|Идентификатор, НоменклатураДляСклеивания, НомерИзделия, НеТорцевать, СтруктураОтверстий, Комментарий, 
				|РадиусЛевоВерх, РадиусЛевоНиз, РадиусПравоВерх, РадиусПравоНиз, КривойПилСверху, КривойПилСлева, КривойПилСнизу, КривойПилСправа, 
				|ВыборМебельнойКромкиСверху, ВыборМебельнойКромкиСлева, ВыборМебельнойКромкиСнизу, ВыборМебельнойКромкиСправа, Срез, КоличествоПетель,
				|ПереключательКромкаСверху, ПереключательКромкаСлева, ПереключательКромкаСнизу, ПереключательКромкаСправа, РасположениеПазовИРучкиНаФасадах, 
				|Обтачивать, Постформинг, РадиусФасада");
			Иначе
				ТаблицаДеталей = СсылкаДокумента.СписокДеталей.ВыгрузитьКолонки("НомерСтроки, Номенклатура, ВысотаДетали, ШиринаДетали, Количество,
				|Идентификатор, НоменклатураДляСклеивания, НомерИзделия, НеТорцевать, СтруктураОтверстий, Комментарий, 
				|РадиусЛевоВерх, РадиусЛевоНиз, РадиусПравоВерх, РадиусПравоНиз, КривойПилСверху, КривойПилСлева, КривойПилСнизу, КривойПилСправа, 
				|ВыборМебельнойКромкиСверху, ВыборМебельнойКромкиСлева, ВыборМебельнойКромкиСнизу, ВыборМебельнойКромкиСправа, Срез, КоличествоПетель,
				|ПереключательКромкаСверху, ПереключательКромкаСлева, ПереключательКромкаСнизу, ПереключательКромкаСправа, РасположениеПазовИРучкиНаФасадах, 
				|Обтачивать, Постформинг, РадиусФасада");
			КонецЕсли;
			ТаблицаДеталей.Колонки.Добавить("ШиринаЛиста", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("ВысотаЛиста", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("МожноПовернуть", Новый ОписаниеТипов("Булево"));
			ТаблицаДеталей.Колонки.Добавить("НомерЛиста", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("Абсцисса", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("Ордината", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("ПоворотДетали", Новый ОписаниеТипов("Булево"));
			ТаблицаДеталей.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("ОсобыйПорядок", Новый ОписаниеТипов("Строка"));
			ТаблицаДеталей.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Булево"));
			ТаблицаДеталей.Колонки.Добавить("НаименованиеДетали", Новый ОписаниеТипов("Строка"));
			ТаблицаДеталей.Колонки.Добавить("ДетальДляСклеивания", Новый ОписаниеТипов("Булево"));
			ТаблицаДеталей.Колонки.Добавить("ИД", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("Кромка1", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаДеталей.Колонки.Добавить("Кромка2", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаДеталей.Колонки.Добавить("Кромка3", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаДеталей.Колонки.Добавить("Кромка4", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаДеталей.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("СборныйРамочныйФасад", Новый ОписаниеТипов("Булево"));
			ТаблицаДеталей.Колонки.Добавить("ПакетДеталей", Новый ОписаниеТипов("Массив"));
			ТаблицаДеталей.Колонки.Добавить("ДетальВПакете", Новый ОписаниеТипов("Булево"));
			ТаблицаДеталей.Колонки.Добавить("ПорядокПечати", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("ДетальРазмещена", Новый ОписаниеТипов("Булево"));
			
			Для Каждого СтрокаДерева Из СтрокаДерева.Строки Цикл
				
				НоваяСтрока = ТаблицаДеталей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
				НоваяСтрока.Срез = СтрокаДерева.СрезПравоНиз;
				
			КонецЦикла;
			
			КомментарийДокумента = "";
			
			Срочность = ?(НарядЗадание, "", ?(СсылкаДокумента.Срочный, " СРОЧНЫЙ", ""));
			КомментарийДокумента = "";
			ВидДокумента = "Спец.";
			Контрагент = ?(НарядЗадание, Справочники.Контрагенты.ПустаяСсылка(), СсылкаДокумента.Контрагент);
			ЕстьПодЗаказ = Ложь;
			ЕстьПредоставленЗаказчиком = Ложь;
			Если НарядЗадание Тогда
				СписокМатериаловЗаказчика = СсылкаДокумента.СписокСпецификаций[0].Спецификация.СписокДеталей.ВыгрузитьКолонки();
				СписокМатериаловЗаказчика.Очистить();
				СписокМатериаловПодЗаказ = СписокМатериаловЗаказчика.Скопировать();
				
				Для каждого Строка Из СсылкаДокумента.СписокСпецификаций Цикл
					Для каждого СтрокаМатериала Из Строка.Спецификация.СписокМатериаловЗаказчика Цикл
						НоваяСтрока = СписокМатериаловЗаказчика.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериала);
					КонецЦикла;
					Для каждого СтрокаМатериала Из Строка.Спецификация.СписокМатериаловПодЗаказ Цикл
						НоваяСтрока = СписокМатериаловПодЗаказ.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериала);
					КонецЦикла;
				КонецЦикла;
			Иначе
				СписокМатериаловЗаказчика = СсылкаДокумента.СписокМатериаловЗаказчика;
				СписокМатериаловПодЗаказ = СсылкаДокумента.СписокМатериаловПодЗаказ;
				ЕстьПодЗаказ = СписокМатериаловПодЗаказ.Количество() > 0;
				ЕстьПредоставленЗаказчиком = СсылкаДокумента.СписокМатериаловЗаказчика.Количество() > 0;
			КонецЕсли;
			# Область Запрос_группировка_деталей_для_строки_раскроя
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТаблицаДеталей", ТаблицаДеталей);
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
			Запрос.УстановитьПараметр("СписокМатериаловЗаказчика", СписокМатериаловЗаказчика);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДеталей.НомерСтроки,
			|	ТаблицаДеталей.ИД,
			|	ТаблицаДеталей.Номенклатура,
			|	ТаблицаДеталей.ВысотаДетали,
			|	ТаблицаДеталей.ШиринаДетали,
			|	ТаблицаДеталей.Количество,
			|	ТаблицаДеталей.Идентификатор,
			|	ТаблицаДеталей.НоменклатураДляСклеивания,
			|	ТаблицаДеталей.НаименованиеДетали,
			|	ТаблицаДеталей.НомерИзделия,
			|	ТаблицаДеталей.МожноПовернуть,
			|	ТаблицаДеталей.НеТорцевать,
			|	ТаблицаДеталей.СтруктураОтверстий,
			|	ТаблицаДеталей.Комментарий,
			|	ТаблицаДеталей.РадиусЛевоВерх,
			|	ТаблицаДеталей.РадиусЛевоНиз,
			|	ТаблицаДеталей.РадиусПравоВерх,
			|	ТаблицаДеталей.РадиусПравоНиз,
			|	ТаблицаДеталей.Срез,
			|	ТаблицаДеталей.РадиусФасада,
			|	ТаблицаДеталей.КривойПилСверху,
			|	ТаблицаДеталей.КривойПилСлева,
			|	ТаблицаДеталей.КривойПилСнизу,
			|	ТаблицаДеталей.КривойПилСправа,
			|	ТаблицаДеталей.ДетальДляСклеивания,
			|	ТаблицаДеталей.Обтачивать,
			|	ТаблицаДеталей.Постформинг,
			|	ТаблицаДеталей.КоличествоПетель,
			|	ТаблицаДеталей.РасположениеПазовИРучкиНаФасадах,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСверху,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСлева,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСнизу,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСправа,
			|	ТаблицаДеталей.НаименованиеДетали КАК НаименованиеДетали1,
			|	ТаблицаДеталей.ШиринаЛиста,
			|	ТаблицаДеталей.ВысотаЛиста,
			|	ТаблицаДеталей.НомерЛиста,
			|	ТаблицаДеталей.Абсцисса,
			|	ТаблицаДеталей.Ордината,
			|	ТаблицаДеталей.ПоворотДетали,
			|	ТаблицаДеталей.Порядок,
			|	ТаблицаДеталей.ОсобыйПорядок,
			|	ТаблицаДеталей.Кромка1,
			|	ТаблицаДеталей.Кромка2,
			|	ТаблицаДеталей.Кромка3,
			|	ТаблицаДеталей.Кромка4,
			|	ТаблицаДеталей.ДетальВПакете,
			|	ТаблицаДеталей.Остаток
			|ПОМЕСТИТЬ ТаблицаДеталей
			|ИЗ
			|	&ТаблицаДеталей КАК ТаблицаДеталей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СписокМатериаловЗаказчика.Номенклатура
			|ПОМЕСТИТЬ СписокМатериаловЗаказчика
			|ИЗ
			|	&СписокМатериаловЗаказчика КАК СписокМатериаловЗаказчика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДеталей.НомерСтроки,
			|	ТаблицаДеталей.ИД,
			|	ТаблицаДеталей.Номенклатура КАК Номенклатура,
			|	ТаблицаДеталей.ВысотаДетали,
			|	ТаблицаДеталей.ШиринаДетали,
			|	ТаблицаДеталей.Количество,
			|	ТаблицаДеталей.Идентификатор,
			|	ТаблицаДеталей.ДетальВПакете,
			|	ТаблицаДеталей.НоменклатураДляСклеивания,
			|	ТаблицаДеталей.НомерИзделия,
			|	ТаблицаДеталей.МожноПовернуть,
			|	ТаблицаДеталей.НеТорцевать,
			|	ТаблицаДеталей.СтруктураОтверстий,
			|	ТаблицаДеталей.Комментарий,
			|	ТаблицаДеталей.РадиусЛевоВерх,
			|	ТаблицаДеталей.РадиусЛевоНиз,
			|	ТаблицаДеталей.РадиусПравоВерх,
			|	ТаблицаДеталей.РадиусПравоНиз,
			|	ТаблицаДеталей.ДетальДляСклеивания,
			|	ТаблицаДеталей.Срез,
			|	ТаблицаДеталей.РадиусФасада,
			|	ТаблицаДеталей.КривойПилСверху,
			|	ТаблицаДеталей.КривойПилСлева,
			|	ТаблицаДеталей.КривойПилСнизу,
			|	ТаблицаДеталей.КривойПилСправа,
			|	ТаблицаДеталей.Обтачивать,
			|	ТаблицаДеталей.Постформинг,
			|	ТаблицаДеталей.КоличествоПетель,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСверху,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСлева,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСнизу,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСправа,
			|	ТаблицаДеталей.ШиринаЛиста КАК ШиринаЛиста,
			|	ТаблицаДеталей.ВысотаЛиста КАК ВысотаЛиста,
			|	ТаблицаДеталей.НомерЛиста КАК НомерЛиста,
			|	ТаблицаДеталей.Абсцисса,
			|	ТаблицаДеталей.Ордината,
			|	ТаблицаДеталей.ПоворотДетали,
			|	ТаблицаДеталей.Порядок,
			|	ТаблицаДеталей.ОсобыйПорядок,
			|	ТаблицаДеталей.Кромка1 КАК Кромка1,
			|	ТаблицаДеталей.Кромка2 КАК Кромка2,
			|	ТаблицаДеталей.Кромка3 КАК Кромка3,
			|	ТаблицаДеталей.Кромка4 КАК Кромка4,
			|	ТаблицаДеталей.НаименованиеДетали,
			|	ТаблицаДеталей.Остаток,
			|	ТаблицаДеталей.РасположениеПазовИРучкиНаФасадах,
			|	ЕСТЬNULL(НоменклатураПодразделений.ОкруглятьДоЛистов, ИСТИНА) КАК ОкруглятьДоЛистов,
			|	ВЫРАЗИТЬ(ТаблицаДеталей.Номенклатура КАК Справочник.Номенклатура).НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	ВЫБОР
			|		КОГДА СписокМатериаловЗаказчика.Номенклатура ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК МатериалЗаказчика
			|ИЗ
			|	ТаблицаДеталей КАК ТаблицаДеталей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений.СрезПоследних(, Подразделение = &Подразделение) КАК НоменклатураПодразделений
			|		ПО ТаблицаДеталей.Номенклатура = НоменклатураПодразделений.Номенклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ СписокМатериаловЗаказчика КАК СписокМатериаловЗаказчика
			|		ПО ТаблицаДеталей.Номенклатура = СписокМатериаловЗаказчика.Номенклатура
			|ИТОГИ
			|	МАКСИМУМ(Номенклатура),
			|	МАКСИМУМ(ШиринаЛиста),
			|	МАКСИМУМ(ВысотаЛиста),
			|	МАКСИМУМ(Кромка1),
			|	МАКСИМУМ(Кромка2),
			|	МАКСИМУМ(Кромка3),
			|	МАКСИМУМ(Кромка4),
			|	МАКСИМУМ(ОкруглятьДоЛистов),
			|	МАКСИМУМ(НоменклатурнаяГруппа),
			|	МАКСИМУМ(МатериалЗаказчика)
			|ПО
			|	НомерЛиста";
			
			Если ТаблицаДеталей.Колонки.Найти("РасположениеПазовИРучкиНаФасадах") = Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДеталей.РасположениеПазовИРучкиНаФасадах,", "");
			КонецЕсли;
			
			#КонецОбласти
			
			Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СсылкаДокумента.Номер);
			Если НарядЗадание И МассивБуквеннойНумерации <> Неопределено и МассивБуквеннойНумерации.Количество() > 0 Тогда
				НомерНаПечать  = "";
				Для каждого Элемент Из МассивБуквеннойНумерации Цикл
					//НомерНаПечать = НомерНаПечать + Элемент;
					НомерНаПечать = НомерНаПечать + Элемент.БуквеннаяНумерация;
				КонецЦикла;
			Иначе
				НомерНаПечать = "Спец: " + НомерНаПечать;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				Если НарядЗадание Тогда
					НоменклатураПодЗаказ = "";
				Иначе
					НоменклатураПодЗаказ = "";
				КонецЕсли;
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", Выборка.Номенклатура);
				МассивДеталей = СписокДеталей.НайтиСтроки(ПараметрыОтбора);
				ТаблицаДеталейТекущейНоменклатуры = СписокДеталей.Скопировать(МассивДеталей);
				
				/////////////////////////////
				
				ЗапросНаКромки = Новый Запрос;
				ЗапросНаКромки.УстановитьПараметр("ТабДеталей", ТаблицаДеталейТекущейНоменклатуры);
				ЗапросНаКромки.УстановитьПараметр("СписокМатериаловЗаказчика", СписокМатериаловЗаказчика);
				ЗапросНаКромки.УстановитьПараметр("СписокМатериаловПодЗаказ", СписокМатериаловПодЗаказ);
				ЗапросНаКромки.Текст =
				"ВЫБРАТЬ
				|	ТаблицаДеталей.НомерЛиста,
				|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСнизу КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСнизу,
				|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСверху КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСверху,
				|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСлева КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСлева,
				|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСправа КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСправа
				|ПОМЕСТИТЬ ВТ_Кромки
				|ИЗ
				|	&ТабДеталей КАК ТаблицаДеталей
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВЫРАЗИТЬ(СписокМатериаловПодЗаказ.Номенклатура КАК Справочник.Номенклатура) КАК МатериалПодЗаказ,
				|	ВЫРАЗИТЬ(СписокМатериаловПодЗаказ.Комментарий КАК СТРОКА) КАК КомментарийПодЗаказ
				|ПОМЕСТИТЬ ВТ_СписокМатериаловПодЗаказ
				|ИЗ
				|	&СписокМатериаловПодЗаказ КАК СписокМатериаловПодЗаказ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВЫРАЗИТЬ(СписокМатериаловЗаказчика.Номенклатура КАК Справочник.Номенклатура) КАК МатериалЗаказчика,
				|	ВЫРАЗИТЬ(СписокМатериаловЗаказчика.Комментарий КАК СТРОКА) КАК Комментарий
				|ПОМЕСТИТЬ ВТ_МатериалЗаказчика
				|ИЗ
				|	&СписокМатериаловЗаказчика КАК СписокМатериаловЗаказчика
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Кромки.ВыборМебельнойКромкиСнизу КАК Кромка
				|ПОМЕСТИТЬ ВсеКромкиВОдномМесте
				|ИЗ
				|	ВТ_Кромки КАК ВТ_Кромки
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ВТ_Кромки.ВыборМебельнойКромкиСверху
				|ИЗ
				|	ВТ_Кромки КАК ВТ_Кромки
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ВТ_Кромки.ВыборМебельнойКромкиСлева
				|ИЗ
				|	ВТ_Кромки КАК ВТ_Кромки
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ВТ_Кромки.ВыборМебельнойКромкиСправа
				|ИЗ
				|	ВТ_Кромки КАК ВТ_Кромки
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВсеКромкиВОдномМесте.Кромка
				|ПОМЕСТИТЬ СгруппированныеКромки
				|ИЗ
				|	ВсеКромкиВОдномМесте КАК ВсеКромкиВОдномМесте
				|
				|СГРУППИРОВАТЬ ПО
				|	ВсеКромкиВОдномМесте.Кромка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СгруппированныеКромки.Кромка,
				|	ВЫБОР
				|		КОГДА СгруппированныеКромки.Кромка В
				|				(ВЫБРАТЬ
				|					ВТ_МатериалЗаказчика.МатериалЗаказчика
				|				ИЗ
				|					ВТ_МатериалЗаказчика КАК ВТ_МатериалЗаказчика)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ПредоставляетсяЗаказчиком,
				|	ВТ_МатериалЗаказчика.Комментарий,
				|	ВЫБОР
				|		КОГДА СгруппированныеКромки.Кромка В
				|				(ВЫБРАТЬ
				|					ВТ_СписокМатериаловПодЗаказ.МатериалПодЗаказ
				|				ИЗ
				|					ВТ_СписокМатериаловПодЗаказ КАК ВТ_СписокМатериаловПодЗаказ)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ПодЗаказ,
				|	ВТ_СписокМатериаловПодЗаказ.КомментарийПодЗаказ
				|ИЗ
				|	СгруппированныеКромки КАК СгруппированныеКромки
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МатериалЗаказчика КАК ВТ_МатериалЗаказчика
				|		ПО СгруппированныеКромки.Кромка = ВТ_МатериалЗаказчика.МатериалЗаказчика
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокМатериаловПодЗаказ КАК ВТ_СписокМатериаловПодЗаказ
				|		ПО СгруппированныеКромки.Кромка = ВТ_СписокМатериаловПодЗаказ.МатериалПодЗаказ";
				
				ВыборкаВсеКромки = ЗапросНаКромки.Выполнить().Выбрать();
				
				//ВидПредоставления◘НазваниеКромки◘Комментарий•
				//0 - Не под заказ и не предоставлен 1 - Под заказ  2 - Предоставлен
				СтрокаКромокДляШапки = "";
				
				Пока ВыборкаВсеКромки.Следующий() Цикл
					Комментарий = "";
					Если НЕ ВыборкаВсеКромки.Кромка = Справочники.Номенклатура.ПустаяСсылка() Тогда
						Параметр = 0;
						Если ВыборкаВсеКромки.ПредоставляетсяЗаказчиком Тогда
							Параметр = 1;
							Комментарий = ВыборкаВсеКромки.Комментарий;
						ИначеЕсли ВыборкаВсеКромки.ПодЗаказ Тогда
							Параметр = 2;
							Комментарий = ВыборкаВсеКромки.КомментарийПодЗаказ;
						КонецЕсли;
						СтрокаКромокДляШапки = СтрокаКромокДляШапки + "" + ВыборкаВсеКромки.Кромка.КраткоеНаименование + "◘" 
						+ Параметр + "◘"+ ВыборкаВсеКромки.Кромка + "◘" + Комментарий + "•";
						
					КонецЕсли;
					
				КонецЦикла;
				
				/////////////////////////////
				
				Неноменклатурный = Выборка.Номенклатура.Неноменклатурный;
				//Формирование строки раскроя
				
				МатериалПодЗаказ = Ложь;
				Комментарий = "";
				ДобавленнаяНадпись = "";
				ПроверятьНеобходимостьУдаленияМатериала = Ложь;
				
				Если Не НарядЗадание и ИспользуетсяРаскройНаНаряд Тогда
					ПроверятьНеобходимостьУдаленияМатериала = Истина;
				КонецЕсли;
				
				Если ЕстьПодЗаказ Тогда
					
					Для каждого СтрокаПодЗаказ Из СсылкаДокумента.СписокМатериаловПодЗаказ Цикл
						
						Если СтрокаПодЗаказ.Номенклатура = Выборка.Номенклатура Тогда
						
							МатериалПодЗаказ = Истина;
							ДобавленнаяНадпись = "ПОД ЗАКАЗ ";
							Комментарий = СтрокаПодЗаказ.Комментарий;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если ЕстьПредоставленЗаказчиком Тогда
					
					Для каждого СтрокаМатЗаказчика Из СсылкаДокумента.СписокМатериаловЗаказчика Цикл
						
						Если СтрокаМатЗаказчика.Номенклатура = Выборка.Номенклатура Тогда
						
							МатериалПодЗаказ = Истина;
							ДобавленнаяНадпись = "ПРЕДОСТАВЛЕН ";
							Комментарий = СтрокаМатЗаказчика.Комментарий;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				///Не показывать раскрой в списке документов
				Если НЕ Неноменклатурный и ПроверятьНеобходимостьУдаленияМатериала и НЕ ПоказатьВесьСписокДеталей Тогда
					Продолжить;
				КонецЕсли;
				
				ШапкаЛиста = Новый Массив;
				
				ШапкаЛиста.Добавить(?(МатериалПодЗаказ, Строка(Выборка.Номенклатура) + " - <b>" + ДобавленнаяНадпись + Комментарий + "</b>" , Выборка.Номенклатура)); //0
				ШапкаЛиста.Добавить(СтрокаКромокДляШапки);
				ШапкаЛиста.Добавить(Выборка.ШиринаЛиста); //9
				ШапкаЛиста.Добавить(Выборка.ВысотаЛиста); //10
				ШапкаЛиста.Добавить(?(ЗначениеЗаполнено(СсылкаДокумента.Ссылка), СсылкаДокумента, ""));//11
				ШапкаЛиста.Добавить(НомерНаПечать + " " + НоменклатураПодЗаказ +" ");//12   + МатериалЗаказчика
				ШапкаЛиста.Добавить("<b>" + КомментарийДокумента + "</b>");//13
				ШапкаЛиста.Добавить(Контрагент); //14
				ШапкаЛиста.Добавить(Выборка.НоменклатурнаяГруппа); //15
				Если НарядЗадание Тогда
					ШапкаЛиста.Добавить(Выборка.Номенклатура.Парковка); //16
				КонецЕсли;
				
				СтрокаРаскроя = СтрокаРаскроя + СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ШапкаЛиста, "☺") + "☻";
				
				ВыборкаПоДеталям = Выборка.Выбрать();
				Пока ВыборкаПоДеталям.Следующий() Цикл
					
					Номенклатура = ?(ВыборкаПоДеталям.Остаток, ?(ЗначениеЗаполнено(НоменклатураПодЗаказ), "2", "1"), "");
					
					ПравыйНижнийРадиус = ВыборкаПоДеталям.РадиусПравоНиз;
					Если ВыборкаПоДеталям.Срез И ПравыйНижнийРадиус > 0 Тогда
						ПравыйНижнийРадиус = Строка(ВыборкаПоДеталям.РадиусПравоНиз) + "_1";
					КонецЕсли;
					
					Комментарий = ВыборкаПоДеталям.Комментарий;
					
					Надпись = ВыборкаПоДеталям.НаименованиеДетали;
					
					НеТорцевать = "";
					Если ВыборкаПоДеталям.НеТорцевать Тогда
						НеТорцевать = "1";
					КонецЕсли;
					
					СтрокаОтверстий = "";
					
					ЕвропазСверху 	= 0;
					ЕвропазСнизу 	= 0;
					ЕвропазСлева 	= 0;
					ЕвропазСправа 	= 0;
					
					Если ЗначениеЗаполнено(ВыборкаПоДеталям.СтруктураОтверстий) Тогда
						
						Если НЕ ЗначениеЗаполнено(ВыборкаПоДеталям.Идентификатор) Тогда
							СтрокаОтверстийСтруктуры = ЛексСервер.ЗаполнитьРеквизитОтверстиями(СтрокаОтверстий, ВыборкаПоДеталям.СтруктураОтверстий, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ПоворотДетали);
							СтрокаОтверстий = ?(ЗначениеЗаполнено(СтрокаОтверстийСтруктуры), СтрокаОтверстийСтруктуры, СтрокаОтверстий);
						КонецЕсли;
						СтруктураЕвропазов = ЛексСервер.ПолучитьСтруктуруЕвропазов(ВыборкаПоДеталям.СтруктураОтверстий);
						ЕвропазСверху = СтруктураЕвропазов.Сверху;
						ЕвропазСнизу = СтруктураЕвропазов.Снизу;
						ЕвропазСлева = СтруктураЕвропазов.Слева;
						ЕвропазСправа = СтруктураЕвропазов.Справа;
					КонецЕсли;
					///////////////////////////
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	СоответствиеНоменклатуры.ПодставляемаяНоменклатура
					|ИЗ
					|	РегистрСведений.СоответствиеНоменклатуры КАК СоответствиеНоменклатуры
					|ГДЕ
					|	СоответствиеНоменклатуры.Подразделение = &Подразделение
					|	И СоответствиеНоменклатуры.Номенклатура = &Номенклатура";
					
					Запрос.УстановитьПараметр("Номенклатура", Выборка.Номенклатура);
					Запрос.УстановитьПараметр("Подразделение", Подразделение);
					
					РезультатЗапроса = Запрос.Выполнить().Выгрузить();
					
					ПроверкаКромкиСверху = РезультатЗапроса.Найти(ВыборкаПоДеталям.ВыборМебельнойКромкиСверху, "ПодставляемаяНоменклатура");
					ПроверкаКромкиСнизу = РезультатЗапроса.Найти(ВыборкаПоДеталям.ВыборМебельнойКромкиСнизу, "ПодставляемаяНоменклатура");
					ПроверкаКромкиСлева = РезультатЗапроса.Найти(ВыборкаПоДеталям.ВыборМебельнойКромкиСлева, "ПодставляемаяНоменклатура");
					ПроверкаКромкиСправа = РезультатЗапроса.Найти(ВыборкаПоДеталям.ВыборМебельнойКромкиСправа, "ПодставляемаяНоменклатура");
					
					
					КраткоеНаменованиеКромкиСверху = ?(ПроверкаКромкиСверху = Неопределено, ВыборкаПоДеталям.ВыборМебельнойКромкиСверху.КраткоеНаименование, Лев(ВыборкаПоДеталям.ВыборМебельнойКромкиСверху.КраткоеНаименование, Найти (ВыборкаПоДеталям.ВыборМебельнойКромкиСверху.КраткоеНаименование, "-")-1));
					КраткоеНаменованиеКромкиСнизу = ?(ПроверкаКромкиСнизу = Неопределено, ВыборкаПоДеталям.ВыборМебельнойКромкиСнизу.КраткоеНаименование, Лев(ВыборкаПоДеталям.ВыборМебельнойКромкиСнизу.КраткоеНаименование, Найти (ВыборкаПоДеталям.ВыборМебельнойКромкиСнизу.КраткоеНаименование, "-")-1));
					КраткоеНаменованиеКромкиСлева = ?(ПроверкаКромкиСлева = Неопределено, ВыборкаПоДеталям.ВыборМебельнойКромкиСлева.КраткоеНаименование, Лев(ВыборкаПоДеталям.ВыборМебельнойКромкиСлева.КраткоеНаименование, Найти (ВыборкаПоДеталям.ВыборМебельнойКромкиСлева.КраткоеНаименование, "-")-1));
					КраткоеНаменованиеКромкиСправа = ?(ПроверкаКромкиСправа = Неопределено, ВыборкаПоДеталям.ВыборМебельнойКромкиСправа.КраткоеНаименование, Лев(ВыборкаПоДеталям.ВыборМебельнойКромкиСправа.КраткоеНаименование, Найти (ВыборкаПоДеталям.ВыборМебельнойКромкиСправа.КраткоеНаименование, "-")-1));
					
					Если ЕстьПредоставленЗаказчиком Тогда
						
						Для каждого Строчка Из СсылкаДокумента.СписокМатериаловЗаказчика Цикл
							
							КраткоеНаменованиеКромкиСверху = ?(Строчка.Номенклатура = ВыборкаПоДеталям.ВыборМебельнойКромкиСверху, КраткоеНаменованиеКромкиСверху + " ["+ Строчка.НомерСтроки + "]", КраткоеНаменованиеКромкиСверху);
							КраткоеНаменованиеКромкиСнизу = ?(Строчка.Номенклатура = ВыборкаПоДеталям.ВыборМебельнойКромкиСнизу, КраткоеНаменованиеКромкиСнизу + " ["+ Строчка.НомерСтроки + "]", КраткоеНаменованиеКромкиСнизу);
							КраткоеНаменованиеКромкиСлева = ?(Строчка.Номенклатура = ВыборкаПоДеталям.ВыборМебельнойКромкиСлева, КраткоеНаменованиеКромкиСлева + " ["+ Строчка.НомерСтроки + "]", КраткоеНаменованиеКромкиСлева);
							КраткоеНаменованиеКромкиСправа = ?(Строчка.Номенклатура = ВыборкаПоДеталям.ВыборМебельнойКромкиСправа, КраткоеНаменованиеКромкиСправа + " ["+ Строчка.НомерСтроки + "]", КраткоеНаменованиеКромкиСправа);
							
						КонецЦикла;
					
					КонецЕсли;
					
					///////////////////////////
					
					СтрокаРаскроя = СтрокаРаскроя
					+ Номенклатура + "☺" // 1 - Номенклатура
					+ ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали) + "☺" //2 - Высота детали
					+ ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ШиринаДетали) + "☺" //3 - Ширина детали
					+ ВыборкаПоДеталям.РадиусЛевоВерх + "☺" //4
					+ ВыборкаПоДеталям.РадиусПравоВерх + "☺" //5
					+ ПравыйНижнийРадиус + "☺" //6
					+ ВыборкаПоДеталям.РадиусЛевоНиз + "☺" //7
					+ ВыборкаПоДеталям.КривойПилСверху + "☺" //8
					+ ВыборкаПоДеталям.КривойПилСнизу + "☺" //9
					+ ВыборкаПоДеталям.КривойПилСлева + "☺" //10
					+ ВыборкаПоДеталям.КривойПилСправа + "☺" //11
					+ "" + "☺" //12 (Эксц) если 1 - два в круге крестик(рисунок) сверху
					+ "" + "☺" //13 (Эксц) если 1 - два в круге крестик(рисунок) снизу
					+ "" + "☺" //14 (Эксц) если 1 - два в круге крестик(рисунок) слева
					+ "" + "☺" //15 (Эксц) если 1 - два в круге крестик(рисунок) справа
					+ Комментарий + "☺" //16 - Комментарий
					+ Надпись + "☺" //17
					+ КраткоеНаменованиеКромкиСверху + "☺" //18
					+ КраткоеНаменованиеКромкиСнизу + "☺" //19
					+ КраткоеНаменованиеКромкиСлева + "☺" //20
					+ КраткоеНаменованиеКромкиСправа + "☺" //21
					+ "" + "☺" //22 если 1 - две капельки(рисунок) сверху
					+ "" + "☺" //23 если 1 - две капельки(рисунок) снизу
					+ "" + "☺" //24 если 1 - две капельки(рисунок) слева
					+ "" + "☺" //25 если 1 - две капельки(рисунок) справа
					+ СтрокаОтверстий + "☺" //26
					+ ЕвропазСверху + "☺" //27
					+ ЕвропазСнизу + "☺" //28
					+ ЕвропазСлева + "☺" //29
					+ ЕвропазСправа + "☺" //30
					+ НеТорцевать + "☺" //31
					+ ВыборкаПоДеталям.Ордината + "☺" //32 - координата по У
					+ ВыборкаПоДеталям.Абсцисса + "☺" //33 - координата по Х
					+ Число(ВыборкаПоДеталям.ПоворотДетали) + "☺" //34 - признак поворота детали 
					+ ВыборкаПоДеталям.ИД + "☺" //35 - ИД детали
					+ Число(ВыборкаПоДеталям.Номенклатура.ПоперечнаяТекстура) +"☺☻";//36 - ПоперечнаяТекстура + конец детали
					
					ДобавитьКромкиВМассив(ВыборкаПоДеталям,МассивВсехКромок);
					
				КонецЦикла;
				
				СтрокаРаскроя = СтрокаРаскроя + "♦";//КонецЛиста
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтрокаРаскроя;
	
КонецФункции

#КонецОбласти

#Область БуферКонтрагенту

Функция ПроверкаДеталейКонтрагентов(ТаблицаНаименованийДеталей, МассивБуквеннойНумерации)
	
	СтруктураПроверкиДеталей = Новый Структура;
	
	// на листе детали одного контрагента
	ТаблицаБуквы =  ТаблицаНаименованийДеталей.Скопировать(,"НаименованиеДетали");
	ТаблицаБуквы.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));

	Для каждого СтрокаТаблицыДеталей Из ТаблицаБуквы Цикл
		НайденнаяСтрокаСКонтрагентом =  МассивБуквеннойНумерации.Найти(Лев(СтрокаТаблицыДеталей.НаименованиеДетали, 1), "БукваНумерации");
		Если НайденнаяСтрокаСКонтрагентом <> Неопределено Тогда
			    СтрокаТаблицыДеталей.Контрагент = НайденнаяСтрокаСКонтрагентом.Контрагент;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаБуквы.Свернуть("Контрагент"); 
	Если ТаблицаБуквы.Количество() = 1 Тогда 
		ДилерНаименование = СокрЛП(ТаблицаБуквы[0].Контрагент.ПолноеНаименование);
		СтруктураПроверкиДеталей.Вставить("ДополнениеНазванияОстатка","/" + ДилерНаименование);
	КонецЕсли;
	//
	
	Возврат СтруктураПроверкиДеталей;

КонецФункции 

#КонецОбласти