
#Область Общие

Функция СформироватьРаскрой(ДокОбъект, СписокДеталей = Неопределено) Экспорт
	
	// { Васильев Александр Леонидович [09.08.2015]
	// Тут недоднозначность, ДокОбъект иногда ссылка, иногда объект.
	// } Васильев Александр Леонидович [09.08.2015]
	
	//ззз = ФормированиеСпискаДеталей(ДокОбъект);
	
	// { Васильев Александр Леонидович [05.08.2015]
	// Реализовать два алгоритма размещения деталей:
	// 1. Жадный для решения задачи о ранце
	// 2. Задача о сумме подмножеств (http://forum.sources.ru/index.php?showtopic=310469&st=60)
	// } Васильев Александр Леонидович [05.08.2015]
	
	ИспользоватьСтарыйАлгоритм = Ложь;
	
	Если СписокДеталей = Неопределено Тогда
		
		//СписокДеталей = ФормированиеСпискаДеталейСтарый(ДокОбъект);
		СписокДеталей =  ФормированиеСпискаДеталей(ДокОбъект);
		СтрокаКривогоПила = ФормированиеСтрокиКривогоПила(СписокДеталей, ДокОбъект.Номер);
		СписокДеталей.Колонки.Удалить("СтрокаДляФлэш");
		
	КонецЕсли;
	
	Если ИспользоватьСтарыйАлгоритм Тогда
		
		Структура = РасположитьНаЛистах(ДокОбъект, СписокДеталей);
		
		Если Структура.Ошибка Тогда
			Сообщить(Структура.ТекстОшибки);
			Возврат Неопределено;
		Иначе
			СтрокаРаскрой = ПолучитьСтрокуДляФлэшИзТаблицы(Структура.МассивИтоговогоРасположенияДеталей, ДокОбъект);
		КонецЕсли;
		
	Иначе
		
		Структура = РасположитьНаЛистахМетодомРанца(ДокОбъект, СписокДеталей);
		СтрокаРаскрой = ПолучитьСтрокуДляФлэшИзДерева(Структура.Дерево, ДокОбъект);
		
	КонецЕсли;
	
	Структура.Вставить("ДанныеДляРаскроя", СтрокаРаскрой);
	Структура.Вставить("СтрокаКривогоПила", СтрокаКривогоПила);
	
	// { Васильев Александр Леонидович [26.05.2015]
	// Интересный путь начинается. :)
	//ТестДЛЛ = РаскройСервер.СформироватьКартинку(Структура.Дерево, СсылкаДокумента);
	// } Васильев Александр Леонидович [26.05.2015]
	
	// { Васильев Александр Леонидович [22.07.2015]
	// Ещё думаю стоит добавить время формирования раскроя. :)
	Возврат Структура;
	// } Васильев Александр Леонидович [22.07.2015]
	
КонецФункции

Функция СформироватьОшибкуПревышениеРазмера(Структура, СтрокаДеталь)
	
	ТекстОшибки = "Ошибка формирования раскроя на материал '%1'.%2Размеры детали (%3 х %4) превышают размеры листа (%5 х %6).";
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
	СтрокаДеталь.Номенклатура,
	Символы.ПС,
	СтрокаДеталь.ШиринаДетали,
	СтрокаДеталь.ВысотаДетали,
	СтрокаДеталь.ШиринаЛиста,
	СтрокаДеталь.ВысотаЛиста);
	Структура.Вставить("Ошибка", Истина);
	Структура.Вставить("ТекстОшибки", ТекстОшибки);
	
КонецФункции

#КонецОбласти

#Область Сбор_деталей

Функция СформироватьНаименованиеДетали(Деталь) Экспорт
	
	НаименованиеДетали = "";
	
	СтруктураНадпись = Новый Структура;
	СтруктураНадпись.Вставить("НомерДетали");
	СтруктураНадпись.Вставить("НомерИзделия");
	СтруктураНадпись.Вставить("ЯщикДверьИдентификатор");
	СтруктураНадпись.Вставить("Пакет");
	СтруктураНадпись.Вставить("КантПоМесту");
	СтруктураНадпись.Вставить("Постформинг");
	СтруктураНадпись.Вставить("Обтачивать");
	СтруктураНадпись.Вставить("БезОбточки");
	СтруктураНадпись.Вставить("ФасадСкругленный");
	СтруктураНадпись.Вставить("Склейка");
	СтруктураНадпись.Вставить("НеТорцевать");
	СтруктураНадпись.Вставить("Пуфик");
	
	СтруктураНадпись.НомерДетали = Деталь.НомерСтроки;
	СтруктураНадпись.НомерИзделия = ?(ЗначениеЗаполнено(Деталь.НомерИзделия), "/" + Деталь.НомерИзделия, "");
	СтруктураНадпись.ЯщикДверьИдентификатор = ?(Деталь.ЭтоЯщик, " ящ", ?(Деталь.ЭтоДверь, " двр", ?(ЗначениеЗаполнено(Деталь.Идентификатор), "/" + Деталь.Идентификатор, "")));
	СтруктураНадпись.Пакет = ?(Деталь.ДетальВПакете И Деталь.ОсобыйПорядок = "Фасад", " (пак" + Деталь.НомерИзделия + ")", "");
	
	КантПоМесту = Деталь.ПереключательКромкаСверху = "По месту"
	ИЛИ Деталь.ПереключательКромкаСнизу = "По месту"
	ИЛИ Деталь.ПереключательКромкаСлева = "По месту"
	ИЛИ Деталь.ПереключательКромкаСправа = "По месту";
	
	СтруктураНадпись.КантПоМесту = ?(КантПоМесту, "Кант по месту. ", "");
	
	СтруктураНадпись.Постформинг = ?(Деталь.Обтачивать И Деталь.Материал = "Столешница", "Пформ ", "");
	СтруктураНадпись.Обтачивать = ?(Деталь.Обтачивать И (Деталь.Материал = "Стекло" ИЛИ Деталь.Материал = "ФасадСтеклянный"), "Обтч ", "");
	СтруктураНадпись.БезОбточки = ?(НЕ Деталь.Обтачивать И (Деталь.Материал = "Стекло" ИЛИ Деталь.Материал = "ФасадСтеклянный"), "Без обтч ", "");
	СтруктураНадпись.ФасадСкругленный = ?(Деталь.Материал = "ФасадСтеклянныйЗакругленный", "Скруг " + Деталь.РадиусФасада, "");
	СтруктураНадпись.Склейка = ?(Деталь.ДетальДляСклеивания, "скл", "");
	СтруктураНадпись.НеТорцевать = ?(Деталь.НеТорцевать, "НЕ ТОРЦЕВАТЬ ПО ДЛИНЕ", "");
	СтруктураНадпись.Пуфик = ?(Деталь.Материал = "Пуф", "пуф", "");
	
	Для каждого Свойство Из СтруктураНадпись Цикл
		
		НаименованиеДетали = НаименованиеДетали + Свойство.Значение + " ";
		
	КонецЦикла;
	
	НаименованиеДетали = СокрЛП(НаименованиеДетали);
	
	Возврат НаименованиеДетали;
	
КонецФункции

Функция ФормированиеСпискаДеталейСтарый(СсылкаДокумента)
	
	тзДетали = СсылкаДокумента.СписокМатериалы.Выгрузить(,"НомерСтроки, Материал, Номенклатура, ВысотаДетали, ШиринаДетали, Количество,
	|Идентификатор, НоменклатураДляСклеивания, НомерИзделия, НеТорцевать, СтруктураОтверстий, Комментарий, РасположениеПазов,
	|РадиусЛевоВерх, РадиусЛевоНиз, РадиусПравоВерх, РадиусПравоНиз, КривойПилСверху, КривойПилСлева, КривойПилСнизу, КривойПилСправа, СтрокаДляФлэш,
	|ВыборМебельнойКромкиСверху, ВыборМебельнойКромкиСлева, ВыборМебельнойКромкиСнизу, ВыборМебельнойКромкиСправа, Срез, КоличествоПетель,
	|ПереключательКромкаСверху, ПереключательКромкаСлева, ПереключательКромкаСнизу, ПереключательКромкаСправа, РасположениеПазовИРучкиНаФасадах, 
	|Обтачивать, РадиусФасада");
	тзДетали.Колонки.Добавить("ШиринаЛиста", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ВысотаЛиста", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("СоблюдениеТекстуры", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("НомерЛиста", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("КоординатаХ", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("КоординатаУ", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ПоворотДетали", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ОсобыйПорядок", Новый ОписаниеТипов("Строка"));
	тзДетали.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ЭтоЯщик", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ЭтоДверь", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ДетальДляСклеивания", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ИД", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("GUID", Новый ОписаниеТипов("Строка"));
	тзДетали.Колонки.Добавить("Кромка1", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзДетали.Колонки.Добавить("Кромка2", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзДетали.Колонки.Добавить("Кромка3", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзДетали.Колонки.Добавить("Кромка4", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзДетали.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ПакетДеталей", Новый ОписаниеТипов("Массив"));
	тзДетали.Колонки.Добавить("ДетальВПакете", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ПорядокПечати", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ДетальРазмещена", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("МожноПовернуть", Новый ОписаниеТипов("Булево"));
	
	#Область Преобразование_ящиков_в_детали
	
	СписокЯщиков = СсылкаДокумента.СписокЯщики;
	
	ТаблицаДеталиЯщиков = Документы.Спецификация.РазложитьЯщикиНаДетали(СсылкаДокумента);
	
	Для Каждого ДетальЯщика Из ТаблицаДеталиЯщиков Цикл
		
		НоваяДеталь = тзДетали.Добавить();
		НоваяДеталь.ЭтоЯщик = Истина;
		НоваяДеталь.Номенклатура = ДетальЯщика.Номенклатура;
		НоваяДеталь.НомерИзделия = ДетальЯщика.НомерИзделия;
		НоваяДеталь.НомерСтроки = ДетальЯщика.НомерСтроки;
		НоваяДеталь.ВысотаДетали = ДетальЯщика.ВысотаДетали;
		НоваяДеталь.ШиринаДетали = ДетальЯщика.ШиринаДетали;
		НоваяДеталь.Количество = ДетальЯщика.Количество;
		НоваяДеталь.ВыборМебельнойКромкиСверху = ДетальЯщика.ВыборМебельнойКромкиСверху;
		НоваяДеталь.ВыборМебельнойКромкиСнизу = ДетальЯщика.ВыборМебельнойКромкиСнизу;
		НоваяДеталь.ВыборМебельнойКромкиСлева = ДетальЯщика.ВыборМебельнойКромкиСлева;
		НоваяДеталь.ВыборМебельнойКромкиСправа = ДетальЯщика.ВыборМебельнойКромкиСправа;
		НоваяДеталь.Материал = ДетальЯщика.Материал;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область Преобразование_двери_в_детали
	
	СписокДверей = СсылкаДокумента.СписокДверей;
	
	Для Каждого Элемент Из СписокДверей Цикл
		
		СписокНоменклатурыДверей = Элемент.Двери.СписокНоменклатуры;
		Для Каждого Строка Из СписокНоменклатурыДверей Цикл
			
			Если ЗначениеЗаполнено(Строка.Длина)
				И ЗначениеЗаполнено(Строка.Ширина)
				И (Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал) Тогда
				
				НоваяСтрока = тзДетали.Добавить();
				НоваяСтрока.Номенклатура = Строка.Номенклатура;
				НоваяСтрока.ВысотаДетали = Строка.Длина;
				НоваяСтрока.ШиринаДетали = Строка.Ширина;
				НоваяСтрока.Количество = Строка.Количество;
				НоваяСтрока.НомерСтроки = Строка.НомерСтроки;
				НоваяСтрока.ЭтоДверь = Истина;
				
				// { Васильев Александр Леонидович [03.08.2015]
				// Если в двери 4 детали без текстуры которые нужно повернуть,
				// то спецификация не сохраняется. Обход по текстуре кривой.
				// Так что перевернём здесь
				
				Если НЕ НоваяСтрока.Номенклатура.НаличиеТекстуры Тогда
					
					ШиринаЛиста = НоваяСтрока.Номенклатура.ШиринаДетали;
					ВысотаЛиста = НоваяСтрока.Номенклатура.ДлинаДетали;
					
					Если Строка.Ширина > ШиринаЛиста
						ИЛИ Строка.Длина > ВысотаЛиста Тогда
						НоваяСтрока.ВысотаДетали = Строка.Ширина;
						НоваяСтрока.ШиринаДетали = Строка.Длина;
					КонецЕсли;
					
				КонецЕсли;
				
				// } Васильев Александр Леонидович [03.08.2015]
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	// { Васильев Александр Леонидович [03.08.2015]
	// Обойти все детали
	// заполнить размеры листов (зависит от подразделения, ОсновнаяПоСкладу)
	// проверить чтобы детали были не больше листа
	// развернуть вертикально которые можно
	// простафить флаг МожноПовернуть
	// } Васильев Александр Леонидович [03.08.2015]
	
	Возврат тзДетали;
	
КонецФункции // ФормированиеСпискаДеталей()

Функция ФормированиеСпискаДеталей(фнДокОбъект)
	
	Ошибки = Неопределено;
	Отказ = Ложь;
	
	// { Васильев Александр Леонидович [09.08.2015]
	// Подозрительные колонки:
	// 1. Идентификатор
	// 2. РасположениеПазовИРучкиНаФасадах
	// 3 ОсобыйПорядок
	// 4. ИД ИЛИ GUID
	// 5. Порядок или ПорядокПечати
	// } Васильев Александр Леонидович [09.08.2015]
	
	тзДетали = фнДокОбъект.СписокМатериалы.Выгрузить(,
	"НомерСтроки,
	|Материал,
	|ВидДетали,
	|Номенклатура,
	|ВысотаДетали,
	|ШиринаДетали,
	|Количество,
	|Идентификатор,
	|НоменклатураДляСклеивания,
	|НомерИзделия,
	|НеТорцевать,
	|СтруктураОтверстий,
	|Комментарий,
	|РасположениеПазов,
	|РадиусЛевоВерх,
	|РадиусЛевоНиз,
	|РадиусПравоВерх,
	|РадиусПравоНиз,
	|КривойПилСверху,
	|КривойПилСлева,
	|КривойПилСнизу,
	|КривойПилСправа,
	|СтрокаДляФлэш,
	|ВыборМебельнойКромкиСверху,
	|ВыборМебельнойКромкиСлева,
	|ВыборМебельнойКромкиСнизу,
	|ВыборМебельнойКромкиСправа,
	|Срез,
	|КоличествоПетель,
	|ПереключательКромкаСверху,
	|ПереключательКромкаСлева,
	|ПереключательКромкаСнизу,
	|ПереключательКромкаСправа,
	|РасположениеПазовИРучкиНаФасадах,
	|Обтачивать, РадиусФасада");
	тзДетали.Колонки.Добавить("ШиринаЛиста", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ВысотаЛиста", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("МожноПовернуть", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("НомерЛиста", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("КоординатаХ", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("КоординатаУ", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ПоворотДетали", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ОсобыйПорядок", Новый ОписаниеТипов("Строка"));
	тзДетали.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ЭтоЯщик", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ЭтоДверь", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ДетальДляСклеивания", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ИД", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("GUID", Новый ОписаниеТипов("Строка"));
	тзДетали.Колонки.Добавить("Кромка1", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзДетали.Колонки.Добавить("Кромка2", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзДетали.Колонки.Добавить("Кромка3", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзДетали.Колонки.Добавить("Кромка4", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзДетали.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ПакетДеталей", Новый ОписаниеТипов("Массив"));
	тзДетали.Колонки.Добавить("ДетальВПакете", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("ПорядокПечати", Новый ОписаниеТипов("Число"));
	тзДетали.Колонки.Добавить("ДетальРазмещена", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("СоблюдениеТекстуры", Новый ОписаниеТипов("Булево"));
	тзДетали.Колонки.Добавить("НаименованиеДетали", Новый ОписаниеТипов("Строка"));
	
	#Область Ящики
	
	СписокЯщиков = фнДокОбъект.СписокЯщики;
	
	ТаблицаДеталиЯщиков = Документы.Спецификация.РазложитьЯщикиНаДетали(фнДокОбъект);
	
	Для Каждого ДетальЯщика Из ТаблицаДеталиЯщиков Цикл
		
		НоваяДеталь = тзДетали.Добавить();
		НоваяДеталь.ЭтоЯщик = Истина;
		НоваяДеталь.Номенклатура = ДетальЯщика.Номенклатура;
		НоваяДеталь.НомерИзделия = ДетальЯщика.НомерИзделия;
		НоваяДеталь.НомерСтроки = ДетальЯщика.НомерСтроки;
		НоваяДеталь.ВысотаДетали = ДетальЯщика.ВысотаДетали;
		НоваяДеталь.ШиринаДетали = ДетальЯщика.ШиринаДетали;
		НоваяДеталь.Количество = ДетальЯщика.Количество;
		НоваяДеталь.ВыборМебельнойКромкиСверху = ДетальЯщика.ВыборМебельнойКромкиСверху;
		НоваяДеталь.ВыборМебельнойКромкиСнизу = ДетальЯщика.ВыборМебельнойКромкиСнизу;
		НоваяДеталь.ВыборМебельнойКромкиСлева = ДетальЯщика.ВыборМебельнойКромкиСлева;
		НоваяДеталь.ВыборМебельнойКромкиСправа = ДетальЯщика.ВыборМебельнойКромкиСправа;
		НоваяДеталь.Материал = ДетальЯщика.Материал;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область Двери
	
	СписокДверей = фнДокОбъект.СписокДверей;
	
	Для Каждого Элемент Из СписокДверей Цикл
		
		СписокНоменклатурыДверей = Элемент.Двери.СписокНоменклатуры;
		Для Каждого Строка Из СписокНоменклатурыДверей Цикл
			
			Если ЗначениеЗаполнено(Строка.Длина)
				И ЗначениеЗаполнено(Строка.Ширина)
				И (Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал) Тогда
				
				НоваяСтрока = тзДетали.Добавить();
				НоваяСтрока.Номенклатура = Строка.Номенклатура;
				НоваяСтрока.ВысотаДетали = Строка.Длина;
				НоваяСтрока.ШиринаДетали = Строка.Ширина;
				НоваяСтрока.Количество = Строка.Количество;
				НоваяСтрока.НомерСтроки = Строка.НомерСтроки;
				НоваяСтрока.ЭтоДверь = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	ИД = 1;
	
	Для каждого Деталь Из тзДетали Цикл
		
		Деталь.ИД = ИД;
		Деталь.Порядок = 100;
		
		Номенклатура = Деталь.Номенклатура;
		СвойстваНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "НаличиеТекстуры");
		
		// Проставление размеров листа.
		РазмерыЛиста = ПолучитьРазмерыЛиста(Номенклатура, фнДокОбъект.Подразделение);
		ЗаполнитьЗначенияСвойств(Деталь, РазмерыЛиста);
		
		// Заполнение флага МожноПовернуть и разворот деталей вертикально.
		Деталь.СоблюдениеТекстуры = СвойстваНоменклатуры.НаличиеТекстуры; // Можно уйти от этого реквизита.
		
		Если НЕ Деталь.СоблюдениеТекстуры Тогда
			
			Если Деталь.ВысотаДетали < Деталь.ШиринаЛиста
				И Деталь.ВысотаДетали < Деталь.ВысотаЛиста
				И Деталь.ШиринаДетали < Деталь.ШиринаЛиста
				И Деталь.ШиринаДетали < Деталь.ВысотаЛиста Тогда
				
				Деталь.МожноПовернуть = Истина;
				
			КонецЕсли;
			
			Если Деталь.МожноПовернуть И
				Деталь.ШиринаДетали > Деталь.ВысотаДетали Тогда
				ПовернутьДеталь(Деталь);
			КонецЕсли;
			
			// Детали с размерами больше листа по одной из сторон
			// можно использовать только повёрнутые.
			// Могут попасть из дверей.
			Если Деталь.ШиринаДетали > Деталь.ШиринаЛиста
				ИЛИ Деталь.ВысотаДетали > Деталь.ВысотаЛиста Тогда
				ПовернутьДеталь(Деталь);
			КонецЕсли;
			
		КонецЕсли;
		
		// Порядок печати.
		НоменклатурнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "НоменклатурнаяГруппа");
		ПорядокПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатурнаяГруппа, "ПорядокПечатиВРаскрое");
		Деталь.ПорядокПечати = ПорядокПечати;
		
		// Разбиваем клееные детали и пуфики.
		Материал = Деталь.Материал;
		
		Если Материал = "10 ЛДСП+10 ЛДСП"
			ИЛИ Материал = "16 ЛДСП+10 ЛДСП"
			ИЛИ Материал = "16 ЛДСП+16 ЛДСП"
			ИЛИ Материал = "АГТ+АГТ"
			ИЛИ Материал = "АГТ+10 ЛДСП" Тогда
			
			// { Васильев Александр Леонидович [09.08.2015]
			// Сделать.
			// Рома, ждём недождёмся справочника ВидДеталей. :)
			// } Васильев Александр Леонидович [09.08.2015]
			
			// Для клееных деталей добавляем по 10 мм. с каждой стороны.
			// Нужны чтобы ровно обрезать.
			Деталь.ВысотаДетали = Деталь.ВысотаДетали + 20;
			Деталь.ШиринаДетали = Деталь.ШиринаДетали + 20;
			Деталь.ДетальДляСклеивания = Истина;
			Деталь.Материал = Неопределено;
			
			НоваяСтрока = тзДетали.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
			НоваяСтрока.Номенклатура = Деталь.НоменклатураДляСклеивания;
			
		ИначеЕсли Материал = "Пуфик" Тогда
			
			// ЛДСП меньше самого пуфика на 15 мм.
			Деталь.ВысотаДетали = Деталь.ВысотаДетали - 15;
			Деталь.ШиринаДетали = Деталь.ШиринаДетали - 15;
			Деталь.Материал = "Пуф";
			
			// Кожа больше пуфика на 150 мм. с каждой стороны.
			НоваяСтрока = тзДетали.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
			НоваяСтрока.Номенклатура = Деталь.НоменклатураДляСклеивания;
			НоваяСтрока.Материал = "Кожа";
			
			НоваяСтрока.ВысотаДетали = НоваяСтрока.ВысотаДетали + 300;
			НоваяСтрока.ШиринаДетали = НоваяСтрока.ШиринаДетали + 300;
			
		КонецЕсли;
		
		// Разбиваем детали на отдельные строки.
		Если Деталь.Количество > 1 Тогда
			
			Для ы = 2 По Деталь.Количество Цикл
				ИД = ИД + 1;
				НоваяСтрока = тзДетали.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
				НоваяСтрока.Количество = 1;
				НоваяСтрока.СтрокаДляФлэш = "";
				НоваяСтрока.ИД = ИД; // Раньше тут был 0, для чего не знаю.
			КонецЦикла;
			
			Деталь.Количество = 1;
			
		КонецЕсли;
		
		// УзкоДлинные оставлен для совместимости со старым раскроем
		Если (Деталь.ШиринаЛиста < Деталь.ВысотаДетали
			ИЛИ Деталь.ВысотаЛиста / 2 < Деталь.ВысотаДетали)
			И Деталь.ШиринаДетали <= 201
			И Материал <> "Пристенок"
			И Материал <> "Столешница" Тогда
			
			Деталь.Порядок = 1;
			Деталь.ОсобыйПорядок = "УзкоДлинные";
			
		КонецЕсли;
		
		Надпись = СформироватьНаименованиеДетали(Деталь);
		Деталь.НаименованиеДетали = Надпись;
		
		Если Деталь.ШиринаДетали > Деталь.ШиринаЛиста
			ИЛИ Деталь.ВысотаДетали > Деталь.ВысотаЛиста Тогда
			
		ТекстОшибки = "Ошибка формирования раскроя на материал '%1'.%2Размеры детали (%3 х %4) превышают размеры листа (%5 х %6).";
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
		Деталь.Номенклатура,
		Символы.ПС,
		Деталь.ШиринаДетали,
		Деталь.ВысотаДетали,
		Деталь.ШиринаЛиста,
		Деталь.ВысотаЛиста);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,, ТекстОшибки);
		
		КонецЕсли;
		
	КонецЦикла; // Деталь Из тзДетали
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	Если Отказ Тогда
		
		ВызватьИсключение "Раскрой не сформирован";
		
	КонецЕсли;
	
	тзДетали.Колонки.Удалить("СоблюдениеТекстуры");
	
	тзДетали.Колонки.Удалить("ЭтоДверь");
	тзДетали.Колонки.Удалить("ЭтоЯщик");
	тзДетали.Колонки.Удалить("ПереключательКромкаСправа");
	тзДетали.Колонки.Удалить("ПереключательКромкаСлева");
	тзДетали.Колонки.Удалить("ПереключательКромкаСверху");
	тзДетали.Колонки.Удалить("ПереключательКромкаСнизу");
	
	Возврат тзДетали;
	
КонецФункции // ФормированиеСпискаДеталей()

// Меняет высоту и ширину детали, проставляет флаг ПоворотДетали
//
// Параметры
//  Деталь  - Строка таблицы значений - Обязательные свойства ВысотаДетали, ШиринаДетали, ПоворотДетали
//
// Возвращаемое значение:
//   Нет   - 
//
Функция ПовернутьДеталь(фнДеталь)
	
	ъ = фнДеталь.ШиринаДетали; // Знаю что можно без третьей переменной, но так наглядней.
	фнДеталь.ШиринаДетали = фнДеталь.ВысотаДетали;
	фнДеталь.ВысотаДетали = ъ;
	фнДеталь.ПоворотДетали = Истина;
	
КонецФункции

// Получает размеры листа номенклатуры для заданного подразделения
//
// Параметры
//  фнНоменклатура  - СправочникСсылка.Номенклатура - Для какой номенклатуры получаем размеры листа
//  фнПодразделение  - СправочникСсылка.Подразделение - Размеры листа на котором подразделении
//
// Возвращаемое значение:
//   Структура   - ШиринаЛиста, ВысотаЛиста
//
Функция ПолучитьРазмерыЛиста(фнНоменклатура, фнПодразделение)
	
	// { Васильев Александр Леонидович [09.08.2015]
	//Номенклатура = ПолучитьОсновнуюПоСкладу(фнНоменклатура, фнПодразделение);
	// Пока не включаем.
	// } Васильев Александр Леонидович [09.08.2015]
	
	Номенклатура = фнНоменклатура;
	СвойстваНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ШиринаДетали, ДлинаДетали");
	
	Результат = Новый Структура;
	Результат.Вставить("ШиринаЛиста", СвойстваНоменклатуры.ШиринаДетали);
	Результат.Вставить("ВысотаЛиста", СвойстваНоменклатуры.ДлинаДетали);
	
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на основную номенклатуру подразделения
//
// Параметры
//  фнНоменклатура  - СправочникСсылка.Номенклатура - Для какой номенклатуры получаем основную
//  фнПодразделение  - СправочникСсылка.Подразделение - Размеры листа на котором подразделении
//
// Возвращаемое значение:
//   СправочникСсылка.Номенклатура   - Основная по складу номенклатура установленная для подразделения
//
Функция ПолучитьОсновнуюПоСкладу(фнНоменклатура, фнПодразделение)
	
	Результат = фнНоменклатура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", фнНоменклатура);
	Запрос.УстановитьПараметр("Подразделение", фнПодразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураПодразделений.ОсновнаяПоСкладу
	|ИЗ
	|	РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
	|ГДЕ
	|	НоменклатураПодразделений.Подразделение = &Подразделение
	|	И НоменклатураПодразделений.Номенклатура = &Номенклатура
	|	И НоменклатураПодразделений.ОсновнаяПоСкладу <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.ОсновнаяПоСкладу;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Формирование_раскроя

Функция ОбщаяДлинаЭлементов(Массив, УвеличениеЭлемента = 0)
	
	Результат = 0;
	
	Для каждого Элемент Из Массив Цикл
		
		Результат = Результат + Элемент + УвеличениеЭлемента;
		
	КонецЦикла;
	
	// Вычитаем последний пил
	Результат = Результат- УвеличениеЭлемента;
	
	Возврат Результат;
	
КонецФункции

Функция МаксимальноеЗначениеВМассиве(фМассив)
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Значение");
	
	Для каждого Элемент Из фМассив Цикл
		тз.Добавить();
	КонецЦикла;
	
	тз.ЗагрузитьКолонку(фМассив, "Значение");
	тз.Сортировать("Значение Убыв");
	
	Возврат тз[0].Значение;
	
КонецФункции

Функция ПрименитьТолщинуРеза(МассивЭлементов, МаксимальнаяСумма, Дельта)
	
	МаксимальнаяСумма = МаксимальнаяСумма + Дельта;
	
	Для Индекс = 1 По МассивЭлементов.ВГраница() Цикл
		
		МассивЭлементов[Индекс] = МассивЭлементов[Индекс] + Дельта;
		
	КонецЦикла;
	
КонецФункции

Функция МодульЧисла(фЧисло)
	
	Если фЧисло >= 0 Тогда
		Результат = фЧисло;
	Иначе
		Результат = -фЧисло;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция МаксимальнаяСуммаПодмножеств(МассивЭлементов, Знач МаксимальнаяСумма, УвеличениеЭлемента = 0) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Массив", Новый Массив);
	Результат.Вставить("Сумма");
	Результат.Вставить("МинимальныйОстаток");
	Результат.Вставить("КоличествоЭлементов");
	Результат.Вставить("ОбщаяДлинаПила");
	
	МаксимальныйЭлемент = МаксимальноеЗначениеВМассиве(МассивЭлементов);
	Если МаксимальныйЭлемент > МаксимальнаяСумма Тогда
		ВызватьИсключение "Ошибка 773: Элемент размера " + МаксимальныйЭлемент +" превышает максимум в " + МаксимальнаяСумма;
	КонецЕсли;
	
	// В таблице нулевые строки и колонки -- служебные.
	// Скопируем нулевую строку в конец, исходник обнулим.
	
	МассивЭлементов.Добавить(МассивЭлементов[0]);
	МассивЭлементов[0] = 0;
	
	КоличествоЭлементов = МассивЭлементов.ВГраница();
	
	// Обработка толщины реза
	// Увеличим каждый элемент
	// и максимальную сумму (для учета одного последнего реза)
	Если УвеличениеЭлемента <> 0 Тогда
		
		// Сохраним исходный массив, чтобы не отнимать толщину пила
		// если обрезков недостаточно на целый хлыст
		ОригинальныйМассив = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивЭлементов);
		ПрименитьТолщинуРеза(МассивЭлементов, МаксимальнаяСумма, УвеличениеЭлемента);
		
	КонецЕсли;
	
	// Проверка общей суммы на превышение длины хлыста.
	// Нет смысла включать алгоритм если все элементы и так помещаются.
	СуммаДлин = ОбщаяДлинаЭлементов(МассивЭлементов);
	Если СуммаДлин < МаксимальнаяСумма Тогда
		
		Если ЗначениеЗаполнено(ОригинальныйМассив) Тогда
			Результат.Массив = ОригинальныйМассив;
		Иначе
			Результат.Массив = МассивЭлементов;
		КонецЕсли;
		
		Результат.Массив.Удалить(0);
		
		Результат.Сумма = СуммаДлин - УвеличениеЭлемента * КоличествоЭлементов;
		Результат.МинимальныйОстаток = МаксимальнаяСумма - УвеличениеЭлемента - СуммаДлин;
		Результат.КоличествоЭлементов = КоличествоЭлементов;
		Результат.ОбщаяДлинаПила = КоличествоЭлементов * УвеличениеЭлемента;
		
		Возврат Результат;
		
	КонецЕсли;
	
	////////////////////////////////
	// Основной алгоритм распределения
	
	// Подготовка рабочей таблицы.
	
	Т = Новый Массив(КоличествоЭлементов + 1, МаксимальнаяСумма + 1);
	
	Для Индекс = 1 По МаксимальнаяСумма Цикл
		Т[0][Индекс] = 0;
	КонецЦикла;
	
	Для Индекс = 0 По КоличествоЭлементов Цикл
		Т[Индекс][0] = 1;
	КонецЦикла;
	
	// Формирование матрицы решений.
	
	Для ИтераторЭлемента = 1 По КоличествоЭлементов Цикл
		
		Для ИтераторРазмера = 1 По МаксимальнаяСумма Цикл
			
			Если ИтераторРазмера >= МассивЭлементов[ИтераторЭлемента] Тогда
				
				Если Т[ИтераторЭлемента - 1][ИтераторРазмера] > Т[ИтераторЭлемента - 1][ИтераторРазмера - МассивЭлементов[ИтераторЭлемента]] Тогда
					
					Т[ИтераторЭлемента][ИтераторРазмера] = Т[ИтераторЭлемента - 1][ИтераторРазмера];
					
				Иначе
					
					Т[ИтераторЭлемента][ИтераторРазмера] = Т[ИтераторЭлемента - 1][ИтераторРазмера - МассивЭлементов[ИтераторЭлемента]];
					
				КонецЕсли;
				
			Иначе
				
				Т[ИтераторЭлемента][ИтераторРазмера] = Т[ИтераторЭлемента - 1][ИтераторРазмера];
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Выбор оптимального решения.
	
	Сумма = 0;
	МинимальныйОстаток = МаксимальнаяСумма;
	
	Для Итератор = 0 По МаксимальнаяСумма - 1 Цикл
		
		РазмерЭлемента = МаксимальнаяСумма - Итератор;
		
		Если Т[КоличествоЭлементов][РазмерЭлемента] = 1 Тогда
			
			Если МинимальныйОстаток > МодульЧисла(МаксимальнаяСумма - РазмерЭлемента) Тогда
				МинимальныйОстаток = МодульЧисла(МаксимальнаяСумма - РазмерЭлемента);
				Сумма = РазмерЭлемента;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Определение результата
	
	Результат.Сумма = Сумма;
	
	Для Итератор = 0 По КоличествоЭлементов - 1 Цикл
		
		НомерЭлемента = КоличествоЭлементов - Итератор;
		
		Если Т[НомерЭлемента][Сумма] <> Т[НомерЭлемента - 1][Сумма] Тогда
			Результат.Массив.Добавить(МассивЭлементов[НомерЭлемента] - УвеличениеЭлемента);
			Сумма = Сумма - МассивЭлементов[НомерЭлемента];
		КонецЕсли;
		
	КонецЦикла;
	
	// Уменьшим результат на все резы.
	Результат.Сумма = Результат.Сумма - УвеличениеЭлемента * Результат.Массив.Количество();
	Результат.МинимальныйОстаток = МаксимальнаяСумма - Результат.Сумма - УвеличениеЭлемента * 2;
	
	МассивЭлементов.Удалить(0);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьНовыйЛист(Знач СписокДеталейНоменклатуры, Знач НомерЛиста, Знач Номенклатура, Знач ВысотаЛиста, Знач ШиринаЛиста, Знач Остатки)
	
	Перем НоваяСтрока;
	
	НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.НомерЛиста = НомерЛиста;
	НоваяСтрока.ВысотаДетали = ВысотаЛиста;
	НоваяСтрока.ШиринаДетали = ШиринаЛиста;
	НоваяСтрока.ВысотаЛиста = ВысотаЛиста;
	НоваяСтрока.ШиринаЛиста = ШиринаЛиста;
	НоваяСтрока.КоординатаУ = 0;
	НоваяСтрока.КоординатаХ = 0;
	
	// { Васильев Александр Леонидович [03.08.2015]
	// Вылетает при перекраивании (на пиле)
	НоваяСтрока.GUID = Новый УникальныйИдентификатор;
	// } Васильев Александр Леонидович [03.08.2015]
	
	НоваяСтрока.Остаток = Истина;
	
	Если Остатки <> Неопределено Тогда
		
		Если ТипЗнч(Остатки) = Тип("ТаблицаЗначений") Тогда
			
			СтрокаОстатков = Остатки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОстатков, НоваяСтрока);
			
		ИначеЕсли ТипЗнч(Остатки) = Тип("Массив") Тогда
			
			Остатки.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОптимизацияОстатков(СписокДеталейНоменклатуры, НомерЛиста, КонечныйНомерЛиста, ТолщинаПила, ПределыОстатков, НоменклатурнаяГруппа)
	
	ПлощадьОстатковПоНоменклатуре = 0;
	СписокДеталейНоменклатуры.Сортировать("НомерЛиста, КоординатаУ Убыв, КоординатаХ Убыв");
	
	Для ТекущийНомерЛиста = КонечныйНомерЛиста + 1 По НомерЛиста Цикл
		
		КоличествоОстатков = 0;
		ПлощадьОстатков = 0;
		СреднийОстаток = 0;
		КоличествоОстатков2 = 1;
		ПлощадьОстатков2 = 0;
		СреднийОстаток2 = 0;
		
		МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток, НомерЛиста", Истина, ТекущийНомерЛиста));
		
		Если МассивОстатков.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//_____1_____
		Для Каждого ЭлементМассиваОстатков Из МассивОстатков Цикл
			
			Если ПолезныйОстаток(ПределыОстатков, НоменклатурнаяГруппа, ЭлементМассиваОстатков.ВысотаДетали, ЭлементМассиваОстатков.ШиринаДетали) Тогда
				
				ПлощадьОстатков = ПлощадьОстатков + (ЭлементМассиваОстатков.ВысотаДетали * ЭлементМассиваОстатков.ШиринаДетали);
				КоличествоОстатков = КоличествоОстатков + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СреднийОстаток = ?(КоличествоОстатков > 0, ПлощадьОстатков / КоличествоОстатков, 0);
		
		//_____ИтоговыеОстатки_____
		Если СреднийОстаток < СреднийОстаток2 Тогда
			
			//применяем 2-ой алгоритм
			МассивОстатков[0].ШиринаДетали = МассивОстатков[0].ШиринаЛиста;
			МассивОстатков[0].КоординатаХ = 0;
			ПлощадьОстатковПоНоменклатуре = ПлощадьОстатковПоНоменклатуре + ПлощадьОстатков2;
			
		Иначе
			
			ПлощадьОстатковПоНоменклатуре = ПлощадьОстатковПоНоменклатуре + ПлощадьОстатков;
			
		КонецЕсли;
		
		//применение оптимального алгоритма
		Для Каждого ЭлементМассиваОстатков Из МассивОстатков Цикл
			
			//если 2-ой алгоритм, все остатки подгоняем под максимальную линию пила
			//Если СреднийОстаток < СреднийОстаток2 И МассивОстатков[0] <> ЭлементМассиваОстатков Тогда
			//	
			//	ЭлементМассиваОстатков.ВысотаДетали = МаксЛинияПила - ТолщинаПила - ЭлементМассиваОстатков.КоординатаУ;
			//	
			//КонецЕсли;
			
			//удаление маленьких остатков
			Если НЕ ПолезныйОстаток(ПределыОстатков, НоменклатурнаяГруппа, ЭлементМассиваОстатков.ВысотаДетали, ЭлементМассиваОстатков.ШиринаДетали) Тогда
				
				СписокДеталейНоменклатуры.Удалить(ЭлементМассиваОстатков);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("ПлощадьОстатковПоНоменклатуре", ПлощадьОстатковПоНоменклатуре);
	Структура.Вставить("СписокДеталейНоменклатуры", СписокДеталейНоменклатуры);
	
	Возврат Структура;
	
КонецФункции

Функция ФормированиеПакета(Знач СписокДеталейНоменклатуры, Знач ВысотаЛиста, Знач ШиринаЛиста, ТолщинаПила, Номенклатура, ПределыОстатков, ИдеальныйПроцентОтхода, РазрешенныйПроцентПоШирине, ПоворотДеталей = Ложь)
	
	СтруктураДляСтрокиРаскроя = Новый Структура;
	
	Если ПоворотДеталей Тогда //Если детали без текстуры - переворачиваем
		
		Для каждого Строка Из СписокДеталейНоменклатуры Цикл
			
			Если Строка.МожноПовернуть Тогда
				
				ВысотаДетальки = Строка.ВысотаДетали;
				Строка.ВысотаДетали = Строка.ШиринаДетали;
				Строка.ШиринаДетали = ВысотаДетальки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Нужна колонка для обозначения деталей, принадлежащих пакету, но использующейся в его остатках
	СписокДеталейНоменклатуры.Колонки.Добавить("ИспользуетсяВОстаткахПакета", Новый ОписаниеТипов("Булево"));
	
	ТаблицаПакетов = АлгоритмОРанце(СписокДеталейНоменклатуры, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, Номенклатура, ИдеальныйПроцентОтхода, РазрешенныйПроцентПоШирине);
	
	ТаблицаСтолбцов = Новый ТаблицаЗначений;//Для передачи пакетов как деталей в АлгоритмОРанце
	ТаблицаСтолбцов.Колонки.Добавить("ВысотаДетали", Новый ОписаниеТипов("Число"));
	ТаблицаСтолбцов.Колонки.Добавить("ШиринаДетали", Новый ОписаниеТипов("Число"));
	ТаблицаСтолбцов.Колонки.Добавить("ДетальВПакете", Новый ОписаниеТипов("Булево"));
	ТаблицаСтолбцов.Колонки.Добавить("ДетальРазмещена", Новый ОписаниеТипов("Булево"));
	ТаблицаСтолбцов.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Булево"));
	ТаблицаСтолбцов.Колонки.Добавить("GUID", Новый ОписаниеТипов("Строка"));
	ТаблицаСтолбцов.Колонки.Добавить("ИспользуетсяВОстаткахПакета", Новый ОписаниеТипов("Булево"));
	ТаблицаСтолбцов.Колонки.Добавить("КоординатаУ", Новый ОписаниеТипов("Число"));
	НомерЛиста = 0;
	
	Для каждого Пакет Из ТаблицаПакетов Цикл
		
		НоваяСтрока = ТаблицаСтолбцов.Добавить();
		//Чтобы адекватно работал алгоритм, придется менять высоту и ширину деталей и листа
		НоваяСтрока.ВысотаДетали = Пакет.ШиринаПакета;
		НоваяСтрока.ШиринаДетали = ВысотаЛиста; //Для алгоритма размещения столбцов на пофигу на их ширину
		НоваяСтрока.GUID = Строка(Пакет.НомерПакета);
		
	КонецЦикла;
	
	//Запускаем алгоритм для столбцов отдельно
	ТаблицаРазмещенияСтолбцов = АлгоритмОРанце(ТаблицаСтолбцов, ШиринаЛиста, ВысотаЛиста, ТолщинаПила, Номенклатура, 0, 0, , , , Истина);
	
	//Размещаем детали
	Если ТаблицаРазмещенияСтолбцов.Количество() > 0 Тогда
		
		Для Каждого Строка Из ТаблицаРазмещенияСтолбцов Цикл
			
			НомерЛиста = НомерЛиста + 1;
			НомерСтолбца = 0;
			
			Для каждого Столбец Из Строка.Пакет Цикл
				
				СтрокаПоиска = ТаблицаПакетов.Найти(Столбец.GUID, "НомерПакета");
				РазмещаемыйПакет = СтрокаПоиска.Пакет;
				СтарыйНомерСтолбца = НомерСтолбца;
				НомерСтолбца = НомерСтолбца + 1;
				ШиринаПредыдущейДетали = 0;
				РазмещаемыйПакет.Сортировать("ИспользуетсяВОстаткахПакета Возр, ШиринаДетали Убыв, КоординатаХ Возр, КоординатаУ Возр");
				
 				Для Каждого Деталь Из РазмещаемыйПакет Цикл
					
					Если ШиринаПредыдущейДетали = 0 Тогда
					
						ШиринаПредыдущейДетали = Деталь.ШиринаДетали;
					
					КонецЕсли;
					
					ДобавитьБольшойОстатокСлева = СтарыйНомерСтолбца <> НомерСтолбца;
					
					ИспользуетсяВОстатках = Деталь.ИспользуетсяВОстаткахПакета;
						
					ОстатокСлева = ШиринаПредыдущейДетали - Деталь.ШиринаДетали;
					
					РазмещаемаяДеталь = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
					КоординатаХ = ?(Деталь.КоординатаХ > 0, Столбец.КоординатаУ + Деталь.КоординатаХ, Столбец.КоординатаУ);
					РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры, РазмещаемаяДеталь, ТолщинаПила, Деталь.КоординатаУ, КоординатаХ, НомерЛиста, ВысотаЛиста, ШиринаЛиста, ДобавитьБольшойОстатокСлева, ОстатокСлева, ИспользуетсяВОстатках); //ОстатокПоВысоте, ОстатокПоШирине,
					СтарыйНомерСтолбца = НомерСтолбца;
					ШиринаПредыдущейДетали = Деталь.ШиринаДетали;
							
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
		СтруктураОптимальногоОстатка = ОптимизацияОстатков(СписокДеталейНоменклатуры, НомерЛиста , 0, ТолщинаПила, ПределыОстатков, НоменклатурнаяГруппа);
		
		ТаблицаДеталейИтог = СтруктураОптимальногоОстатка.СписокДеталейНоменклатуры;
		ОптимальныйАлгоритмРаскроя = Строка(НоменклатурнаяГруппа) + "Текстурный - " + Число(ПоворотДеталей) + 
		", ОстатокЛинии - " + 0 + ", Группировка - " + 1 + ";";
		
		СтруктураДляСтрокиРаскроя.Вставить("ТаблицаДеталейИтог", ТаблицаДеталейИтог);
		СтруктураДляСтрокиРаскроя.Вставить("ОптимальныйАлгоритмРаскроя", ОптимальныйАлгоритмРаскроя);
		СтруктураДляСтрокиРаскроя.Вставить("КоличествоЛистов", НомерЛиста);
		СтруктураДляСтрокиРаскроя.Вставить("ПлощадьОстатковПоНоменклатуре", СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре);
		МассивОстатков = ТаблицаДеталейИтог.НайтиСтроки(Новый Структура("Остаток", Истина));
		СредняяПлощадьОстатков = ?(МассивОстатков.Количество() > 0, СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре / МассивОстатков.Количество(), 0);
		МощностьРаскроя = СредняяПлощадьОстатков * СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре;
		СтруктураДляСтрокиРаскроя.Вставить("КоличествоОстатков", МассивОстатков.Количество());
		СтруктураДляСтрокиРаскроя.Вставить("СредняяПлощадьОстатков", СредняяПлощадьОстатков);
		СтруктураДляСтрокиРаскроя.Вставить("МощностьРаскроя", МощностьРаскроя);
		
		//ПлощадьЛистов = НомерЛиста * Номенклатура.ДлинаДетали * Номенклатура.ШиринаДетали;
		
		МассивДеталей = ТаблицаДеталейИтог.НайтиСтроки(Новый Структура("Остаток", Ложь));
		ПлощадьДеталей = 0;
		
		Для каждого Деталь Из МассивДеталей Цикл
		
			ПлощадьДеталей = ПлощадьДеталей + Деталь.ВысотаДетали * Деталь.ШиринаДетали;
		
		КонецЦикла;
		
		СравниваемыйПроцент = ?(ПлощадьДеталей > 0, Окр(СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре / ПлощадьДеталей * 100, 2), 0);
		СтруктураДляСтрокиРаскроя.Вставить("СравниваемыйПроцент", СравниваемыйПроцент);
		
	Иначе
		
		СтруктураДляСтрокиРаскроя = Новый Структура("ТекстОшибки", "Пустой раскрой");
		
	КонецЕсли;
	
	Возврат СтруктураДляСтрокиРаскроя;
	
КонецФункции

Функция АлгоритмОРанце(Знач СписокДеталейНоменклатуры, Знач ВысотаЛиста, Знач ШиринаЛиста, ТолщинаПила, Номенклатура, ИдеальныйПроцентОтхода, РазрешенныйПроцентПоШирине, ПроверкаОстатков = Ложь, СтараяВысотаПакета = 0, ОбходОставшихся = Ложь, РазмещениеСтолбцов = Ложь)
	
	МассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("ДетальВПакете", Ложь));
	
	СписокДеталейНоменклатуры.Колонки.Добавить("ДетальПроверена", Новый ОписаниеТипов("Булево"));
	
	ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать(МассивВсехДеталей);
	
	ИтогВысотыПоДеталям = ТаблицаВсехДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаВсехДеталей.Количество() - 1);
	ТаблицаВсехДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
	ТаблицаОставшихсяДеталей = ТаблицаВсехДеталей.Скопировать();
	ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
	НомерПакета = 1;
	ТаблицаПакетов = Новый ТаблицаЗначений;
	ТаблицаПакетов.Колонки.Добавить("Пакет", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаПакетов.Колонки.Добавить("ШиринаПакета", Новый ОписаниеТипов("Число"));
	ТаблицаПакетов.Колонки.Добавить("ВысотаПакета", Новый ОписаниеТипов("Число"));
	ТаблицаПакетов.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Строка"));
	
	ПоследнееРешение = СписокДеталейНоменклатуры.СкопироватьКолонки();
	
	ЛучшееРешение = СписокДеталейНоменклатуры.СкопироватьКолонки();
	РешениеДляДобавления = СписокДеталейНоменклатуры.СкопироватьКолонки();
	ШиринаОставшегосяКуска = ШиринаЛиста;
	ПоследнийПроцентОстаткаСверху = 100;
	ВысотаПакета = 0;
	ШиринаПакета = 0;
	ШиринаПоследнейДетали = 0;
	КоличествоЭлементовВТаблице = ТаблицаОставшихсяДеталей.Количество();
	ШиринаСамойУзкойДетали = ?(КоличествоЭлементовВТаблице > 0, ТаблицаОставшихсяДеталей[КоличествоЭлементовВТаблице - 1].ШиринаДетали, 0);
	
	Если ШиринаСамойУзкойДетали <= ШиринаЛиста и ШиринаСамойУзкойДетали > 0 Тогда
		
		Пока ИтогВысотыПоДеталям > 0 И ИтогВысотыПоДеталям > ВысотаЛиста Цикл
			
			ПакетСобран = Ложь;
			
			Если ПроверкаОстатков Тогда
			
				ШиринаЛиста = ШиринаОставшегосяКуска;
			
			КонецЕсли;
			
			Для Каждого Элемент Из ТаблицаВсехДеталей Цикл
				
				Если Элемент.Остаток
					ИЛИ Элемент.ДетальВПакете
					ИЛИ Элемент.ДетальРазмещена 
					Тогда
					Продолжить;
				КонецЕсли;
				
				ПоследнееРешение.Очистить();
				
				Если НЕ ПакетСобран Тогда
					
					ШиринаПакета = Элемент.ШиринаДетали;
					ШиринаПоследнейДетали = Элемент.ШиринаДетали;
					СтрокаДляПоиска = ТаблицаОставшихсяДеталей.Найти(Элемент.GUID, "GUID");
					ТаблицаОставшихсяДеталей.Удалить(СтрокаДляПоиска);
					
					Если Элемент.ВысотаДетали <= ВысотаЛиста И Элемент.ШиринаДетали <= ШиринаЛиста Тогда
						
						НоваяСтрока = ПоследнееРешение.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
						ВысотаПакета = Элемент.ВысотаДетали;
						
					Иначе
						
						СписокДеталейНоменклатуры.Найти(Элемент.GUID, "GUID").ДетальПроверена = Истина;
						Продолжить;
						
					КонецЕсли;
					
					Для каждого Деталь Из ТаблицаОставшихсяДеталей Цикл
						
						Если ВысотаПакета + Деталь.ВысотаДетали + ТолщинаПила <= ВысотаЛиста
							И Деталь.ШиринаДетали <= ШиринаЛиста 
							И Деталь.ШиринаДетали >= ШиринаПоследнейДетали / 100 * РазрешенныйПроцентПоШирине
							Тогда
							
							НоваяСтрока = ПоследнееРешение.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
							
							ВысотаПакета = ВысотаПакета + Деталь.ВысотаДетали + ТолщинаПила;
							ШиринаПоследнейДетали = Деталь.ШиринаДетали;
							
						КонецЕсли;
						
						ПлощадьПолосы = ШиринаПакета * ВысотаЛиста;
						ПлощадьОстаткаСверху = ШиринаПакета * (ВысотаЛиста - ВысотаПакета - ТолщинаПила);
						ПроцентОстаткаСверху = ?(ПлощадьПолосы > 0, ПлощадьОстаткаСверху * 100 / ПлощадьПолосы, 100);
						
						Если ПроцентОстаткаСверху <= ИдеальныйПроцентОтхода Тогда
							
							ЛучшееРешение = ПоследнееРешение.Скопировать();
							ПакетСобран = Истина;
							Прервать;
							
						Иначе
							
							Если ПроцентОстаткаСверху < ПоследнийПроцентОстаткаСверху Тогда
								
								ПоследнийПроцентОстаткаСверху = ПроцентОстаткаСверху;
								ЛучшееРешение = ПоследнееРешение.Скопировать();
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					ПлощадьПолосы = ШиринаПакета * ВысотаЛиста;
					ПлощадьОстаткаСверху = ШиринаПакета * (ВысотаЛиста - ВысотаПакета - ТолщинаПила);
					ПроцентОстаткаСверху = ?(ПлощадьПолосы > 0, ПлощадьОстаткаСверху * 100 / ПлощадьПолосы, 100);
					
					Если ПроцентОстаткаСверху < ПоследнийПроцентОстаткаСверху Тогда
						
						ПоследнийПроцентОстаткаСверху = ПроцентОстаткаСверху;
						ЛучшееРешение = ПоследнееРешение.Скопировать();
						
					КонецЕсли;
					
				Иначе // НЕ ПакетСобран
					
					Если НЕ РазмещениеСтолбцов Тогда
						
						ВысотаПакета = ЛучшееРешение.Итог("ВысотаДетали") + ТолщинаПила * (ЛучшееРешение.Количество() - 1);
						ЛучшееРешение.Сортировать("ШиринаДетали Убыв");
						ШиринаПакета = ?(ЛучшееРешение.Количество() > 0, ЛучшееРешение[0].ШиринаДетали, 0);
						Если НЕ ПроверкаОстатков Тогда
							ЛучшееРешение = ПроверитьВозможностьИспользованияОстатков(ЛучшееРешение, СписокДеталейНоменклатуры, ТолщинаПила, Номенклатура, ВысотаЛиста, ИдеальныйПроцентОтхода, РазрешенныйПроцентПоШирине);
						КонецЕсли;
					КонецЕсли;
					
					ВысотаПакета = ЛучшееРешение.Итог("ВысотаДетали") + ТолщинаПила * (ЛучшееРешение.Количество() - 1);
					ЛучшееРешение.Сортировать("ШиринаДетали Убыв");
					ШиринаПакета = ?(ЛучшееРешение.Количество() > 0, ЛучшееРешение[0].ШиринаДетали, 0);
					РешениеДляДобавления = ЛучшееРешение.Скопировать();
					ТаблицаПакетов = ДобавитьЛучшееРешение(РешениеДляДобавления, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета, ТолщинаПила);
					НомерПакета = НомерПакета + 1;
					ЛучшееРешение.Очистить();
					ШиринаОставшегосяКуска = ШиринаОставшегосяКуска - ШиринаПакета - ТолщинаПила;
					ВысотаПакета = 0;
					ПоследнийПроцентОстаткаСверху = 100;
					ПоследнееРешение.Очистить();
					ШиринаПакета = 0;
					ШиринаПоследнейДетали = 0;
					
					Прервать;
					
				КонецЕсли;
				
				СписокДеталейНоменклатуры.Найти(Элемент.GUID, "GUID").ДетальПроверена = Истина;
				
			КонецЦикла;
			
			Отбор = Новый Структура;
			Отбор.Вставить("ДетальВПакете", Ложь);
			Отбор.Вставить("ДетальПроверена", Ложь);
			МассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Отбор);
			ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать(МассивВсехДеталей);
			ИтогВысотыПоДеталям = ТаблицаВсехДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаВсехДеталей.Количество() - 1);
			ТаблицаВсехДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
			ТаблицаОставшихсяДеталей = ТаблицаВсехДеталей.Скопировать();
			ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
			ПоследнееРешение.Очистить();
			
			Если ПроверкаОстатков И ШиринаСамойУзкойДетали > ШиринаОставшегосяКуска Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла; // Пока хватает деталей на целый столбец
		
		Если ЛучшееРешение.Количество() > 0 Тогда
			
			ВысотаПакета = ЛучшееРешение.Итог("ВысотаДетали") + ТолщинаПила * (ЛучшееРешение.Количество() - 1);
			ЛучшееРешение.Сортировать("ШиринаДетали Убыв");
			ШиринаПакета = ?(ЛучшееРешение.Количество() > 0, ЛучшееРешение[0].ШиринаДетали, 0);
			
			Если НЕ ПроверкаОстатков Тогда
				ЛучшееРешение = ПроверитьВозможностьИспользованияОстатков(ЛучшееРешение, СписокДеталейНоменклатуры, ТолщинаПила, Номенклатура, ВысотаЛиста, ИдеальныйПроцентОтхода, РазрешенныйПроцентПоШирине);
			КонецЕсли;
			
			РешениеДляДобавления = ЛучшееРешение.Скопировать();
			ТаблицаПакетов = ДобавитьЛучшееРешение(РешениеДляДобавления, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета, ТолщинаПила);
			ЛучшееРешение.Очистить();
			ШиринаОставшегосяКуска = ШиринаОставшегосяКуска - ШиринаПакета - ТолщинаПила;
			//////////
			МассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("ДетальВПакете", Ложь));
			ТаблицаОставшихсяДеталей = СписокДеталейНоменклатуры.Скопировать(МассивВсехДеталей);
			ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
			ИтогВысотыПоДеталям = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
			///////////
		КонецЕсли;
		
		Если
			//НЕ ПроверкаОстатков И
			НЕ ОбходОставшихся 
			Тогда
			
			МассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("ДетальВПакете", Ложь));
			ТаблицаОставшихсяДеталей = СписокДеталейНоменклатуры.Скопировать(МассивВсехДеталей);
			ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
			ВысотаПакета = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
			ШиринаПакета = ?(ТаблицаОставшихсяДеталей.Количество() > 0, ТаблицаОставшихсяДеталей[0].ШиринаДетали, 0);
			
			Если ТаблицаОставшихсяДеталей.Количество() > 0
				И СписокДеталейНоменклатуры.Количество() <> ТаблицаОставшихсяДеталей.Количество() Тогда
				
				КоличествоЭлементовВТаблице = ТаблицаОставшихсяДеталей.Количество();
				ШиринаСамойУзкойДетали = ?(КоличествоЭлементовВТаблице > 0, ТаблицаОставшихсяДеталей[КоличествоЭлементовВТаблице - 1].ШиринаДетали, 0);
				
				Если ШиринаСамойУзкойДетали <= ШиринаЛиста Тогда
					
					Пока ВысотаПакета > ВысотаЛиста Цикл
						
						Если ПроверкаОстатков И ШиринаСамойУзкойДетали > ШиринаОставшегосяКуска Тогда
							
							Прервать;
							
						КонецЕсли;
						
						Если ПроверкаОстатков Тогда
						
							ШиринаЛиста = ШиринаОставшегосяКуска;
						
						КонецЕсли;
						
						Если ВысотаПакета <> СтараяВысотаПакета Или СтараяВысотаПакета = 0 Тогда
							
							ТаблицаОставшихсяДеталей.Колонки.Удалить("ДетальПроверена");
							
							НоваяТаблицаПакетов = АлгоритмОРанце(ТаблицаОставшихсяДеталей, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, Номенклатура, ИдеальныйПроцентОтхода,РазрешенныйПроцентПоШирине, ПроверкаОстатков, ВысотаПакета, Истина);
							
							Если НоваяТаблицаПакетов.Количество() > 0 Тогда
								
								Для каждого Пакет Из НоваяТаблицаПакетов Цикл
									
									Для Каждого Строка Из Пакет.Пакет Цикл
										
										ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
										ИсправляемаяСтрока.ДетальВПакете = Истина;
										
									КонецЦикла;
									
									ВысотаПакета = Пакет.Пакет.Итог("ВысотаДетали") + ТолщинаПила * (Пакет.Пакет.Количество() - 1);
									НомерПакета = НомерПакета + 1;
									НоваяСтрока = ТаблицаПакетов.Добавить();
									НоваяСтрока.Пакет = Пакет.Пакет;
									НоваяСтрока.ШиринаПакета = Пакет.ШиринаПакета;
									НоваяСтрока.ВысотаПакета = ВысотаПакета;
									НоваяСтрока.НомерПакета = НомерПакета;
									
									ШиринаОставшегосяКуска = ШиринаОставшегосяКуска - Пакет.ШиринаПакета - ТолщинаПила;
									
								КонецЦикла;
								
							КонецЕсли;
							
							НовыйМассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("ДетальВПакете", Ложь));
							НоваяТаблицаОставшихсяДеталей = СписокДеталейНоменклатуры.Скопировать(НовыйМассивВсехДеталей);
							
							Если НоваяТаблицаОставшихсяДеталей.Количество() = СписокДеталейНоменклатуры.Количество() Тогда
								
								Прервать;
								
							Иначе
								
								МассивВсехДеталей = НовыйМассивВсехДеталей;
								ТаблицаОставшихсяДеталей = НоваяТаблицаОставшихсяДеталей;
								ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
								
							КонецЕсли;
							
						Иначе
							
							Прервать;
							
						КонецЕсли;
						
						СтараяВысотаПакета = ВысотаПакета;
						ВысотаПакета = НоваяТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (НоваяТаблицаОставшихсяДеталей.Количество() - 1);
						
					КонецЦикла;
					
				КонецЕсли;
				
				МассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("ДетальВПакете", Ложь));
				ТаблицаОставшихсяДеталей = СписокДеталейНоменклатуры.Скопировать(МассивВсехДеталей);
				ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
				ВысотаПакета = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
				
				Если ТаблицаОставшихсяДеталей.Количество() > 0 И ВысотаПакета <= ВысотаЛиста Тогда
					
					ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
					ШиринаПакета = ТаблицаОставшихсяДеталей[0].ШиринаДетали;
					
					Если НЕ ПроверкаОстатков Или ПроверкаОстатков И ШиринаПакета <= ШиринаОставшегосяКуска Тогда
						
						ТаблицаПакетов = ДобавитьЛучшееРешение(ТаблицаОставшихсяДеталей, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета + 1, ТолщинаПила);
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ВысотаПакета <= ВысотаЛиста И ТаблицаОставшихсяДеталей.Количество() > 0 И ШиринаПакета <= ШиринаЛиста Тогда
				
				ТаблицаОставшихсяДеталей.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
				ВысотаПакета = ТаблицаОставшихсяДеталей.Итог("ВысотаДетали") + ТолщинаПила * (ТаблицаОставшихсяДеталей.Количество() - 1);
				ШиринаПакета = ТаблицаОставшихсяДеталей[0].ШиринаДетали;
				ТаблицаПакетов = ДобавитьЛучшееРешение(ТаблицаОставшихсяДеталей, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета + 1, ТолщинаПила);
				
			КонецЕсли;
			
		ИначеЕсли ИтогВысотыПоДеталям > 0 И ИтогВысотыПоДеталям < ВысотаЛиста И ПроверкаОстатков Тогда
			
			ШиринаПакета = ТаблицаОставшихсяДеталей[0].ШиринаДетали;
			
			Если ПроверкаОстатков Тогда
			
				ШиринаЛиста = ШиринаОставшегосяКуска;
			
			КонецЕсли;
			
			Если ШиринаПакета < ШиринаЛиста Тогда
				
				ТаблицаПакетов = ДобавитьЛучшееРешение(ТаблицаОставшихсяДеталей, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета + 1, ТолщинаПила);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщаяШирина = 0;
		ТаблицаПакетов.Сортировать("ШиринаПакета Убыв");
	КонецЕсли;
	
	Возврат ТаблицаПакетов;
	
КонецФункции

Функция ДобавитьЛучшееРешение(ЛучшееРешение, СписокДеталейНоменклатуры, ТаблицаПакетов, ШиринаПакета, ВысотаПакета, НомерПакета, ТолщинаПила)
	
	//ЛучшееРешение.Сортировать("ШиринаДетали Убыв");
	КоординатаУ = 0;
	
	Для каждого Строка Из ЛучшееРешение Цикл
		
		ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
		ИсправляемаяСтрока.ДетальВПакете = Истина;
		
		Если НЕ Строка.ИспользуетсяВОстаткахПакета Тогда
		
			Строка.КоординатаУ = КоординатаУ;
			//ИсправляемаяСтрока.КоординатаУ = КоординатаУ;
			КоординатаУ = КоординатаУ + ТолщинаПила + Строка.ВысотаДетали;
			
		//Иначе
		//	
		//	ИсправляемаяСтрока.КоординатаУ = Строка.КоординатаУ;
		
		КонецЕсли;
		
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПакетов.Добавить();
	НоваяСтрока.Пакет = ЛучшееРешение;
	НоваяСтрока.ШиринаПакета = ШиринаПакета;
	НоваяСтрока.ВысотаПакета = ВысотаПакета;
	НоваяСтрока.НомерПакета = НомерПакета;
	
	Возврат ТаблицаПакетов;
	
КонецФункции

Функция НайтиПределыОстатков(СписокНоменклатуры, Подразделение)
	
	МассивНоменклатуры = СписокНоменклатуры.ВыгрузитьКолонку("Номенклатура");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Номенклатура.НоменклатурнаяГруппа,
	|	СеткаОстатков.Длина,
	|	СеткаОстатков.Ширина
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СеткаОстатков КАК СеткаОстатков
	|		ПО Номенклатура.НоменклатурнаяГруппа = СеткаОстатков.НоменклатурнаяГруппа
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И СеткаОстатков.Использовать
	|	И СеткаОстатков.Подразделение = &Подразделение";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // НайтиПределыОстатков

Функция ПолезныйОстаток(ПределыОстатков, НоменклатурнаяГруппа, ВысотаОстатка, ШиринаОстатка)
	
	ПределДлина = ВысотаОстатка - (ВысотаОстатка % 100);
	ПределШирина = ШиринаОстатка - (ШиринаОстатка % 100);
	
	Возврат ПределыОстатков.НайтиСтроки(Новый Структура("НоменклатурнаяГруппа, Длина, Ширина", НоменклатурнаяГруппа, ПределДлина, ПределШирина)).Количество() > 0;
	
КонецФункции

Функция ПолучитьНадпись(СтруктураНадписи) Экспорт
	
	КантПоМесту = СтруктураНадписи.ПереключательКромкаСверху = "По месту" ИЛИ СтруктураНадписи.ПереключательКромкаСнизу = "По месту" 
	ИЛИ СтруктураНадписи.ПереключательКромкаСлева = "По месту" ИЛИ СтруктураНадписи.ПереключательКромкаСправа = "По месту";
	
	СтрокаИдентификатор = Строка(СтруктураНадписи.НомерСтроки) 
	+ ?(ЗначениеЗаполнено(СтруктураНадписи.НомерИзделия), "/" + СтруктураНадписи.НомерИзделия, "") 
	+ ?(СтруктураНадписи.ЭтоЯщик, " ящ.", ?(СтруктураНадписи.ЭтоДверь, " двр.", ?(ЗначениеЗаполнено(СтруктураНадписи.Идентификатор), "/" + СтруктураНадписи.Идентификатор, "")))
	+ ?(СтруктураНадписи.ДетальВПакете И СтруктураНадписи.ОсобыйПорядок = "Фасад", " (пак" + СтруктураНадписи.НомерИзделия + ")", "");
	
	Надпись = ?(КантПоМесту, "Кант по месту. ", "");
	
	Если СтруктураНадписи.Обтачивать 
		И СтруктураНадписи.Материал = "Столешница" Тогда
		Надпись = Надпись + "Ст (Скр)";
	ИначеЕсли СтруктураНадписи.Обтачивать 
		И (СтруктураНадписи.Материал = "Стекло" 
		ИЛИ СтруктураНадписи.Материал = "ФасадСтеклянный") Тогда
		Надпись = Надпись + "Обтачивать";
	ИначеЕсли НЕ СтруктураНадписи.Обтачивать 
		И (СтруктураНадписи.Материал = "Стекло" 
		ИЛИ СтруктураНадписи.Материал = "ФасадСтеклянный") Тогда
		Надпись = Надпись + "Без обточки";
	ИначеЕсли СтруктураНадписи.Материал = "ФасадСтеклянныйЗакругленный" Тогда
		Надпись = Надпись + СтрокаИдентификатор + "Скр. " + СтруктураНадписи.РадиусФасада;
	Иначе
		Надпись = Надпись + СтрокаИдентификатор;
	КонецЕсли;
	
	Надпись = ?(СтруктураНадписи.ДетальДляСклеивания, Надпись + " скл ", Надпись);
	
	Если СтруктураНадписи.НеТорцевать Тогда
		Надпись = Надпись + ", НЕ ТОРЦЕВАТЬ ПО ДЛИНЕ";
	КонецЕсли;
	
	Если СтруктураНадписи.ЭтоПуфик Тогда
		Надпись = Надпись + " пуф";
	КонецЕсли;
	
	Возврат Надпись;
	
КонецФункции

Функция ПроверитьВозможностьИспользованияОстатков(ЛучшееРешение, СписокДеталейНоменклатуры, ТолщинаПила, Номенклатура, ВысотаЛиста, ИдеальныйПроцентОтхода, РазрешенныйПроцентПоШирине)
	
	Для каждого Строка Из ЛучшееРешение Цикл
		
		ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Строка.GUID, "GUID");
		ИсправляемаяСтрока.ДетальВПакете = Истина;
		
	КонецЦикла;
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("ШиринаОстатка", Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("ВысотаОстатка", Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("КоординатаУ", Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("КоординатаХ", Новый ОписаниеТипов("Число"));
	ШиринаОстатка = 0;
	ВысотаОстатка = 0;
	ШиринаПредыдущегоОстатка = ЛучшееРешение[0].ШиринаДетали;
	КоординатаУ = 0;
	КоординатаВерхаДетали = 0;
	//ЛучшееРешение.Сортировать("ШиринаДетали Убыв, ВысотаДетали Убыв");
	
	Для каждого Деталь Из ЛучшееРешение Цикл
		
		КоординатаВерхаДетали = КоординатаВерхаДетали + Деталь.ВысотаДетали + ТолщинаПила;
		
		Если Деталь.ШиринаДетали + ТолщинаПила < ШиринаПредыдущегоОстатка и ШиринаПредыдущегоОстатка <> Деталь.ШиринаДетали Тогда
			
			ШиринаОстатка = ШиринаПредыдущегоОстатка - Деталь.ШиринаДетали - ТолщинаПила;
			ВысотаОстатка = ВысотаЛиста - КоординатаУ;
			НоваяСтрока = ТаблицаОстатков.Добавить();
			НоваяСтрока.КоординатаУ = КоординатаУ;
			НоваяСтрока.КоординатаХ = Деталь.ШиринаДетали + ТолщинаПила;
			НоваяСтрока.ШиринаОстатка = ШиринаОстатка;
			НоваяСтрока.ВысотаОстатка = ВысотаОстатка;
			ШиринаПредыдущегоОстатка = Деталь.ШиринаДетали;
			
		КонецЕсли;
		
		КоординатаУ = КоординатаУ + Деталь.ВысотаДетали + ТолщинаПила;
		
	КонецЦикла;
	
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		ТаблицаОстатков.Сортировать("ВысотаОстатка Возр");
		
		Для каждого Остаток Из ТаблицаОстатков Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("ДетальВПакете", Ложь);
			МассивВсехДеталей = СписокДеталейНоменклатуры.НайтиСтроки(Отбор);
			ТаблицаВсехДеталей = СписокДеталейНоменклатуры.Скопировать(МассивВсехДеталей);
			ТаблицаВсехДеталей.Колонки.Удалить("ДетальПроверена");
			
			ТаблицаДеталей = АлгоритмОРанце(ТаблицаВсехДеталей, Остаток.ВысотаОстатка, Остаток.ШиринаОстатка, ТолщинаПила, Номенклатура, ИдеальныйПроцентОтхода, РазрешенныйПроцентПоШирине, Истина);
			
			Если ТаблицаДеталей.Количество() > 0 Тогда
				
				КоординатаХ = Остаток.КоординатаХ;
				
				Для Каждого Таблица Из ТаблицаДеталей Цикл
					
					КоординатаУ = Остаток.КоординатаУ;
					
					Для каждого Деталь Из Таблица.Пакет Цикл
						
						НоваяСтрока = ЛучшееРешение.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Деталь);
						НоваяСтрока.КоординатаУ = КоординатаУ;
						НоваяСтрока.КоординатаХ = КоординатаХ;
						НоваяСтрока.ИспользуетсяВОстаткахПакета = Истина;
						
						ИсправляемаяСтрока = СписокДеталейНоменклатуры.Найти(Деталь.GUID, "GUID");
						ИсправляемаяСтрока.ДетальВПакете = Истина;
						КоординатаУ = КоординатаУ + ТолщинаПила + Деталь.ВысотаДетали;
						
					КонецЦикла;
					
					КоординатаХ = КоординатаХ + ТолщинаПила + Таблица.ШиринаПакета;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЛучшееРешение;
	
КонецФункции

Функция ВернутьОтступ(Размер)
	
	Если ТипЗнч(Размер) <> Тип("Число") Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Размер > 1800 Тогда Отступ = 150;
	ИначеЕсли Размер > 900 Тогда Отступ = 120;
	ИначеЕсли Размер > 600 Тогда Отступ = 70;
	ИначеЕсли Размер > 300 Тогда Отступ = 64;
	ИначеЕсли Размер > 200 Тогда Отступ = 50;
	Иначе Отступ = 45;
	КонецЕсли;
	
	Возврат Отступ;
	
КонецФункции

Процедура ЗаменитьКромкиЗаказчика(Строка, МассивВсехКромок,МатериалыЗаказчика)
	
	Для Каждого Кромка Из МассивВсехКромок Цикл
		
		Для Каждого Материал Из МатериалыЗаказчика Цикл
			
			Если Кромка = Материал.Номенклатура Тогда
				
				Строка = СтрЗаменить(Строка,Кромка.КраткоеНаименование, Кромка.КраткоеНаименование + "-ЗАК");
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКромкиВМассив(Выборка, МассивВсехКромок)
	
	МассивКромок = Новый Массив;
	МассивКромок.Добавить(Выборка.ВыборМебельнойКромкиСверху);
	МассивКромок.Добавить(Выборка.ВыборМебельнойКромкиСнизу);
	МассивКромок.Добавить(Выборка.ВыборМебельнойКромкиСлева);
	МассивКромок.Добавить(Выборка.ВыборМебельнойКромкиСправа);
	
	Для Каждого Кромка Из МассивКромок Цикл
		
		ЕстьВМассиве = Ложь;
		
		Для Каждого Элемент Из МассивВсехКромок Цикл
			
			Если Кромка = Элемент Тогда
				
				ЕстьВМассиве = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьВМассиве Тогда
			
			МассивВсехКромок.Добавить(Кромка);
			
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Функция РасположитьНаЛистахМетодомРанца(СсылкаДокумента, СписокДеталей)
	
	МассивИтоговогоРасположенияДеталей = Новый Массив;
	СамыйЛучшийПроцентОтхода = "";
	АлгоритмРаскроя = "";
	Подразделение = СсылкаДокумента.Подразделение;
	НомерДокумента = СсылкаДокумента.Номер;
	ТолщинаПила = ?(ЗначениеЗаполнено(Подразделение.ТолщинаПропила), Подразделение.ТолщинаПропила, 5);
	
	//Создаем основу для дерева
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Спецификация");
	Дерево.Колонки.Добавить("Номенклатура");
	Дерево.Колонки.Добавить("ВысотаЛиста");
	Дерево.Колонки.Добавить("ШиринаЛиста");
	Дерево.Колонки.Добавить("ВысотаДетали");
	Дерево.Колонки.Добавить("ШиринаДетали");
	Дерево.Колонки.Добавить("Название");
	Дерево.Колонки.Добавить("Абсцисса");
	Дерево.Колонки.Добавить("Ордината");
	Дерево.Колонки.Добавить("Остаток");
	Дерево.Колонки.Добавить("НомерЛиста");
	Дерево.Колонки.Добавить("НомерСтроки");
	Дерево.Колонки.Добавить("Материал");
	Дерево.Колонки.Добавить("ИД");
	Дерево.Колонки.Добавить("GUID");
	Дерево.Колонки.Добавить("Количество");
	Дерево.Колонки.Добавить("Идентификатор");
	Дерево.Колонки.Добавить("НоменклатураДляСклеивания");
	Дерево.Колонки.Добавить("НомерИзделия");
	Дерево.Колонки.Добавить("МожноПовернуть");
	Дерево.Колонки.Добавить("НеТорцевать");
	Дерево.Колонки.Добавить("СтруктураОтверстий");
	Дерево.Колонки.Добавить("Комментарий");
	Дерево.Колонки.Добавить("РадиусФасада");
	Дерево.Колонки.Добавить("ДетальДляСклеивания");
	Дерево.Колонки.Добавить("Обтачивать");
	Дерево.Колонки.Добавить("КоличествоПетель");
	Дерево.Колонки.Добавить("РасположениеПазов");
	Дерево.Колонки.Добавить("РасположениеПазовИРучкиНаФасадах");
	Дерево.Колонки.Добавить("НаименованиеДетали");
	//Дерево.Колонки.Добавить("ПереключательКромкаСверху");
	//Дерево.Колонки.Добавить("ПереключательКромкаСлева");
	//Дерево.Колонки.Добавить("ПереключательКромкаСнизу");
	//Дерево.Колонки.Добавить("ПереключательКромкаСправа");
	Дерево.Колонки.Добавить("ПоворотДетали");
	Дерево.Колонки.Добавить("Порядок");
	Дерево.Колонки.Добавить("ОсобыйПорядок");
	Дерево.Колонки.Добавить("Кромка1");
	Дерево.Колонки.Добавить("Кромка2");
	Дерево.Колонки.Добавить("Кромка3");
	Дерево.Колонки.Добавить("Кромка4");
	//Дерево.Колонки.Добавить("ЭтоЯщик");
	//Дерево.Колонки.Добавить("ЭтоДверь");
	Дерево.Колонки.Добавить("ДетальВПакете");
	
	Дерево.Колонки.Добавить("КривойПилСверху");
	Дерево.Колонки.Добавить("КривойПилСправа");
	Дерево.Колонки.Добавить("КривойПилСнизу");
	Дерево.Колонки.Добавить("КривойПилСлева");
	
	Дерево.Колонки.Добавить("ВыборМебельнойКромкиСверху");
	Дерево.Колонки.Добавить("ВыборМебельнойКромкиСправа");
	Дерево.Колонки.Добавить("ВыборМебельнойКромкиСнизу");
	Дерево.Колонки.Добавить("ВыборМебельнойКромкиСлева");
	
	Дерево.Колонки.Добавить("КромкаСверхуКр");
	Дерево.Колонки.Добавить("КромкаСправаКр");
	Дерево.Колонки.Добавить("КромкаСнизуКр");
	Дерево.Колонки.Добавить("КромкаСлеваКр");
	
	Дерево.Колонки.Добавить("РадиусЛевоВерх");
	Дерево.Колонки.Добавить("РадиусПравоВерх");
	Дерево.Колонки.Добавить("РадиусПравоНиз");
	Дерево.Колонки.Добавить("РадиусЛевоНиз");
	
	Дерево.Колонки.Добавить("СрезЛевоВерх");
	Дерево.Колонки.Добавить("СрезПравоВерх");
	Дерево.Колонки.Добавить("СрезПравоНиз");
	Дерево.Колонки.Добавить("СрезЛевоНиз");
	
	
	СтрокаСпецификация = Дерево.Строки.Добавить();
	СтрокаСпецификация.Спецификация = СсылкаДокумента;
	
	// { Васильев Александр Леонидович [22.07.2015]
	// Сделать.
	// Перенести этот функционал в функцию сбора деталей.
	
	#Область Предварительная_работа_с_деталями
	
	//НомерИД = 0;
	
	Для Каждого Элемент Из СписокДеталей Цикл
		
		ТекущаяНоменклатура = Элемент.Номенклатура;
		Количество = Элемент.Количество;
		Материал = Элемент.Материал;
		
		// { Васильев Александр Леонидович [22.07.2015]
		// Добавил реквизит в справочник НоменклатурныеГруппы
		// ПорядокПечатиВРаскрое. Заполнить и использовать.
		ТекущаяГруппа = ТекущаяНоменклатура.НоменклатурнаяГруппа;
		//Если ТекущаяГруппа = Справочники.НоменклатурныеГруппы.ЛДСП16 Тогда
		Элемент.ПорядокПечати = ТекущаяГруппа.ПорядокПечатиВРаскрое;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.МДФ18 Тогда
		//	Элемент.ПорядокПечати = 12;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.ЛДСП10 Тогда
		//	Элемент.ПорядокПечати = 21;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.ДВП Тогда
		//	Элемент.ПорядокПечати = 22;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.МДФ8 Тогда
		//	Элемент.ПорядокПечати = 23;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.Столешница Тогда
		//	Элемент.ПорядокПечати = 24;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.Пристенок Тогда
		//	Элемент.ПорядокПечати = 25;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.Стекло
		//	ИЛИ ТекущаяГруппа = Справочники.НоменклатурныеГруппы.Зеркало Тогда
		//	Элемент.ПорядокПечати = 41;
		//Иначе
		//	Элемент.ПорядокПечати = 31;
		//КонецЕсли;
		// } Васильев Александр Леонидович [22.07.2015]
		
		//Элемент.СоблюдениеТекстуры = ТекущаяНоменклатура.НаличиеТекстуры;
		Элемент.Порядок = 100;
		
		//НомерИД = НомерИД + 1;
		//Если НЕ ЗначениеЗаполнено(Элемент.ИД) И НЕ Элемент.Остаток Тогда
		//	Элемент.ИД = НомерИД;
		//КонецЕсли;
		
		Элемент.GUID = Новый УникальныйИдентификатор();
		
		Элемент.ШиринаЛиста = ТекущаяНоменклатура.ШиринаДетали;
		Элемент.ВысотаЛиста = ТекущаяНоменклатура.ДлинаДетали;
		
		//Разбивка клееной детали, уменьшение размеров номенклатуры для пуфика
		Если Материал = "10 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+16 ЛДСП" ИЛИ Материал = "АГТ+АГТ" ИЛИ Материал = "АГТ+10 ЛДСП" Тогда
			
			Элемент.ВысотаДетали = Элемент.ВысотаДетали + 20;
			Элемент.ШиринаДетали = Элемент.ШиринаДетали + 20;
			Элемент.ДетальДляСклеивания = Истина;
			Элемент.Материал = Неопределено;
			
			НоваяСтрока = СписокДеталей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
			НоваяСтрока.Номенклатура = Элемент.НоменклатураДляСклеивания;
			
		ИначеЕсли Материал = "Пуфик" Тогда
			
			Элемент.ВысотаДетали = Элемент.ВысотаДетали - 15;
			Элемент.ШиринаДетали = Элемент.ШиринаДетали - 15;
			Элемент.Материал = "Пуф";
			
			НоваяСтрока = СписокДеталей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
			НоваяСтрока.Номенклатура = Элемент.НоменклатураДляСклеивания;
			НоваяСтрока.Материал = "Кожа";
			
			НоваяСтрока.ВысотаДетали = НоваяСтрока.ВысотаДетали + 30;
			НоваяСтрока.ШиринаДетали = НоваяСтрока.ШиринаДетали + 30;
			
		КонецЕсли;
		
		//Если Количество > 1 Тогда
		//	//разбиваем детали
		//	Элемент.Количество = 1;
		//	Для ы = 2 По Количество Цикл
		//		НоваяСтрока = СписокДеталей.Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		//		НоваяСтрока.СтрокаДляФлэш = "";
		//		НоваяСтрока.ИД = 0;
		//	КонецЦикла;
		//	
		//КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	// } Васильев Александр Леонидович [22.07.2015]
	
	//Получаем список изпользуемой номенклатуры в раскрое
	СписокНоменклатуры = СписокДеталей.Скопировать(,"Номенклатура, ПорядокПечати, МожноПовернуть");
	СписокНоменклатуры.Свернуть("Номенклатура, ПорядокПечати", "МожноПовернуть");
	СписокНоменклатуры.Сортировать("ПорядокПечати Возр");
	
	//Таблица листов номенклатуры
	ТаблицаЛистовНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаЛистовНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЛистовНоменклатуры.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	//Сетка остатков
	ПределыОстатков = НайтиПределыОстатков(СписокНоменклатуры, Подразделение);
	
	КонечныйНомерЛиста = 0;
	КоличествоЛистов = 0;
	
	Для Каждого ЭлементСписка Из СписокНоменклатуры Цикл // цикл по материалам
		
		ТекущаяНоменклатура = ЭлементСписка.Номенклатура;
		
		//Заполняем номенклатуру в дереве
		СтрокаНоменклатура = СтрокаСпецификация.Строки.Добавить();
		СтрокаНоменклатура.Номенклатура = ТекущаяНоменклатура;
		
		ТекущийНомерЛиста = -1;
		
		ОптимальныйАлгоритмРаскроя = "";
		НоменклатурнаяГруппа = ТекущаяНоменклатура.НоменклатурнаяГруппа;
		ВысотаЛиста = ТекущаяНоменклатура.ДлинаДетали;
		ШиринаЛиста = ТекущаяНоменклатура.ШиринаДетали;
		
		КоличествоОстатковИтог = -1;
		ПлощадьОстатковИтог = -1;
		
		СписокДеталейНоменклатуры = СписокДеталей.Скопировать(Новый Структура("Номенклатура", ТекущаяНоменклатура));
		
		ЛучшийПроцентОтхода = 0;
		НаименьшееКоличествоЛистов = 999999999;
		МощностьРаскроя = 0;
		СтруктураСЛучшимиРезультатами = Новый Структура;
		СтруктураСЛучшимиРезультатами.Вставить("ТаблицаДеталейИтог", Новый ОписаниеТипов("ТаблицаЗначений"));
		СтруктураСЛучшимиРезультатами.Вставить("ОптимальныйАлгоритмРаскроя", Новый ОписаниеТипов("Строка"));
		СтруктураСЛучшимиРезультатами.Вставить("КоличествоЛистов", Новый ОписаниеТипов("Число"));
		СтруктураСЛучшимиРезультатами.Вставить("ПлощадьОстатковПоНоменклатуре", Новый ОписаниеТипов("Число"));
		СтруктураСЛучшимиРезультатами.Вставить("МощностьРаскроя", Новый ОписаниеТипов("Число"));
		СтруктураСЛучшимиРезультатами.Вставить("СравниваемыйПроцент", Новый ОписаниеТипов("Число"));
		
		ИдеальныйПроцентОтхода = 0;
		ЛучшийСравниваемыйПроцент = 0;
		//Для ИдеальныйПроцентОтхода = 0 По 50 Цикл
		Пока ИдеальныйПроцентОтхода <= 10 Цикл
			
			РазрешенныйПроцентПоШирине = 0;
			//Для РазрешенныйПроцентПоШирине = 0 По 0 Цикл
			Пока РазрешенныйПроцентПоШирине <= 0 Цикл
				
				СписокДеталейДляФормированияПакетов = СписокДеталейНоменклатуры.Скопировать();
				СтруктураДляСтрокиРаскроя = ФормированиеПакета(СписокДеталейДляФормированияПакетов, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, ТекущаяНоменклатура, ПределыОстатков, ИдеальныйПроцентОтхода, РазрешенныйПроцентПоШирине);
				
				Если СтруктураДляСтрокиРаскроя.Свойство("КоличествоЛистов") Тогда
					
					Если СтруктураДляСтрокиРаскроя.КоличествоЛистов < НаименьшееКоличествоЛистов
						ИЛИ СтруктураДляСтрокиРаскроя.МощностьРаскроя > МощностьРаскроя
						И СтруктураДляСтрокиРаскроя.КоличествоЛистов = НаименьшееКоличествоЛистов Тогда
						
						ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскроя);
						ЛучшийПроцентОтхода = ИдеальныйПроцентОтхода;
						ЛучшийСравниваемыйПроцент = СтруктураСЛучшимиРезультатами.СравниваемыйПроцент;
						ЛучшийРазрешенныйПроцентПоШирине = РазрешенныйПроцентПоШирине;
						НаименьшееКоличествоЛистов = СтруктураСЛучшимиРезультатами.КоличествоЛистов;
						МощностьРаскроя = СтруктураСЛучшимиРезультатами.МощностьРаскроя;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ТекущаяНоменклатура.НаличиеТекстуры Тогда
					
					СписокПовернутыхДеталейДляФормированияПакетов = СписокДеталейНоменклатуры.Скопировать();
					СтруктураДляСтрокиРаскрояПовернутыхДеталей = ФормированиеПакета(СписокПовернутыхДеталейДляФормированияПакетов, ВысотаЛиста, ШиринаЛиста, ТолщинаПила, ТекущаяНоменклатура, ПределыОстатков, ИдеальныйПроцентОтхода, РазрешенныйПроцентПоШирине, Истина);
					
					Если СтруктураДляСтрокиРаскроя.Свойство("КоличествоЛистов") Тогда
						
						Если СтруктураДляСтрокиРаскрояПовернутыхДеталей.КоличествоЛистов < НаименьшееКоличествоЛистов
							ИЛИ СтруктураДляСтрокиРаскрояПовернутыхДеталей.МощностьРаскроя > МощностьРаскроя
							И СтруктураДляСтрокиРаскрояПовернутыхДеталей.КоличествоЛистов = НаименьшееКоличествоЛистов Тогда
							
							//СтруктураДляСтрокиРаскроя = СтруктураДляСтрокиРаскрояПовернутыхДеталей;
							//СписокДеталейНоменклатуры = СписокПовернутыхДеталейДляФормированияПакетов.Скопировать();
							ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскрояПовернутыхДеталей);
							ЛучшийПроцентОтхода = ИдеальныйПроцентОтхода;
							ЛучшийРазрешенныйПроцентПоШирине = РазрешенныйПроцентПоШирине;
							ЛучшийСравниваемыйПроцент = СтруктураСЛучшимиРезультатами.СравниваемыйПроцент;
							НаименьшееКоличествоЛистов = СтруктураСЛучшимиРезультатами.КоличествоЛистов;
							МощностьРаскроя = СтруктураСЛучшимиРезультатами.МощностьРаскроя;
							
						Иначе
							
							//СписокДеталейНоменклатуры = СписокДеталейДляФормированияПакетов.Скопировать();
							
						КонецЕсли;
						
					Иначе
						
						ЗаполнитьЗначенияСвойств(СтруктураСЛучшимиРезультатами, СтруктураДляСтрокиРаскрояПовернутыхДеталей);
						ЛучшийПроцентОтхода = ИдеальныйПроцентОтхода;
						НаименьшееКоличествоЛистов = СтруктураСЛучшимиРезультатами.КоличествоЛистов;
						МощностьРаскроя = СтруктураСЛучшимиРезультатами.МощностьРаскроя;
						
						//СтруктураДляСтрокиРаскроя = СтруктураДляСтрокиРаскрояПовернутыхДеталей;
						//СписокДеталейНоменклатуры = СписокПовернутыхДеталейДляФормированияПакетов.Скопировать();
						
					КонецЕсли;
					
				Иначе
					
					//СписокДеталейНоменклатуры = СписокДеталейДляФормированияПакетов.Скопировать();
					
				КонецЕсли;
				
				РазрешенныйПроцентПоШирине = РазрешенныйПроцентПоШирине + 10;
				
			КонецЦикла;
			
			ИдеальныйПроцентОтхода = ИдеальныйПроцентОтхода + 2;
			
		КонецЦикла;
		
		СписокДеталейНоменклатуры = СтруктураСЛучшимиРезультатами;
		//СамыйЛучшийПроцентОтхода = СамыйЛучшийПроцентОтхода + "/" + ЛучшийПроцентОтхода + "-" + ЛучшийРазрешенныйПроцентПоШирине;
		//СамыйЛучшийПроцентОтхода = СамыйЛучшийПроцентОтхода + "(" + ЛучшийРазрешенныйПроцентПоШирине;
		
		//СамыйЛучшийПроцентОтхода = СамыйЛучшийПроцентОтхода + "/" + ЛучшийПроцентОтхода;
		
		Если НЕ СтруктураДляСтрокиРаскроя.Свойство("КоличествоЛистов") И СтруктураСЛучшимиРезультатами.Свойство("КоличествоЛистов")Тогда
		
			СтруктураДляСтрокиРаскроя = Новый Структура;
			СтруктураДляСтрокиРаскроя.Вставить("ТаблицаДеталейИтог", Новый ОписаниеТипов("ТаблицаЗначений"));
			СтруктураДляСтрокиРаскроя.Вставить("ОптимальныйАлгоритмРаскроя", Новый ОписаниеТипов("Строка"));
			СтруктураДляСтрокиРаскроя.Вставить("КоличествоЛистов", Новый ОписаниеТипов("Число"));
			СтруктураДляСтрокиРаскроя.Вставить("ПлощадьОстатковПоНоменклатуре", Новый ОписаниеТипов("Число"));
			СтруктураДляСтрокиРаскроя.Вставить("МощностьРаскроя", Новый ОписаниеТипов("Число"));
			СтруктураДляСтрокиРаскроя.Вставить("СравниваемыйПроцент", Новый ОписаниеТипов("Число"));
		
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураДляСтрокиРаскроя, СтруктураСЛучшимиРезультатами);
		
		СамыйЛучшийПроцентОтхода = СамыйЛучшийПроцентОтхода + "*" + ЛучшийСравниваемыйПроцент + "-" + СтруктураСЛучшимиРезультатами.КоличествоЛистов;
		//Если ТипЗнч(СтруктураДляСтрокиРаскроя) = Тип("Строка") Тогда
		//	
		//	Возврат СтруктураДляСтрокиРаскроя;
		//	
		//КонецЕсли;
		
		Таб = СтруктураДляСтрокиРаскроя.ТаблицаДеталейИтог;
		Таб.Сортировать("НомерЛиста Возр");
		ТекущийНомерЛистаДляДерева = -1;
		
		Для каждого СтрокаТаб Из Таб Цикл
			
			Если ТекущийНомерЛистаДляДерева <> СтрокаТаб.НомерЛиста Тогда
				
				СтрокаЛист = СтрокаНоменклатура.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЛист, СтрокаТаб);
				ТекущийНомерЛистаДляДерева = СтрокаТаб.НомерЛиста;
				
			КонецЕсли;
			
			СтрокаДеталь = СтрокаЛист.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДеталь, СтрокаТаб);
			СтрокаДеталь.Название = СтрокаТаб.НомерСтроки;
			СтрокаДеталь.Абсцисса = СтрокаТаб.КоординатаХ;
			СтрокаДеталь.Ордината = СтрокаТаб.КоординатаУ;
			
			СтрокаДеталь.ВыборМебельнойКромкиСверху = СтрокаТаб.ВыборМебельнойКромкиСверху;
			СтрокаДеталь.ВыборМебельнойКромкиСправа = СтрокаТаб.ВыборМебельнойКромкиСправа;
			СтрокаДеталь.ВыборМебельнойКромкиСнизу = СтрокаТаб.ВыборМебельнойКромкиСнизу;
			СтрокаДеталь.ВыборМебельнойКромкиСлева = СтрокаТаб.ВыборМебельнойКромкиСлева;
			
			СтрокаДеталь.КромкаСверхуКр = СтрокаТаб.ВыборМебельнойКромкиСверху.КраткоеНаименование;
			СтрокаДеталь.КромкаСправаКр = СтрокаТаб.ВыборМебельнойКромкиСправа.КраткоеНаименование;
			СтрокаДеталь.КромкаСнизуКр = СтрокаТаб.ВыборМебельнойКромкиСнизу.КраткоеНаименование;
			СтрокаДеталь.КромкаСлеваКр = СтрокаТаб.ВыборМебельнойКромкиСлева.КраткоеНаименование;
			
			Если СтрокаТаб.Срез Тогда
				СтрокаДеталь.СрезПравоНиз = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаЛистовНоменклатуры = ТаблицаЛистовНоменклатуры.Добавить();
		СтрокаЛистовНоменклатуры.Номенклатура = ЭлементСписка.Номенклатура;
		СтрокаЛистовНоменклатуры.Количество = СтруктураДляСтрокиРаскроя.КоличествоЛистов;
		АлгоритмРаскроя = АлгоритмРаскроя + СтруктураДляСтрокиРаскроя.ОптимальныйАлгоритмРаскроя;
		
	КонецЦикла; // цикл по материалам
	
	СтруктураРезультатов = Новый Структура;
	СтруктураРезультатов.Вставить("Дерево", Дерево);
	СтруктураРезультатов.Вставить("ТаблицаЛистовНоменклатуры", ТаблицаЛистовНоменклатуры);
	СтруктураРезультатов.Вставить("ТаблицаДеталей", Новый ХранилищеЗначения(СписокДеталей));
	СтруктураРезультатов.Вставить("ЛучшийПроцентОтхода", СамыйЛучшийПроцентОтхода);
	СтруктураРезультатов.Вставить("АлгоритмРаскроя", АлгоритмРаскроя);
	
	Возврат СтруктураРезультатов;
	
КонецФункции

#КонецОбласти

#Область Вывод_во_флэш

Функция ПолучитьСтрокуДляФлэшИзДерева(Дерево, СсылкаДокумента)
	
	Подразделение = СсылкаДокумента.Подразделение;
	ДанныеДляРаскроя = "%ЛОГОТИП%☻";
	
	Если Дерево.Строки.Количество() > 0 Тогда
		
		ДанныеДляРаскроя = ФормированиеСтрокиРаскрояПоРанцу(ДанныеДляРаскроя, Дерево, СсылкаДокумента, Подразделение);
		
	КонецЕсли;
	
	ПустойРаскрой = (ДанныеДляРаскроя = "%ЛОГОТИП%☻");
	
	Возврат ?(ПустойРаскрой, "", ДанныеДляРаскроя);
	
КонецФункции

Функция ФормированиеСтрокиКривогоПила(СписокДеталей, НомерДокумента)
	
	СтрокаКривогоПила = "%ЛОГОТИП%☻";
	
	Для каждого Элемент Из СписокДеталей Цикл
		
		Если ЗначениеЗаполнено(Элемент.СтрокаДляФлэш) Тогда
			
			СтрокаКривогоПила = СтрокаКривогоПила
			+ Элемент.Номенклатура + "☺"
			+ Элемент.ВыборМебельнойКромкиСверху.КраткоеНаименование + "☺"
			+ Элемент.ВыборМебельнойКромкиСнизу.КраткоеНаименование + "☺"
			+ Элемент.ВыборМебельнойКромкиСлева.КраткоеНаименование + "☺"
			+ Элемент.ВыборМебельнойКромкиСправа.КраткоеНаименование + "☺"
			+ "Спецификация " + НомерДокумента + "☺"
			+ "Количество деталей: " + Элемент.Количество + "☺"
			+ "№ детали " + Элемент.НомерСтроки + " Комментарий: " + Элемент.Комментарий + "☺"
			+ ?(Элемент.Материал = "Стекло", ?(Элемент.Обтачивать, "Обтачивать", "Без обточки"), "") + "☺"	
			+ Элемент.НомерСтроки + "☺"
			+ Элемент.СтрокаДляФлэш + "☺☻";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПустойКривойПил = (СтрокаКривогоПила = "%ЛОГОТИП%☻");
	
	Возврат ?(ПустойКривойПил, "", СтрокаКривогоПила);
	
КонецФункции

Функция ФормированиеСтрокиРаскрояПоРанцу(СтрокаРаскроя, Дерево, СсылкаДокумента, Подразделение)
	
	Для Каждого СтрокаДерева ИЗ Дерево.Строки[0].Строки Цикл
		
		ТаблицаДеталей = Новый ТаблицаЗначений;
		
		Для каждого СтрокаДерева Из СтрокаДерева.Строки Цикл
			
			ТаблицаДеталей = СсылкаДокумента.СписокМатериалы.ВыгрузитьКолонки("НомерСтроки, Материал, Номенклатура, ВысотаДетали, ШиринаДетали, Количество,
			|Идентификатор, НоменклатураДляСклеивания, НомерИзделия, НеТорцевать, СтруктураОтверстий, Комментарий, РасположениеПазов,
			|РадиусЛевоВерх, РадиусЛевоНиз, РадиусПравоВерх, РадиусПравоНиз, КривойПилСверху, КривойПилСлева, КривойПилСнизу, КривойПилСправа, 
			//|СтрокаДляФлэш,
			|ВыборМебельнойКромкиСверху, ВыборМебельнойКромкиСлева, ВыборМебельнойКромкиСнизу, ВыборМебельнойКромкиСправа, Срез, КоличествоПетель,
			|ПереключательКромкаСверху, ПереключательКромкаСлева, ПереключательКромкаСнизу, ПереключательКромкаСправа, РасположениеПазовИРучкиНаФасадах, 
			|Обтачивать, РадиусФасада");
			ТаблицаДеталей.Колонки.Добавить("ШиринаЛиста", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("ВысотаЛиста", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("МожноПовернуть", Новый ОписаниеТипов("Булево"));
			ТаблицаДеталей.Колонки.Добавить("НомерЛиста", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("Абсцисса", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("Ордината", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("ПоворотДетали", Новый ОписаниеТипов("Булево"));
			ТаблицаДеталей.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("ОсобыйПорядок", Новый ОписаниеТипов("Строка"));
			ТаблицаДеталей.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Булево"));
			ТаблицаДеталей.Колонки.Добавить("НаименованиеДетали", Новый ОписаниеТипов("Строка"));
			//ТаблицаДеталей.Колонки.Добавить("ЭтоЯщик", Новый ОписаниеТипов("Булево"));
			//ТаблицаДеталей.Колонки.Добавить("ЭтоДверь", Новый ОписаниеТипов("Булево"));
			ТаблицаДеталей.Колонки.Добавить("ДетальДляСклеивания", Новый ОписаниеТипов("Булево"));
			ТаблицаДеталей.Колонки.Добавить("ИД", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("Кромка1", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаДеталей.Колонки.Добавить("Кромка2", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаДеталей.Колонки.Добавить("Кромка3", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаДеталей.Колонки.Добавить("Кромка4", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаДеталей.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("ПакетДеталей", Новый ОписаниеТипов("Массив"));
			ТаблицаДеталей.Колонки.Добавить("ДетальВПакете", Новый ОписаниеТипов("Булево"));
			ТаблицаДеталей.Колонки.Добавить("ПорядокПечати", Новый ОписаниеТипов("Число"));
			ТаблицаДеталей.Колонки.Добавить("ДетальРазмещена", Новый ОписаниеТипов("Булево"));
			
			Для Каждого СтрокаДерева Из СтрокаДерева.Строки Цикл
				
				НоваяСтрока = ТаблицаДеталей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
				НоваяСтрока.Срез = СтрокаДерева.СрезПравоНиз;
				
			КонецЦикла;
			
			КомментарийДокумента = "";
			
			Срочность = ?(СсылкаДокумента.Срочный, " СРОЧНЫЙ", "");
			//Строка(СсылкаДокумента.Номер);
			КомментарийДокумента = СсылкаДокумента.Комментарий;
			ВидДокумента = "Спец.";
			Контрагент = СсылкаДокумента.Контрагент;
			
			# Область Запрос_Выбор_частых_кромок_на_листе
			ЗапросНаКромки = Новый Запрос;
			ЗапросНаКромки.УстановитьПараметр("ТабДеталей", ТаблицаДеталей);
			ЗапросНаКромки.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДеталей.НомерЛиста,
			|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСнизу КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСнизу,
			|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСверху КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСверху,
			|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСлева КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСлева,
			|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСправа КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСправа
			|ПОМЕСТИТЬ ВТ_Кромки
			|ИЗ
			|	&ТабДеталей КАК ТаблицаДеталей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Кромки.НомерЛиста КАК НомерЛиста,
			|	ВТ_Кромки.ВыборМебельнойКромкиСверху КАК Кромка,
			|	ВТ_Кромки.ВыборМебельнойКромкиСверху.НоменклатурнаяГруппа КАК Группа,
			|	1 КАК Количество
			|ИЗ
			|	ВТ_Кромки КАК ВТ_Кромки
			|ГДЕ
			|	ВТ_Кромки.ВыборМебельнойКромкиСверху <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_Кромки.НомерЛиста,
			|	ВТ_Кромки.ВыборМебельнойКромкиСнизу,
			|	ВТ_Кромки.ВыборМебельнойКромкиСнизу.НоменклатурнаяГруппа,
			|	1
			|ИЗ
			|	ВТ_Кромки КАК ВТ_Кромки
			|ГДЕ
			|	ВТ_Кромки.ВыборМебельнойКромкиСнизу <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_Кромки.НомерЛиста,
			|	ВТ_Кромки.ВыборМебельнойКромкиСлева,
			|	ВТ_Кромки.ВыборМебельнойКромкиСлева.НоменклатурнаяГруппа,
			|	1
			|ИЗ
			|	ВТ_Кромки КАК ВТ_Кромки
			|ГДЕ
			|	ВТ_Кромки.ВыборМебельнойКромкиСлева <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_Кромки.НомерЛиста,
			|	ВТ_Кромки.ВыборМебельнойКромкиСправа,
			|	ВТ_Кромки.ВыборМебельнойКромкиСправа.НоменклатурнаяГруппа,
			|	1
			|ИЗ
			|	ВТ_Кромки КАК ВТ_Кромки
			|ГДЕ
			|	ВТ_Кромки.ВыборМебельнойКромкиСправа <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Количество УБЫВ
			|ИТОГИ
			|	СУММА(Количество)
			|ПО
			|	НомерЛиста,
			|	Группа,
			|	Кромка";
			#КонецОбласти
			
			ВыборкаВсеКромки = ЗапросНаКромки.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаВсеКромки.Следующий() Цикл
				
				//Выбор первой строки с данного листа, в него добавим частые кромки
				СтрокаЛиста = ТаблицаДеталей.НайтиСтроки(Новый Структура("НомерЛиста", ВыборкаВсеКромки.НомерЛиста))[0];
				
				ВыборкаКромкиПоЛистам = ВыборкаВсеКромки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаКромкиПоЛистам.Следующий() Цикл
					
					ВыборкаКромки = ВыборкаКромкиПоЛистам.Выбрать();
					ВыборкаКромки.Следующий();
					
					//Заполним 4 самые частые кромки разных типов
					Если НЕ ЗначениеЗаполнено(СтрокаЛиста.Кромка1) Тогда
						СтрокаЛиста.Кромка1 = ВыборкаКромки.Кромка;
					ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЛиста.Кромка2) Тогда
						СтрокаЛиста.Кромка2 = ВыборкаКромки.Кромка;
					ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЛиста.Кромка3) Тогда
						СтрокаЛиста.Кромка3 = ВыборкаКромки.Кромка;
					ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЛиста.Кромка4) Тогда
						СтрокаЛиста.Кромка4 = ВыборкаКромки.Кромка;
					КонецЕсли;
					
					ВыборкаКромки.Сбросить();
					
				КонецЦикла;
				
			КонецЦикла;
			
			# Область Запрос_группировка_деталей_для_строки_раскроя
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТаблицаДеталей", ТаблицаДеталей);
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
			
			Запрос.УстановитьПараметр("СписокМатериаловЗаказчика", СсылкаДокумента.СписокМатериаловЗаказчика);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДеталей.НомерСтроки,
			|	ТаблицаДеталей.Материал,
			|	ТаблицаДеталей.ИД,
			|	ТаблицаДеталей.Номенклатура,
			|	ТаблицаДеталей.ВысотаДетали,
			|	ТаблицаДеталей.ШиринаДетали,
			|	ТаблицаДеталей.Количество,
			|	ТаблицаДеталей.Идентификатор,
			|	ТаблицаДеталей.НоменклатураДляСклеивания,
			|	ТаблицаДеталей.НаименованиеДетали,
			|	ТаблицаДеталей.НомерИзделия,
			|	ТаблицаДеталей.МожноПовернуть,
			|	ТаблицаДеталей.НеТорцевать,
			|	ТаблицаДеталей.СтруктураОтверстий,
			|	ТаблицаДеталей.Комментарий,
			|	ТаблицаДеталей.РадиусЛевоВерх,
			|	ТаблицаДеталей.РадиусЛевоНиз,
			|	ТаблицаДеталей.РадиусПравоВерх,
			|	ТаблицаДеталей.РадиусПравоНиз,
			|	ТаблицаДеталей.Срез,
			|	ТаблицаДеталей.РадиусФасада,
			|	ТаблицаДеталей.КривойПилСверху,
			|	ТаблицаДеталей.КривойПилСлева,
			|	ТаблицаДеталей.КривойПилСнизу,
			|	ТаблицаДеталей.КривойПилСправа,
			|	ТаблицаДеталей.ДетальДляСклеивания,
			|	ТаблицаДеталей.Обтачивать,
			|	ТаблицаДеталей.КоличествоПетель,
			|	ТаблицаДеталей.РасположениеПазов,
			|	ТаблицаДеталей.РасположениеПазовИРучкиНаФасадах,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСверху,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСлева,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСнизу,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСправа,
			//|	ТаблицаДеталей.ПереключательКромкаСверху,
			//|	ТаблицаДеталей.ПереключательКромкаСлева,
			//|	ТаблицаДеталей.ПереключательКромкаСнизу,
			//|	ТаблицаДеталей.ПереключательКромкаСправа,
			|	ТаблицаДеталей.НаименованиеДетали,
			|	ТаблицаДеталей.ШиринаЛиста,
			|	ТаблицаДеталей.ВысотаЛиста,
			|	ТаблицаДеталей.НомерЛиста,
			|	ТаблицаДеталей.Абсцисса,
			|	ТаблицаДеталей.Ордината,
			|	ТаблицаДеталей.ПоворотДетали,
			|	ТаблицаДеталей.Порядок,
			|	ТаблицаДеталей.ОсобыйПорядок,
			|	ТаблицаДеталей.Кромка1,
			|	ТаблицаДеталей.Кромка2,
			|	ТаблицаДеталей.Кромка3,
			|	ТаблицаДеталей.Кромка4,
			//|	ТаблицаДеталей.ЭтоЯщик,
			//|	ТаблицаДеталей.ЭтоДверь,
			|	ТаблицаДеталей.ДетальВПакете,
			|	ТаблицаДеталей.Остаток
			|ПОМЕСТИТЬ ТаблицаДеталей
			|ИЗ
			|	&ТаблицаДеталей КАК ТаблицаДеталей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СписокМатериаловЗаказчика.Номенклатура
			|ПОМЕСТИТЬ СписокМатериаловЗаказчика
			|ИЗ
			|	&СписокМатериаловЗаказчика КАК СписокМатериаловЗаказчика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДеталей.НомерСтроки,
			|	ТаблицаДеталей.Материал,
			|	ТаблицаДеталей.ИД,
			|	ТаблицаДеталей.Номенклатура КАК Номенклатура,
			|	ТаблицаДеталей.ВысотаДетали,
			|	ТаблицаДеталей.ШиринаДетали,
			|	ТаблицаДеталей.Количество,
			|	ТаблицаДеталей.Идентификатор,
			|	ТаблицаДеталей.ДетальВПакете,
			|	ТаблицаДеталей.НоменклатураДляСклеивания,
			|	ТаблицаДеталей.НомерИзделия,
			|	ТаблицаДеталей.МожноПовернуть,
			|	ТаблицаДеталей.НеТорцевать,
			|	ТаблицаДеталей.СтруктураОтверстий,
			|	ТаблицаДеталей.Комментарий,
			|	ТаблицаДеталей.РадиусЛевоВерх,
			|	ТаблицаДеталей.РадиусЛевоНиз,
			|	ТаблицаДеталей.РадиусПравоВерх,
			|	ТаблицаДеталей.РадиусПравоНиз,
			|	ТаблицаДеталей.ДетальДляСклеивания,
			|	ТаблицаДеталей.Срез,
			|	ТаблицаДеталей.РадиусФасада,
			|	ТаблицаДеталей.КривойПилСверху,
			|	ТаблицаДеталей.КривойПилСлева,
			|	ТаблицаДеталей.КривойПилСнизу,
			|	ТаблицаДеталей.КривойПилСправа,
			|	ТаблицаДеталей.Обтачивать,
			|	ТаблицаДеталей.КоличествоПетель,
			|	ТаблицаДеталей.РасположениеПазов,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСверху,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСлева,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСнизу,
			|	ТаблицаДеталей.ВыборМебельнойКромкиСправа,
			//|	ТаблицаДеталей.ПереключательКромкаСверху,
			//|	ТаблицаДеталей.ПереключательКромкаСлева,
			//|	ТаблицаДеталей.ПереключательКромкаСнизу,
			//|	ТаблицаДеталей.ПереключательКромкаСправа,
			|	ТаблицаДеталей.ШиринаЛиста КАК ШиринаЛиста,
			|	ТаблицаДеталей.ВысотаЛиста КАК ВысотаЛиста,
			|	ТаблицаДеталей.НомерЛиста КАК НомерЛиста,
			|	ТаблицаДеталей.Абсцисса,
			|	ТаблицаДеталей.Ордината,
			|	ТаблицаДеталей.ПоворотДетали,
			|	ТаблицаДеталей.Порядок,
			|	ТаблицаДеталей.ОсобыйПорядок,
			|	ТаблицаДеталей.Кромка1 КАК Кромка1,
			|	ТаблицаДеталей.Кромка2 КАК Кромка2,
			|	ТаблицаДеталей.Кромка3 КАК Кромка3,
			|	ТаблицаДеталей.Кромка4 КАК Кромка4,
			|	ТаблицаДеталей.НаименованиеДетали,
			//|	ТаблицаДеталей.ЭтоЯщик,
			//|	ТаблицаДеталей.ЭтоДверь,
			|	ТаблицаДеталей.Остаток,
			|	ТаблицаДеталей.РасположениеПазовИРучкиНаФасадах,
			|	НоменклатураПодразделений.ОкруглятьДоЛистов КАК ОкруглятьДоЛистов,
			|	ВЫРАЗИТЬ(ТаблицаДеталей.Номенклатура КАК Справочник.Номенклатура).НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	ВЫБОР
			|		КОГДА СписокМатериаловЗаказчика.Номенклатура ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК МатериалЗаказчика
			|ИЗ
			|	ТаблицаДеталей КАК ТаблицаДеталей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
			|		ПО ТаблицаДеталей.Номенклатура = НоменклатураПодразделений.Номенклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ СписокМатериаловЗаказчика КАК СписокМатериаловЗаказчика
			|		ПО ТаблицаДеталей.Номенклатура = СписокМатериаловЗаказчика.Номенклатура
			|ГДЕ
			|	НоменклатураПодразделений.Подразделение = &Подразделение
			|ИТОГИ
			|	МАКСИМУМ(Номенклатура),
			|	МАКСИМУМ(ШиринаЛиста),
			|	МАКСИМУМ(ВысотаЛиста),
			|	МАКСИМУМ(Кромка1),
			|	МАКСИМУМ(Кромка2),
			|	МАКСИМУМ(Кромка3),
			|	МАКСИМУМ(Кромка4),
			|	МАКСИМУМ(ОкруглятьДоЛистов),
			|	МАКСИМУМ(НоменклатурнаяГруппа),
			|	МАКСИМУМ(МатериалЗаказчика)
			|ПО
			|	НомерЛиста";
			
			Если ТаблицаДеталей.Колонки.Найти("РасположениеПазовИРучкиНаФасадах") = Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДеталей.РасположениеПазовИРучкиНаФасадах,", "");
			КонецЕсли;
			
			#КонецОбласти
			
			Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СсылкаДокумента.Номер);
			
			НомерНаПечать = "Спец: " + НомерНаПечать;
			
			МатериалыЗаказчика = СсылкаДокумента.СписокМатериаловЗаказчика;
			МассивВсехКромок = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				
				НоменклатураПодЗаказ = ?(Выборка.ОкруглятьДоЛистов И СсылкаДокумента.Дилерский, "(Вернуть остатки)","");
				МатериалЗаказчика = ?(Выборка.МатериалЗаказчика=1,"<b>МАТЕРИАЛ ПРЕДОСТАВЛЕН ЗАКАЗЧИКОМ!</b>","");
				
				//Формирование строки раскроя
				
				ШапкаЛиста = Новый Массив;
				
				ШапкаЛиста.Добавить(Выборка.Номенклатура); //0
				ШапкаЛиста.Добавить(Выборка.Кромка1); //1
				ШапкаЛиста.Добавить(Выборка.Кромка1.КраткоеНаименование);//2
				ШапкаЛиста.Добавить(Выборка.Кромка2); //3
				ШапкаЛиста.Добавить(Выборка.Кромка2.КраткоеНаименование);//4
				ШапкаЛиста.Добавить(Выборка.Кромка3); //5
				ШапкаЛиста.Добавить(Выборка.Кромка3.КраткоеНаименование);//6
				ШапкаЛиста.Добавить(Выборка.Кромка4); //7
				ШапкаЛиста.Добавить(Выборка.Кромка4.КраткоеНаименование);//8
				ШапкаЛиста.Добавить(Выборка.ШиринаЛиста); //9
				ШапкаЛиста.Добавить(Выборка.ВысотаЛиста); //10
				ШапкаЛиста.Добавить(?(ЗначениеЗаполнено(СсылкаДокумента.Ссылка), СсылкаДокумента, ""));//11
				ШапкаЛиста.Добавить(НомерНаПечать + " " + НоменклатураПодЗаказ +" "+ МатериалЗаказчика);//12
				ШапкаЛиста.Добавить("<b>" + КомментарийДокумента + "</b>");//13
				ШапкаЛиста.Добавить(Контрагент); //14
				ШапкаЛиста.Добавить(Выборка.НоменклатурнаяГруппа); //15
				
				СтрокаРаскроя = СтрокаРаскроя + СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ШапкаЛиста, "☺") + "☻";
				
				ВыборкаПоДеталям = Выборка.Выбрать();
				Пока ВыборкаПоДеталям.Следующий() Цикл
					
					Номенклатура = ?(ВыборкаПоДеталям.Остаток, ?(ЗначениеЗаполнено(НоменклатураПодЗаказ), "2", "1"), "");
					
					ПравыйНижнийРадиус = ВыборкаПоДеталям.РадиусПравоНиз;
					Если ВыборкаПоДеталям.Срез И ПравыйНижнийРадиус > 0 Тогда
						ПравыйНижнийРадиус = Строка(ВыборкаПоДеталям.РадиусПравоНиз) + "_1";
					КонецЕсли;
					
					Комментарий = ВыборкаПоДеталям.Комментарий;
					//Если ВыборкаПоДеталям.ПереключательКромкаСверху = "По месту" 
					//	ИЛИ ВыборкаПоДеталям.ПереключательКромкаСнизу = "По месту" 
					//	ИЛИ ВыборкаПоДеталям.ПереключательКромкаСлева = "По месту" 
					//	ИЛИ ВыборкаПоДеталям.ПереключательКромкаСправа = "По месту" Тогда
					//	Комментарий = Комментарий + " кант по месту";
					//КонецЕсли;
					
					//СтруктураНадписи = Новый Структура;
					//СтруктураНадписи.Вставить("ПереключательКромкаСверху", ВыборкаПоДеталям.ПереключательКромкаСверху);
					//СтруктураНадписи.Вставить("ПереключательКромкаСнизу", ВыборкаПоДеталям.ПереключательКромкаСнизу);
					//СтруктураНадписи.Вставить("ПереключательКромкаСлева", ВыборкаПоДеталям.ПереключательКромкаСлева);
					//СтруктураНадписи.Вставить("ПереключательКромкаСправа", ВыборкаПоДеталям.ПереключательКромкаСправа);
					//СтруктураНадписи.Вставить("НомерСтроки", ВыборкаПоДеталям.НомерСтроки);
					//СтруктураНадписи.Вставить("НомерИзделия", ВыборкаПоДеталям.НомерИзделия);
					//СтруктураНадписи.Вставить("ЭтоЯщик", ВыборкаПоДеталям.ЭтоЯщик);
					//СтруктураНадписи.Вставить("ЭтоДверь", ВыборкаПоДеталям.ЭтоДверь);
					//СтруктураНадписи.Вставить("Идентификатор", ВыборкаПоДеталям.Идентификатор);
					//СтруктураНадписи.Вставить("ДетальВПакете", ВыборкаПоДеталям.ДетальВПакете);
					//СтруктураНадписи.Вставить("ОсобыйПорядок", ВыборкаПоДеталям.ОсобыйПорядок);
					//СтруктураНадписи.Вставить("Обтачивать", ВыборкаПоДеталям.Обтачивать);
					//СтруктураНадписи.Вставить("Материал", ВыборкаПоДеталям.Материал);
					//СтруктураНадписи.Вставить("РадиусФасада", ВыборкаПоДеталям.РадиусФасада);
					//СтруктураНадписи.Вставить("ДетальДляСклеивания", ВыборкаПоДеталям.ДетальДляСклеивания);
					//СтруктураНадписи.Вставить("НеТорцевать", ВыборкаПоДеталям.НеТорцевать);
					//СтруктураНадписи.Вставить("ЭтоПуфик", ВыборкаПоДеталям.Материал="Пуфик" ИЛИ ВыборкаПоДеталям.Материал="Пуф");
					
					Надпись = ВыборкаПоДеталям.НаименованиеДетали; //ПолучитьНадпись(СтруктураНадписи);
					
					НеТорцевать = "";
					Если ВыборкаПоДеталям.НеТорцевать Тогда
						//Надпись = Надпись + ", НЕ ТОРЦЕВАТЬ ПО ДЛИНЕ";
						НеТорцевать = "1";
					КонецЕсли;
					
					СтрокаОтверстий = "";
					
					ЕвропазСверху 	= 0;
					ЕвропазСнизу 	= 0;
					ЕвропазСлева 	= 0;
					ЕвропазСправа 	= 0;
					
					/////////////////////////////Петли/////////////////
					КоличествоПетель = ВыборкаПоДеталям.КоличествоПетель;
					
					Если КоличествоПетель > 0 И (ВыборкаПоДеталям.Материал = "ФасадЛДСП" ИЛИ ВыборкаПоДеталям.Материал = "ФасадМДФ" ИЛИ ВыборкаПоДеталям.Материал = "ФасадСтеклянный") Тогда
						
						Стороны = Перечисления.Стороны;
						
						СтроронаРасположениеПазов = ВыборкаПоДеталям.РасположениеПазовИРучкиНаФасадах.ПоложениеПазов;
						РазмерСтороны = 0;
						
						Если СтроронаРасположениеПазов = Стороны.Слева Тогда
							
							Сторона = "3";
							РазмерСтороны = ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали);
							
						ИначеЕсли СтроронаРасположениеПазов = Стороны.Справа Тогда
							
							Сторона = "4";
							РазмерСтороны = ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали);
							
						ИначеЕсли СтроронаРасположениеПазов = Стороны.Сверху Тогда
							
							Сторона = "1";
							РазмерСтороны = ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ШиринаДетали);
							
						ИначеЕсли СтроронаРасположениеПазов = Стороны.Снизу Тогда
							
							Сторона = "2";
							РазмерСтороны = ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ШиринаДетали);
							
						КонецЕсли;
						
						Отступ = ВернутьОтступ(РазмерСтороны);
						
						Если КоличествоПетель < 2 Тогда
							
							КоличествоПетель = 2;
							
						КонецЕсли;
						
						Шаг = Окр((РазмерСтороны - 2 * Отступ) / (КоличествоПетель - 1) , 0);
						
						СтрокаОтверстий = "3_"+ Сторона + "_" + КоличествоПетель + "_" + Отступ + "_" + Шаг + "_0#";
						
					КонецЕсли;
					
					////////////////////////////////////////////////////
					
					Если ЗначениеЗаполнено(ВыборкаПоДеталям.СтруктураОтверстий) Тогда
						
						Если НЕ ЗначениеЗаполнено(ВыборкаПоДеталям.Идентификатор) Тогда
							СтрокаОтверстийСтруктуры = ЛексСервер.ЗаполнитьРеквизитОтверстиями(СтрокаОтверстий, ВыборкаПоДеталям.СтруктураОтверстий, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ПоворотДетали);
							СтрокаОтверстий = ?(ЗначениеЗаполнено(СтрокаОтверстийСтруктуры), СтрокаОтверстийСтруктуры, СтрокаОтверстий);
						КонецЕсли;
						СтруктураЕвропазов = ЛексСервер.ПолучитьСтруктуруЕвропазов(ВыборкаПоДеталям.СтруктураОтверстий);
						ЕвропазСверху = СтруктураЕвропазов.Сверху;
						ЕвропазСнизу = СтруктураЕвропазов.Снизу;
						ЕвропазСлева = СтруктураЕвропазов.Слева;
						ЕвропазСправа = СтруктураЕвропазов.Справа;
					КонецЕсли;
					
					СтрокаРаскроя = СтрокаРаскроя
					+ Номенклатура + "☺" // 1 - Номенклатура
					+ ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали) + "☺" //2 - Высота детали
					+ ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ШиринаДетали) + "☺" //3 - Ширина детали
					+ ВыборкаПоДеталям.РадиусЛевоВерх + "☺" //4
					+ ВыборкаПоДеталям.РадиусПравоВерх + "☺" //5
					+ ПравыйНижнийРадиус + "☺" //6
					+ ВыборкаПоДеталям.РадиусЛевоНиз + "☺" //7
					+ ВыборкаПоДеталям.КривойПилСверху + "☺" //8
					+ ВыборкаПоДеталям.КривойПилСнизу + "☺" //9
					+ ВыборкаПоДеталям.КривойПилСлева + "☺" //10
					+ ВыборкаПоДеталям.КривойПилСправа + "☺" //11
					+ "" + "☺" //12 (Эксц) если 1 - два в круге крестик(рисунок) сверху
					+ "" + "☺" //13 (Эксц) если 1 - два в круге крестик(рисунок) снизу
					+ "" + "☺" //14 (Эксц) если 1 - два в круге крестик(рисунок) слева
					+ "" + "☺" //15 (Эксц) если 1 - два в круге крестик(рисунок) справа
					+ Комментарий + "☺" //16 - Комментарий
					+ Надпись + "☺" //17
					+ ВыборкаПоДеталям.ВыборМебельнойКромкиСверху.КраткоеНаименование + "☺" //18
					+ ВыборкаПоДеталям.ВыборМебельнойКромкиСнизу.КраткоеНаименование + "☺" //19
					+ ВыборкаПоДеталям.ВыборМебельнойКромкиСлева.КраткоеНаименование + "☺" //20
					+ ВыборкаПоДеталям.ВыборМебельнойКромкиСправа.КраткоеНаименование + "☺" //21
					+ "" + "☺" //22 если 1 - две капельки(рисунок) сверху
					+ "" + "☺" //23 если 1 - две капельки(рисунок) снизу
					+ "" + "☺" //24 если 1 - две капельки(рисунок) слева
					+ "" + "☺" //25 если 1 - две капельки(рисунок) справа
					+ СтрокаОтверстий + "☺" //26
					+ ЕвропазСверху + "☺" //27
					+ ЕвропазСнизу + "☺" //28
					+ ЕвропазСлева + "☺" //29
					+ ЕвропазСправа + "☺" //30
					+ НеТорцевать + "☺" //31
					+ ВыборкаПоДеталям.Ордината + "☺" //32 - координата по У
					+ ВыборкаПоДеталям.Абсцисса + "☺" //33 - координата по Х
					+ Число(ВыборкаПоДеталям.ПоворотДетали) + "☺" //34 - признак поворота детали 
					+ ВыборкаПоДеталям.ИД + "☺☻";//35 - ИД детали + конец детали
					
					ДобавитьКромкиВМассив(ВыборкаПоДеталям,МассивВсехКромок);
					
				КонецЦикла;
				
				СтрокаРаскроя = СтрокаРаскроя + "♦";//КонецЛиста
				
			КонецЦикла;
			
			ЗаменитьКромкиЗаказчика(СтрокаРаскроя,МассивВсехКромок,МатериалыЗаказчика);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтрокаРаскроя;
	
КонецФункции

Функция ФормированиеСтрокиРаскроя(СтрокаРаскроя, ТаблицаДеталей, СсылкаДокумента, Подразделение)
	
	КомментарийДокумента = "";
	
	
	Срочность = ?(СсылкаДокумента.Срочный, " СРОЧНЫЙ", "");
	КомментарийДокумента = СсылкаДокумента.Комментарий;
	ВидДокумента = "Спец.";
	Контрагент = СсылкаДокумента.Контрагент;
	
	# Область Запрос_Выбор_частых_кромок_на_листе
	ЗапросНаКромки = Новый Запрос;
	ЗапросНаКромки.УстановитьПараметр("ТаблицаДеталей", ТаблицаДеталей);
	ЗапросНаКромки.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДеталей.НомерЛиста,
	|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСверху КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСверху,
	|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСнизу КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСнизу,
	|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСлева КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСлева,
	|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСправа КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСправа
	|ПОМЕСТИТЬ ВТ_Кромки
	|ИЗ
	|	&ТаблицаДеталей КАК ТаблицаДеталей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Кромки.НомерЛиста КАК НомерЛиста,
	|	ВТ_Кромки.ВыборМебельнойКромкиСверху КАК Кромка,
	|	ВТ_Кромки.ВыборМебельнойКромкиСверху.НоменклатурнаяГруппа КАК Группа,
	|	1 КАК Количество
	|ИЗ
	|	ВТ_Кромки КАК ВТ_Кромки
	|ГДЕ
	|	ВТ_Кромки.ВыборМебельнойКромкиСверху <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Кромки.НомерЛиста,
	|	ВТ_Кромки.ВыборМебельнойКромкиСнизу,
	|	ВТ_Кромки.ВыборМебельнойКромкиСнизу.НоменклатурнаяГруппа,
	|	1
	|ИЗ
	|	ВТ_Кромки КАК ВТ_Кромки
	|ГДЕ
	|	ВТ_Кромки.ВыборМебельнойКромкиСнизу <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Кромки.НомерЛиста,
	|	ВТ_Кромки.ВыборМебельнойКромкиСлева,
	|	ВТ_Кромки.ВыборМебельнойКромкиСлева.НоменклатурнаяГруппа,
	|	1
	|ИЗ
	|	ВТ_Кромки КАК ВТ_Кромки
	|ГДЕ
	|	ВТ_Кромки.ВыборМебельнойКромкиСлева <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Кромки.НомерЛиста,
	|	ВТ_Кромки.ВыборМебельнойКромкиСправа,
	|	ВТ_Кромки.ВыборМебельнойКромкиСправа.НоменклатурнаяГруппа,
	|	1
	|ИЗ
	|	ВТ_Кромки КАК ВТ_Кромки
	|ГДЕ
	|	ВТ_Кромки.ВыборМебельнойКромкиСправа <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	НомерЛиста,
	|	Группа,
	|	Кромка";
	#КонецОбласти
	
	ВыборкаВсеКромки = ЗапросНаКромки.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВсеКромки.Следующий() Цикл
		
		//Выбор первой строки с данного листа, в него добавим частые кромки
		СтрокаЛиста = ТаблицаДеталей.НайтиСтроки(Новый Структура("НомерЛиста", ВыборкаВсеКромки.НомерЛиста))[0];
		
		ВыборкаКромкиПоЛистам = ВыборкаВсеКромки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКромкиПоЛистам.Следующий() Цикл
			
			ВыборкаКромки = ВыборкаКромкиПоЛистам.Выбрать();
			ВыборкаКромки.Следующий();
			
			//Заполним 4 самые частые кромки разных типов
			Если НЕ ЗначениеЗаполнено(СтрокаЛиста.Кромка1) Тогда
				СтрокаЛиста.Кромка1 = ВыборкаКромки.Кромка;
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЛиста.Кромка2) Тогда
				СтрокаЛиста.Кромка2 = ВыборкаКромки.Кромка;
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЛиста.Кромка3) Тогда
				СтрокаЛиста.Кромка3 = ВыборкаКромки.Кромка;
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЛиста.Кромка4) Тогда
				СтрокаЛиста.Кромка4 = ВыборкаКромки.Кромка;
			КонецЕсли;
			
			ВыборкаКромки.Сбросить();
			
		КонецЦикла;
		
	КонецЦикла;
	
	# Область Запрос_группировка_деталей_для_строки_раскроя
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДеталей", ТаблицаДеталей);
	Запрос.УстановитьПараметр("Подразделение", СсылкаДокумента.Подразделение);
	
	Запрос.УстановитьПараметр("СписокМатериаловЗаказчика", СсылкаДокумента.СписокМатериаловЗаказчика);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДеталей.НомерСтроки,
	|	ТаблицаДеталей.Материал,
	|	ТаблицаДеталей.ИД,
	|	ТаблицаДеталей.Номенклатура,
	|	ТаблицаДеталей.ВысотаДетали,
	|	ТаблицаДеталей.ШиринаДетали,
	|	ТаблицаДеталей.Количество,
	|	ТаблицаДеталей.Идентификатор,
	|	ТаблицаДеталей.НоменклатураДляСклеивания,
	|	ТаблицаДеталей.НомерИзделия,
	|	ТаблицаДеталей.МожноПовернуть,
	|	ТаблицаДеталей.НеТорцевать,
	|	ТаблицаДеталей.СтруктураОтверстий,
	|	ТаблицаДеталей.Комментарий,
	|	ТаблицаДеталей.РадиусЛевоВерх,
	|	ТаблицаДеталей.РадиусЛевоНиз,
	|	ТаблицаДеталей.РадиусПравоВерх,
	|	ТаблицаДеталей.РадиусПравоНиз,
	|	ТаблицаДеталей.Срез,
	|	ТаблицаДеталей.РадиусФасада,
	|	ТаблицаДеталей.КривойПилСверху,
	|	ТаблицаДеталей.КривойПилСлева,
	|	ТаблицаДеталей.КривойПилСнизу,
	|	ТаблицаДеталей.КривойПилСправа,
	|	ТаблицаДеталей.ДетальДляСклеивания,
	|	ТаблицаДеталей.Обтачивать,
	|	ТаблицаДеталей.КоличествоПетель,
	|	ТаблицаДеталей.РасположениеПазов,
	|	ТаблицаДеталей.РасположениеПазовИРучкиНаФасадах,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСверху,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСлева,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСнизу,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСправа,
	|	ТаблицаДеталей.НаименованиеДетали,
	//|	ТаблицаДеталей.ПереключательКромкаСверху,
	//|	ТаблицаДеталей.ПереключательКромкаСлева,
	//|	ТаблицаДеталей.ПереключательКромкаСнизу,
	//|	ТаблицаДеталей.ПереключательКромкаСправа,
	|	ТаблицаДеталей.ШиринаЛиста,
	|	ТаблицаДеталей.ВысотаЛиста,
	|	ТаблицаДеталей.НомерЛиста,
	|	ТаблицаДеталей.КоординатаХ,
	|	ТаблицаДеталей.КоординатаУ,
	|	ТаблицаДеталей.ПоворотДетали,
	|	ТаблицаДеталей.Порядок,
	|	ТаблицаДеталей.ОсобыйПорядок,
	|	ТаблицаДеталей.Кромка1,
	|	ТаблицаДеталей.Кромка2,
	|	ТаблицаДеталей.Кромка3,
	|	ТаблицаДеталей.Кромка4,
	//|	ТаблицаДеталей.ЭтоЯщик,
	//|	ТаблицаДеталей.ЭтоДверь,
	|	ТаблицаДеталей.ДетальВПакете,
	|	ТаблицаДеталей.Остаток
	|ПОМЕСТИТЬ ТаблицаДеталей
	|ИЗ
	|	&ТаблицаДеталей КАК ТаблицаДеталей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокМатериаловЗаказчика.Номенклатура
	|ПОМЕСТИТЬ СписокМатериаловЗаказчика
	|ИЗ
	|	&СписокМатериаловЗаказчика КАК СписокМатериаловЗаказчика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДеталей.НомерСтроки,
	|	ТаблицаДеталей.Материал,
	|	ТаблицаДеталей.ИД,
	|	ТаблицаДеталей.Номенклатура КАК Номенклатура,
	|	ТаблицаДеталей.ВысотаДетали,
	|	ТаблицаДеталей.ШиринаДетали,
	|	ТаблицаДеталей.Количество,
	|	ТаблицаДеталей.Идентификатор,
	|	ТаблицаДеталей.ДетальВПакете,
	|	ТаблицаДеталей.НоменклатураДляСклеивания,
	|	ТаблицаДеталей.НомерИзделия,
	|	ТаблицаДеталей.МожноПовернуть,
	|	ТаблицаДеталей.НеТорцевать,
	|	ТаблицаДеталей.СтруктураОтверстий,
	|	ТаблицаДеталей.Комментарий,
	|	ТаблицаДеталей.РадиусЛевоВерх,
	|	ТаблицаДеталей.РадиусЛевоНиз,
	|	ТаблицаДеталей.РадиусПравоВерх,
	|	ТаблицаДеталей.РадиусПравоНиз,
	|	ТаблицаДеталей.ДетальДляСклеивания,
	|	ТаблицаДеталей.НаименованиеДетали,
	|	ТаблицаДеталей.Срез,
	|	ТаблицаДеталей.РадиусФасада,
	|	ТаблицаДеталей.КривойПилСверху,
	|	ТаблицаДеталей.КривойПилСлева,
	|	ТаблицаДеталей.КривойПилСнизу,
	|	ТаблицаДеталей.КривойПилСправа,
	|	ТаблицаДеталей.Обтачивать,
	|	ТаблицаДеталей.КоличествоПетель,
	|	ТаблицаДеталей.РасположениеПазов,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСверху,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСлева,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСнизу,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСправа,
	//|	ТаблицаДеталей.ПереключательКромкаСверху,
	//|	ТаблицаДеталей.ПереключательКромкаСлева,
	//|	ТаблицаДеталей.ПереключательКромкаСнизу,
	//|	ТаблицаДеталей.ПереключательКромкаСправа,
	|	ТаблицаДеталей.ШиринаЛиста КАК ШиринаЛиста,
	|	ТаблицаДеталей.ВысотаЛиста КАК ВысотаЛиста,
	|	ТаблицаДеталей.НомерЛиста КАК НомерЛиста,
	|	ТаблицаДеталей.КоординатаХ,
	|	ТаблицаДеталей.КоординатаУ,
	|	ТаблицаДеталей.ПоворотДетали,
	|	ТаблицаДеталей.Порядок,
	|	ТаблицаДеталей.ОсобыйПорядок,
	|	ТаблицаДеталей.Кромка1 КАК Кромка1,
	|	ТаблицаДеталей.Кромка2 КАК Кромка2,
	|	ТаблицаДеталей.Кромка3 КАК Кромка3,
	|	ТаблицаДеталей.Кромка4 КАК Кромка4,
	//|	ТаблицаДеталей.ЭтоЯщик,
	//|	ТаблицаДеталей.ЭтоДверь,
	|	ТаблицаДеталей.Остаток,
	|	ТаблицаДеталей.РасположениеПазовИРучкиНаФасадах,
	|	НоменклатураПодразделений.ОкруглятьДоЛистов КАК ОкруглятьДоЛистов,
	|	ВЫРАЗИТЬ(ТаблицаДеталей.Номенклатура КАК Справочник.Номенклатура).НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА СписокМатериаловЗаказчика.Номенклатура ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК МатериалЗаказчика
	|ИЗ
	|	ТаблицаДеталей КАК ТаблицаДеталей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
	|		ПО ТаблицаДеталей.Номенклатура = НоменклатураПодразделений.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокМатериаловЗаказчика КАК СписокМатериаловЗаказчика
	|		ПО ТаблицаДеталей.Номенклатура = СписокМатериаловЗаказчика.Номенклатура
	|ГДЕ
	|	НоменклатураПодразделений.Подразделение = &Подразделение
	|ИТОГИ
	|	МАКСИМУМ(Номенклатура),
	|	МАКСИМУМ(ШиринаЛиста),
	|	МАКСИМУМ(ВысотаЛиста),
	|	МАКСИМУМ(Кромка1),
	|	МАКСИМУМ(Кромка2),
	|	МАКСИМУМ(Кромка3),
	|	МАКСИМУМ(Кромка4),
	|	МАКСИМУМ(ОкруглятьДоЛистов),
	|	МАКСИМУМ(НоменклатурнаяГруппа),
	|	МАКСИМУМ(МатериалЗаказчика)
	|ПО
	|	НомерЛиста";
	
	Если ТаблицаДеталей.Колонки.Найти("РасположениеПазовИРучкиНаФасадах") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДеталей.РасположениеПазовИРучкиНаФасадах,", "");
	КонецЕсли;
	
	#КонецОбласти
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СсылкаДокумента.Номер);
	
	НомерНаПечать = "Спец: "+НомерНаПечать;
	
	МатериалыЗаказчика = СсылкаДокумента.СписокМатериаловЗаказчика;
	МассивВсехКромок = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НоменклатураПодЗаказ = ?(Выборка.ОкруглятьДоЛистов И СсылкаДокумента.Дилерский, "(Вернуть остатки)","");
		МатериалЗаказчика = ?(Выборка.МатериалЗаказчика=1,"<b>МАТЕРИАЛ ПРЕДОСТАВЛЕН ЗАКАЗЧИКОМ!</b>","");
		
		//Формирование строки раскроя
		
		ШапкаЛиста = Новый Массив;
		
		ШапкаЛиста.Добавить(Выборка.Номенклатура); //0
		ШапкаЛиста.Добавить(Выборка.Кромка1); //1
		ШапкаЛиста.Добавить(Выборка.Кромка1.КраткоеНаименование);//2
		ШапкаЛиста.Добавить(Выборка.Кромка2); //3
		ШапкаЛиста.Добавить(Выборка.Кромка2.КраткоеНаименование);//4
		ШапкаЛиста.Добавить(Выборка.Кромка3); //5
		ШапкаЛиста.Добавить(Выборка.Кромка3.КраткоеНаименование);//6
		ШапкаЛиста.Добавить(Выборка.Кромка4); //7
		ШапкаЛиста.Добавить(Выборка.Кромка4.КраткоеНаименование);//8
		ШапкаЛиста.Добавить(Выборка.ШиринаЛиста); //9
		ШапкаЛиста.Добавить(Выборка.ВысотаЛиста); //10
		ШапкаЛиста.Добавить(?(ЗначениеЗаполнено(СсылкаДокумента.Ссылка), СсылкаДокумента, ""));//11
		ШапкаЛиста.Добавить(НомерНаПечать + " " + НоменклатураПодЗаказ +" "+ МатериалЗаказчика);//12
		ШапкаЛиста.Добавить("<b>" + КомментарийДокумента + "</b>");//13
		ШапкаЛиста.Добавить(Контрагент); //14
		ШапкаЛиста.Добавить(Выборка.НоменклатурнаяГруппа);   //15
		
		СтрокаРаскроя = СтрокаРаскроя + СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ШапкаЛиста, "☺") + "☻";
		
		ВыборкаПоДеталям = Выборка.Выбрать();
		Пока ВыборкаПоДеталям.Следующий() Цикл
			
			Номенклатура = ?(ВыборкаПоДеталям.Остаток, ?(ЗначениеЗаполнено(НоменклатураПодЗаказ), "2", "1"), "");
			
			ПравыйНижнийРадиус = ВыборкаПоДеталям.РадиусПравоНиз;
			Если ВыборкаПоДеталям.Срез И ПравыйНижнийРадиус > 0 Тогда
				ПравыйНижнийРадиус = Строка(ВыборкаПоДеталям.РадиусПравоНиз) + "_1";
			КонецЕсли;
			
			//КантПоМесту = Ложь;
			Комментарий = ВыборкаПоДеталям.Комментарий;
			//Если ВыборкаПоДеталям.ПереключательКромкаСверху = "По месту" ИЛИ ВыборкаПоДеталям.ПереключательКромкаСнизу = "По месту" 
			//	ИЛИ ВыборкаПоДеталям.ПереключательКромкаСлева = "По месту" ИЛИ ВыборкаПоДеталям.ПереключательКромкаСправа = "По месту" Тогда
			//	Комментарий = Комментарий + " кант по месту";
			//	//КантПоМесту = Истина;
			//КонецЕсли;
			
			//СтруктураНадписи = Новый Структура;
			//СтруктураНадписи.Вставить("ПереключательКромкаСверху", ВыборкаПоДеталям.ПереключательКромкаСверху);
			//СтруктураНадписи.Вставить("ПереключательКромкаСнизу", ВыборкаПоДеталям.ПереключательКромкаСнизу);
			//СтруктураНадписи.Вставить("ПереключательКромкаСлева", ВыборкаПоДеталям.ПереключательКромкаСлева);
			//СтруктураНадписи.Вставить("ПереключательКромкаСправа", ВыборкаПоДеталям.ПереключательКромкаСправа);
			//СтруктураНадписи.Вставить("НомерСтроки", ВыборкаПоДеталям.НомерСтроки);
			//СтруктураНадписи.Вставить("НомерИзделия", ВыборкаПоДеталям.НомерИзделия);
			//СтруктураНадписи.Вставить("ЭтоЯщик", ВыборкаПоДеталям.ЭтоЯщик);
			//СтруктураНадписи.Вставить("ЭтоДверь", ВыборкаПоДеталям.ЭтоДверь);
			//СтруктураНадписи.Вставить("Идентификатор", ВыборкаПоДеталям.Идентификатор);
			//СтруктураНадписи.Вставить("ДетальВПакете", ВыборкаПоДеталям.ДетальВПакете);
			//СтруктураНадписи.Вставить("ОсобыйПорядок", ВыборкаПоДеталям.ОсобыйПорядок);
			//СтруктураНадписи.Вставить("Обтачивать", ВыборкаПоДеталям.Обтачивать);
			//СтруктураНадписи.Вставить("Материал", ВыборкаПоДеталям.Материал);
			//СтруктураНадписи.Вставить("РадиусФасада", ВыборкаПоДеталям.РадиусФасада);
			//СтруктураНадписи.Вставить("ДетальДляСклеивания", ВыборкаПоДеталям.ДетальДляСклеивания);
			//СтруктураНадписи.Вставить("НеТорцевать", ВыборкаПоДеталям.НеТорцевать);
			//СтруктураНадписи.Вставить("ЭтоПуфик", ВыборкаПоДеталям.Материал="Пуфик" ИЛИ ВыборкаПоДеталям.Материал="Пуф");
			
			Надпись = ВыборкаПоДеталям.НаименованиеДетали;//ПолучитьНадпись(СтруктураНадписи);
			
			НеТорцевать = "";
			Если ВыборкаПоДеталям.НеТорцевать Тогда
				НеТорцевать = "1";
			КонецЕсли;
			
			СтрокаОтверстий = "";
			
			ЕвропазСверху 	= 0;
			ЕвропазСнизу 	= 0;
			ЕвропазСлева 	= 0;
			ЕвропазСправа 	= 0;
			
			/////////////////////////////Петли/////////////////
			КоличествоПетель = ВыборкаПоДеталям.КоличествоПетель;
			
			Если КоличествоПетель > 0 И (ВыборкаПоДеталям.Материал = "ФасадЛДСП" ИЛИ ВыборкаПоДеталям.Материал = "ФасадМДФ" ИЛИ ВыборкаПоДеталям.Материал = "ФасадСтеклянный") Тогда
				
				Стороны = Перечисления.Стороны;
				
				СтроронаРасположениеПазов = ВыборкаПоДеталям.РасположениеПазовИРучкиНаФасадах.ПоложениеПазов;
				РазмерСтороны = 0;
				
				Если СтроронаРасположениеПазов = Стороны.Слева Тогда
					
					Сторона = "3";
					РазмерСтороны = ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали);
					
				ИначеЕсли СтроронаРасположениеПазов = Стороны.Справа Тогда
					
					Сторона = "4";
					РазмерСтороны = ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали);
					
				ИначеЕсли СтроронаРасположениеПазов = Стороны.Сверху Тогда
					
					Сторона = "1";
					РазмерСтороны = ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ШиринаДетали);
					
				ИначеЕсли СтроронаРасположениеПазов = Стороны.Снизу Тогда
					
					Сторона = "2";
					РазмерСтороны = ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ШиринаДетали);
					
				КонецЕсли;
				
				Отступ = ВернутьОтступ(РазмерСтороны);
				
				Если КоличествоПетель < 2 Тогда
					
					КоличествоПетель = 2;
					
				КонецЕсли;
				
				Шаг = Окр((РазмерСтороны - 2 * Отступ) / (КоличествоПетель - 1) , 0);
				
				СтрокаОтверстий = "3_"+ Сторона + "_" + КоличествоПетель + "_" + Отступ + "_" + Шаг + "_0#";
				
			КонецЕсли;
			
			////////////////////////////////////////////////////
			
			Если ЗначениеЗаполнено(ВыборкаПоДеталям.СтруктураОтверстий) Тогда
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоДеталям.Идентификатор) Тогда
					СтрокаОтверстийСтруктуры = ЛексСервер.ЗаполнитьРеквизитОтверстиями(СтрокаОтверстий, ВыборкаПоДеталям.СтруктураОтверстий, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ПоворотДетали);
					СтрокаОтверстий = ?(ЗначениеЗаполнено(СтрокаОтверстийСтруктуры), СтрокаОтверстийСтруктуры, СтрокаОтверстий);
				КонецЕсли;
				СтруктураЕвропазов = ЛексСервер.ПолучитьСтруктуруЕвропазов(ВыборкаПоДеталям.СтруктураОтверстий);
				ЕвропазСверху = СтруктураЕвропазов.Сверху;
				ЕвропазСнизу = СтруктураЕвропазов.Снизу;
				ЕвропазСлева = СтруктураЕвропазов.Слева;
				ЕвропазСправа = СтруктураЕвропазов.Справа;
			КонецЕсли;
			
			СтрокаРаскроя = СтрокаРаскроя
			+ Номенклатура + "☺" // 1 - Номенклатура
			+ ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали) + "☺" //2 - Высота детали
			+ ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ШиринаДетали) + "☺" //3 - Ширина детали
			+ ВыборкаПоДеталям.РадиусЛевоВерх + "☺" //4
			+ ВыборкаПоДеталям.РадиусПравоВерх + "☺" //5
			+ ПравыйНижнийРадиус + "☺" //6
			+ ВыборкаПоДеталям.РадиусЛевоНиз + "☺" //7
			+ ВыборкаПоДеталям.КривойПилСверху + "☺" //8
			+ ВыборкаПоДеталям.КривойПилСнизу + "☺" //9
			+ ВыборкаПоДеталям.КривойПилСлева + "☺" //10
			+ ВыборкаПоДеталям.КривойПилСправа + "☺" //11
			+ "" + "☺" //12 (Эксц) если 1 - два в круге крестик(рисунок) сверху
			+ "" + "☺" //13 (Эксц) если 1 - два в круге крестик(рисунок) снизу
			+ "" + "☺" //14 (Эксц) если 1 - два в круге крестик(рисунок) слева
			+ "" + "☺" //15 (Эксц) если 1 - два в круге крестик(рисунок) справа
			+ Комментарий + "☺" //16 - Комментарий
			+ Надпись + "☺" //17
			+ ВыборкаПоДеталям.ВыборМебельнойКромкиСверху.КраткоеНаименование + "☺" //18
			+ ВыборкаПоДеталям.ВыборМебельнойКромкиСнизу.КраткоеНаименование + "☺" //19
			+ ВыборкаПоДеталям.ВыборМебельнойКромкиСлева.КраткоеНаименование + "☺" //20
			+ ВыборкаПоДеталям.ВыборМебельнойКромкиСправа.КраткоеНаименование + "☺" //21
			+ "" + "☺" //22 если 1 - две капельки(рисунок) сверху
			+ "" + "☺" //23 если 1 - две капельки(рисунок) снизу
			+ "" + "☺" //24 если 1 - две капельки(рисунок) слева
			+ "" + "☺" //25 если 1 - две капельки(рисунок) справа
			+ СтрокаОтверстий + "☺" //26
			+ ЕвропазСверху + "☺" //27
			+ ЕвропазСнизу + "☺" //28
			+ ЕвропазСлева + "☺" //29
			+ ЕвропазСправа + "☺" //30
			+ НеТорцевать + "☺" //31
			+ ВыборкаПоДеталям.КоординатаУ + "☺" //32 - координата по У
			+ ВыборкаПоДеталям.КоординатаХ + "☺" //33 - координата по Х
			+ Число(ВыборкаПоДеталям.ПоворотДетали) + "☺" //34 - признак поворота детали 
			+ ВыборкаПоДеталям.ИД + "☺☻";//35 - ИД детали + конец детали
			
			ДобавитьКромкиВМассив(ВыборкаПоДеталям,МассивВсехКромок);
			
		КонецЦикла;
		
		СтрокаРаскроя = СтрокаРаскроя + "♦";//КонецЛиста
		
	КонецЦикла;
	
	ЗаменитьКромкиЗаказчика(СтрокаРаскроя,МассивВсехКромок,МатериалыЗаказчика);
	
	Возврат СтрокаРаскроя;
	
КонецФункции // ФормированиеСтрокиРаскроя()

#КонецОбласти

#Область Старый_алгоритм

Функция ПолучитьСтрокуДляФлэшИзТаблицы(МассивИтоговогоРасположенияДеталей, СсылкаДокумента)
	
	Подразделение = СсылкаДокумента.Подразделение;
	ДанныеДляРаскроя = "%ЛОГОТИП%☻";
	
	Для каждого ЭлементМассива Из МассивИтоговогоРасположенияДеталей Цикл
		
		ДанныеДляРаскроя = ФормированиеСтрокиРаскроя(ДанныеДляРаскроя, ЭлементМассива, СсылкаДокумента, Подразделение);
		
	КонецЦикла;
	
	ПустойРаскрой = (ДанныеДляРаскроя = "%ЛОГОТИП%☻");
	
	Возврат ?(ПустойРаскрой, "", ДанныеДляРаскроя);
	
КонецФункции

Функция РасположитьНаЛистах(СсылкаДокумента, СписокДеталей)
	
	СтруктураРезультатов = Новый Структура;
	СтруктураРезультатов.Вставить("Ошибка", Ложь);
	
	МассивИтоговогоРасположенияДеталей = Новый Массив;
	АлгоритмРаскроя = "";
	Подразделение = СсылкаДокумента.Подразделение;
	НомерДокумента = СсылкаДокумента.Номер;
	ТолщинаПила = ?(ЗначениеЗаполнено(Подразделение.ТолщинаПропила), Подразделение.ТолщинаПропила, 5);
	
	#Область Предварительная_работа_с_деталями
	
	//Разбиваем клееные детали 
	//Все детали приводим к количество = 1
	//Длинные детали в начало листа
	//Сохраняем перечень номенклатуры используемых листов
	
	НомерИД = 0;
	
	Для Каждого Элемент Из СписокДеталей Цикл
		
		ТекущаяНоменклатура = Элемент.Номенклатура;
		Количество = Элемент.Количество;
		Материал = Элемент.Материал;
		
		ТекущаяГруппа = ТекущаяНоменклатура.НоменклатурнаяГруппа;
		Элемент.ПорядокПечати = ТекущаяГруппа.ПорядокПечатиВРаскрое;
		
		//Если ТекущаяГруппа = Справочники.НоменклатурныеГруппы.ЛДСП16 Тогда
		//	Элемент.ПорядокПечати = 11;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.МДФ18 Тогда
		//	Элемент.ПорядокПечати = 12;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.ЛДСП10 Тогда
		//	Элемент.ПорядокПечати = 21;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.ДВП Тогда
		//	Элемент.ПорядокПечати = 22;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.МДФ8 Тогда
		//	Элемент.ПорядокПечати = 23;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.Столешница Тогда
		//	Элемент.ПорядокПечати = 24;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.Пристенок Тогда
		//	Элемент.ПорядокПечати = 25;
		//ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.Стекло
		//	ИЛИ ТекущаяГруппа = Справочники.НоменклатурныеГруппы.Зеркало Тогда
		//	Элемент.ПорядокПечати = 41;
		//Иначе
		//	Элемент.ПорядокПечати = 31;
		//КонецЕсли;
		
		//Элемент.СоблюдениеТекстуры = ТекущаяНоменклатура.НаличиеТекстуры;
		Элемент.Порядок = 100;
		
		НомерИД = НомерИД + 1;
		Если НЕ ЗначениеЗаполнено(Элемент.ИД) И НЕ Элемент.Остаток Тогда
			Элемент.ИД = НомерИД;
		КонецЕсли;
		
		Элемент.ШиринаЛиста = ТекущаяНоменклатура.ШиринаДетали;
		Элемент.ВысотаЛиста = ТекущаяНоменклатура.ДлинаДетали;
		
		//Ошибка размеров детали
		Если Элемент.ВысотаДетали > Элемент.ВысотаЛиста И Элемент.ШиринаДетали > Элемент.ШиринаЛиста Тогда
			
			СформироватьОшибкуПревышениеРазмера(СтруктураРезультатов, Элемент);
			Возврат СтруктураРезультатов;
			
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////////////////
		
		//Разбивка клееной детали, уменьшение размеров номенклатуры для пуфика 
		Если Материал = "10 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+16 ЛДСП" ИЛИ Материал = "АГТ+АГТ" ИЛИ Материал = "АГТ+10 ЛДСП" Тогда
			
			Элемент.ВысотаДетали = Элемент.ВысотаДетали + 20;
			Элемент.ШиринаДетали = Элемент.ШиринаДетали + 20;
			Элемент.ДетальДляСклеивания = Истина;
			Элемент.Материал = Неопределено;
			
			НоваяСтрока = СписокДеталей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
			НоваяСтрока.Номенклатура = Элемент.НоменклатураДляСклеивания;
			
		ИначеЕсли Материал = "Пуфик" Тогда
			
			Элемент.ВысотаДетали = Элемент.ВысотаДетали - 15;
			Элемент.ШиринаДетали = Элемент.ШиринаДетали - 15;
			Элемент.Материал = "Пуф";
			
			НоваяСтрока = СписокДеталей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
			НоваяСтрока.Номенклатура = Элемент.НоменклатураДляСклеивания;
			НоваяСтрока.Материал = "Кожа";
			
			НоваяСтрока.ВысотаДетали = НоваяСтрока.ВысотаДетали + 300;
			НоваяСтрока.ШиринаДетали = НоваяСтрока.ШиринаДетали + 300;
			
		КонецЕсли;
		
		Если Количество > 1 Тогда
			//разбиваем детали
			Элемент.Количество = 1;
			Для ы = 2 По Количество Цикл
				НоваяСтрока = СписокДеталей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
				НоваяСтрока.СтрокаДляФлэш = "";
				НоваяСтрока.ИД = 0;
			КонецЦикла;
			
		КонецЕсли;
		
		//ДлинныеДетали в начало листа в общий цикл раскроя + высокие строка деталей
		//Исправить: Переделать длинные в середину!!!
		//ОстатокЛинии = Элемент.ВысотаЛиста - Элемент.ВысотаДетали;
		//ПоловинаВысота = Элемент.ВысотаЛиста / 2;
		
		Если (Элемент.ШиринаЛиста < Элемент.ВысотаДетали
			ИЛИ Элемент.ВысотаЛиста / 2 < Элемент.ВысотаДетали)
			И Элемент.ШиринаДетали <= 201
			И Материал <> "Пристенок"
			И Материал <> "Столешница" Тогда
			
			Элемент.Порядок = 1;
			Элемент.ОсобыйПорядок = "УзкоДлинные";
			
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	//Получаем список изпользуемой номенклатуры в раскрое
	//______________________________________________________
	СписокНоменклатуры = СписокДеталей.Скопировать(,"Номенклатура, ПорядокПечати, МожноПовернуть");
	СписокНоменклатуры.Свернуть("Номенклатура, ПорядокПечати", "МожноПовернуть");
	СписокНоменклатуры.Сортировать("ПорядокПечати Возр");
	
	//Таблица листов номенклатуры
	//______________________________________________________
	ТаблицаЛистовНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаЛистовНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЛистовНоменклатуры.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	//Сетка остатков
	//______________________________________________________
	ПределыОстатков = НайтиПределыОстатков(СписокНоменклатуры, Подразделение);
	
	//Применение алгоритмов раскроя
	//______________________________________________________
	
	КонечныйНомерЛиста = 0;
	КоличествоЛистов = 0;
	
	//Параметры алгоритма раскроя при формировании линий(2-ой алгоритм)
	МассивОстатковЛиний = Новый Массив;
	МассивОстатковЛиний.Добавить(0);
	МассивОстатковЛиний.Добавить(100);
	МассивОстатковЛиний.Добавить(300);
	МассивОстатковЛиний.Добавить(500);
	
	Для Каждого ЭлементСписка Из СписокНоменклатуры Цикл // цикл по материалам
		
		ТекущаяНоменклатура = ЭлементСписка.Номенклатура;
		ОптимальныйАлгоритмРаскроя = "";
		НоменклатурнаяГруппа = ТекущаяНоменклатура.НоменклатурнаяГруппа;
		ВысотаЛиста = ТекущаяНоменклатура.ДлинаДетали;
		ШиринаЛиста = ТекущаяНоменклатура.ШиринаДетали;
		
		//Параметры сравнения алгоритмов раскроя
		КоличествоОстатковИтог = -1;
		ПлощадьОстатковИтог = -1;
		
		//Основные таблицы по умолчанию
		СписокДеталейНоменклатуры = СписокДеталей.Скопировать(Новый Структура("Номенклатура", ТекущаяНоменклатура));
		
		//Если материал без текстуры крутим его
		ОбходовПоТекстуре = Число(ЭлементСписка.МожноПовернуть);
		
		Для Инд = 0 По ОбходовПоТекстуре Цикл
			
			#Область Алгоритм_поворот_деталей_без_текстуры
			
			Если Инд = 1 Тогда //Есть детали без текстуры
				
				Для Каждого ЭлементБезТекстуры Из СписокДеталейНоменклатуры Цикл
					
					МожноПовернуть = ЭлементБезТекстуры.МожноПовернуть;
					
					// { Васильев Александр Леонидович [06.02.2015]
					// Спец. 21327, при включении возможности поворота получается полная хуйня.
					// Нужно разбираться.
					// } Васильев Александр Леонидович [06.02.2015]
					
					Если МожноПовернуть
						И ЭлементБезТекстуры.ВысотаДетали > ЭлементБезТекстуры.ШиринаДетали Тогда
						
						ВысотаДеталиБезТекстуры = ЭлементБезТекстуры.ВысотаДетали;
						ЭлементБезТекстуры.ВысотаДетали = ЭлементБезТекстуры.ШиринаДетали;
						ЭлементБезТекстуры.ШиринаДетали = ВысотаДеталиБезТекстуры;
						ЭлементБезТекстуры.ПоворотДетали = НЕ ЭлементБезТекстуры.ПоворотДетали;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			#КонецОбласти
			
			СписокДеталейНоменклатуры.Сортировать("Порядок, ШиринаДетали Убыв, ВысотаДетали Убыв");
			
			ТаблицаАлгоритмаПоворота = СписокДеталейНоменклатуры.Скопировать();
			
			Для Каждого ОстатокЛинии Из МассивОстатковЛиний Цикл
				
				Порядок = 2;
				
				#Область Алгоритм_формирование_линий_пила_ограниченных_по_высоте
				Если ОстатокЛинии > 0 Тогда
					
					ТаблицаАлгоритмаПоворота = СписокДеталейНоменклатуры.Скопировать();
					
					Для Каждого Элемент Из ТаблицаАлгоритмаПоворота Цикл
						
						МассивЛиний = ТаблицаАлгоритмаПоворота.НайтиСтроки(Новый Структура("ШиринаДетали, Порядок", Элемент.ШиринаДетали, 100));
						Если МассивЛиний.Количество() > 1 Тогда
							
							ИндексДетали = МассивЛиний.Количество() - 1;
							НашаВысотаЛиста = Элемент.ВысотаЛиста;
							МинРазмерЛинии = НашаВысотаЛиста - ОстатокЛинии;
							МаксВысотаЛинии = 0;
							МассивИндексов = Новый Массив;
							
							Для Индекс = 0 По ИндексДетали Цикл
								
								ПеременныйМассив = Новый Массив;
								ВысотаЛинии = 0;
								Если МассивЛиний[Индекс].ВысотаДетали <= НашаВысотаЛиста Тогда
									ВысотаЛинии = МассивЛиний[Индекс].ВысотаДетали;
									ПеременныйМассив.Добавить(Индекс);
								КонецЕсли;
								
								Если ВысотаЛинии < НашаВысотаЛиста Тогда
									Для НовыйИндекс = Индекс + 1 По ИндексДетали Цикл
										
										НоваяВысота = ВысотаЛинии + МассивЛиний[НовыйИндекс].ВысотаДетали + ТолщинаПила;
										Если НоваяВысота <= НашаВысотаЛиста Тогда
											ВысотаЛинии = НоваяВысота;
											ПеременныйМассив.Добавить(НовыйИндекс);
										КонецЕсли;
										
									КонецЦикла;
								КонецЕсли;
								
								Если (ВысотаЛинии > МинРазмерЛинии) 
									И (ВысотаЛинии > МаксВысотаЛинии) Тогда
									МаксВысотаЛинии = ВысотаЛинии;
									МассивИндексов = ПеременныйМассив;
								КонецЕсли;
								
							КонецЦикла;
							
							//Создаем Пакет из деталей которые попали в линию.
							//Упростить алгоритм создания в линию - сразу в пакет, без промежуточных массивов и циклов.
							Если МассивИндексов.Количество() > 0 Тогда
								
								КоординатаХ = 0;
								КоординатаУ = 0;
								
								Для Каждого ЗначениеМассива Из МассивИндексов Цикл
									
									ТекущийЭлементМассива = МассивЛиний[ЗначениеМассива];
									ТекущийЭлементМассива.Порядок = Порядок;
									
									ТекущийЭлементМассива.ДетальВПакете = Истина;
									ТекущийЭлементМассива.КоординатаХ = КоординатаХ;
									ТекущийЭлементМассива.КоординатаУ = КоординатаУ;
									
									КоординатаУ = КоординатаУ + ТекущийЭлементМассива.ВысотаДетали + ТолщинаПила;
									
								КонецЦикла;
								
								МассивПакетаЛиний = ТаблицаАлгоритмаПоворота.Скопировать(Новый Структура("Порядок", Порядок)).НайтиСтроки(Новый Структура("Порядок", Порядок));
								
								Если МассивПакетаЛиний.Количество() > 0 Тогда
									
									НоваяСтрока = ТаблицаАлгоритмаПоворота.Добавить();
									
									ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивПакетаЛиний[0]);
									
									НоваяСтрока.ВысотаДетали = МаксВысотаЛинии;
									
									НоваяСтрока.Количество = 1;
									НоваяСтрока.КоординатаУ = 0;
									НоваяСтрока.КоординатаХ = 0;
									НоваяСтрока.ПакетДеталей = МассивПакетаЛиний;
									НоваяСтрока.Остаток = Ложь;
									НоваяСтрока.ДетальВПакете = Ложь;
									
									Для Каждого ЭлементМассиваЛиний Из МассивЛиний Цикл
										
										Если ЭлементМассиваЛиний.Порядок = Порядок Тогда
											ТаблицаАлгоритмаПоворота.Удалить(ЭлементМассиваЛиний);
										КонецЕсли;
										
									КонецЦикла;
									
								КонецЕсли;
								
							КонецЕсли;//Если МассивИндексов.Количество() > 0 Тогда
							
							Порядок = Порядок + 1;
							
						КонецЕсли;
						
					КонецЦикла;//Для Каждого Элемент Из ТекущийСписокДеталей Цикл
					
					ТаблицаАлгоритмаПоворота.Сортировать("Порядок, ШиринаДетали Убыв, ВысотаДетали Убыв");
					
				КонецЕсли;//ОстатокЛинии > 0
				
				#КонецОбласти
				
				ТаблицаАлгоритмаОстаткаЛиний = ТаблицаАлгоритмаПоворота.Скопировать();
				
				Для ИндВысокие = 1 По 2 Цикл
					
					#Область Алгоритм_позиционирования_широких_и_высоких_деталей_рядом 
					//Высокие делали (выше половины листа) с одинаковой высотой рядом.
					//Широкие детали (шире 3/4 листа) с одинаковой шириной рядом.
					Если ИндВысокие = 2 Тогда
						
						МассивОбычных = ТаблицаАлгоритмаОстаткаЛиний.НайтиСтроки(Новый Структура("Остаток", Ложь));
						
						Для Каждого ЭлементМассивОбычных Из МассивОбычных Цикл
							
							Если ЭлементМассивОбычных.ШиринаДетали > (3 * ШиринаЛиста / 4) Тогда
								
								МассивШироких = ТаблицаАлгоритмаОстаткаЛиний.НайтиСтроки(Новый Структура("ШиринаДетали", ЭлементМассивОбычных.ШиринаДетали));
								
								Для Каждого ЭлементМассивШироких Из МассивШироких Цикл
									
									ЭлементМассивШироких.Порядок = ?(ЭлементМассивОбычных.Порядок = 100, Порядок, ЭлементМассивОбычных.Порядок);
									
								КонецЦикла;
								
								Если ЭлементМассивОбычных.Порядок = 100 Тогда
									
									Порядок = Порядок + 1;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
						Для Каждого ЭлементМассивОбычных Из МассивОбычных Цикл
							
							Если ЭлементМассивОбычных.ВысотаДетали > (ВысотаЛиста / 2) Тогда
								
								МассивВысоких = ТаблицаАлгоритмаОстаткаЛиний.НайтиСтроки(Новый Структура("ВысотаДетали", ЭлементМассивОбычных.ВысотаДетали));
								
								Для Каждого ЭлементМассивВысоких Из МассивВысоких Цикл
									
									ЭлементМассивВысоких.Порядок = ?(ЭлементМассивОбычных.Порядок = 100, Порядок, ЭлементМассивОбычных.Порядок);
									
								КонецЦикла;
								
								Если ЭлементМассивОбычных.Порядок = 100 Тогда
									
									Порядок = Порядок + 1;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли; // ИндВысокие = 2
					
					#КонецОбласти
					
					ТаблицаАлгоритмаГруппировки = ТаблицаАлгоритмаОстаткаЛиний.Скопировать();
					
					ТекущийСписокДеталей = ТаблицаАлгоритмаГруппировки.Скопировать();
					
					ТекущийСписокДеталей.Сортировать("Порядок, ШиринаДетали Убыв, ВысотаДетали Убыв");
					
					НомерЛиста = КонечныйНомерЛиста + 1;
					
					ДобавитьНовыйЛист(ТекущийСписокДеталей, НомерЛиста, ТекущаяНоменклатура, ВысотаЛиста, ШиринаЛиста, Неопределено);
					
					Для Каждого Элемент Из ТекущийСписокДеталей Цикл
						
						#Область Расположение_деталей_и_остатков_на_листе_по_алгоритму
						
						Если Элемент.Остаток
							ИЛИ Элемент.ДетальВПакете
							ИЛИ Элемент.ДетальРазмещена Тогда
							Продолжить;
						КонецЕсли;
						
						//Найдем все остатки
						МассивОстатков = ТекущийСписокДеталей.НайтиСтроки(Новый Структура("Остаток", Истина));
						
						//Заполнение самый первый
						Если МассивОстатков.Количество() = 0 Тогда
							НомерЛиста = НомерЛиста + 1;
							ДобавитьНовыйЛист(ТекущийСписокДеталей, НомерЛиста, ТекущаяНоменклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
						КонецЕсли;
						
						Для Каждого ЭлементМассива Из МассивОстатков Цикл
							
							//Возможность размещения детали на выбранном остатке
							ОстатокПоВысоте = ЭлементМассива.ВысотаДетали - Элемент.ВысотаДетали;
							ОстатокПоШирине = ЭлементМассива.ШиринаДетали - Элемент.ШиринаДетали;
							
							//Возможность размещения детали на выбранном остатке если деталь можно повернуть
							ОстатокПоВысотеПоворот = -1;
							ОстатокПоШиринеПоворот = -1;
							Если Элемент.МожноПовернуть Тогда
								
								// вот тут бы сортировку учесть...
								
								ОстатокПоВысотеПоворот = ЭлементМассива.ВысотаДетали - Элемент.ШиринаДетали;
								ОстатокПоШиринеПоворот = ЭлементМассива.ШиринаДетали - Элемент.ВысотаДетали;
								
							КонецЕсли;
							
							Если ОстатокПоВысоте >= 0 И ОстатокПоШирине >= 0 Тогда
								
								РазместитьДеталь(ТекущийСписокДеталей, Элемент, ЭлементМассива, ОстатокПоВысоте, ОстатокПоШирине, ТолщинаПила);
								Прервать;
								
							ИначеЕсли ОстатокПоВысотеПоворот >= 0 И ОстатокПоШиринеПоворот >= 0 Тогда
								
								РазместитьДеталь(ТекущийСписокДеталей, Элемент, ЭлементМассива, ОстатокПоВысотеПоворот, ОстатокПоШиринеПоворот, ТолщинаПила, Истина);
								Прервать;
								
							ИначеЕсли МассивОстатков.Найти(ЭлементМассива) + 1 = МассивОстатков.Количество() Тогда
								
								Если (Элемент.ВысотаЛиста >= Элемент.ВысотаДетали И Элемент.ШиринаЛиста >= Элемент.ШиринаДетали) Тогда
									
									НомерЛиста = НомерЛиста + 1;
									ДобавитьНовыйЛист(ТекущийСписокДеталей, НомерЛиста, ТекущаяНоменклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
									
								Иначе
									
									СформироватьОшибкуПревышениеРазмера(СтруктураРезультатов, Элемент);
									Возврат СтруктураРезультатов;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
						#КонецОбласти
						
					КонецЦикла;//Для Каждого Элемент Из СписокДеталейНоменклатуры Цикл
					
					#Область Поиск_оптимальных_остатков
					
					КоличествоЛистовАлгоритма = НомерЛиста - КонечныйНомерЛиста;
					
					Если (КоличествоЛистов = 0) ИЛИ (КоличествоЛистов >= КоличествоЛистовАлгоритма) Тогда
						СтруктураОптимальногоОстатка = ОптимизацияОстатков(ТекущийСписокДеталей, НомерЛиста, КонечныйНомерЛиста, ТолщинаПила, ПределыОстатков, НоменклатурнаяГруппа);
						
						Если ПлощадьОстатковИтог = -1 ИЛИ КоличествоЛистов > КоличествоЛистовАлгоритма
							ИЛИ (КоличествоЛистов = КоличествоЛистовАлгоритма 
							И СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре > ПлощадьОстатковИтог) Тогда
							
							ПлощадьОстатковИтог = СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре;
							КоличествоЛистов = КоличествоЛистовАлгоритма;
							ТаблицаДеталейИтог = СтруктураОптимальногоОстатка.СписокДеталейНоменклатуры;
							ОптимальныйАлгоритмРаскроя = Строка(НоменклатурнаяГруппа) +
							"Текстурный - " + Инд +
							", ОстатокЛинии - " + ОстатокЛинии +
							", Группировка - " + ИндВысокие +";";
							
						КонецЕсли;
						
					КонецЕсли;
					
					#КонецОбласти
					
				КонецЦикла;//ИндВысокие = 1 По 2 Цикл
				
			КонецЦикла;//Для Каждого ОстатокЛинии Из МассивОстатковЛиний Цикл
			
		КонецЦикла;//Для Инд = 0 По ОбходовПоТекстуре Цикл
		
		//Добавляем листы номенклатуры в таблицу________________________
		СтрокаЛистовНоменклатуры = ТаблицаЛистовНоменклатуры.Добавить();
		СтрокаЛистовНоменклатуры.Номенклатура = ЭлементСписка.Номенклатура;
		СтрокаЛистовНоменклатуры.Количество = КоличествоЛистов;
		//______________________________________________________________
		
		КоличествоЛистов = 0;
		КонечныйНомерЛиста = НомерЛиста;
		АлгоритмРаскроя = АлгоритмРаскроя + ОптимальныйАлгоритмРаскроя;
		МассивИтоговогоРасположенияДеталей.Добавить(ТаблицаДеталейИтог);
		
		
	КонецЦикла;//Для Каждого ЭлементСписка Из СписокНоменклатуры Цикл
	
	СтруктураРезультатов.Вставить("МассивИтоговогоРасположенияДеталей", МассивИтоговогоРасположенияДеталей);
	СтруктураРезультатов.Вставить("ТаблицаЛистовНоменклатуры", ТаблицаЛистовНоменклатуры);
	СтруктураРезультатов.Вставить("ТаблицаДеталей", Новый ХранилищеЗначения(СписокДеталей));
	СтруктураРезультатов.Вставить("АлгоритмРаскроя", АлгоритмРаскроя);
	
	Возврат СтруктураРезультатов;
	
КонецФункции

Процедура РазместитьДеталь(СписокДеталейНоменклатуры, Элемент, ЭлементМассива, ОстатокПоВысоте, ОстатокПоШирине, ТолщинаПила, ПоворотДетали = Ложь)
	
	Если ПоворотДетали Тогда
		ВысотаДеталиБезТекстуры = Элемент.ВысотаДетали;
		Элемент.ВысотаДетали = Элемент.ШиринаДетали;
		Элемент.ШиринаДетали = ВысотаДеталиБезТекстуры;
		Элемент.ПоворотДетали = НЕ Элемент.ПоворотДетали;
	КонецЕсли;
	
	//__________Размешение детали на листе__________
	Элемент.КоординатаУ = ЭлементМассива.КоординатаУ;
	Элемент.КоординатаХ = ЭлементМассива.КоординатаХ;
	Элемент.НомерЛиста = ЭлементМассива.НомерЛиста;
	Элемент.Порядок = 100;
	Элемент.ДетальРазмещена = Истина;
	
	//__________Добавление ВСЕХ остатков__________
	ИндексОстатка = СписокДеталейНоменклатуры.Индекс(ЭлементМассива);
	ОстатокПоВысоте = ОстатокПоВысоте - ТолщинаПила;
	ОстатокПоШирине = ОстатокПоШирине - ТолщинаПила;
	ЕстьПакет = Элемент.ПакетДеталей.Количество() > 0;
	ПакетУзких = ЕстьПакет И Элемент.ОсобыйПорядок = "УзкоДлинные";
	
	//позиции остаткам////////////////////////////////////////////////////////////
	
	Если ОстатокПоШирине > 0 Тогда
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = ЭлементМассива.НомерЛиста;
		НоваяСтрока.ВысотаДетали = ЭлементМассива.ВысотаДетали;
		НоваяСтрока.ШиринаДетали = ОстатокПоШирине;
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаУ = Элемент.КоординатаУ;
		НоваяСтрока.КоординатаХ = Элемент.КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила;
		НоваяСтрока.Остаток = Истина;
	КонецЕсли;
	
	Если ОстатокПоВысоте > 0 Тогда
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = ЭлементМассива.НомерЛиста;
		НоваяСтрока.ВысотаДетали = ОстатокПоВысоте;
		НоваяСтрока.ШиринаДетали = Элемент.ШиринаДетали;
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаУ = Элемент.КоординатаУ + Элемент.ВысотаДетали + ТолщинаПила;
		НоваяСтрока.КоординатаХ = Элемент.КоординатаХ;
		НоваяСтрока.Остаток = Истина;
	КонецЕсли;
	
	
	///////////////////////////////////////////////////////////////////////////////
	
	Если ЕстьПакет Тогда
		
		ИндексПакета = СписокДеталейНоменклатуры.Индекс(Элемент);
		
		Для Каждого ЭлементПакета Из Элемент.ПакетДеталей Цикл
			
			ЭтоОстаток = ЭлементПакета.Остаток;
			
			Если ЭтоОстаток Тогда
				ИндексВставки = ИндексОстатка;
			Иначе
				ИндексВставки = ИндексПакета;
			КонецЕсли;
			
			НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексВставки);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементПакета);
			
			Если ЭлементПакета.ОсобыйПорядок = "УзкоДлинные" Тогда
				
				НоваяСтрока.КоординатаУ = ?(ЭтоОстаток, ЭлементПакета.КоординатаУ + Элемент.КоординатаУ, Элемент.КоординатаУ);
				НоваяСтрока.КоординатаХ = ЭлементПакета.КоординатаХ + Элемент.КоординатаХ;
				
			ИначеЕсли ЭлементПакета.ОсобыйПорядок = "Фасад" Тогда
				
				НоваяСтрока.КоординатаУ = Элемент.КоординатаУ + ЭлементПакета.КоординатаУ;
				НоваяСтрока.КоординатаХ = Элемент.КоординатаХ + ЭлементПакета.КоординатаХ;
				
			Иначе
				
				НоваяСтрока.КоординатаУ = Элемент.КоординатаУ + ЭлементПакета.КоординатаУ;
				НоваяСтрока.КоординатаХ = Элемент.КоординатаХ + ЭлементПакета.КоординатаХ;
				
			КонецЕсли;
			
			НоваяСтрока.НомерЛиста = ЭлементМассива.НомерЛиста;
			НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
			НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
			НоваяСтрока.ДетальРазмещена = Истина;
			
		КонецЦикла;
		
		СписокДеталейНоменклатуры.Удалить(Элемент);
		
	КонецЕсли;
	
	СписокДеталейНоменклатуры.Удалить(ЭлементМассива);
	
КонецПроцедуры

Процедура РазместитьДетальАлгоритмОРанце(СписокДеталейНоменклатуры, Элемент, ТолщинаПила, КоординатаУ, КоординатаХ, НомерЛиста, ВысотаЛиста, ШиринаЛиста, ДобавитьБольшойОстатокСлева, МаленькийОстатокПоШирине, ИспользуетсяВОстатках)  //ОстатокПоВысоте, ОстатокПоШирине,
	
	//__________Размешение детали на листе__________
	//Элемент.КоординатаУ = ЭлементМассива.КоординатаУ;
	Элемент.КоординатаУ = КоординатаУ;
	Элемент.КоординатаХ = КоординатаХ;
	Элемент.НомерЛиста = НомерЛиста;
	Элемент.Порядок = 100;
	Элемент.ДетальРазмещена = Истина;
	
	//__________Добавление ВСЕХ остатков__________
	//СтрокаДляПоиска = СписокДеталейНоменклатуры.Найти(ЭлементМассива.GUID, "GUID");
	//ИндексОстатка = СписокДеталейНоменклатуры.Индекс(СтрокаДляПоиска);
	МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток", Истина));
	ЗаменяемыйОстаток = Неопределено;
	
	Для каждого ЭлементМассива Из МассивОстатков Цикл
	
		Если ЭлементМассива.НомерЛиста = НомерЛиста 
			И ЭлементМассива.КоординатаУ = КоординатаУ
			И ЭлементМассива.КоординатаХ = КоординатаХ Тогда
		
			ЗаменяемыйОстаток = ЭлементМассива;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЗаменяемыйОстаток <> Неопределено Тогда
	
		СтрокаДляПоиска = СписокДеталейНоменклатуры.Найти(ЗаменяемыйОстаток.GUID, "GUID");
		ИндексОстатка = СписокДеталейНоменклатуры.Индекс(СтрокаДляПоиска);
		
	Иначе
		
		ИндексОстатка = СписокДеталейНоменклатуры.Количество();
	
	КонецЕсли;
	
	ОстатокПоВысоте = ВысотаЛиста - (КоординатаУ + Элемент.ВысотаДетали + ТолщинаПила);
	БольшойОстатокПоШирине = ШиринаЛиста - (КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила);
	
	//позиции остаткам////////////////////////////////////////////////////////////
	
	Если ДобавитьБольшойОстатокСлева И БольшойОстатокПоШирине > 0 Тогда
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = НомерЛиста;
		НоваяСтрока.ВысотаДетали = Элемент.ВысотаЛиста - КоординатаУ;
		НоваяСтрока.ШиринаДетали = БольшойОстатокПоШирине;
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаУ = КоординатаУ;
		НоваяСтрока.КоординатаХ = Элемент.КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила;
		НоваяСтрока.GUID = Новый УникальныйИдентификатор;
		НоваяСтрока.Остаток = Истина;
	КонецЕсли;
	
	Если МаленькийОстатокПоШирине > 0 И НЕ ИспользуетсяВОстатках Тогда
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = НомерЛиста;
		НоваяСтрока.ВысотаДетали = Элемент.ВысотаЛиста - КоординатаУ;
		НоваяСтрока.ШиринаДетали = МаленькийОстатокПоШирине;
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаУ = КоординатаУ;
		НоваяСтрока.КоординатаХ = Элемент.КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила;
		НоваяСтрока.GUID = Новый УникальныйИдентификатор;
		НоваяСтрока.Остаток = Истина;
	КонецЕсли;
	
	Если ИспользуетсяВОстатках Тогда
		
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = НомерЛиста;
		НоваяСтрока.ВысотаДетали = Элемент.ВысотаЛиста - КоординатаУ;
		НоваяСтрока.ШиринаДетали = ЗаменяемыйОстаток.ШиринаДетали - Элемент.ШиринаДетали;
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаУ = КоординатаУ;
		НоваяСтрока.КоординатаХ = Элемент.КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила;
		НоваяСтрока.GUID = Новый УникальныйИдентификатор;
		НоваяСтрока.Остаток = Истина;
		
	КонецЕсли;
	
	Если ОстатокПоВысоте > 0 Тогда
		НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерЛиста = НомерЛиста;
		НоваяСтрока.ВысотаДетали = ОстатокПоВысоте;
		НоваяСтрока.ШиринаДетали = Элемент.ШиринаДетали;
		НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
		НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
		НоваяСтрока.КоординатаУ = КоординатаУ + Элемент.ВысотаДетали + ТолщинаПила;
		НоваяСтрока.КоординатаХ = Элемент.КоординатаХ;
		НоваяСтрока.GUID = Новый УникальныйИдентификатор;
		НоваяСтрока.Остаток = Истина;
	КонецЕсли;
	
	Если ЗаменяемыйОстаток <> Неопределено Тогда
	
		СписокДеталейНоменклатуры.Удалить(ЗаменяемыйОстаток);
	
	КонецЕсли;
	
	//СписокДеталейНоменклатуры.Удалить(СтрокаДляПоиска);
	
КонецПроцедуры

#КонецОбласти
