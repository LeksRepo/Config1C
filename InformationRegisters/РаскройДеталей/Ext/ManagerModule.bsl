
Функция ПолучитьСтрокуРаскроя(СсылкаДокумента, СписокДеталей = Неопределено) Экспорт
	
	ЭтоСпецификация = Ложь;
	ЭтоНаряд = Ложь;
	АлгоритмРаскроя = "";
	
	Если ТипЗнч(СсылкаДокумента.Ссылка) = Тип("ДокументСсылка.Спецификация") Тогда
		
		ЭтоСпецификация = Истина;
		Производство = СсылкаДокумента.Производство;
		ДанныеДляРаскроя = "%ЛОГОТИП%☻";
		СтрокаКривогоПила = ДанныеДляРаскроя;
		
	ИначеЕсли ТипЗнч(СсылкаДокумента.Ссылка) = Тип("ДокументСсылка.НарядЗадание") Тогда	
		
		ЭтоНаряд = Истина;
		Производство = СсылкаДокумента.Подразделение;
		ДанныеДляРаскроя = "%ЛОГОТИП%☻";
		
	Иначе
		
		Возврат "Вид документа не определен";
		
	КонецЕсли;
	
	НомерДокумента = СсылкаДокумента.Номер;
	ТолщинаПила = ?(ЗначениеЗаполнено(Производство.ТолщинаПропила), Производство.ТолщинаПропила, 5);
	Перераскрой = СписокДеталей <> Неопределено; 
	
	//Формируем список деталей спецификации (список деталей + детали ящика)
	//_____________________________________________________________________
	Если НЕ Перераскрой Тогда
		
		СписокДеталей = ФормированиеСпискаДеталей(СсылкаДокумента, ЭтоСпецификация, ЭтоНаряд);
		
	КонецЕсли;
	
	//Разбиваем клееные детали 
	//Все детали приводим к количество = 1 
	//Длинные детали в начало листа
	//Сохраняем перечень номенклатуры используемых листов
	#Область Предварительная_работа_с_деталями
	
	НомерИД = 0;
	//НомерПакета = 1;
	
	Для Каждого Элемент Из СписокДеталей Цикл
		
		ТекущаяНоменклатура = Элемент.Номенклатура;
		Количество = Элемент.Количество;
		Материал = Элемент.Материал;
		
		ТекущаяГруппа = ТекущаяНоменклатура.НоменклатурнаяГруппа;
		
		Если ТекущаяГруппа = Справочники.НоменклатурныеГруппы.ЛДСП16 Тогда
			Элемент.ПорядокПечати = 11;
		ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.МДФ18 Тогда
			Элемент.ПорядокПечати = 12;
		ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.ЛДСП10 Тогда
			Элемент.ПорядокПечати = 21;
		ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.ДВП Тогда
			Элемент.ПорядокПечати = 22;
		ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.МДФ8 Тогда
			Элемент.ПорядокПечати = 23;
		ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.Столешница Тогда
			Элемент.ПорядокПечати = 24;
		ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.Пристенок Тогда
			Элемент.ПорядокПечати = 25;	
		ИначеЕсли ТекущаяГруппа = Справочники.НоменклатурныеГруппы.Стекло
			ИЛИ ТекущаяГруппа = Справочники.НоменклатурныеГруппы.Зеркало Тогда
			Элемент.ПорядокПечати = 41;
		Иначе
			Элемент.ПорядокПечати = 31;
		КонецЕсли;
		
		Элемент.СоблюдениеТекстуры = ТекущаяНоменклатура.НаличиеТекстуры;
		Элемент.Порядок = 100;
		
		// { Васильев Александр Леонидович [04.02.2015]
		// При вызове из наряда тут ошибка.
		// } Васильев Александр Леонидович [04.02.2015]
		
		Попытка
			
			Если ЗначениеЗаполнено(Элемент.РасположениеФасада) Тогда
				
				Элемент.СтрокаРасположениеФасада = Число(Лев(Элемент.РасположениеФасада, 1));
				Элемент.СтолбецРасположениеФасада = Число(Прав(Элемент.РасположениеФасада, 1));
				
			КонецЕсли;
			
		Исключение
			
		КонецПопытки;
		
		НомерИД = НомерИД + 1;
		Если НЕ ЗначениеЗаполнено(Элемент.ИД) И НЕ Элемент.Остаток Тогда
			Элемент.ИД = НомерИД;
		КонецЕсли;
		
		//Если ЭтоСпецификация Тогда
		
		Элемент.ШиринаЛиста = ТекущаяНоменклатура.ШиринаДетали;
		Элемент.ВысотаЛиста = ТекущаяНоменклатура.ДлинаДетали;
		
		//КонецЕсли;
		
		//Ошибка размеров детали
		Если Элемент.ВысотаДетали > Элемент.ВысотаЛиста И Элемент.ШиринаДетали > Элемент.ШиринаЛиста Тогда
			
			Возврат "Ошибка раскроя № 1 (размеры детали превышают размеры листа). Обратитесь к программистам";
			
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////////////////
		
		//Разбивка клееной детали, уменьшение размеров номенклатуры для пуфика 
		Если Материал = "10 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+16 ЛДСП" ИЛИ Материал = "АГТ+АГТ" ИЛИ Материал = "АГТ+10 ЛДСП" Тогда
			
			Элемент.ВысотаДетали = Элемент.ВысотаДетали + 20;
			Элемент.ШиринаДетали = Элемент.ШиринаДетали + 20;
			Элемент.ДетальДляСклеивания = Истина;
			Элемент.Материал = Неопределено;
			
			НоваяСтрока = СписокДеталей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
			НоваяСтрока.Номенклатура = Элемент.НоменклатураДляСклеивания;
			
		ИначеЕсли Материал = "Пуфик" Тогда
			
			Элемент.ВысотаДетали = Элемент.ВысотаДетали - 15;
			Элемент.ШиринаДетали = Элемент.ШиринаДетали - 15;
			
		КонецЕсли;
		
		//ФормированиеСтрокиКривогоПила
		//______________________________________________________
		Если НЕ Перераскрой И ЗначениеЗаполнено(Элемент.СтрокаДляФлэш) Тогда
			СтрокаКривогоПила = ФормированиеСтрокиКривогоПила(Элемент, СтрокаКривогоПила, НомерДокумента);
		КонецЕсли;
		
		Если Количество > 1 Тогда
			//разбиваем детали
			Элемент.Количество = 1;
			Для ы = 2 По Количество Цикл
				НоваяСтрока = СписокДеталей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
				НоваяСтрока.СтрокаДляФлэш = "";
				НоваяСтрока.ИД = 0;
			КонецЦикла;
			
		КонецЕсли;
		
		//Если Элемент.Материал = "ФасадЯщика" И ЗначениеЗаполнено(Элемент.НомерИзделия) И Элемент.СоблюдениеТекстуры Тогда
		Попытка
			Если ЗначениеЗаполнено(Элемент.РасположениеФасада) И Элемент.СоблюдениеТекстуры Тогда	
				
				Элемент.ОсобыйПорядок = "Фасад";	
				
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		//ДлинныеДетали в начало листа в общий цикл раскроя + высокие строка деталей
		//Исправить: Переделать длинные в середину!!!
		//ОстатокЛинии = Элемент.ВысотаЛиста - Элемент.ВысотаДетали;
		//ПоловинаВысота = Элемент.ВысотаЛиста / 2;
		
		Если (Элемент.ШиринаЛиста < Элемент.ВысотаДетали ИЛИ Элемент.ВысотаЛиста / 2 < Элемент.ВысотаДетали) И Элемент.ШиринаДетали <= 201 
			И Материал <> "Пристенок" И Материал <> "Столешница" Тогда
			
			Элемент.Порядок = 1;
			Элемент.ОсобыйПорядок = "УзкоДлинные";
			
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	//Получаем список изпользуемой номенклатуры в раскрое
	//______________________________________________________	
	СписокНоменклатуры = СписокДеталей.Скопировать(,"Номенклатура, ПорядокПечати, СоблюдениеТекстуры");
	СписокНоменклатуры.Свернуть("Номенклатура, ПорядокПечати", "СоблюдениеТекстуры");
	СписокНоменклатуры.Сортировать("ПорядокПечати Возр");
	//Пилим детали из обрезков
	//______________________________________________________
	
	//СписокДеталей = НайтиОбрезки(СписокДеталей, СписокНоменклатуры, Производство);
	
	//Таблица листов номенклатуры
	//______________________________________________________
	
	ТаблицаЛистовНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаЛистовНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЛистовНоменклатуры.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	//Сетка остатков
	//______________________________________________________
	
	ПределыОстатков = НайтиПределыОстатков(СписокНоменклатуры, Производство);
	
	//Применение алгоритмов раскроя
	//______________________________________________________
	
	КонечныйНомерЛиста = 0;
	КоличествоЛистов = 0;
	
	//Параметры алгоритма раскроя при формировании линий(2-ой алгоритм)
	МассивОстатковЛиний = Новый Массив;
	МассивОстатковЛиний.Добавить(0);
	МассивОстатковЛиний.Добавить(100);
	МассивОстатковЛиний.Добавить(300);
	МассивОстатковЛиний.Добавить(500);
	
	//Параметры алгоритма раскроя при смешанного пила
	МассивСмешанногоПила = Новый Массив;
	МассивСмешанногоПила.Добавить(0);
	//МассивСмешанногоПила.Добавить(1400);
	//МассивСмешанногоПила.Добавить(1200);
	//МассивСмешанногоПила.Добавить(1000);
	//МассивСмешанногоПила.Добавить(800);
	//МассивСмешанногоПила.Добавить(600);
	
	//Параметры направления пила
	МассивНаправленийПила = Новый Массив;
	МассивНаправленийПила.Добавить("Вертикальный");
	//	МассивНаправленийПила.Добавить("Горизонтальный");
	
	Для Каждого ЭлементСписка Из СписокНоменклатуры Цикл
		
		ТекущаяНоменклатура = ЭлементСписка.Номенклатура;
		ОптимальныйАлгоритмРаскроя = "";
		НоменклатурнаяГруппа = ТекущаяНоменклатура.НоменклатурнаяГруппа;
		ВысотаЛиста = ТекущаяНоменклатура.ДлинаДетали;
		ШиринаЛиста = ТекущаяНоменклатура.ШиринаДетали;
		
		ЭтоМДФ = ?(ЗначениеЗаполнено(НоменклатурнаяГруппа), НоменклатурнаяГруппа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.МДФ), Ложь);
		
		//Параметры сравнения алгоритмов раскроя
		КоличествоОстатковИтог = -1;
		ПлощадьОстатковИтог = -1;
		
		//Основные таблицы по умолчанию
		СписокДеталейНоменклатуры = СписокДеталей.Скопировать(Новый Структура("Номенклатура", ТекущаяНоменклатура));
		
		//ФормированиеПакетаУзкоДлинные(СписокДеталейНоменклатуры, "УзкоДлинные", ВысотаЛиста, ШиринаЛиста, ТолщинаПила, ТекущаяНоменклатура, ЭтоМДФ);
		
		ФормированиеПакетаФасадов(СписокДеталейНоменклатуры, "Фасад", ВысотаЛиста, ШиринаЛиста, ТолщинаПила, ТекущаяНоменклатура);
		
		//Если материал без текстуры крутим его
		ОбходовПоТекстуре = Число(НЕ ЭлементСписка.СоблюдениеТекстуры);
		
		Для Каждого НаправлениеПила Из МассивНаправленийПила Цикл
			
			#Область Алгоритм_направление_пила
			ГоризонтальныйПил = НаправлениеПила = "Горизонтальный"; 
			
			Если ГоризонтальныйПил И НЕ ЭтоМДФ Тогда
				Продолжить;
			КонецЕсли;
			#КонецОбласти
			
			Для Инд = 0 По ОбходовПоТекстуре Цикл
				
				#Область Алгоритм_поворот_деталей_без_текстуры
				Если Инд = 1 Тогда //Есть детали без текстуры
					
					Для Каждого ЭлементБезТекстуры Из СписокДеталейНоменклатуры Цикл
						
						МожноПовернуть = ЭлементБезТекстуры.ВысотаДетали <= ЭлементБезТекстуры.ШиринаЛиста И ЭлементБезТекстуры.ШиринаДетали <= ЭлементБезТекстуры.ВысотаЛиста;
						
						// { Васильев Александр Леонидович [06.02.2015]
						// Спец. 21327, при включении возможности поворота получается полная хуйня.
						// Нужно разбираться.
						// } Васильев Александр Леонидович [06.02.2015]
						
						Если МожноПовернуть И
							((НЕ ГоризонтальныйПил И ЭлементБезТекстуры.ВысотаДетали > ЭлементБезТекстуры.ШиринаДетали)
							ИЛИ (ГоризонтальныйПил И ЭлементБезТекстуры.ШиринаДетали > ЭлементБезТекстуры.ВысотаДетали)) Тогда
							
							ВысотаДеталиБезТекстуры = ЭлементБезТекстуры.ВысотаДетали;
							ЭлементБезТекстуры.ВысотаДетали = ЭлементБезТекстуры.ШиринаДетали;
							ЭлементБезТекстуры.ШиринаДетали = ВысотаДеталиБезТекстуры;
							ЭлементБезТекстуры.ПоворотДетали = ?(ЭлементБезТекстуры.ПоворотДетали, 0, 1);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				#КонецОбласти
				
				//Сортировка деталей по условию пила
				Если ГоризонтальныйПил Тогда
					СписокДеталейНоменклатуры.Сортировать("Порядок, ВысотаДетали Убыв, ШиринаДетали Убыв");
				Иначе
					СписокДеталейНоменклатуры.Сортировать("Порядок, ШиринаДетали Убыв, ВысотаДетали Убыв");	
				КонецЕсли;
				//__________________________________
				
				ТаблицаАлгоритмаПоворота = СписокДеталейНоменклатуры.Скопировать();
				
				Для Каждого ОстатокЛинии Из МассивОстатковЛиний Цикл
					
					//ТекущийСписокДеталей = СписокДеталейНоменклатуры.Скопировать();
					
					Порядок = 2;
					
					#Область Алгоритм_формирование_линий_пила_ограниченных_по_высоте
					Если ОстатокЛинии > 0 И НЕ ГоризонтальныйПил Тогда
						
						ТаблицаАлгоритмаПоворота = СписокДеталейНоменклатуры.Скопировать();	
						
						Для Каждого Элемент Из ТаблицаАлгоритмаПоворота Цикл
							
							//Порядок = 2;
							
							МассивЛиний = ТаблицаАлгоритмаПоворота.НайтиСтроки(Новый Структура("ШиринаДетали, Порядок", Элемент.ШиринаДетали, 100));
							Если МассивЛиний.Количество() > 1 Тогда
								
								ИндексДетали = МассивЛиний.Количество() - 1;
								НашаВысотаЛиста = Элемент.ВысотаЛиста;
								МинРазмерЛинии = НашаВысотаЛиста - ОстатокЛинии;
								МаксВысотаЛинии = 0;
								МассивИндексов = Новый Массив;
								
								Для Индекс = 0 По ИндексДетали Цикл
									
									ПеременныйМассив = Новый Массив;
									ВысотаЛинии = 0;
									Если МассивЛиний[Индекс].ВысотаДетали <= НашаВысотаЛиста Тогда
										ВысотаЛинии = МассивЛиний[Индекс].ВысотаДетали;
										ПеременныйМассив.Добавить(Индекс);
									КонецЕсли;
									
									Если ВысотаЛинии < НашаВысотаЛиста Тогда
										Для НовыйИндекс = Индекс + 1 По ИндексДетали Цикл
											
											НоваяВысота = ВысотаЛинии + МассивЛиний[НовыйИндекс].ВысотаДетали + ТолщинаПила;
											Если НоваяВысота <= НашаВысотаЛиста Тогда 
												ВысотаЛинии = НоваяВысота;
												ПеременныйМассив.Добавить(НовыйИндекс);
											КонецЕсли;
											
										КонецЦикла;
									КонецЕсли;
									
									Если (ВысотаЛинии > МинРазмерЛинии) И (ВысотаЛинии > МаксВысотаЛинии) Тогда
										МаксВысотаЛинии = ВысотаЛинии;
										МассивИндексов = ПеременныйМассив;
									КонецЕсли;
									
								КонецЦикла;
								
								//Создаем Пакет из деталей которые попали в линию. 
								//Упростить алгоритм создания в линию - сразу в пакет, без промежуточных массивов и циклов.
								Если МассивИндексов.Количество() > 0 Тогда
									
									КоординатаХ = 0;
									КоординатаУ = 0;
									
									Для Каждого ЗначениеМассива Из МассивИндексов Цикл
										
										ТекущийЭлементМассива = МассивЛиний[ЗначениеМассива];
										ТекущийЭлементМассива.Порядок = Порядок;
										
										ТекущийЭлементМассива.ДетальВПакете = Истина;
										ТекущийЭлементМассива.КоординатаХ = КоординатаХ;
										ТекущийЭлементМассива.КоординатаУ = КоординатаУ;
										
										КоординатаУ = КоординатаУ + ТекущийЭлементМассива.ВысотаДетали + ТолщинаПила;
										
									КонецЦикла;
									
									МассивПакетаЛиний = ТаблицаАлгоритмаПоворота.Скопировать(Новый Структура("Порядок", Порядок)).НайтиСтроки(Новый Структура("Порядок", Порядок));
									
									Если МассивПакетаЛиний.Количество() > 0 Тогда
										
										НоваяСтрока = ТаблицаАлгоритмаПоворота.Добавить();
										
										ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивПакетаЛиний[0]);
										
										НоваяСтрока.ВысотаДетали = МаксВысотаЛинии;
										
										НоваяСтрока.Количество = 1;
										НоваяСтрока.КоординатаУ = 0;
										НоваяСтрока.КоординатаХ = 0;
										НоваяСтрока.ПакетДеталей = МассивПакетаЛиний;
										НоваяСтрока.Остаток = Ложь;
										НоваяСтрока.ДетальВПакете = Ложь;
										
										Для Каждого ЭлементМассиваЛиний Из МассивЛиний Цикл
											
											Если ЭлементМассиваЛиний.Порядок = Порядок Тогда
												ТаблицаАлгоритмаПоворота.Удалить(ЭлементМассиваЛиний);
											КонецЕсли;
											
										КонецЦикла;
										
									КонецЕсли;
									
								КонецЕсли; //Если МассивИндексов.Количество() > 0 Тогда
								//______________________________________________________________________
								
								Порядок = Порядок + 1;
								
							КонецЕсли;
							
						КонецЦикла; //Для Каждого Элемент Из ТекущийСписокДеталей Цикл
						
						ТаблицаАлгоритмаПоворота.Сортировать("Порядок, ШиринаДетали Убыв, ВысотаДетали Убыв");
						
					КонецЕсли; //ОстатокЛинии > 0
					
					#КонецОбласти
					
					ТаблицаАлгоритмаОстаткаЛиний = ТаблицаАлгоритмаПоворота.Скопировать();
					
					Для ИндВысокие = 1 По 2 Цикл
						
						#Область Алгоритм_позиционирования_широких_и_высоких_деталей_рядом 
						//Высокие делали (выше половины листа) с одинаковой высотой рядом.
						//Широкие детали (шире 3/4 листа) с одинаковой шириной рядом.
						Если ИндВысокие = 2 Тогда 
							
							МассивОбычных = ТаблицаАлгоритмаОстаткаЛиний.НайтиСтроки(Новый Структура("Остаток", Ложь));
							
							Для Каждого ЭлементМассивОбычных Из МассивОбычных Цикл
								
								Если ЭлементМассивОбычных.ШиринаДетали > (3 * ШиринаЛиста / 4) Тогда
									
									МассивШироких = ТаблицаАлгоритмаОстаткаЛиний.НайтиСтроки(Новый Структура("ШиринаДетали", ЭлементМассивОбычных.ШиринаДетали));
									
									Для Каждого ЭлементМассивШироких Из МассивШироких Цикл
										
										ЭлементМассивШироких.Порядок = ?(ЭлементМассивОбычных.Порядок = 100, Порядок, ЭлементМассивОбычных.Порядок);
										//ЭлементМассивШироких.Порядок = Порядок;
										
									КонецЦикла;
									
									Если ЭлементМассивОбычных.Порядок = 100 Тогда
										
										Порядок = Порядок + 1;
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
							Для Каждого ЭлементМассивОбычных Из МассивОбычных Цикл
								
								Если ЭлементМассивОбычных.ВысотаДетали > (ВысотаЛиста / 2) Тогда
									
									МассивВысоких = ТаблицаАлгоритмаОстаткаЛиний.НайтиСтроки(Новый Структура("ВысотаДетали", ЭлементМассивОбычных.ВысотаДетали));
									
									Для Каждого ЭлементМассивВысоких Из МассивВысоких Цикл
										
										ЭлементМассивВысоких.Порядок = ?(ЭлементМассивОбычных.Порядок = 100, Порядок, ЭлементМассивОбычных.Порядок);
										//ЭлементМассивВысоких.Порядок = Порядок;
										
									КонецЦикла;
									
									Если ЭлементМассивОбычных.Порядок = 100 Тогда
										
										Порядок = Порядок + 1;
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
						#КонецОбласти
						
						ТаблицаАлгоритмаГруппировки = ТаблицаАлгоритмаОстаткаЛиний.Скопировать();
						
						//Для СмешанныйПил = 1 По 2 Цикл
						Для Каждого ЭлементСмешанногоПила Из МассивСмешанногоПила Цикл
							
							#Область Алгоритм_применения_смешанного_пила
							
							//ЭтоСмешанныйПил = СмешанныйПил = 2;
							
							Если ГоризонтальныйПил И ЭлементСмешанногоПила > 0 Тогда
								Продолжить;
							КонецЕсли;
							#КонецОбласти
							
							ТекущийСписокДеталей = ТаблицаАлгоритмаГруппировки.Скопировать();
							
							Если ГоризонтальныйПил ИЛИ ЭлементСмешанногоПила > 0 Тогда
								ТекущийСписокДеталей.Сортировать("Порядок, ВысотаДетали Убыв, ШиринаДетали Убыв");
							Иначе
								ТекущийСписокДеталей.Сортировать("Порядок, ШиринаДетали Убыв, ВысотаДетали Убыв");
							КонецЕсли;
							
							НомерЛиста = КонечныйНомерЛиста + 1;
							
							ДобавитьНовыйЛист(ТекущийСписокДеталей, НомерЛиста, ТекущаяНоменклатура, ВысотаЛиста, ШиринаЛиста, Неопределено);
							
							Для Каждого Элемент Из ТекущийСписокДеталей Цикл
								
								#Область Расположение_деталей_и_остатков_на_листе_по_алгоритму
								
								Если Элемент.Остаток ИЛИ Элемент.ДетальВПакете ИЛИ Элемент.ДетальРазмещена Тогда
									Продолжить;
								КонецЕсли;
								
								//Найдем все остатки
								МассивОстатков = ТекущийСписокДеталей.НайтиСтроки(Новый Структура("Остаток", Истина));
								
								//Заполнение самый первый
								Если МассивОстатков.Количество() = 0 Тогда
									НомерЛиста = НомерЛиста + 1;
									ДобавитьНовыйЛист(ТекущийСписокДеталей, НомерЛиста, ТекущаяНоменклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
								КонецЕсли;
								
								Для Каждого ЭлементМассива Из МассивОстатков Цикл
									
									//Возможность размещения детали на выбранном остатке
									ОстатокПоВысоте = ЭлементМассива.ВысотаДетали - Элемент.ВысотаДетали;
									ОстатокПоШирине = ЭлементМассива.ШиринаДетали - Элемент.ШиринаДетали;
									
									//Возможность размещения детали на выбранном остатке если деталь можно повернуть
									ОстатокПоВысотеПоворот = -1;
									ОстатокПоШиринеПоворот = -1;
									Если НЕ Элемент.СоблюдениеТекстуры Тогда
										ОстатокПоВысотеПоворот = ЭлементМассива.ВысотаДетали - Элемент.ШиринаДетали;
										ОстатокПоШиринеПоворот = ЭлементМассива.ШиринаДетали - Элемент.ВысотаДетали;
									КонецЕсли;
									
									Если ОстатокПоВысоте >= 0 И ОстатокПоШирине >= 0 Тогда
										
										РазместитьДеталь(ТекущийСписокДеталей, Элемент, ЭлементМассива, ОстатокПоВысоте, ОстатокПоШирине, ГоризонтальныйПил, ЭлементСмешанногоПила, ТолщинаПила);
										Прервать;
										
									ИначеЕсли ОстатокПоВысотеПоворот >= 0  И ОстатокПоШиринеПоворот >= 0 Тогда
										
										РазместитьДеталь(ТекущийСписокДеталей, Элемент, ЭлементМассива, ОстатокПоВысотеПоворот, ОстатокПоШиринеПоворот, ГоризонтальныйПил, ЭлементСмешанногоПила, ТолщинаПила, Истина);
										Прервать;
										
									ИначеЕсли ((МассивОстатков.Найти(ЭлементМассива) + 1) = МассивОстатков.Количество()) Тогда
										
										Если  (Элемент.ВысотаЛиста >= Элемент.ВысотаДетали И Элемент.ШиринаЛиста >= Элемент.ШиринаДетали) Тогда
											
											НомерЛиста = НомерЛиста + 1;	
											ДобавитьНовыйЛист(ТекущийСписокДеталей, НомерЛиста, ТекущаяНоменклатура, ВысотаЛиста, ШиринаЛиста, МассивОстатков);
											
										Иначе
											Возврат "Ошибка раскроя № 2 (размеры детали превышают размеры листа). Обратитесь к программистам";
										КонецЕсли;
										
									КонецЕсли;
									
								КонецЦикла;	
								
								#КонецОбласти
								
							КонецЦикла; //Для Каждого Элемент Из СписокДеталейНоменклатуры Цикл
							
							#Область Поиск_оптимальных_остатков
							
							КоличествоЛистовАлгоритма = НомерЛиста - КонечныйНомерЛиста;
							
							Если (КоличествоЛистов = 0) ИЛИ (КоличествоЛистов >= КоличествоЛистовАлгоритма) Тогда
								СтруктураОптимальногоОстатка = ОптимизацияОстатков(ТекущийСписокДеталей, НомерЛиста, КонечныйНомерЛиста, ТолщинаПила, ПределыОстатков, НоменклатурнаяГруппа, ГоризонтальныйПил);
								
								Если (ПлощадьОстатковИтог = -1) ИЛИ (КоличествоЛистов > КоличествоЛистовАлгоритма) 
									ИЛИ (КоличествоЛистов = КоличествоЛистовАлгоритма 
									И СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре > ПлощадьОстатковИтог) Тогда
									
									//ИЛИ (СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре > ПлощадьОстатковИтог) 
									//ИЛИ (КоличествоЛистов >= КоличествоЛистовАлгоритма) Тогда // Косяк в условии если листов одинаково с прошлым раскроем мог взять с меньшим остатком
									
									ПлощадьОстатковИтог = СтруктураОптимальногоОстатка.ПлощадьОстатковПоНоменклатуре;
									//КонечныйНомерЛиста = НомерЛиста;
									КоличествоЛистов = КоличествоЛистовАлгоритма;
									ТаблицаДеталейИтог = СтруктураОптимальногоОстатка.СписокДеталейНоменклатуры;
									ОптимальныйАлгоритмРаскроя = Строка(НоменклатурнаяГруппа) + 
									"Текстурный - " + Инд + 
									", ОстатокЛинии - " + ОстатокЛинии + 
									", Группировка - " + ИндВысокие + 
									", Смешанный - " + ЭлементСмешанногоПила + "; ";
									
								КонецЕсли;
							КонецЕсли;
							
							#КонецОбласти
							
						КонецЦикла; //Для СмешанныйПил = 1 По 2 Цикл
						
					КонецЦикла;	//ИндВысокие = 1 По 2 Цикл
					
				КонецЦикла; //Для Каждого ОстатокЛинии Из МассивОстатковЛиний Цикл
				
			КонецЦикла; //Для Инд = 0 По ОбходовПоТекстуре Цикл
			
		КонецЦикла;	//Для Каждого НаправлениеПила Из МассивНаправленийПила Цикл
		
		//Добавляем листы номенклатуры в таблицу________________________
		СтрокаЛистовНоменклатуры = ТаблицаЛистовНоменклатуры.Добавить();
		СтрокаЛистовНоменклатуры.Номенклатура = ЭлементСписка.Номенклатура;
		СтрокаЛистовНоменклатуры.Количество = КоличествоЛистов;
		//______________________________________________________________
		
		КоличествоЛистов = 0;
		КонечныйНомерЛиста = НомерЛиста;
		АлгоритмРаскроя = АлгоритмРаскроя + ОптимальныйАлгоритмРаскроя;
		
		ДанныеДляРаскроя = ФормированиеСтрокиРаскроя(ДанныеДляРаскроя, ТаблицаДеталейИтог, СсылкаДокумента, Производство, ЭтоСпецификация, ЭтоНаряд);
		
	КонецЦикла; //Для Каждого ЭлементСписка Из СписокНоменклатуры Цикл
	
	ПустойРаскрой = (ДанныеДляРаскроя = "%ЛОГОТИП%☻");
	ПустойКривойПил = (СтрокаКривогоПила = "%ЛОГОТИП%☻");
	
	Структура = Новый Структура;
	Структура.Вставить("ДанныеДляРаскроя", ?(ПустойРаскрой, "", ДанныеДляРаскроя));
	Структура.Вставить("ТаблицаЛистовНоменклатуры", ТаблицаЛистовНоменклатуры);
	Структура.Вставить("ТаблицаДеталей", Новый ХранилищеЗначения(СписокДеталей));
	Структура.Вставить("СтрокаКривогоПила", ?(ПустойКривойПил, "", СтрокаКривогоПила));
	Структура.Вставить("АлгоритмРаскроя", АлгоритмРаскроя);
	
	Возврат Структура;
	
КонецФункции

Процедура ДобавитьНовыйЛист(Знач СписокДеталейНоменклатуры, Знач НомерЛиста, Знач Номенклатура, Знач ВысотаЛиста, Знач ШиринаЛиста, Знач МассивОстатков)
	
	Перем НоваяСтрока;
	
	НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.НомерЛиста = НомерЛиста;
	НоваяСтрока.ВысотаДетали = ВысотаЛиста;
	НоваяСтрока.ШиринаДетали = ШиринаЛиста;
	НоваяСтрока.ВысотаЛиста = ВысотаЛиста;
	НоваяСтрока.ШиринаЛиста = ШиринаЛиста;
	НоваяСтрока.КоординатаУ = 0;
	НоваяСтрока.КоординатаХ = 0;
	НоваяСтрока.Остаток = Истина;
	
	Если МассивОстатков <> Неопределено Тогда
		МассивОстатков.Добавить(НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Функция ФормированиеСпискаДеталей(СсылкаДокумента, ЭтоСпецификация, ЭтоНаряд)
	
	Если ЭтоСпецификация Тогда
		
		СписокДеталей = СсылкаДокумента.СписокМатериалы.Выгрузить(,"НомерСтроки, Материал, Номенклатура, ВысотаДетали, ШиринаДетали, Количество,
		|Идентификатор, НоменклатураДляСклеивания, РасположениеФасада, НомерИзделия, НеТорцевать, СтруктураОтверстий, Комментарий, РасположениеПазов,
		|РадиусЛевоВерх, РадиусЛевоНиз, РадиусПравоВерх, РадиусПравоНиз, КривойПилСверху, КривойПилСлева, КривойПилСнизу, КривойПилСправа, СтрокаДляФлэш,
		|ВыборМебельнойКромкиСверху, ВыборМебельнойКромкиСлева, ВыборМебельнойКромкиСнизу, ВыборМебельнойКромкиСправа, Срез, КоличествоПетель,
		|ПереключательКромкаСверху, ПереключательКромкаСлева, ПереключательКромкаСнизу, ПереключательКромкаСправа, РасположениеПазовИРучкиНаФасадах, 
		|Обтачивать, РадиусФасада");
		СписокДеталей.Колонки.Добавить("ШиринаЛиста", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("ВысотаЛиста", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("СоблюдениеТекстуры", Новый ОписаниеТипов("Булево"));
		СписокДеталей.Колонки.Добавить("НомерЛиста", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("КоординатаХ", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("КоординатаУ", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("ПоворотДетали", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("ОсобыйПорядок", Новый ОписаниеТипов("Строка"));
		СписокДеталей.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Булево"));
		СписокДеталей.Колонки.Добавить("ЭтоЯщик", Новый ОписаниеТипов("Булево"));
		СписокДеталей.Колонки.Добавить("ЭтоДверь", Новый ОписаниеТипов("Булево"));
		СписокДеталей.Колонки.Добавить("ДетальДляСклеивания", Новый ОписаниеТипов("Булево"));
		СписокДеталей.Колонки.Добавить("ИД", Новый ОписаниеТипов("Число"));
		//Сделать петли для деталей??????????????????????
		//СписокДеталей.Колонки.Добавить("РасположениеПазовИРучкиНаФасадах", Новый ОписаниеТипов("СправочникСсылка.РасположениеПазовИРучкиНаФасадах"));
		СписокДеталей.Колонки.Добавить("Кромка1", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		СписокДеталей.Колонки.Добавить("Кромка2", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		СписокДеталей.Колонки.Добавить("Кромка3", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		СписокДеталей.Колонки.Добавить("Кромка4", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		СписокДеталей.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("ПакетДеталей", Новый ОписаниеТипов("Массив"));
		СписокДеталей.Колонки.Добавить("ДетальВПакете", Новый ОписаниеТипов("Булево"));
		СписокДеталей.Колонки.Добавить("ПорядокПечати", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("СтрокаРасположениеФасада", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("СтолбецРасположениеФасада", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("ДетальРазмещена", Новый ОписаниеТипов("Булево"));
		
		#Область Преобразование_ящиков_в_детали
		СписокЯщиков = СсылкаДокумента.СписокЯщики;
		
		Для Каждого Элемент Из СписокЯщиков Цикл
			
			//ДНО ЯЩИКА
			НоваяСтрока = СписокДеталей.Добавить();
			НоваяСтрока.Номенклатура = Элемент.ДноНоменклатура;
			НоваяСтрока.ВысотаДетали = Элемент.ДлинаДно;
			НоваяСтрока.ШиринаДетали = Элемент.ШиринаДно;
			НоваяСтрока.Количество = Элемент.КоличествоЯщиков;
			НоваяСтрока.НомерИзделия = Элемент.НомерИзделия;
			НоваяСтрока.НомерСтроки = Элемент.НомерСтроки;
			
			Если Элемент.ДноНоменклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ЛДСП10 Тогда
				
				НоваяСтрока.ВыборМебельнойКромкиСверху = Элемент.КромкаНоменклатура;
				НоваяСтрока.ВыборМебельнойКромкиСнизу = Элемент.КромкаНоменклатура;
				НоваяСтрока.ВыборМебельнойКромкиСлева = Элемент.КромкаНоменклатура;
				НоваяСтрока.ВыборМебельнойКромкиСправа = Элемент.КромкаНоменклатура;
				
			КонецЕсли;
			
			НоваяСтрока.ЭтоЯщик = Истина;
			
			Если Элемент.ВидЯщика = Перечисления.ВидыЯщика.Обычный Тогда
				
				Если ЗначениеЗаполнено(Элемент.ДлинаРебро) Тогда
					
					//РЕБРО ЯЩИКА
					НоваяСтрока = СписокДеталей.Добавить();
					НоваяСтрока.Номенклатура = Элемент.Номенклатура;
					НоваяСтрока.ВысотаДетали = Элемент.ДлинаРебро;
					НоваяСтрока.ШиринаДетали = Элемент.ВысотаЯщика;
					НоваяСтрока.Количество = Элемент.КоличествоЯщиков;
					НоваяСтрока.НомерИзделия = Элемент.НомерИзделия;
					НоваяСтрока.НомерСтроки = Элемент.НомерСтроки;
					НоваяСтрока.ВыборМебельнойКромкиСлева = Элемент.КромкаНоменклатура;
					НоваяСтрока.ЭтоЯщик = Истина;
					
				КонецЕсли;
				
				//БОКОВАЯ СТОРОНА1
				НоваяСтрока = СписокДеталей.Добавить();
				НоваяСтрока.Номенклатура = Элемент.Номенклатура;
				НоваяСтрока.ВысотаДетали = Элемент.ШиринаБоковойСтороны;
				НоваяСтрока.ШиринаДетали = Элемент.ВысотаБоковойСтороны;
				НоваяСтрока.Количество = 2 * Элемент.КоличествоЯщиков;
				НоваяСтрока.НомерИзделия = Элемент.НомерИзделия;
				НоваяСтрока.НомерСтроки = Элемент.НомерСтроки;
				НоваяСтрока.ВыборМебельнойКромкиСлева = Элемент.КромкаНоменклатура;
				НоваяСтрока.ЭтоЯщик = Истина;
				
				//БОКОВАЯ СТОРОНА2
				НоваяСтрока = СписокДеталей.Добавить();
				НоваяСтрока.Номенклатура = Элемент.Номенклатура;
				НоваяСтрока.ВысотаДетали = Элемент.ДлинаБоковойСтороны;
				НоваяСтрока.ШиринаДетали = Элемент.ВысотаБоковойСтороны;
				НоваяСтрока.Количество = 2 * Элемент.КоличествоЯщиков;
				НоваяСтрока.НомерИзделия = Элемент.НомерИзделия;
				НоваяСтрока.НомерСтроки = Элемент.НомерСтроки;
				НоваяСтрока.ВыборМебельнойКромкиСверху = Элемент.КромкаНоменклатура;
				НоваяСтрока.ВыборМебельнойКромкиСнизу = Элемент.КромкаНоменклатура;
				НоваяСтрока.ВыборМебельнойКромкиСлева = Элемент.КромкаНоменклатура;
				НоваяСтрока.ЭтоЯщик = Истина;
				
			Иначе
				
				//МТБОКСЫ
				НоваяСтрока = СписокДеталей.Добавить();
				НоваяСтрока.Номенклатура = Элемент.Номенклатура;
				НоваяСтрока.ВысотаДетали = Элемент.ШиринаБоковойСтороны;
				НоваяСтрока.ШиринаДетали = Элемент.ВысотаБоковойСтороны;
				НоваяСтрока.Количество = Элемент.КоличествоЯщиков;
				НоваяСтрока.НомерИзделия = Элемент.НомерИзделия;
				НоваяСтрока.НомерСтроки = Элемент.НомерСтроки;
				НоваяСтрока.ВыборМебельнойКромкиСверху = Элемент.КромкаНоменклатура;
				НоваяСтрока.ВыборМебельнойКромкиСнизу = Элемент.КромкаНоменклатура;
				НоваяСтрока.ВыборМебельнойКромкиСлева = Элемент.КромкаНоменклатура;
				НоваяСтрока.ВыборМебельнойКромкиСправа = Элемент.КромкаНоменклатура;
				НоваяСтрока.ЭтоЯщик = Истина;
				
			КонецЕсли;
			
			Если Элемент.ВидФасада <> "Нет" Тогда
				Если ЗначениеЗаполнено(Элемент.ФасадНоменклатура) Тогда
					
					//ФАСАД ЯЩИКА
					НоваяСтрока = СписокДеталей.Добавить();
					НоваяСтрока.Номенклатура = Элемент.ФасадНоменклатура;
					НоваяСтрока.ВысотаДетали = Элемент.ВысотаФасад - 2 * Элемент.КромкаФасадНоменклатура.ГлубинаДетали;
					НоваяСтрока.ШиринаДетали = Элемент.ШиринаФасад - 2 * Элемент.КромкаФасадНоменклатура.ГлубинаДетали;
					НоваяСтрока.Количество = Элемент.КоличествоЯщиков;
					НоваяСтрока.НомерИзделия = Элемент.НомерИзделия;
					НоваяСтрока.НомерСтроки = Элемент.НомерСтроки;
					НоваяСтрока.ВыборМебельнойКромкиСверху = Элемент.КромкаФасадНоменклатура;
					НоваяСтрока.ВыборМебельнойКромкиСнизу = Элемент.КромкаФасадНоменклатура;
					НоваяСтрока.ВыборМебельнойКромкиСлева = Элемент.КромкаФасадНоменклатура;
					НоваяСтрока.ВыборМебельнойКромкиСправа = Элемент.КромкаФасадНоменклатура;
					НоваяСтрока.ЭтоЯщик = Истина;
					НоваяСтрока.Материал = "ФасадЯщика";
					НоваяСтрока.РасположениеФасада = Элемент.РасположениеФасада;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		#КонецОбласти 
		
		#Область Преобразование_двери_в_детали
		СписокДверей = СсылкаДокумента.СписокДверей;
		
		Для Каждого Элемент Из СписокДверей Цикл
			
			СписокНоменклатурыДверей = Элемент.Двери.СписокНоменклатуры;
			Для Каждого Строка Из СписокНоменклатурыДверей Цикл
				Если ЗначениеЗаполнено(Строка.Длина) И ЗначениеЗаполнено(Строка.Ширина) 
					И (Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал) Тогда
					
					НоваяСтрока = СписокДеталей.Добавить();
					НоваяСтрока.Номенклатура = Строка.Номенклатура;
					НоваяСтрока.ВысотаДетали = Строка.Длина;
					НоваяСтрока.ШиринаДетали = Строка.Ширина;
					НоваяСтрока.Количество = Строка.Количество;
					НоваяСтрока.НомерСтроки = Строка.НомерСтроки;
					НоваяСтрока.ЭтоДверь = Истина;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		#КонецОбласти 
		
	ИначеЕсли ЭтоНаряд Тогда
		
		#Область Создание_пустого_списка_деталей
		
		СписокДеталей = Новый ТаблицаЗначений;
		
		СписокДеталей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число")); 
		СписокДеталей.Колонки.Добавить("Материал", Новый ОписаниеТипов("Строка")); 
		СписокДеталей.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
		СписокДеталей.Колонки.Добавить("ВысотаДетали", Новый ОписаниеТипов("Число")); 
		СписокДеталей.Колонки.Добавить("ШиринаДетали", Новый ОписаниеТипов("Число")); 
		СписокДеталей.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));  
		СписокДеталей.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка")); 
		СписокДеталей.Колонки.Добавить("НоменклатураДляСклеивания", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
		СписокДеталей.Колонки.Добавить("НомерИзделия", Новый ОписаниеТипов("Число")); 
		СписокДеталей.Колонки.Добавить("СоблюдениеТекстуры", Новый ОписаниеТипов("Булево")); 
		СписокДеталей.Колонки.Добавить("НеТорцевать", Новый ОписаниеТипов("Булево")); 
		СписокДеталей.Колонки.Добавить("СтруктураОтверстий", Новый ОписаниеТипов("Строка")); 
		СписокДеталей.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка")); 
		СписокДеталей.Колонки.Добавить("РасположениеПазов", Новый ОписаниеТипов("ПеречислениеСсылка.Стороны"));
		СписокДеталей.Колонки.Добавить("РадиусЛевоВерх", Новый ОписаниеТипов("Число")); 
		СписокДеталей.Колонки.Добавить("РадиусЛевоНиз", Новый ОписаниеТипов("Число")); 
		СписокДеталей.Колонки.Добавить("РадиусПравоВерх", Новый ОписаниеТипов("Число")); 
		СписокДеталей.Колонки.Добавить("РадиусПравоНиз", Новый ОписаниеТипов("Число")); 
		СписокДеталей.Колонки.Добавить("КривойПилСверху", Новый ОписаниеТипов("Число")); 
		СписокДеталей.Колонки.Добавить("КривойПилСлева", Новый ОписаниеТипов("Число")); 
		СписокДеталей.Колонки.Добавить("КривойПилСнизу", Новый ОписаниеТипов("Число")); 
		СписокДеталей.Колонки.Добавить("КривойПилСправа", Новый ОписаниеТипов("Число")); 
		СписокДеталей.Колонки.Добавить("СтрокаДляФлэш", Новый ОписаниеТипов("Строка"));       
		СписокДеталей.Колонки.Добавить("ВыборМебельнойКромкиСверху", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
		СписокДеталей.Колонки.Добавить("ВыборМебельнойКромкиСлева", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
		СписокДеталей.Колонки.Добавить("ВыборМебельнойКромкиСнизу", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
		СписокДеталей.Колонки.Добавить("ВыборМебельнойКромкиСправа", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
		СписокДеталей.Колонки.Добавить("Срез", Новый ОписаниеТипов("Булево")); 
		СписокДеталей.Колонки.Добавить("КоличествоПетель", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("ПереключательКромкаСверху", Новый ОписаниеТипов("Строка")); 
		СписокДеталей.Колонки.Добавить("ПереключательКромкаСлева", Новый ОписаниеТипов("Строка")); 
		СписокДеталей.Колонки.Добавить("ПереключательКромкаСнизу", Новый ОписаниеТипов("Строка")); 
		СписокДеталей.Колонки.Добавить("ПереключательКромкаСправа", Новый ОписаниеТипов("Строка")); 
		СписокДеталей.Колонки.Добавить("Обтачивать", Новый ОписаниеТипов("Булево")); 
		СписокДеталей.Колонки.Добавить("РадиусФасада", Новый ОписаниеТипов("Строка"));
		СписокДеталей.Колонки.Добавить("ШиринаЛиста", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("ВысотаЛиста", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("НомерЛиста", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("КоординатаХ", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("КоординатаУ", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("ПоворотДетали", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("ОсобыйПорядок", Новый ОписаниеТипов("Строка"));
		СписокДеталей.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Булево"));
		СписокДеталей.Колонки.Добавить("ЭтоЯщик", Новый ОписаниеТипов("Булево"));
		СписокДеталей.Колонки.Добавить("ЭтоДверь", Новый ОписаниеТипов("Булево"));
		СписокДеталей.Колонки.Добавить("ДетальДляСклеивания", Новый ОписаниеТипов("Булево"));
		СписокДеталей.Колонки.Добавить("ИД", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("Кромка1", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		СписокДеталей.Колонки.Добавить("Кромка2", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		СписокДеталей.Колонки.Добавить("Кромка3", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		СписокДеталей.Колонки.Добавить("Кромка4", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		СписокДеталей.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("ПакетДеталей", Новый ОписаниеТипов("Массив"));
		СписокДеталей.Колонки.Добавить("ДетальВПакете", Новый ОписаниеТипов("Булево"));
		СписокДеталей.Колонки.Добавить("ПорядокПечати", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("СтрокаРасположениеФасада", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("СтолбецРасположениеФасада", Новый ОписаниеТипов("Число"));
		СписокДеталей.Колонки.Добавить("ДетальРазмещена", Новый ОписаниеТипов("Булево"));
		#КонецОбласти
		
		#Область Добавление_стекл_наряда
		
		СписокЗеркал = СсылкаДокумента.СписокЗеркал;
		
		Для Каждого Элемент Из СписокЗеркал Цикл
			
			Если Элемент.Раскрой Тогда 
				
				НоваяСтрока = СписокДеталей.Добавить();
				НоваяСтрока.Номенклатура = Элемент.Номенклатура;
				НоваяСтрока.ВысотаДетали = Элемент.ВысотаДетали;
				НоваяСтрока.ШиринаДетали = Элемент.ШиринаДетали;
				НоваяСтрока.Количество = Элемент.Количество;
				НоваяСтрока.Комментарий = Элемент.Комментарий;
				НоваяСтрока.ШиринаЛиста = Элемент.НоменклатураОсновнаяПоСкладу.ШиринаДетали;
				НоваяСтрока.ВысотаЛиста = Элемент.НоменклатураОсновнаяПоСкладу.ДлинаДетали;
				
			КонецЕсли;
			
		КонецЦикла;
		
		#КонецОбласти
		
	КонецЕсли;
	
	Возврат СписокДеталей;
	
КонецФункции // ФормированиеСпискаДеталей()

Функция ФормированиеСтрокиКривогоПила(Элемент, СтрокаКривогоПила, НомерДокумента)
	
	СтрокаКривогоПила = СтрокаКривогоПила 
	+ Элемент.Номенклатура + "☺"
	+ Элемент.ВыборМебельнойКромкиСверху.КраткоеНаименование + "☺"
	+ Элемент.ВыборМебельнойКромкиСнизу.КраткоеНаименование + "☺"
	+ Элемент.ВыборМебельнойКромкиСлева.КраткоеНаименование + "☺"
	+ Элемент.ВыборМебельнойКромкиСправа.КраткоеНаименование + "☺"
	+ "Спецификация " + НомерДокумента + "☺"
	+ "Количество деталей: " + Элемент.Количество + "☺"
	+ "№ детали " + Элемент.НомерСтроки + " Комментарий: " + Элемент.Комментарий + "☺"
	+ ?(Элемент.Материал = "Стекло", ?(Элемент.Обтачивать, "Обтачивать", "Без обточки"), "") + "☺"	
	+ Элемент.НомерСтроки + "☺"
	+ Элемент.СтрокаДляФлэш + "☺☻";
	
	Возврат СтрокаКривогоПила;
	
КонецФункции 

Функция НайтиОбрезки(СписокДеталей, СписокНоменклатуры, Производство)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("Производство", Производство);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбрезкиМатериалов.Номенклатура,
	|	ОбрезкиМатериалов.Подразделение,
	|	ОбрезкиМатериалов.Высота,
	|	ОбрезкиМатериалов.Количество,
	|	ОбрезкиМатериалов.Ширина
	|ИЗ
	|	РегистрНакопления.ОбрезкиМатериалов КАК ОбрезкиМатериалов
	|ГДЕ
	|	ОбрезкиМатериалов.Номенклатура В(&СписокНоменклатуры)
	|	И ОбрезкиМатериалов.Подразделение = &Производство";
	
	ТЗ_Обрезки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ЭлементСписка Из СписокНоменклатуры Цикл
		
		СписокДеталейНоменклатуры = СписокДеталей.Скопировать(Новый Структура("Номенклатура", ЭлементСписка.Значение));
		
	КонецЦикла;	
	
	Возврат СписокДеталей;
	
КонецФункции 

Функция НайтиПределыОстатков(СписокНоменклатуры, Производство)
	
	МассивНоменклатуры = СписокНоменклатуры.ВыгрузитьКолонку("Номенклатура"); 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Производство", Производство);	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Номенклатура.НоменклатурнаяГруппа,
	|	СеткаОстатков.Длина,
	|	СеткаОстатков.Ширина
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СеткаОстатков КАК СеткаОстатков
	|		ПО Номенклатура.НоменклатурнаяГруппа = СеткаОстатков.НоменклатурнаяГруппа
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И СеткаОстатков.Использовать
	|	И СеткаОстатков.Подразделение = &Производство";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // 

Процедура РазместитьДеталь(СписокДеталейНоменклатуры, Элемент, ЭлементМассива, ОстатокПоВысоте, ОстатокПоШирине, ГоризонтальныйПил, СмешанныйПил, ТолщинаПила, ПоворотДетали = Ложь)
	
	Если ПоворотДетали Тогда
		ВысотаДеталиБезТекстуры = Элемент.ВысотаДетали;
		Элемент.ВысотаДетали = Элемент.ШиринаДетали;
		Элемент.ШиринаДетали = ВысотаДеталиБезТекстуры;
		Элемент.ПоворотДетали = ?(Элемент.ПоворотДетали, 0, 1);
	КонецЕсли;
	
	//__________Размешение детали на листе__________
	Элемент.КоординатаУ = ЭлементМассива.КоординатаУ;
	Элемент.КоординатаХ = ЭлементМассива.КоординатаХ;
	Элемент.НомерЛиста = ЭлементМассива.НомерЛиста;
	Элемент.Порядок  = 100;
	Элемент.ДетальРазмещена = Истина;
	//Элемент.ПоворотДетали = 0;
	
	//__________Добавление ВСЕХ остатков__________
	ИндексОстатка = СписокДеталейНоменклатуры.Индекс(ЭлементМассива);
	ОстатокПоВысоте = ОстатокПоВысоте - ТолщинаПила;
	ОстатокПоШирине = ОстатокПоШирине - ТолщинаПила;
	ЕстьПакет = Элемент.ПакетДеталей.Количество() > 0;
	ПакетУзких = ЕстьПакет И Элемент.ОсобыйПорядок = "УзкоДлинные";
	//ГоризонтальныйПилОстатка = ГоризонтальныйПил ИЛИ (ЭтоСмешанныйПил И ЭлементМассива.ШиринаДетали < 1200);
	ГоризонтальныйПилОстатка = ГоризонтальныйПил ИЛИ ЭлементМассива.ШиринаДетали < СмешанныйПил;
	
	//Если ГоризонтальныйПилОстатка Тогда
	//	ТекущийСписокДеталей.Сортировать("ДетальРазмещена, Порядок, ВысотаДетали Убыв, ШиринаДетали Убыв");
	//Иначе
	//	ТекущийСписокДеталей.Сортировать("ДетальРазмещена, Порядок, ШиринаДетали Убыв, ВысотаДетали Убыв");	
	//КонецЕсли;
	
	//позиции остаткам////////////////////////////////////////////////////////////
	
	Если ГоризонтальныйПилОстатка И НЕ ПакетУзких Тогда
		
		#Область Остатки_горизонтального_пила
		
		Если ОстатокПоВысоте > 0 Тогда
			НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
			НоваяСтрока.Номенклатура = Элемент.Номенклатура;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.НомерЛиста = ЭлементМассива.НомерЛиста;
			НоваяСтрока.ВысотаДетали = ОстатокПоВысоте;
			НоваяСтрока.ШиринаДетали = ЭлементМассива.ШиринаДетали;
			НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
			НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
			НоваяСтрока.КоординатаУ = Элемент.КоординатаУ + Элемент.ВысотаДетали + ТолщинаПила;
			НоваяСтрока.КоординатаХ = Элемент.КоординатаХ;
			НоваяСтрока.Остаток = Истина;
		КонецЕсли;
		
		Если ОстатокПоШирине > 0 Тогда	
			НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
			НоваяСтрока.Номенклатура = Элемент.Номенклатура;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.НомерЛиста = ЭлементМассива.НомерЛиста;
			НоваяСтрока.ВысотаДетали = Элемент.ВысотаДетали;
			НоваяСтрока.ШиринаДетали = ОстатокПоШирине;
			НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
			НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
			НоваяСтрока.КоординатаУ = Элемент.КоординатаУ;
			НоваяСтрока.КоординатаХ = Элемент.КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила;
			НоваяСтрока.Остаток = Истина;
		КонецЕсли;
		#КонецОбласти
		
	Иначе
		
		#Область Остатки_вериткального_пила
		
		Если ОстатокПоШирине > 0 Тогда
			НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
			НоваяСтрока.Номенклатура = Элемент.Номенклатура;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.НомерЛиста = ЭлементМассива.НомерЛиста;
			НоваяСтрока.ВысотаДетали = ЭлементМассива.ВысотаДетали;
			НоваяСтрока.ШиринаДетали = ОстатокПоШирине;
			НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
			НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
			НоваяСтрока.КоординатаУ = Элемент.КоординатаУ;
			НоваяСтрока.КоординатаХ = Элемент.КоординатаХ + Элемент.ШиринаДетали + ТолщинаПила;
			НоваяСтрока.Остаток = Истина;
		КонецЕсли;
		
		Если ОстатокПоВысоте > 0 Тогда
			НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексОстатка);
			НоваяСтрока.Номенклатура = Элемент.Номенклатура;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.НомерЛиста = ЭлементМассива.НомерЛиста;
			НоваяСтрока.ВысотаДетали = ОстатокПоВысоте;
			НоваяСтрока.ШиринаДетали = Элемент.ШиринаДетали;
			НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
			НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
			НоваяСтрока.КоординатаУ = Элемент.КоординатаУ + Элемент.ВысотаДетали + ТолщинаПила;
			НоваяСтрока.КоординатаХ = Элемент.КоординатаХ;
			НоваяСтрока.Остаток = Истина;
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	
	Если ЕстьПакет Тогда
		
		ИндексПакета = СписокДеталейНоменклатуры.Индекс(Элемент);
		
		Для Каждого ЭлементПакета Из Элемент.ПакетДеталей Цикл
			
			ЭтоОстаток = ЭлементПакета.Остаток;
			
			Если ЭтоОстаток Тогда
				ИндексВставки = ИндексОстатка;
			Иначе
				ИндексВставки = ИндексПакета;
			КонецЕсли;
			
			НоваяСтрока = СписокДеталейНоменклатуры.Вставить(ИндексВставки);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементПакета);
			
			Если ЭлементПакета.ОсобыйПорядок = "УзкоДлинные" Тогда	
				
				НоваяСтрока.КоординатаУ = ?(ЭтоОстаток, ЭлементПакета.КоординатаУ + Элемент.КоординатаУ, Элемент.КоординатаУ);
				НоваяСтрока.КоординатаХ = ЭлементПакета.КоординатаХ + Элемент.КоординатаХ;
				
			ИначеЕсли ЭлементПакета.ОсобыйПорядок = "Фасад" Тогда
				
				НоваяСтрока.КоординатаУ = Элемент.КоординатаУ + ЭлементПакета.КоординатаУ;
				НоваяСтрока.КоординатаХ = Элемент.КоординатаХ + ЭлементПакета.КоординатаХ;
				
			Иначе
				
				НоваяСтрока.КоординатаУ = Элемент.КоординатаУ + ЭлементПакета.КоординатаУ;
				НоваяСтрока.КоординатаХ = Элемент.КоординатаХ + ЭлементПакета.КоординатаХ;
				
			КонецЕсли;
			
			НоваяСтрока.НомерЛиста = ЭлементМассива.НомерЛиста;
			НоваяСтрока.ВысотаЛиста = Элемент.ВысотаЛиста;
			НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
			НоваяСтрока.ДетальРазмещена = Истина;
		КонецЦикла;
		
		СписокДеталейНоменклатуры.Удалить(Элемент);
		
	КонецЕсли;
	
	СписокДеталейНоменклатуры.Удалить(ЭлементМассива);
	
КонецПроцедуры

//Алгоритмы оптимальных остатков
//	1 - Остатки как есть
//	2 - Находим макс. горизонтальную полосу пила, все что выше остаток
//	3 - Объединяем маленькие остатки в больший(принципы объединения???)				
Функция ОптимизацияОстатков(СписокДеталейНоменклатуры, НомерЛиста, КонечныйНомерЛиста, ТолщинаПила, ПределыОстатков, НоменклатурнаяГруппа, ГоризонтальныйПил)
	
	ПлощадьОстатковПоНоменклатуре = 0;
	СписокДеталейНоменклатуры.Сортировать("НомерЛиста, КоординатаУ Убыв, КоординатаХ Убыв");
	
	Для ТекущийНомерЛиста = КонечныйНомерЛиста + 1 По НомерЛиста Цикл
		
		КоличествоОстатков = 0;
		ПлощадьОстатков = 0;
		СреднийОстаток = 0;
		КоличествоОстатков2 = 1;
		ПлощадьОстатков2 = 0;
		СреднийОстаток2 = 0;
		
		МассивОстатков = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("Остаток, НомерЛиста", Истина, ТекущийНомерЛиста));
		
		Если МассивОстатков.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//_____1_____
		Для Каждого ЭлементМассиваОстатков Из МассивОстатков Цикл
			
			Если ПолезныйОстаток(ПределыОстатков, НоменклатурнаяГруппа, ЭлементМассиваОстатков.ВысотаДетали, ЭлементМассиваОстатков.ШиринаДетали) Тогда
				
				ПлощадьОстатков = ПлощадьОстатков + (ЭлементМассиваОстатков.ВысотаДетали * ЭлементМассиваОстатков.ШиринаДетали);
				КоличествоОстатков = КоличествоОстатков + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СреднийОстаток = ?(КоличествоОстатков > 0, ПлощадьОстатков / КоличествоОстатков, 0);
		
		//_____2_____
		//Если НЕ ГоризонтальныйПил И ПолезныйОстаток(ПределыОстатков, НоменклатурнаяГруппа, МассивОстатков[0].ВысотаДетали, МассивОстатков[0].ШиринаЛиста) 
		//	И МассивОстатков.Количество() > 1 Тогда //высота макс. горизонт. линии пила больше допустимого
		//	
		//	ПлощадьОстатков2 = МассивОстатков[0].ВысотаДетали * МассивОстатков[0].ШиринаЛиста;
		//	МаксЛинияПила = МассивОстатков[0].КоординатаУ;
		//	
		//	Для Каждого ЭлементМассиваОстатков Из МассивОстатков Цикл
		//		
		//		Если ЭлементМассиваОстатков.КоординатаУ < МаксЛинияПила Тогда 
		//			
		//			ВысотаОстатка = МаксЛинияПила - ТолщинаПила - ЭлементМассиваОстатков.КоординатаУ;//Высота получившегося остатка
		//			
		//			Если ПолезныйОстаток(ПределыОстатков, НоменклатурнаяГруппа, ЭлементМассиваОстатков.ВысотаДетали, ЭлементМассиваОстатков.ШиринаДетали) Тогда
		//				
		//				ПлощадьОстатков2 = ПлощадьОстатков2 + (ЭлементМассиваОстатков.ШиринаДетали * ВысотаОстатка);	
		//				КоличествоОстатков2 = КоличествоОстатков2 + 1;
		//				
		//			КонецЕсли;
		//			
		//		КонецЕсли;
		//	КонецЦикла;
		//	
		//	СреднийОстаток2 = ПлощадьОстатков2 / КоличествоОстатков2;
		//	
		//КонецЕсли;
		
		//_____ИтоговыеОстатки_____
		Если СреднийОстаток < СреднийОстаток2 Тогда
			
			//применяем 2-ой алгоритм
			МассивОстатков[0].ШиринаДетали = МассивОстатков[0].ШиринаЛиста;
			МассивОстатков[0].КоординатаХ = 0;
			ПлощадьОстатковПоНоменклатуре = ПлощадьОстатковПоНоменклатуре + ПлощадьОстатков2;
			
		Иначе
			
			ПлощадьОстатковПоНоменклатуре = ПлощадьОстатковПоНоменклатуре + ПлощадьОстатков;
			
		КонецЕсли;
		
		//применение оптимального алгоритма
		Для Каждого ЭлементМассиваОстатков Из МассивОстатков Цикл
			
			//если 2-ой алгоритм, все остатки подгоняем под максимальную линию пила
			//Если СреднийОстаток < СреднийОстаток2 И МассивОстатков[0] <> ЭлементМассиваОстатков Тогда
			//	
			//	ЭлементМассиваОстатков.ВысотаДетали = МаксЛинияПила - ТолщинаПила - ЭлементМассиваОстатков.КоординатаУ;
			//	
			//КонецЕсли;
			
			//удаление маленьких остатков
			Если НЕ ПолезныйОстаток(ПределыОстатков, НоменклатурнаяГруппа, ЭлементМассиваОстатков.ВысотаДетали, ЭлементМассиваОстатков.ШиринаДетали) Тогда
				
				СписокДеталейНоменклатуры.Удалить(ЭлементМассиваОстатков);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	                      
	
	Структура = Новый Структура;
	Структура.Вставить("ПлощадьОстатковПоНоменклатуре", ПлощадьОстатковПоНоменклатуре);
	Структура.Вставить("СписокДеталейНоменклатуры", СписокДеталейНоменклатуры);
	
	Возврат Структура;
	
КонецФункции

Функция ПолезныйОстаток(ПределыОстатков, НоменклатурнаяГруппа, ВысотаОстатка, ШиринаОстатка)
	
	ПределДлина = ВысотаОстатка - (ВысотаОстатка % 100);
	ПределШирина = ШиринаОстатка - (ШиринаОстатка % 100);
	
	Возврат ПределыОстатков.НайтиСтроки(Новый Структура("НоменклатурнаяГруппа, Длина, Ширина", НоменклатурнаяГруппа, ПределДлина, ПределШирина)).Количество() > 0;
	
КонецФункции

Функция ФормированиеСтрокиРаскроя(СтрокаРаскроя, ТаблицаДеталей, СсылкаДокумента, Производство, ЭтоСпецификация, ЭтоНаряд)
	
	КомментарийДокумента = "";
	
	Если ЭтоСпецификация Тогда
		
		Срочность = ?(СсылкаДокумента.Срочный, " СРОЧНЫЙ", "");
		//Строка(СсылкаДокумента.Номер);
		КомментарийДокумента = СсылкаДокумента.Комментарий;
		ВидДокумента = "Спец.";
		Контрагент = СсылкаДокумента.Контрагент;
		
	ИначеЕсли ЭтоНаряд Тогда
		
		ВидДокумента = "Наряд"
		
	КонецЕсли;
	
	# Область Запрос_Выбор_частых_кромок_на_листе
	ЗапросНаКромки = Новый Запрос;
	ЗапросНаКромки.УстановитьПараметр("ТаблицаДеталей", ТаблицаДеталей);
	ЗапросНаКромки.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДеталей.НомерЛиста,
	|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСверху КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСверху,
	|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСнизу КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСнизу,
	|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСлева КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСлева,
	|	ВЫРАЗИТЬ(ТаблицаДеталей.ВыборМебельнойКромкиСправа КАК Справочник.Номенклатура) КАК ВыборМебельнойКромкиСправа
	|ПОМЕСТИТЬ ВТ_Кромки
	|ИЗ
	|	&ТаблицаДеталей КАК ТаблицаДеталей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Кромки.НомерЛиста КАК НомерЛиста,
	|	ВТ_Кромки.ВыборМебельнойКромкиСверху КАК Кромка,
	|	ВТ_Кромки.ВыборМебельнойКромкиСверху.НоменклатурнаяГруппа КАК Группа,
	|	1 КАК Количество
	|ИЗ
	|	ВТ_Кромки КАК ВТ_Кромки
	|ГДЕ
	|	ВТ_Кромки.ВыборМебельнойКромкиСверху <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Кромки.НомерЛиста,
	|	ВТ_Кромки.ВыборМебельнойКромкиСнизу,
	|	ВТ_Кромки.ВыборМебельнойКромкиСнизу.НоменклатурнаяГруппа,
	|	1
	|ИЗ
	|	ВТ_Кромки КАК ВТ_Кромки
	|ГДЕ
	|	ВТ_Кромки.ВыборМебельнойКромкиСнизу <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Кромки.НомерЛиста,
	|	ВТ_Кромки.ВыборМебельнойКромкиСлева,
	|	ВТ_Кромки.ВыборМебельнойКромкиСлева.НоменклатурнаяГруппа,
	|	1
	|ИЗ
	|	ВТ_Кромки КАК ВТ_Кромки
	|ГДЕ
	|	ВТ_Кромки.ВыборМебельнойКромкиСлева <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Кромки.НомерЛиста,
	|	ВТ_Кромки.ВыборМебельнойКромкиСправа,
	|	ВТ_Кромки.ВыборМебельнойКромкиСправа.НоменклатурнаяГруппа,
	|	1
	|ИЗ
	|	ВТ_Кромки КАК ВТ_Кромки
	|ГДЕ
	|	ВТ_Кромки.ВыборМебельнойКромкиСправа <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	НомерЛиста,
	|	Группа,
	|	Кромка";
	#КонецОбласти
	
	ВыборкаВсеКромки = ЗапросНаКромки.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВсеКромки.Следующий() Цикл
		
		//Выбор первой строки с данного листа, в него добавим частые кромки
		СтрокаЛиста = ТаблицаДеталей.НайтиСтроки(Новый Структура("НомерЛиста", ВыборкаВсеКромки.НомерЛиста))[0];
		
		ВыборкаКромкиПоЛистам = ВыборкаВсеКромки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКромкиПоЛистам.Следующий() Цикл
			
			ВыборкаКромки = ВыборкаКромкиПоЛистам.Выбрать();
			ВыборкаКромки.Следующий();
			
			//Заполним 4 самые частые кромки разных типов
			Если НЕ ЗначениеЗаполнено(СтрокаЛиста.Кромка1) Тогда
				СтрокаЛиста.Кромка1 = ВыборкаКромки.Кромка;
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЛиста.Кромка2) Тогда
				СтрокаЛиста.Кромка2 = ВыборкаКромки.Кромка;
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЛиста.Кромка3) Тогда
				СтрокаЛиста.Кромка3 = ВыборкаКромки.Кромка;
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЛиста.Кромка4) Тогда
				СтрокаЛиста.Кромка4 = ВыборкаКромки.Кромка;
			КонецЕсли;
			
			ВыборкаКромки.Сбросить();
			
		КонецЦикла;
		
	КонецЦикла;
	
	# Область Запрос_группировка_деталей_для_строки_раскроя
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДеталей", ТаблицаДеталей);
	Запрос.УстановитьПараметр("Подразделение", Производство);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДеталей.НомерСтроки,
	|	ТаблицаДеталей.Материал,
	|	ТаблицаДеталей.ИД,
	|	ТаблицаДеталей.Номенклатура,
	|	ТаблицаДеталей.ВысотаДетали,
	|	ТаблицаДеталей.ШиринаДетали,
	|	ТаблицаДеталей.Количество,
	|	ТаблицаДеталей.Идентификатор,
	|	ТаблицаДеталей.НоменклатураДляСклеивания,
	|	ТаблицаДеталей.НомерИзделия,
	|	ТаблицаДеталей.СоблюдениеТекстуры,
	|	ТаблицаДеталей.НеТорцевать,
	|	ТаблицаДеталей.СтруктураОтверстий,
	|	ТаблицаДеталей.Комментарий,
	|	ТаблицаДеталей.РадиусЛевоВерх,
	|	ТаблицаДеталей.РадиусЛевоНиз,
	|	ТаблицаДеталей.РадиусПравоВерх,
	|	ТаблицаДеталей.РадиусПравоНиз,
	|	ТаблицаДеталей.Срез,
	|	ТаблицаДеталей.РадиусФасада,
	|	ТаблицаДеталей.КривойПилСверху,
	|	ТаблицаДеталей.КривойПилСлева,
	|	ТаблицаДеталей.КривойПилСнизу,
	|	ТаблицаДеталей.КривойПилСправа,
	|	ТаблицаДеталей.ДетальДляСклеивания,
	|	ТаблицаДеталей.Обтачивать,
	|	ТаблицаДеталей.КоличествоПетель,
	|	ТаблицаДеталей.РасположениеПазов,
	|	ТаблицаДеталей.РасположениеПазовИРучкиНаФасадах,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСверху,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСлева,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСнизу,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСправа,
	|	ТаблицаДеталей.ПереключательКромкаСверху,
	|	ТаблицаДеталей.ПереключательКромкаСлева,
	|	ТаблицаДеталей.ПереключательКромкаСнизу,
	|	ТаблицаДеталей.ПереключательКромкаСправа,
	|	ТаблицаДеталей.ШиринаЛиста,
	|	ТаблицаДеталей.ВысотаЛиста,
	|	ТаблицаДеталей.НомерЛиста,
	|	ТаблицаДеталей.КоординатаХ,
	|	ТаблицаДеталей.КоординатаУ,
	|	ТаблицаДеталей.ПоворотДетали,
	|	ТаблицаДеталей.Порядок,
	|	ТаблицаДеталей.ОсобыйПорядок,
	|	ТаблицаДеталей.Кромка1,
	|	ТаблицаДеталей.Кромка2,
	|	ТаблицаДеталей.Кромка3,
	|	ТаблицаДеталей.Кромка4,
	|	ТаблицаДеталей.ЭтоЯщик,
	|	ТаблицаДеталей.ЭтоДверь,
	|	ТаблицаДеталей.ДетальВПакете,
	|	ТаблицаДеталей.Остаток
	|ПОМЕСТИТЬ ТаблицаДеталей
	|ИЗ
	|	&ТаблицаДеталей КАК ТаблицаДеталей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДеталей.НомерСтроки,
	|	ТаблицаДеталей.Материал,
	|	ТаблицаДеталей.ИД,
	|	ТаблицаДеталей.Номенклатура КАК Номенклатура,
	|	ТаблицаДеталей.ВысотаДетали,
	|	ТаблицаДеталей.ШиринаДетали,
	|	ТаблицаДеталей.Количество,
	|	ТаблицаДеталей.Идентификатор,
	|	ТаблицаДеталей.ДетальВПакете,
	|	ТаблицаДеталей.НоменклатураДляСклеивания,
	|	ТаблицаДеталей.НомерИзделия,
	|	ТаблицаДеталей.СоблюдениеТекстуры,
	|	ТаблицаДеталей.НеТорцевать,
	|	ТаблицаДеталей.СтруктураОтверстий,
	|	ТаблицаДеталей.Комментарий,
	|	ТаблицаДеталей.РадиусЛевоВерх,
	|	ТаблицаДеталей.РадиусЛевоНиз,
	|	ТаблицаДеталей.РадиусПравоВерх,
	|	ТаблицаДеталей.РадиусПравоНиз,
	|	ТаблицаДеталей.ДетальДляСклеивания,
	|	ТаблицаДеталей.Срез,
	|	ТаблицаДеталей.РадиусФасада,
	|	ТаблицаДеталей.КривойПилСверху,
	|	ТаблицаДеталей.КривойПилСлева,
	|	ТаблицаДеталей.КривойПилСнизу,
	|	ТаблицаДеталей.КривойПилСправа,
	|	ТаблицаДеталей.Обтачивать,
	|	ТаблицаДеталей.КоличествоПетель,
	|	ТаблицаДеталей.РасположениеПазов,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСверху,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСлева,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСнизу,
	|	ТаблицаДеталей.ВыборМебельнойКромкиСправа,
	|	ТаблицаДеталей.ПереключательКромкаСверху,
	|	ТаблицаДеталей.ПереключательКромкаСлева,
	|	ТаблицаДеталей.ПереключательКромкаСнизу,
	|	ТаблицаДеталей.ПереключательКромкаСправа,
	|	ТаблицаДеталей.ШиринаЛиста КАК ШиринаЛиста,
	|	ТаблицаДеталей.ВысотаЛиста КАК ВысотаЛиста,
	|	ТаблицаДеталей.НомерЛиста КАК НомерЛиста,
	|	ТаблицаДеталей.КоординатаХ,
	|	ТаблицаДеталей.КоординатаУ,
	|	ТаблицаДеталей.ПоворотДетали,
	|	ТаблицаДеталей.Порядок,
	|	ТаблицаДеталей.ОсобыйПорядок,
	|	ТаблицаДеталей.Кромка1 КАК Кромка1,
	|	ТаблицаДеталей.Кромка2 КАК Кромка2,
	|	ТаблицаДеталей.Кромка3 КАК Кромка3,
	|	ТаблицаДеталей.Кромка4 КАК Кромка4,
	|	ТаблицаДеталей.ЭтоЯщик,
	|	ТаблицаДеталей.ЭтоДверь,
	|	ТаблицаДеталей.Остаток,
	|	ТаблицаДеталей.РасположениеПазовИРучкиНаФасадах,
	|	НоменклатураПодразделений.ПодЗаказ КАК ПодЗаказ,
	|	ВЫРАЗИТЬ(ТаблицаДеталей.Номенклатура КАК Справочник.Номенклатура).НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	ТаблицаДеталей КАК ТаблицаДеталей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
	|		ПО ТаблицаДеталей.Номенклатура = НоменклатураПодразделений.Номенклатура
	|ГДЕ
	|	НоменклатураПодразделений.Подразделение = &Подразделение
	|ИТОГИ
	|	МАКСИМУМ(Номенклатура),
	|	МАКСИМУМ(НоменклатурнаяГруппа),
	|	МАКСИМУМ(ШиринаЛиста),
	|	МАКСИМУМ(ВысотаЛиста),
	|	МАКСИМУМ(Кромка1),
	|	МАКСИМУМ(Кромка2),
	|	МАКСИМУМ(Кромка3),
	|	МАКСИМУМ(Кромка4),
	|	МАКСИМУМ(ПодЗаказ)
	|ПО
	|	НомерЛиста";
	
	Если ТаблицаДеталей.Колонки.Найти("РасположениеПазовИРучкиНаФасадах") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДеталей.РасположениеПазовИРучкиНаФасадах,", "");
	КонецЕсли;
	
	#КонецОбласти
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СсылкаДокумента.Номер);
	
	Пока Выборка.Следующий() Цикл
		
		НоменклатураПодЗаказ = ?(ЭтоСпецификация И Выборка.ПодЗаказ И СсылкаДокумента.Дилерский, " (Вернуть остатки) ","");
		
		//Формирование строки раскроя
		СтрокаРаскроя = СтрокаРаскроя 
		+ Выборка.Номенклатура + "☺"
		+ Выборка.Кромка1 + "☺"
		+ Выборка.Кромка1.КраткоеНаименование + "☺"
		+ Выборка.Кромка2 + "☺"
		+ Выборка.Кромка2.КраткоеНаименование + "☺"
		+ Выборка.Кромка3 + "☺"
		+ Выборка.Кромка3.КраткоеНаименование + "☺"
		+ Выборка.Кромка4 + "☺"
		+ Выборка.Кромка4.КраткоеНаименование + "☺"
		+ Выборка.ШиринаЛиста + "☺"
		+ Выборка.ВысотаЛиста + "☺"
		+ ?(ЗначениеЗаполнено(СсылкаДокумента.Ссылка), СсылкаДокумента, "") + "☺"
		+ ВидДокумента + " № " + НомерНаПечать + НоменклатураПодЗаказ + "☺"
		+ "<b>" + КомментарийДокумента + "</b>" + "☺" 
		+ Контрагент + "☺"
		+ Выборка.НоменклатурнаяГруппа + "☻";
		
		ВыборкаПоДеталям = Выборка.Выбрать();
		Пока ВыборкаПоДеталям.Следующий() Цикл
			
			Номенклатура = ?(ВыборкаПоДеталям.Остаток, ?(ЗначениеЗаполнено(НоменклатураПодЗаказ), "2", "1"), "");
			
			ПравыйНижнийРадиус = ВыборкаПоДеталям.РадиусПравоНиз;
			Если ВыборкаПоДеталям.Срез И ПравыйНижнийРадиус > 0 Тогда	
				ПравыйНижнийРадиус = Строка(ВыборкаПоДеталям.РадиусПравоНиз) + "_1";				
			КонецЕсли;
			
			//КантПоМесту = Ложь;
			Комментарий = ВыборкаПоДеталям.Комментарий; 
			Если ВыборкаПоДеталям.ПереключательКромкаСверху = "По месту" ИЛИ ВыборкаПоДеталям.ПереключательКромкаСнизу = "По месту" 
				ИЛИ ВыборкаПоДеталям.ПереключательКромкаСлева = "По месту" ИЛИ ВыборкаПоДеталям.ПереключательКромкаСправа = "По месту" Тогда
				Комментарий = Комментарий + " кант по месту";
				//КантПоМесту = Истина;		
			КонецЕсли;
			
			СтруктураНадписи = Новый Структура;
			СтруктураНадписи.Вставить("ПереключательКромкаСверху", ВыборкаПоДеталям.ПереключательКромкаСверху);
			СтруктураНадписи.Вставить("ПереключательКромкаСнизу", ВыборкаПоДеталям.ПереключательКромкаСнизу);
			СтруктураНадписи.Вставить("ПереключательКромкаСлева", ВыборкаПоДеталям.ПереключательКромкаСлева);
			СтруктураНадписи.Вставить("ПереключательКромкаСправа", ВыборкаПоДеталям.ПереключательКромкаСправа);
			СтруктураНадписи.Вставить("НомерСтроки", ВыборкаПоДеталям.НомерСтроки);
			СтруктураНадписи.Вставить("НомерИзделия", ВыборкаПоДеталям.НомерИзделия);
			СтруктураНадписи.Вставить("ЭтоЯщик", ВыборкаПоДеталям.ЭтоЯщик);
			СтруктураНадписи.Вставить("ЭтоДверь", ВыборкаПоДеталям.ЭтоДверь);
			СтруктураНадписи.Вставить("Идентификатор", ВыборкаПоДеталям.Идентификатор);
			СтруктураНадписи.Вставить("ДетальВПакете", ВыборкаПоДеталям.ДетальВПакете);
			СтруктураНадписи.Вставить("ОсобыйПорядок", ВыборкаПоДеталям.ОсобыйПорядок);
			СтруктураНадписи.Вставить("Обтачивать", ВыборкаПоДеталям.Обтачивать);
			СтруктураНадписи.Вставить("Материал", ВыборкаПоДеталям.Материал);
			СтруктураНадписи.Вставить("РадиусФасада", ВыборкаПоДеталям.РадиусФасада);
			СтруктураНадписи.Вставить("ДетальДляСклеивания", ВыборкаПоДеталям.ДетальДляСклеивания);
			СтруктураНадписи.Вставить("НеТорцевать", ВыборкаПоДеталям.НеТорцевать);
			
			Надпись = ПолучитьНадпись(СтруктураНадписи);
			
			//СтрокаИдентификатор = Строка(ВыборкаПоДеталям.НомерСтроки) 
			//+ ?(ЗначениеЗаполнено(ВыборкаПоДеталям.НомерИзделия), "/" + ВыборкаПоДеталям.НомерИзделия, "") 
			//+ ?(ВыборкаПоДеталям.ЭтоЯщик, " ящ.", ?(ВыборкаПоДеталям.ЭтоДверь, " двр.", ?(ЗначениеЗаполнено(ВыборкаПоДеталям.Идентификатор), "/" + ВыборкаПоДеталям.Идентификатор, "")))
			//+ ?(ВыборкаПоДеталям.ДетальВПакете, " (пак" + ВыборкаПоДеталям.НомерИзделия + ")", ""); 
			
			//Надпись = ?(КантПоМесту, "Кант по месту. ", "");
			
			//Если ВыборкаПоДеталям.Обтачивать И ВыборкаПоДеталям.Материал = "Столешница" Тогда	
			//	Надпись = Надпись + "Ст (Скр)";
			//ИначеЕсли ВыборкаПоДеталям.Обтачивать И (ВыборкаПоДеталям.Материал = "Стекло" ИЛИ ВыборкаПоДеталям.Материал = "ФасадСтеклянный") Тогда
			//	Надпись = Надпись + "Обтачивать";
			//ИначеЕсли НЕ ВыборкаПоДеталям.Обтачивать И (ВыборкаПоДеталям.Материал = "Стекло" ИЛИ ВыборкаПоДеталям.Материал = "ФасадСтеклянный") Тогда
			//	Надпись = Надпись + "Без обточки";
			//ИначеЕсли ВыборкаПоДеталям.Материал = "ФасадСтеклянныйЗакругленный" Тогда
			//	Надпись = Надпись + СтрокаИдентификатор + "Скр. " + ВыборкаПоДеталям.РадиусФасада;	
			//Иначе				
			//	Надпись = Надпись + СтрокаИдентификатор;
			//КонецЕсли;
			
			//Надпись = ?(ВыборкаПоДеталям.ДетальДляСклеивания, Надпись + " скл ", Надпись);
			
			НеТорцевать = "";
			Если ВыборкаПоДеталям.НеТорцевать Тогда
				//Надпись = Надпись + ", НЕ ТОРЦЕВАТЬ ПО ДЛИНЕ";
				НеТорцевать = "1";
			КонецЕсли;
			
			СтрокаОтверстий = "";
			
			ЕвропазСверху 	= 0;
			ЕвропазСнизу 	= 0;
			ЕвропазСлева 	= 0;
			ЕвропазСправа 	= 0;
			
			/////////////////////////////Петли/////////////////
			КоличествоПетель = ВыборкаПоДеталям.КоличествоПетель;
			
			Если КоличествоПетель > 0 И (ВыборкаПоДеталям.Материал = "ФасадЛДСП" ИЛИ ВыборкаПоДеталям.Материал = "ФасадМДФ" ИЛИ ВыборкаПоДеталям.Материал = "ФасадСтеклянный") Тогда
				
				Стороны = Перечисления.Стороны;
				
				СтроронаРасположениеПазов = ВыборкаПоДеталям.РасположениеПазовИРучкиНаФасадах.ПоложениеПазов;
				РазмерСтороны = 0;
				
				Если СтроронаРасположениеПазов = Стороны.Слева Тогда
					
					Сторона = "3";
					РазмерСтороны = ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали);
					
				ИначеЕсли СтроронаРасположениеПазов = Стороны.Справа Тогда
					
					Сторона = "4";
					РазмерСтороны = ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали);
					
				ИначеЕсли СтроронаРасположениеПазов = Стороны.Сверху Тогда
					
					Сторона = "1";
					РазмерСтороны = ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ШиринаДетали);
					
				ИначеЕсли СтроронаРасположениеПазов = Стороны.Снизу Тогда
					
					Сторона = "2";
					РазмерСтороны = ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ШиринаДетали);
					
				КонецЕсли;
				
				Отступ = ВернутьОтступ(РазмерСтороны);
				
				Если КоличествоПетель < 2 Тогда
					
					КоличествоПетель = 2;
					
				КонецЕсли;
				
				Шаг = Окр((РазмерСтороны - 2 * Отступ) / (КоличествоПетель - 1) , 0);
				
				СтрокаОтверстий = "3_"+ Сторона + "_" + КоличествоПетель + "_" + Отступ + "_" + Шаг + "_0#";
				
			КонецЕсли;
			
			////////////////////////////////////////////////////
			
			Если ЗначениеЗаполнено(ВыборкаПоДеталям.СтруктураОтверстий) Тогда
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоДеталям.Идентификатор) Тогда
					СтрокаОтверстийСтруктуры = ЛексСервер.ЗаполнитьРеквизитОтверстиями(СтрокаОтверстий, ВыборкаПоДеталям.СтруктураОтверстий, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ПоворотДетали);
					СтрокаОтверстий = ?(ЗначениеЗаполнено(СтрокаОтверстийСтруктуры), СтрокаОтверстийСтруктуры, СтрокаОтверстий);
				КонецЕсли;
				СтруктураЕвропазов = ЛексСервер.ПолучитьСтруктуруЕвропазов(ВыборкаПоДеталям.СтруктураОтверстий);
				ЕвропазСверху = СтруктураЕвропазов.Сверху;
				ЕвропазСнизу = СтруктураЕвропазов.Снизу;
				ЕвропазСлева = СтруктураЕвропазов.Слева;
				ЕвропазСправа = СтруктураЕвропазов.Справа;
			КонецЕсли;
			
			СтрокаРаскроя = СтрокаРаскроя
			+ Номенклатура + "☺" // 1 - Номенклатура
			+ ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ШиринаДетали, ВыборкаПоДеталям.ВысотаДетали) + "☺" //2 - Высота детали
			+ ?(ВыборкаПоДеталям.ПоворотДетали, ВыборкаПоДеталям.ВысотаДетали, ВыборкаПоДеталям.ШиринаДетали) + "☺" //3 - Ширина детали
			+ ВыборкаПоДеталям.РадиусЛевоВерх + "☺" //4
			+ ВыборкаПоДеталям.РадиусПравоВерх + "☺" //5
			+ ПравыйНижнийРадиус + "☺" //6
			+ ВыборкаПоДеталям.РадиусЛевоНиз + "☺" //7
			+ ВыборкаПоДеталям.КривойПилСверху + "☺" //8
			+ ВыборкаПоДеталям.КривойПилСнизу + "☺" //9
			+ ВыборкаПоДеталям.КривойПилСлева + "☺" //10
			+ ВыборкаПоДеталям.КривойПилСправа + "☺" //11
			+ "" + "☺" //12 (Эксц) если 1 - два в круге крестик(рисунок) сверху
			+ "" + "☺" //13 (Эксц) если 1 - два в круге крестик(рисунок) снизу
			+ "" + "☺" //14 (Эксц) если 1 - два в круге крестик(рисунок) слева
			+ "" + "☺" //15 (Эксц) если 1 - два в круге крестик(рисунок) справа
			+ Комментарий + "☺" //16 - Комментарий
			+ Надпись + "☺" //17
			+ ВыборкаПоДеталям.ВыборМебельнойКромкиСверху.КраткоеНаименование + "☺" //18
			+ ВыборкаПоДеталям.ВыборМебельнойКромкиСнизу.КраткоеНаименование + "☺" //19
			+ ВыборкаПоДеталям.ВыборМебельнойКромкиСлева.КраткоеНаименование + "☺" //20
			+ ВыборкаПоДеталям.ВыборМебельнойКромкиСправа.КраткоеНаименование + "☺" //21
			+ "" + "☺" //22 если 1 - две капельки(рисунок) сверху
			+ "" + "☺" //23 если 1 - две капельки(рисунок) снизу
			+ "" + "☺" //24 если 1 - две капельки(рисунок) слева
			+ "" + "☺" //25 если 1 - две капельки(рисунок) справа
			+ СтрокаОтверстий + "☺" //26
			+ ЕвропазСверху + "☺" //27
			+ ЕвропазСнизу + "☺" //28
			+ ЕвропазСлева + "☺" //29
			+ ЕвропазСправа + "☺" //30
			+ НеТорцевать + "☺" //31
			+ ВыборкаПоДеталям.КоординатаУ + "☺" //32 - координата по У
			+ ВыборкаПоДеталям.КоординатаХ + "☺" //33 - координата по Х
			+ ВыборкаПоДеталям.ПоворотДетали + "☺" //34 - признак поворота детали 
			+ ВыборкаПоДеталям.ИД + "☺☻" //35 - ИД детали + конец детали
			
		КонецЦикла;
		
		СтрокаРаскроя = СтрокаРаскроя + "♦"; //КонецЛиста
		
	КонецЦикла;
	
	Возврат СтрокаРаскроя;
	
КонецФункции // ФормированиеСтрокиРаскроя()

// для формирования строки в раскрой
Функция ВернутьОтступ(Размер)
	
	Если ТипЗнч(Размер) <> Тип("Число") Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Размер > 1800 Тогда Отступ = 150;
	ИначеЕсли Размер > 900 Тогда Отступ = 120;
	ИначеЕсли Размер > 600 Тогда Отступ = 70;
	ИначеЕсли Размер > 300 Тогда Отступ = 64;
	ИначеЕсли Размер > 200 Тогда Отступ = 50;
	Иначе Отступ = 45;
	КонецЕсли;
	
	Возврат Отступ;
	
КонецФункции

Процедура ФормированиеПакетаУзкоДлинные(СписокДеталейНоменклатуры, Знач ОсобыйПорядок, Знач ВысотаЛиста, Знач ШиринаЛиста, ТолщинаПила, Номенклатура, ЭтоМДФ)
	
	ПараметрыОтбора = Новый Структура("ОсобыйПорядок", ОсобыйПорядок);
	ТаблицаОсобых = СписокДеталейНоменклатуры.Скопировать(ПараметрыОтбора);
	
	Если ТаблицаОсобых.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// { Васильев Александр Леонидович [06.02.2015]
	// Не понимаю почему разные алгоритмы для МДФ и остального,
	// но при использовании пакетов с нетекстурированным материалом
	// на раскрое появляется ёбаный пиздец, и найти ошибоку нет ресурсов. :(
	// } Васильев Александр Леонидович [06.02.2015]
	
	Если ЭтоМДФ Тогда
		
		НомерЛиста = 1;
		
		ТаблицаОсобых.Сортировать("ВысотаДетали Убыв");
		
		ШиринаМакс = 0;
		ВысотаМакс = ВысотаЛиста;
		
		Для Каждого Элемент Из ТаблицаОсобых Цикл
			
			Если Элемент.Остаток Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяШирина = ШиринаМакс + Элемент.ШиринаДетали;
			
			Если НоваяШирина <= ШиринаЛиста Тогда
				
				Элемент.ШиринаЛиста = НоваяШирина;
				Элемент.КоординатаХ = ШиринаМакс;
				
				ВысотаОтстатка = ВысотаМакс - ТолщинаПила - Элемент.ВысотаДетали;
				
				Если ВысотаОтстатка > 0 Тогда
					НоваяСтрока = ТаблицаОсобых.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура;
					НоваяСтрока.НомерЛиста = НомерЛиста;	
					НоваяСтрока.ВысотаДетали = ВысотаМакс - ТолщинаПила - Элемент.ВысотаДетали;
					НоваяСтрока.ШиринаДетали = Элемент.ШиринаДетали; 
					НоваяСтрока.ВысотаЛиста = ВысотаМакс;
					НоваяСтрока.ШиринаЛиста = Элемент.ШиринаЛиста;
					НоваяСтрока.КоординатаУ = ТолщинаПила + Элемент.ВысотаДетали;
					НоваяСтрока.КоординатаХ = ШиринаМакс;
					НоваяСтрока.Остаток = Истина;
					НоваяСтрока.Количество = 1;
				КонецЕсли;
				
				ШиринаМакс = НоваяШирина + ТолщинаПила;
				
			Иначе
				
				НомерЛиста = НомерЛиста + 1;
				//ВысотаМакс = Элемент.ВысотаДетали;
				ШиринаМакс = Элемент.ШиринаДетали;
				
				Элемент.ШиринаЛиста = ШиринаМакс;
				Элемент.КоординатаХ = 0;
				
			КонецЕсли;
			
			Элемент.НомерЛиста = НомерЛиста;
			Элемент.ВысотаЛиста = ВысотаМакс;
			Элемент.ДетальВПакете = Истина;
			
		КонецЦикла;	
		
		МассивОсобых = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("ОсобыйПорядок", ОсобыйПорядок));
		
		Для Каждого ЭлементОсобых Из МассивОсобых Цикл
			
			СписокДеталейНоменклатуры.Удалить(ЭлементОсобых);
			
		КонецЦикла;
		
		Для ТекущийНомерЛиста = 1 По НомерЛиста Цикл
			
			ДеталиНаЛисте = ТаблицаОсобых.НайтиСтроки(Новый Структура("НомерЛиста", ТекущийНомерЛиста));
			ИндексПоследней = ДеталиНаЛисте.Количество() - 1;
			
			ПоследняяДеталь = ДеталиНаЛисте[ДеталиНаЛисте.Количество() - 1];
			
			НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоследняяДеталь);
			
			НоваяСтрока.ВысотаДетали = ПоследняяДеталь.ВысотаЛиста;
			НоваяСтрока.ШиринаДетали = ПоследняяДеталь.ШиринаЛиста;
			НоваяСтрока.ВысотаЛиста = ВысотаЛиста;
			НоваяСтрока.ШиринаЛиста = ШиринаЛиста;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.КоординатаУ = 0;
			НоваяСтрока.КоординатаХ = 0;
			НоваяСтрока.ПакетДеталей = ДеталиНаЛисте;
			НоваяСтрока.Порядок = 1;
			НоваяСтрока.СоблюдениеТекстуры = Номенклатура.НаличиеТекстуры;
			НоваяСтрока.ОсобыйПорядок = ОсобыйПорядок;
			НоваяСтрока.НомерЛиста = 0;
			НоваяСтрока.Остаток = Ложь;
			
		КонецЦикла;
		
	Иначе // Если ЭтоМДФ Тогда
		
		НомерПакета = 1;
		
		Для Каждого Элемент Из ТаблицаОсобых Цикл
			
			Если Элемент.ДетальВПакете Тогда
				Продолжить;
			КонецЕсли;
			
			МассивВысоких = ТаблицаОсобых.НайтиСтроки(Новый Структура("ВысотаДетали, ДетальВПакете", Элемент.ВысотаДетали, Ложь));
			
			Если МассивВысоких.Количество() > 1 Тогда
				
				КоординатаХ = 0;
				
				Для Каждого ЭлементМассивВысоких Из МассивВысоких Цикл
					
					Если КоординатаХ + ЭлементМассивВысоких.ШиринаДетали < ЭлементМассивВысоких.ШиринаЛиста Тогда
						
						ЭлементМассивВысоких.ДетальВПакете = Истина;
						ЭлементМассивВысоких.КоординатаУ = 0; 
						ЭлементМассивВысоких.КоординатаХ = КоординатаХ;
						ЭлементМассивВысоких.НомерПакета = НомерПакета;
						
						КоординатаХ = КоординатаХ + ЭлементМассивВысоких.ШиринаДетали + ТолщинаПила;
						ПоследняяДетальПакета = ЭлементМассивВысоких;
						
						СписокДеталейНоменклатуры.Найти(ЭлементМассивВысоких.ИД, "ИД").ДетальВПакете = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ДеталиНаЛисте = ТаблицаОсобых.НайтиСтроки(Новый Структура("НомерПакета", НомерПакета));
				
				НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоследняяДетальПакета);
				
				НоваяСтрока.ВысотаДетали = ПоследняяДетальПакета.ВысотаДетали;
				НоваяСтрока.ШиринаДетали = КоординатаХ - ТолщинаПила;
				НоваяСтрока.ВысотаЛиста = ВысотаЛиста;
				НоваяСтрока.ШиринаЛиста = ШиринаЛиста;
				НоваяСтрока.Количество = 1;
				НоваяСтрока.КоординатаУ = 0;
				НоваяСтрока.КоординатаХ = 0;
				НоваяСтрока.ПакетДеталей = ДеталиНаЛисте;
				НоваяСтрока.Порядок = 100;
				НоваяСтрока.СоблюдениеТекстуры = Номенклатура.НаличиеТекстуры;
				НоваяСтрока.ОсобыйПорядок = ОсобыйПорядок;
				НоваяСтрока.НомерЛиста = 0;
				НоваяСтрока.Остаток = Ложь;
				НоваяСтрока.ДетальВПакете = Ложь;
				
				НомерПакета = НомерПакета + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		МассивОсобых = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("ДетальВПакете", Истина));
		
		Для Каждого ЭлементОсобых Из МассивОсобых Цикл
			
			СписокДеталейНоменклатуры.Удалить(ЭлементОсобых);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормированиеПакетаФасадов(Знач СписокДеталейНоменклатуры, Знач ОсобыйПорядок, Знач ВысотаЛиста, Знач ШиринаЛиста, ТолщинаПила, Номенклатура)
	
	ТаблицаОсобых = СписокДеталейНоменклатуры.Скопировать(Новый Структура("ОсобыйПорядок", ОсобыйПорядок));
	
	Если ТаблицаОсобых.Количество() > 0 Тогда
		
		МассивОсобых = СписокДеталейНоменклатуры.НайтиСтроки(Новый Структура("ОсобыйПорядок", ОсобыйПорядок));
		
		Для Каждого ЭлементОсобых Из МассивОсобых Цикл
			
			СписокДеталейНоменклатуры.Удалить(ЭлементОсобых);
			
		КонецЦикла;
		
		ТаблицаОсобых.Сортировать("НомерИзделия Возр, СтрокаРасположениеФасада Убыв, СтолбецРасположениеФасада Убыв");
		НомерИзделия = 0;
		
		Для Каждого Элемент Из ТаблицаОсобых Цикл
			
			Если НомерИзделия <> Элемент.НомерИзделия Тогда
				
				НомерИзделия = Элемент.НомерИзделия;
				КоординатаУ = 0;
				КоординатаХ = 0;
				ШиринаПакета = 0;
				ШиринаСтроки = 0;
				ТекущаяСтрока = 0;
				ВысотаПакета = 0;
				Столбец = 0;
				Стр = 0;
				
				МассивЭлементов = ТаблицаОсобых.НайтиСтроки(Новый Структура("НомерИзделия", НомерИзделия));
				
				Для Каждого ЭлементМассива Из МассивЭлементов Цикл
					
					ЭлементМассива.ДетальВПакете = Истина;
					
					//Если ТекущаяСтрока <> ЭлементМассива.СтрокаРасположениеФасада Тогда
					//	
					//	ТекущаяСтрока = ЭлементМассива.СтрокаРасположениеФасада;
					//	
					//	КоординатаХ = ?(ЗначениеЗаполнено(ШиринаСтроки), ШиринаСтроки + ТолщинаПила, 0);
					//	КоординатаУ = 0;
					//	
					//	ВысотаПакета = КоординатаУ + ЭлементМассива.ВысотаДетали + ТолщинаПила; 
					//	ШиринаСтроки = ЭлементМассива.ШиринаДетали;
					//	
					//	ЭлементМассива.КоординатаУ = КоординатаУ; 
					//	ЭлементМассива.КоординатаХ = КоординатаХ;
					//	
					//Иначе
					//	
					//	//КоординатаХ = ШиринаСтроки + ТолщинаПила;
					//	КоординатаУ = ВысотаПакета;
					//	
					//	ВысотаПакета = КоординатаУ + ЭлементМассива.ВысотаДетали + ТолщинаПила;
					//	ШиринаСтроки = КоординатаХ + ЭлементМассива.ШиринаДетали;
					//	
					//	ЭлементМассива.КоординатаУ = КоординатаУ; 
					//	ЭлементМассива.КоординатаХ = КоординатаХ;	
					//	
					//КонецЕсли;
					
					Если Стр <> Число(ЭлементМассива.СтрокаРасположениеФасада) Тогда
						
						Стр = Число(ЭлементМассива.СтрокаРасположениеФасада);
						
						КоординатаХ = 0;
						КоординатаУ = ВысотаПакета;
						
						ВысотаПакета = КоординатаУ + ЭлементМассива.ВысотаДетали + ТолщинаПила; 
						ШиринаСтроки = ЭлементМассива.ШиринаДетали;
						
						ЭлементМассива.КоординатаУ = КоординатаУ; 
						ЭлементМассива.КоординатаХ = КоординатаХ;
						
					ИначеЕсли Столбец <> Число(ЭлементМассива.СтолбецРасположениеФасада) Тогда
						
						Столбец = Число(ЭлементМассива.СтолбецРасположениеФасада);
						
						КоординатаХ = ШиринаСтроки + ТолщинаПила;
						
						ВысотаПакета = КоординатаУ + ЭлементМассива.ВысотаДетали + ТолщинаПила;
						ШиринаСтроки = КоординатаХ + ЭлементМассива.ШиринаДетали;
						
						ЭлементМассива.КоординатаУ = КоординатаУ; 
						ЭлементМассива.КоординатаХ = КоординатаХ;
						
					КонецЕсли;
					
					ШиринаПакета = Макс(ШиринаПакета, ШиринаСтроки);
					
				КонецЦикла;
				
				НоваяСтрока = СписокДеталейНоменклатуры.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
				
				НоваяСтрока.ВысотаДетали = ВысотаПакета;
				НоваяСтрока.ШиринаДетали = ШиринаПакета;
				
				НоваяСтрока.ВысотаЛиста = ВысотаЛиста;
				НоваяСтрока.ШиринаЛиста = ШиринаЛиста;
				НоваяСтрока.Количество = 1;
				НоваяСтрока.КоординатаУ = 0;
				НоваяСтрока.КоординатаХ = 0;
				НоваяСтрока.ПакетДеталей = МассивЭлементов;
				НоваяСтрока.Порядок = 100;
				НоваяСтрока.СоблюдениеТекстуры = Номенклатура.НаличиеТекстуры;
				НоваяСтрока.ОсобыйПорядок = ОсобыйПорядок;
				НоваяСтрока.НомерЛиста = 0;
				НоваяСтрока.Остаток = Ложь;
				НоваяСтрока.ДетальВПакете = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНадпись(СтруктураНадписи) Экспорт
	
	КантПоМесту = СтруктураНадписи.ПереключательКромкаСверху = "По месту" ИЛИ СтруктураНадписи.ПереключательКромкаСнизу = "По месту" 
	ИЛИ СтруктураНадписи.ПереключательКромкаСлева = "По месту" ИЛИ СтруктураНадписи.ПереключательКромкаСправа = "По месту";
	
	СтрокаИдентификатор = Строка(СтруктураНадписи.НомерСтроки) 
	+ ?(ЗначениеЗаполнено(СтруктураНадписи.НомерИзделия), "/" + СтруктураНадписи.НомерИзделия, "") 
	+ ?(СтруктураНадписи.ЭтоЯщик, " ящ.", ?(СтруктураНадписи.ЭтоДверь, " двр.", ?(ЗначениеЗаполнено(СтруктураНадписи.Идентификатор), "/" + СтруктураНадписи.Идентификатор, "")))
	+ ?(СтруктураНадписи.ДетальВПакете И СтруктураНадписи.ОсобыйПорядок = "Фасад", " (пак" + СтруктураНадписи.НомерИзделия + ")", ""); 
	
	Надпись = ?(КантПоМесту, "Кант по месту. ", "");
	
	Если СтруктураНадписи.Обтачивать И СтруктураНадписи.Материал = "Столешница" Тогда	
		Надпись = Надпись + "Ст (Скр)";
	ИначеЕсли СтруктураНадписи.Обтачивать И (СтруктураНадписи.Материал = "Стекло" ИЛИ СтруктураНадписи.Материал = "ФасадСтеклянный") Тогда
		Надпись = Надпись + "Обтачивать";
	ИначеЕсли НЕ СтруктураНадписи.Обтачивать И (СтруктураНадписи.Материал = "Стекло" ИЛИ СтруктураНадписи.Материал = "ФасадСтеклянный") Тогда
		Надпись = Надпись + "Без обточки";
	ИначеЕсли СтруктураНадписи.Материал = "ФасадСтеклянныйЗакругленный" Тогда
		Надпись = Надпись + СтрокаИдентификатор + "Скр. " + СтруктураНадписи.РадиусФасада;
	Иначе				
		Надпись = Надпись + СтрокаИдентификатор;
	КонецЕсли;
	
	Надпись = ?(СтруктураНадписи.ДетальДляСклеивания, Надпись + " скл ", Надпись);
	
	Если СтруктураНадписи.НеТорцевать Тогда
		Надпись = Надпись + ", НЕ ТОРЦЕВАТЬ ПО ДЛИНЕ";
	КонецЕсли;
	
	Возврат Надпись;
	
КонецФункции