
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Движения.Управленческий.Записывать = Истина;
	
	ЛексСервер.СформироватьПоказателиСотрудников(Движения, Ссылка);
	
	Статус = Документы.Спецификация.ПолучитьСтатусСпецификации(Спецификация);
	ОбъектСпецификация = Спецификация.ПолучитьОбъект();
	
	Если Спецификация.Изделие.ЗапретРедактирования Тогда
		
		Если Статус = Перечисления.СтатусыСпецификации.ПроверенТехнологом
			ИЛИ Статус = Перечисления.СтатусыСпецификации.ПроверяетсяТехнологом Тогда
			
			НачатьТранзакцию();
			
			Если НЕ ОбъектСпецификация.Дилерский 
				И НЕ ЗначениеЗаполнено(ОбъектСпецификация.Технолог) Тогда
				ОбъектСпецификация.Технолог = ПользователиКлиентСервер.ТекущийПользователь().ФизическоеЛицо;
			КонецЕсли; 
			
			Документы.Спецификация.УстановитьСтатусСпецификации(Спецификация, Перечисления.СтатусыСпецификации.Рассчитывается);
			ОбъектСпецификация.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
			
			Если НЕ ОбъектСпецификация.Проведен Тогда
				
				Отказ = Истина;
				ТекстСообщения = Строка(Спецификация) + " не проведена.";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Документы.Спецификация.УстановитьСтатусСпецификации(Спецификация, Перечисления.СтатусыСпецификации.ПроверенТехнологом);
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если Статус = Перечисления.СтатусыСпецификации.ПроверенТехнологом
			ИЛИ Статус = Перечисления.СтатусыСпецификации.Сохранен
			ИЛИ Статус = Перечисления.СтатусыСпецификации.ПроверяетсяТехнологом Тогда
			
			Документы.Спецификация.УстановитьСтатусСпецификации(Спецификация, Перечисления.СтатусыСпецификации.Рассчитывается);
			ОбъектСпецификация.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	// АКТИВНОСТЬ ЗАМЕРА
	
	ЗамерСсылка = Спецификация.ДокументОснование;
	Если ТипЗнч(ЗамерСсылка) = Тип("ДокументСсылка.Замер") Тогда
		
		НаборЗаписей = РегистрыСведений.АктивностьЗамеров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Замер.Установить(ЗамерСсылка);
		НаборЗаписей.Прочитать();
		
		Запись = ?(НаборЗаписей.Количество() = 0, НаборЗаписей.Добавить(), НаборЗаписей[0]);
		Запись.Замер = ЗамерСсылка;
		Запись.Статус = Ложь;
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	// АКТИВНОСТЬ ЗАМЕРА
	////////////////////////////////////////////////////////////////////////////////
	
	НачислитьЗарплатуДизайнеру();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// { Васильев Александр Леонидович [29.06.2014]
	// Часть проверок оставляем здесь,
	// а не переносим в ОбработкуПроверкиЗаполнения,
	// чтобы даже не сохранялись в базе совсем клинические случаи,
	// вроде нескольких договоров к одной спецификации.
	// } Васильев Александр Леонидович [29.06.2014]
	
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	ДоговорСсылка = Документы.Спецификация.ПолучитьДоговор(Спецификация);
	
	Если ЗначениеЗаполнено(ДоговорСсылка) И Ссылка <> ДоговорСсылка Тогда
		Отказ= Истина;
		ТекстСообщения = "К " + Спецификация + " уже введен " + ДоговорСсылка;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДоговорСсылка);
	КонецЕсли;
	
	Если Ссылка.Пустая() И НЕ Документы.Договор.РазрешеноВвестиДоговор(Спецификация) Тогда
		Отказ = Истина;
		ТекстСообщения = "Для изделия вида " + Спецификация.Изделие + " запрещено вводить договор.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДоговорСсылка);
	КонецЕсли;
	
	// только новые спецификации проверяем. там нахуярили уже договоров к доп. соглашеням
	Если Спецификация <> Ссылка.Спецификация Тогда
		Если Документы.Спецификация.ПолучитьСтатусСпецификации(Ссылка.Спецификация) = Перечисления.СтатусыСпецификации.Рассчитывается Тогда
			Документы.Спецификация.УстановитьСтатусСпецификации(Ссылка.Спецификация, Перечисления.СтатусыСпецификации.ПроверенТехнологом);
		КонецЕсли;
	КонецЕсли;
	
	Если Спецификация.ПакетУслуг = Перечисления.ПакетыУслуг.ДоставкаДоКлиентаИМонтаж Тогда
		
		ДатаУстановитьНеПозднее = Спецификация.ДатаМонтажа + 30 * 24 * 3600;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Спецификация") Тогда
		
		ПакетУслуг = ДанныеЗаполнения.ПакетУслуг;
		АдресМонтажа = ДанныеЗаполнения.АдресМонтажа;
		
		Если (ПакетУслуг = Перечисления.ПакетыУслуг.ДоставкаДоКлиентаИМонтаж ИЛИ ПакетУслуг = Перечисления.ПакетыУслуг.ДоставкаДоКлиента) И АдресМонтажа = "Введите адрес" Тогда
			
			Отказ = Истина;
			ТекстСообщения = "Укажите адрес";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДанныеЗаполнения, , , Отказ);
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Контрагент <> Справочники.Контрагенты.ЧастноеЛицо Тогда
			Контрагент = ДанныеЗаполнения.Контрагент;
		КонецЕсли;
		Спецификация = ДанныеЗаполнения;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		СуммаДокументаБезСкидки = ДанныеЗаполнения.СуммаДокумента;
		Офис = ДанныеЗаполнения.Офис;
		Подразделение = ДанныеЗаполнения.Подразделение;
		
		Если Контрагент.ЮридическоеЛицо Тогда
			ВидОплатыДоговора = Перечисления.ВидыОплатыДоговоров.Рассрочка1Месяц;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Изменение статуса спецификации
	Если Документы.Спецификация.ПолучитьСтатусСпецификации(Спецификация) = Перечисления.СтатусыСпецификации.Рассчитывается Тогда
		Документы.Спецификация.УстановитьСтатусСпецификации(Спецификация, Перечисления.СтатусыСпецификации.ПроверенТехнологом);
		СпецификацияОбъект = Спецификация.ПолучитьОбъект();
		СпецификацияОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// { Васильев Александр Леонидович [20.04.2015]
	// Костыль. Упаковать ошибки в группу.
	// } Васильев Александр Леонидович [20.04.2015]
	
	// Проверка оплаты.
	Если НЕ Контрагент.ЮридическоеЛицо Тогда
		
		ПредоплатаКредит = ВидОплатыДоговора = Перечисления.ВидыОплатыДоговоров.Предоплата50БанковскийКредит;
		
		Если ВидОплатыДоговора = Перечисления.ВидыОплатыДоговоров.Рассрочка1Месяц ИЛИ ВидОплатыДоговора = Перечисления.ВидыОплатыДоговоров.Рассрочка4Месяца ИЛИ ПредоплатаКредит Тогда
			
			ПоловинаСуммыДоговора = Окр(СуммаДокумента / 2);
			СуммаАванса = Документы.Договор.ПолучитьСуммуАванса(Ссылка);
			
			Если НЕ ПредоплатаКредит И СуммаАванса < ПоловинаСуммыДоговора и НЕ Комментарий = "Разрешено проведение при взносе меньше 50%" Тогда
				
				Текст = "Оплата, при заключении договора, сумма аванса должна составлять не менее 50% от суммы договора (" + ПоловинаСуммыДоговора + " руб.)";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭтотОбъект, "СуммаДокумента");
				Отказ = Истина;
				
			ИначеЕсли ПредоплатаКредит И СуммаАванса <> ПоловинаСуммыДоговора Тогда
				
				Текст = "Оплата, при заключении договора, должна составлять РОВНО 50% от суммы договора (" + ПоловинаСуммыДоговора + " руб.)";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭтотОбъект, "СуммаДокумента");
				Отказ = Истина;
				
			КонецЕсли;
			
			Если НЕ (ЗначениеЗаполнено(Контрагент.ПаспортНомер) И ЗначениеЗаполнено(Контрагент.ПаспортКемВыдан)
				И ЗначениеЗаполнено(Контрагент.ПаспортДатаВыдачи)) Тогда
				
				Текст = "Паспортные данные должны быть заполнены у контрагента - " + Контрагент;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭтотОбъект, "Контрагент");
				Отказ = Истина;
				
			КонецЕсли;
			
		ИначеЕсли ВидОплатыДоговора = Перечисления.ВидыОплатыДоговоров.ПолнаяПредоплата Тогда
			
			// проверка на оплату 100% от договора
			
			Если Документы.Договор.ПолучитьСуммуАванса(Ссылка) < СуммаДокумента Тогда
				
				Текст = "Оплата, при заключении договора, должна составлять 100% от суммы договора (" + СуммаДокумента + " руб.)";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭтотОбъект, "СуммаДокумента");
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; // НЕ Контрагент.ЮридическоеЛицо
	
	// Проверка статуса.
	Отказ = Отказ ИЛИ НЕ Документы.Договор.СпецификацияПроверена(Спецификация);
	
КонецПроцедуры

Функция НачислитьЗарплатуДизайнеру()
	
	Движение = Движения.Управленческий.Добавить();
	Движение.Период = Дата;
	Движение.Подразделение = Подразделение;
	Движение.Сумма = Спецификация.ЗарплатаДизайнера;
	Движение.Содержание = "Зарплата дизайнера " + Спецификация;
	
	Движение.СчетДт = ПланыСчетов.Управленческий.Расходы;
	Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Справочники.СтатьиДоходовРасходов.РасходыЗарплатаЗамерыИАктивныеПродажи;
	Движение.СчетКт = ПланыСчетов.Управленческий.ВзаиморасчетыССотрудниками;
	Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ФизическиеЛица] = Автор.ФизическоеЛицо;
	Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ВидыНачисленийУдержаний] = Справочники.ВидыНачисленийУдержаний.ДизайнеруЗаДоговор;
	
КонецФункции // НачислитьЗарплатуДизайнеру()