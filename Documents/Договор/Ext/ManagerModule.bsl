
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) Экспорт
	
	ЛексСервер.ПолучитьПредставлениеДокумента(Данные, Представление, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПечатьУведомлениеОЗадолженности(ТабДок, Ссылка) Экспорт
	
	ФормСтрока = "Л = ru_RU; ДП = Истина";
	ПарПредмета="рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 0";
	
	Макет = Документы.Договор.ПолучитьМакет("ПечатьУведомлениеОЗадолженности");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокДоговор.Ссылка,
	|	ДокДоговор.Дата КАК ДатаДоговора,
	|	ДокДоговор.Клиент КАК НаименованиеКлиента,
	|	ДокДоговор.СкидкаНаИзделия,
	|	ДокДоговор.СуммаДокумента,
	|	ДокДоговор.Клиент.ПолныйАдрес КАК КлиентПолныйАдрес,
	|	ДокДоговор.Клиент.ТелефонКонтактный КАК ТелефонКлиента,
	|	ДокДоговор.Рассрочка.(
	|		Дата КАК ДатаРассрочки,
	|		Сумма КАК СуммаРассрочки
	|	),
	|	ДокДоговор.Подразделение.Организация КАК НаименованиеОрганизации,
	|	ДокДоговор.Подразделение.Организация.ЮридическийАдрес КАК ЮридическийАдресОрганизации,
	|	ДокДоговор.Офис.Телефон КАК ТелефонОфиса,
	|	ДокДоговор.Номер КАК НомерДоговора
	|ИЗ
	|	Документ.Договор КАК ДокДоговор
	|ГДЕ
	|	ДокДоговор.Ссылка В(&Ссылка)";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОблШапка = Макет.ПолучитьОбласть("Шапка");
	ОблСтрокаРассрочки = Макет.ПолучитьОбласть("СтрокаРассрочки");
	ОблСтрокаОплаты = Макет.ПолучитьОбласть("СтрокаОплаты");
	ОблЧасть2 = Макет.ПолучитьОбласть("Часть2");
	ОблЧасть3 = Макет.ПолучитьОбласть("Часть3");
	ОблПодвал = Макет.ПолучитьОбласть("Подвал");
	ОблИзменения = Макет.ПолучитьОбласть("Изменения");
	ОблСтрокаИзменения = Макет.ПолучитьОбласть("СтрокаИзменения");
	
	ТабДок.Очистить();
	
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		СуммаРассрочек = 0;
		СуммаОплаты = 0;
		ПоследнийДеньОплаты = Выборка.ДатаДоговора;
		
		ОблШапка.Параметры.Заполнить(Выборка);
		ОблШапка.Параметры.ДатаПисьма = Формат(ТекущаяДата(), "ДЛФ=DD");
		ТабДок.Вывести(ОблШапка, Выборка.Уровень());
		
		// рассрочки
		ВыборкаРассрочки = Выборка.Рассрочка.Выбрать();
		Пока ВыборкаРассрочки.Следующий() Цикл
			ОблСтрокаРассрочки.Параметры.Заполнить(ВыборкаРассрочки);
			ОблСтрокаРассрочки.Параметры.СуммаРассрочкиПрописью = ЧислоПрописью(ВыборкаРассрочки.СуммаРассрочки, ФормСтрока, ПарПредмета);
			ТабДок.Вывести(ОблСтрокаРассрочки);
			Если ВыборкаРассрочки.ДатаРассрочки < ТекущаяДата() Тогда				
				СуммаРассрочек = СуммаРассрочек + ВыборкаРассрочки.СуммаРассрочки;
			КонецЕсли;
		КонецЦикла;
		
		ОблЧасть2.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОблЧасть2);
		
		// оплаты
		ЗапросОплаты = Новый Запрос;
		ЗапросОплаты.Текст =
		"ВЫБРАТЬ
		|	Платежи.Сумма КАК СуммаПлатежа,
		|	Платежи.Дата КАК ДатаПлатежа
		|ИЗ
		|	Документ.Платежи КАК Платежи
		|ГДЕ
		|	Платежи.Договор = &СсылкаНаДоговор
		|	И Платежи.Проведен
		|	И Платежи.Дата > КОНЕЦПЕРИОДА(&ДатаДоговора, ДЕНЬ)";
		
		ЗапросОплаты.УстановитьПараметр("СсылкаНаДоговор", Выборка.Ссылка); 
		ЗапросОплаты.УстановитьПараметр("ДатаДоговора", Выборка.ДатаДоговора);
		РезультатОплаты = ЗапросОплаты.Выполнить();
		Если НЕ РезультатОплаты.Пустой() Тогда
			ВыборкаОплаты = РезультатОплаты.Выбрать();
			Пока ВыборкаОплаты.Следующий() Цикл
				ОблСтрокаОплаты.Параметры.Заполнить(ВыборкаОплаты);
				ОблСтрокаОплаты.Параметры.СуммаПлатежаПрописью = ЧислоПрописью(ВыборкаОплаты.СуммаПлатежа, ФормСтрока, ПарПредмета);
				
				ТабДок.Вывести(ОблСтрокаОплаты);
				СуммаОплаты = СуммаОплаты + ВыборкаОплаты.СуммаПлатежа;
			КонецЦикла;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////
		// рассчет пени
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорРассрочка.Дата КАК Дата,
		|	ДоговорРассрочка.Сумма КАК Рассрочка,
		|	0 КАК Платеж
		|ИЗ
		|	Документ.Договор.Рассрочка КАК ДоговорРассрочка
		|ГДЕ
		|	ДоговорРассрочка.Ссылка = &Ссылка
		|	И ДоговорРассрочка.Дата < &ТекущаяДата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Платежи.Дата,
		|	0,
		|	Платежи.Сумма
		|ИЗ
		|	Документ.Платежи КАК Платежи
		|ГДЕ
		|	Платежи.Договор = &Ссылка
		|	И Платежи.Дата > КОНЕЦПЕРИОДА(&ДатаДоговора, ДЕНЬ)
		|	И Платежи.Дата < &ТекущаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		ДатаДоговора = Выборка.Ссылка.Дата;
		Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
		Запрос.УстановитьПараметр("ДатаДоговора", ДатаДоговора);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		СтрокаСегодня = ТЗ.Добавить();
		СтрокаСегодня.Дата = ТекущаяДата();
		СтрокаСегодня.Рассрочка = 0;
		СтрокаСегодня.Платеж = 0;
		
		СуммаПени = 0;
		Платежи = 0;
		Рассрочки = 0;
		СуммаПросрочки = 0;
		ПрошлаяДата = ДатаДоговора;
		НачислятьПеню = Ложь;
		
		Для каждого Стр Из ТЗ Цикл
			
			ОбрабатываемаяДата = НачалоДня(Стр.Дата);
			
			Если НачислятьПеню Тогда
				ДнейПросрочки = Цел((ОбрабатываемаяДата - ПрошлаяДата) / 86400);
				СуммаПени = СуммаПени + СуммаПросрочки / 100 * ДнейПросрочки;
				НачислятьПеню = Ложь;
			КонецЕсли;
			
			Платежи = Стр.Платеж + Платежи;
			Рассрочки = Стр.Рассрочка + Рассрочки;
			СуммаПросрочки = Рассрочки - Платежи;
			
			НачислятьПеню = СуммаПросрочки > 0;
			ПрошлаяДата = ОбрабатываемаяДата + 86400;
			
		КонецЦикла;
		
		СуммаПени = Окр(СуммаПени, 2);
		
		// рассчет пени
		///////////////////////////////////////////////////////////////
		
		ОбщаяСуммаДолга = СуммаРассрочек - СуммаОплаты;
		
		ОблЧасть3.Параметры.Заполнить(Выборка);
		ОблЧасть3.Параметры.ОбщаяСуммаДолга = ОбщаяСуммаДолга;
		ОблЧасть3.Параметры.ОбщаяСуммаДолгаПрописью = ЧислоПрописью(ОбщаяСуммаДолга, ФормСтрока, ПарПредмета);
		ОблЧасть3.Параметры.ДатаПисьма = Формат(ТекущаяДата(), "ДЛФ=DD");
		ОблЧасть3.Параметры.СуммаПени = СуммаПени;
		ОблЧасть3.Параметры.СуммаПениПрописью = ЧислоПрописью(СуммаПени, ФормСтрока, ПарПредмета);
		
		ТабДок.Вывести(ОблЧасть3);
		
		ОблПодвал.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОблПодвал);
		
		ВставлятьРазделительСтраниц = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПечатьДоговора(Выборка, ОбъектыПечати) // МассивОбъектов, ОбъектыПечати, ИмяМакета, 
	
	ФормСтрока 	= "Л = ru_RU; ДП = Истина";
	ПарПредмета	="рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 0";
	ТабДок 			= Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати 	= "ПараметрыПечати_Договор";
	ТабДок.АвтоМасштаб 					= Истина;
	ТабДок.ОтображатьСетку 			= Ложь;
	ТабДок.Защита 							= Истина;
	ТабДок.ТолькоПросмотр 				= Истина;
	ТабДок.ОтображатьЗаголовки 		= Ложь;
	
	Макет = Документы.Договор.ПолучитьМакет("Договор");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1; 
		
		// формирование строки товаров
		СтрокаТовары 						= " ";
		СтрокаТоварыТПМК 				= "";
		СтоимостьИзделияПрописью 	= ЧислоПрописью(Выборка.СуммаДокумента, ФормСтрока, ПарПредмета);
		НоваяСтрокаТовары 				= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 артикул %2 цена %3 руб. (%4) 1 шт.,",
		Выборка.Изделие, 1, Выборка.СуммаДокумента, СтоимостьИзделияПрописью);
		СтрокаТовары 						= СтрокаТовары + НоваяСтрокаТовары;
		НоваяСтрокаТоварыТПМК 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 артикул %2%3",
		Выборка.Изделие, 1, Символы.ПС);
		СтрокаТоварыТПМК 				= СтрокаТоварыТПМК + НоваяСтрокаТоварыТПМК;
		ФизЛицо 								= НЕ Выборка.ФизЮрЛицо;
		Спецификация						= Выборка.Спецификация;
		Пункт1_1 								= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("1.1. Продавец приобретает следующие товары: %1 товар предназначен для личного, семейного, домашнего или иного использования, не связанного с предпринимательской деятельностью, далее ""Мебельный комплект"".",
		СтрокаТовары);
		
		Если ФизЛицо Тогда
			
			ВЛицеВтораяСторона 					= "";
			ЯвляетсяОфициальнымДилером 	= ", являющийся официальным дилером производителя ООО ""ВЯС""";
			ЗаголовокДоговора 					= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Договор розничной купли-продажи № %1", Выборка.НомерДоговора);
			ОбластьРеквизиты 						= Макет.ПолучитьОбласть("РеквизитыФизЛицо");
			
		Иначе
			
			ВЛицеВтораяСторона 					= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(", в лице %1, действущего на основании %2, ", Выборка.КонтрагентРуководитель, Выборка.КонтрагентДействуетНаОсновании);
			ЯвляетсяОфициальнымДилером 	=" ";
			ЗаголовокДоговора 					= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Договор изготовления мебельного комплекта № %1", Выборка.НомерДоговора);
			ОбластьРеквизиты 						= Макет.ПолучитьОбласть("РеквизитыЮрЛицо");
			//
			//РС = "";
			//БИК = "";
			//
			//Если ЗначениеЗаполнено(Выборка.БанковскиеРеквизиты) Тогда
			//	
			//	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.БанковскиеРеквизиты);
			//	
			//	Для каждого Строка Из МассивСтрок Цикл
			//		
			//		РС = ?( Найти(Строка, "р/с ") > 0, Строка, РС);
			//		БИК = ?( Найти(Строка, "БИК ") > 0, Строка, БИК);
			//		
			//	КонецЦикла;
			//	
			//	РС = СтрЗаменить(РС, "р/с", "");
			//	БИК = СтрЗаменить(БИК, "БИК", "");
			//	
			//	СтруктураЗаполнения = Новый Структура;
			//	СтруктураЗаполнения.Вставить("КлиентРасчетныйСчет", РС);
			//	СтруктураЗаполнения.Вставить("КлиентБик", БИК);
			//	
			//	ОбластьРеквизиты.Параметры.Заполнить(СтруктураЗаполнения);
			//	
			//КонецЕсли;
			
		КонецЕсли;
		
		РеквизитыОрганизации 	= ЛексСервер.ПолучитьРеквизитыОрганизации(Выборка.Организация);
		Доверенность 				= ЛексСервер.ПолучитьДоверенностьСотрудника(Выборка.Автор, Выборка.Организация);
		
		
		Если НЕ Выборка.Монтаж Тогда
			
			ПунктСборка = "1.12. Сборку мебельного комплекта Покупатель производит самостоятельно.";
			
		Иначе
			
			ДатаДоговора 					= Формат(Выборка.ДатаДоговора, "ДЛФ=DD");
			ДатаУстановитьНеПозднее 	= Формат(Выборка.ДатаМонтажа + 30*24*3600, "ДЛФ=DD");
			ДатаУстановки 					= Формат(Выборка.ДатаМонтажа, "ДЛФ=DD");
			
			ПриступаетКСборке 		= ДатаУстановки;
			УстановитьНеПозднее 	= " не позднее" + ДатаУстановитьНеПозднее+".";
			ПунктСборка = "1.12. Продавец без взимания дополнительной платы приступает к сборке Мебельного комплекта %1. Сборка осуществляется согласно ТПМК и Инструкции по сборке мебельного комплекта. Продавец передает Мебельный комплект в собранном виде в комплектности согласно ТПМК%3";
			ПунктСборка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПунктСборка, ПриступаетКСборке, УстановитьНеПозднее);
			
		КонецЕсли;
		
		Если Выборка.Доставка Тогда
			
			ДатаДоставки 					= Формат(Выборка.ДатаДоставки, "ДЛФ=DD");
			ПунктДоставка = "1.11. Продавец осуществляет доставку деталей Мебельного комплекта %1. (Продавец может изменить время) по адресу: %2";
			ПунктДоставка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПунктДоставка, Формат(Выборка.ДатаОтгрузки,"ДЛФ=Д"), Выборка.Адрес);
			
		Иначе// Выборка.ВидДоставки = Перечисления.ВидДоставки.Самовывоз Тогда
			ПунктДоставка = "1.11 Доставку деталей Мебельного комплекта Покупатель производит самостоятельно.";
			ПунктДоставка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПунктДоставка,"");
			//ИначеЕсли Выборка.ВидДоставки = Перечисления.ВидДоставки.ТранспортнаяКомпания Тогда
			//	ПунктДоставка = "1.11 Детали Мебельного комплекта %1 доставляет до транспортной компании.";
			//	ПунктДоставка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПунктДоставка, СтороныДоговора.ПродавецИсполнитель);
		КонецЕсли;
		
		////////////////////////////////////////////////////////
		// Рассрочка
		//До выяснения что там с платежами - будет тупо ноль
		СуммаПервогоПлатежа 	= ПолучитьСуммуАванса(Выборка.Договор);
		ВыборкаРассрочка 			= Выборка.Рассрочка.Выбрать();
		
		Если ВыборкаРассрочка.Количество() = 0 Тогда
			
			ПунктРассрочка = "1.4. Рассрочка по оплате Мебельного комплекта не предоставляется.";
			
		Иначе
			
			СуммаРассрочкиПрописью 	= ЧислоПрописью(Выборка.СуммаРассрочки, ФормСтрока, ПарПредмета);;
			СтрокаРассрочек 				= Символы.ПС;
			
			Пока ВыборкаРассрочка.Следующий() Цикл
				
				РассрочкаПрописью 		= ЧислоПрописью(ВыборкаРассрочка.Сумма, ФормСтрока, ПарПредмета);
				НоваяСтрокаРассрочек 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 руб. (%3)%4",
				Формат(ВыборкаРассрочка.Дата, "ДЛФ=DD"),
				ВыборкаРассрочка.Сумма,
				РассрочкаПрописью,
				Символы.ПС);
				СтрокаРассрочек = СтрокаРассрочек + НоваяСтрокаРассрочек;
				
			КонецЦикла;
			
			ПунктРассрочка = "1.4. Продавец предоставляет Покупателю рассрочку оплаты за Мебельный комплект в сумме %1 руб. (%2) на %3 месяца(-ев). График оплаты: %4";
			ПунктРассрочка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПунктРассрочка, Выборка.СуммаРассрочки, СуммаРассрочкиПрописью,
			Выборка.МесяцевРассрочки, СтрокаРассрочек);
			
		КонецЕсли;
		
		ОбластьДоговор = Макет.ПолучитьОбласть("Договор");
		
		
			
		ОбластьДоговор.Параметры.ПунктРассрочка 							= ПунктРассрочка;
		ОбластьДоговор.Параметры.ЗаголовокДоговора 					= ЗаголовокДоговора;
		ОбластьДоговор.Параметры.ВЛицеВтораяСторона 					= ВЛицеВтораяСторона;
		ОбластьДоговор.Параметры.ЯвляетсяОфициальнымДилером 	= ЯвляетсяОфициальнымДилером;
		ОбластьДоговор.Параметры.Заполнить(Выборка);
		ОбластьДоговор.Параметры.Заполнить(РеквизитыОрганизации);
		ОбластьДоговор.Параметры.Заполнить(Доверенность);
		ОбластьДоговор.Параметры.Пункт1_1 									= Пункт1_1;
		ОбластьДоговор.Параметры.СуммаДокументаПрописью 			= ЧислоПрописью(Выборка.СуммаДокумента, ФормСтрока, ПарПредмета);
		ОбластьДоговор.Параметры.ДатаДоговора 							= ДатаДоговора;
		ОбластьДоговор.Параметры.ПунктДоставка 							= ПунктДоставка;
		ОбластьДоговор.Параметры.ПунктСборка 								= ПунктСборка;
		СуммаПервогоПлатежа 														= ПолучитьСуммуАванса(Выборка.Договор);
		СуммаПервогоПлатежаПрописью 											= ЧислоПрописью(СуммаПервогоПлатежа, ФормСтрока, ПарПредмета);
		ОбластьДоговор.Параметры.СуммаПервогоПлатежа 				= СуммаПервогоПлатежа;
		ОбластьДоговор.Параметры.СуммаПервогоПлатежаПрописью 	= СуммаПервогоПлатежаПрописью;
		ОбластьРеквизиты.Параметры.Заполнить(Выборка);
		ОбластьРеквизиты.Параметры.Заполнить(РеквизитыОрганизации);
		ОбластьРеквизиты.Параметры.Заполнить(Доверенность);
		
		Если ФизЛицо Тогда
			
			ОбластьРеквизиты.Параметры.АдресРегистрации = Выборка.Адрес;
			
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьДоговор);
		ТабДок.Вывести(ОбластьРеквизиты);
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции // УсловияДоставкиВыписка()

Функция ПечатьУсловияДоставкиВыписка(Выборка, ОбъектыПечати)
	
	ТабДок 	= Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_УсловияДоставкиВыписка";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Макет 	= Документы.Договор.ПолучитьМакет("УсловияДоставкиВыписка");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1; 
				
		/////////////////////////////////////////////////////////
		// Печать Условий доставки и сборки
		ОбластьУсловияДоставкиВыписка 									= Макет.ПолучитьОбласть("Тело");
		ОбластьУсловияДоставкиВыписка.Параметры.ФИОКлиента 	= Выборка.ФИОКлиента;
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДок.Вывести(ОбластьУсловияДоставкиВыписка);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьУсловияДоставкиВыписка()

Функция ПечатьТитульныйЛистТПМК(Выборка, ОбъектыПечати)
	
	ТабДок 	= Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ТитульныйЛистТПМК";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	ФормСтрока 	= "Л = ru_RU; ДП = Истина";
	ПарПредмета	="рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 0";
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1; 
		
		/////////////////////////////////////////////////////////
		// Технический паспорт мебельного комплекта (ТПМК)
		// Титульный лист
		// формирование строки товаров
		СтрокаТовары 						= " ";
		СтрокаТоварыТПМК 				= "";
		СтоимостьИзделияПрописью 	= ЧислоПрописью(Выборка.СуммаДокумента, ФормСтрока, ПарПредмета);
		НоваяСтрокаТовары 				= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 артикул %2 цена %3 руб. (%4) 1 шт.,",
		Выборка.Изделие, 1, Выборка.СуммаДокумента, СтоимостьИзделияПрописью);
		СтрокаТовары 						= СтрокаТовары + НоваяСтрокаТовары;
		НоваяСтрокаТоварыТПМК 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 артикул %2%3",
		Выборка.Изделие, 1, Символы.ПС);
		СтрокаТоварыТПМК 				= СтрокаТоварыТПМК + НоваяСтрокаТоварыТПМК;
		ФизЛицо 								= НЕ Выборка.ФизЮрЛицо;
		Спецификация						= Выборка.Спецификация;
		Пункт1_1 								 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("1.1. Продавец приобретает следующие товары: %1 товар предназначен для личного, семейного, домашнего или иного использования, не связанного с предпринимательской деятельностью, далее ""Мебельный комплект"".",
		СтрокаТовары);
		
		Макет 	= Документы.Договор.ПолучитьМакет("ТитульныйЛистТПМК");
		ОбластьТитульныйЛистТПМК 												= Макет.ПолучитьОбласть("Титульник");
		ОбластьИнструкцияПоЭксплуатации										= Макет.ПолучитьОбласть("ИнструкцияПоЭксплуатации");
		ОбластьГарантийныеОбязательства										= Макет.ПолучитьОбласть("ГарантийныеОбязательства");
		ОбластьТитульныйЛистТПМК.Параметры.ДатаДоговора 			= Формат(Выборка.ДатаДоговора, "ДФ=""yyyy 'г.'""");
		ОбластьТитульныйЛистТПМК.Параметры.СтрокаТоварыТПМК 	= СтрокаТоварыТПМК;
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДок.Вывести(ОбластьТитульныйЛистТПМК);
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДок.Вывести(ОбластьИнструкцияПоЭксплуатации);
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДок.Вывести(ОбластьГарантийныеОбязательства);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьТитульныйЛистТПМК()

Функция ПечатьГарантийноеОбслуживание(Выборка, ОбъектыПечати)
	
	ТабДок 										= Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати 	= "ПараметрыПечати_ГарантийноеОбслуживание";
	ТабДок.АвтоМасштаб 					= Истина;
	ТабДок.ОтображатьСетку 			= Ложь;
	ТабДок.Защита 							= Истина;
	ТабДок.ТолькоПросмотр 				= Истина;
	ТабДок.ОтображатьЗаголовки 		= Ложь;
	
	Макет 										= Документы.Договор.ПолучитьМакет("ГарантийноеОбслуживание");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1; 
		// Условия гарантии
		
		ОбластьГарантийноеОбслуживание 	= Макет.ПолучитьОбласть("Тело");
		ТабДок.Вывести(ОбластьГарантийноеОбслуживание);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции // ГарантийноеОбслуживание()

Функция ПечатьИнструкцияПоЭксплуатации(Выборка, ОбъектыПечати)
	
	ТабДок 										= Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати 	= "ПараметрыПечати_ИнструкцияПоЭксплуатации";
	ТабДок.АвтоМасштаб 					= Истина;
	ТабДок.ОтображатьСетку 			= Ложь;
	ТабДок.Защита 							= Истина;
	ТабДок.ТолькоПросмотр 				= Истина;
	ТабДок.ОтображатьЗаголовки 		= Ложь;
	
	Макет 										= Документы.Договор.ПолучитьМакет("ИнструкцияПоЭксплуатации");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1; 
		// Инструкция по эксплуатации
		
		ОбластьИнструкцияПоЭксплуатации 	= Макет.ПолучитьОбласть("Тело");
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДок.Вывести(ОбластьИнструкцияПоЭксплуатации);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьИнструкцияПоЭксплуатации()

Функция ПечатьИнструкцияПоСборке(ИмяМакета, Выборка, ОбъектыПечати)
	
	ТабДок 										= Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати 	= "ПараметрыПечати_ИнструкцияПоСборке";
	ТабДок.АвтоМасштаб 					= Истина;
	ТабДок.ОтображатьСетку 			= Ложь;
	ТабДок.Защита 							= Истина;
	ТабДок.ТолькоПросмотр 				= Истина;
	ТабДок.ОтображатьЗаголовки 		= Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1; 
		
		Если ИмяМакета = "ИнструкцияПоСборкеШкаф" Тогда
			
			МакетИнструкцияПоСборке = Документы.Договор.ПолучитьМакет("ИнструкцияПоСборкеШкаф");
			
		ИначеЕсли ИмяМакета = "ИнструкцияПоСборкеКухня" Тогда
			
			МакетИнструкцияПоСборке = Документы.Договор.ПолучитьМакет("ИнструкцияПоСборкеКухня");
			
		ИначеЕсли ИмяМакета = "ИнструкцияПоСборкеКорпуснаяМебель" Тогда
			
			МакетИнструкцияПоСборке = Документы.Договор.ПолучитьМакет("ИнструкцияПоСборкеКорпуснаяМебель");
			
		КонецЕсли;
		
		Если МакетИнструкцияПоСборке <> Неопределено Тогда
			
			ОбластьИнструкцияПоСборке = МакетИнструкцияПоСборке.ПолучитьОбласть("Тело");
			ТабДок.Вывести(МакетИнструкцияПоСборке);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);
		
	КонецЦикла;
	
	//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, 
	//0, ОбъектыПечати, Выборка.Ссылка);
	
	Возврат ТабДок;
	
КонецФункции // ПечатьИнструкцияПоСборкеШкаф()

Функция ПечатьЭскиз(Выборка, ОбъектыПечати)
	
	ТабДок 										= Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати 	= "ПараметрыПечати_Эскиз";
	ТабДок.АвтоМасштаб 					= Истина;
	ТабДок.ОтображатьСетку 			= Ложь;
	ТабДок.Защита 							= Истина;
	ТабДок.ТолькоПросмотр 				= Истина;
	ТабДок.ОтображатьЗаголовки 		= Ложь;
	Макет 										= Документы.Договор.ПолучитьМакет("Эскиз");
	ОбластьШапка 							= Макет.ПолучитьОбласть("Шапка");
	ОбластьРисунок 							= Макет.ПолучитьОбласть("Рисунок");
	ОбластьПодвал 							= Макет.ПолучитьОбласть("Подвал");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1; 
		
		Спецификация= Выборка.Спецификация;
		// Эскизы
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Спецификация", Спецификация);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК ПрикрепленныйФайл
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &Спецификация";
		
		ВыборкаФайлов 		= Запрос.Выполнить().Выбрать();
		МассивФайлов 		= Новый Массив;
		ОбластьШапка.Параметры.Заполнить(Выборка);
			
		Пока ВыборкаФайлов.Следующий() Цикл
			
			МассивФайлов.Добавить(ВыборкаФайлов.ПрикрепленныйФайл);
			
		КонецЦикла;
		
		Для каждого Файл Из МассивФайлов Цикл
			
			Если НЕ Файл.ПометкаУдаления Тогда
				
				Рисунок 				= ОбластьРисунок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
				Рисунок.Линия 		= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
				Рисунок.Верх 			= 5; 
				Рисунок.Высота 		= 350; 
				Рисунок.Ширина 	= 100; 
				Рисунок.Лево 		= 5;
				Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Версия", Файл.ТекущаяВерсия);
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ХранимыеФайлыВерсий.ХранимыйФайл КАК Файл,
				|	ХранимыеФайлыВерсий.ВерсияФайла
				|ИЗ
				|	РегистрСведений.ХранимыеФайлыВерсий КАК ХранимыеФайлыВерсий
				|ГДЕ
				|	ХранимыеФайлыВерсий.ВерсияФайла = &Версия";
				
				НоваяВыборка = Запрос.Выполнить().Выбрать();
				НоваяВыборка.Следующий();
				Картинка 		= НоваяВыборка.Файл.Получить();
				Расширение 	= НоваяВыборка.ВерсияФайла.Расширение;
				
				Если Расширение = "jpg" или Расширение = "jpeg" или Расширение = "jp2" или Расширение = "jpe" или Расширение = "bmp" 
					или Расширение = "gif" или Расширение = "png" Тогда
					
					ТабДок.Вывести(ОбластьШапка);
					Рисунок.Картинка = Новый Картинка(Картинка);
					ТабДок.Вывести(ОбластьРисунок);
					ТабДок.Вывести(ОбластьПодвал);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции 

Функция ПечатьСпецификации(Выборка, ОбъектыПечати)
	
	ТабДок 										= Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати 	= "ПараметрыПечати_ИнструкцияПоСборке";
	ТабДок.АвтоМасштаб 					= Истина;
	ТабДок.ОтображатьСетку 			= Ложь;
	ТабДок.Защита 							= Истина;
	ТабДок.ТолькоПросмотр 				= Истина;
	ТабДок.ОтображатьЗаголовки 		= Ложь;
	Макет 										= Документы.Договор.ПолучитьМакет("ИспользуемыеМатериалы");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ОбластьШапка 						= Макет.ПолучитьОбласть("Шапка");
		ОбластьЗаголовок 					= Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаНоменклатуры 	= Макет.ПолучитьОбласть("ШапкаНоменклатуры");
		ОбластьСтрока 						= Макет.ПолучитьОбласть("Строка");
		ОбластьПодвал						= Макет.ПолучитьОбласть("Подвал");
		ОбластьПустаяСтрока				= Макет.ПолучитьОбласть("ПустаяСтрока");
		ТабДок.Вывести(ОбластьШапка);
		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.Вывести(ОбластьШапкаНоменклатуры);
		Спецификация 	= Выборка.Спецификация;
		Запрос 				= Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Спецификация);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпецификацияСписокНоменклатуры.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(СпецификацияСписокНоменклатуры.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
		|ИЗ
		|	Документ.Спецификация.СписокНоменклатуры КАК СпецификацияСписокНоменклатуры
		|ГДЕ
		|	СпецификацияСписокНоменклатуры.Ссылка = &Ссылка
		|	И СпецификацияСписокНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
		|
		|СГРУППИРОВАТЬ ПО
		|	СпецификацияСписокНоменклатуры.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	СпецификацияСписокНоменклатуры.Номенклатура.НоменклатурнаяГруппа";
		
		ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать();//Спецификация.СписокНоменклатуры;
		НомерСтроки = 0;
		
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
		//Для каждого Строка Из Номенклатура Цикл
		//	
		//	Если Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
				
				ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатуры);
				ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
				ТабДок.Вывести(ОбластьСтрока);
				
			//КонецЕсли;
			
		КонецЦикла;
		
		ТабДок.Вывести(ОбластьПустаяСтрока);
		ОбластьПодвал.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьСпецификации()

Функция ПечатьИзделийПоКаталогу(Выборка, ОбъектыПечати)                                                                                                                      
	
	ТабДок 										= Новый ТабличныйДокумент;	
	ТабДок.ИмяПараметровПечати 		= "ПараметрыПечати_ПоКаталогу";
	ТабДок.АвтоМасштаб 					= Истина;
	ТабДок.ОтображатьСетку 			= Ложь;
	ТабДок.Защита 							= Истина;
	ТабДок.ТолькоПросмотр 				= Истина;
	ТабДок.ОтображатьЗаголовки 		= Ложь;
	ТабДок.ОриентацияСтраницы 		= ОриентацияСтраницы.Ландшафт;
	Макет 										= Документы.Договор.ПолучитьМакет("ПоКаталогу");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		Секция = Макет.ПолучитьОбласть("R5C1");
		СекцияРазмерыВерх = Макет.ПолучитьОбласть("R6C1");
		СекцияНиз = Макет.ПолучитьОбласть("R8C1");
		СекцияРазмерыНиз = Макет.ПолучитьОбласть("R9C1");
					
		Спецификация = Выборка.Спецификация;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Спецификация);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХранимыеФайлыВерсий.ХранимыйФайл КАК Изображение,
		|	ХранимыеФайлыВерсий.ВерсияФайла.Владелец.ВладелецФайла КАК Изделие
		|ПОМЕСТИТЬ ФайлыКаталога
		|ИЗ
		|	РегистрСведений.ХранимыеФайлыВерсий КАК ХранимыеФайлыВерсий
		|ГДЕ
		|	ХранимыеФайлыВерсий.ВерсияФайла.Владелец.ВладелецФайла ССЫЛКА Справочник.КаталогИзделий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпецификацияСписокИзделийПоКаталогу.ВысотаИзделия,
		|	СпецификацияСписокИзделийПоКаталогу.ГлубинаИзделия,
		|	СпецификацияСписокИзделийПоКаталогу.Изделие,
		|	СпецификацияСписокИзделийПоКаталогу.ШиринаИзделия КАК ШиринаИзделия,
		|	СпецификацияСписокИзделийПоКаталогу.НомерСтроки,
		|	ФайлыКаталога.Изображение,
		|	СпецификацияСписокИзделийПоКаталогу.Изделие.РасположениеКороба КАК Расположение
		|ИЗ
		|	Документ.Спецификация.СписокИзделийПоКаталогу КАК СпецификацияСписокИзделийПоКаталогу
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФайлыКаталога КАК ФайлыКаталога
		|		ПО СпецификацияСписокИзделийПоКаталогу.Изделие = ФайлыКаталога.Изделие
		|ГДЕ
		|	СпецификацияСписокИзделийПоКаталогу.Ссылка В(&Ссылка)
		|ИТОГИ
		|	СУММА(ШиринаИзделия)
		|ПО
		|	Расположение";
		
		ВыборкаПоКоробам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоКоробам.Следующий() Цикл
			
			ВыборкаПоРасположению = ВыборкаПоКоробам.Выбрать();
			Если ВыборкаПоКоробам.Расположение = Перечисления.Стороны.Сверху Тогда
				ТабДок.Вывести(Секция);
				Пока ВыборкаПоРасположению.Следующий() Цикл
										
					Секция.Область().ШиринаКолонки = 40;
					Рисунок = Секция.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
					Рисунок.Лево = 3;
					Рисунок.Верх = 20;
					Рисунок.Высота = 25;
					Рисунок.Ширина = 25;
					Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
					
					Если ЗначениеЗаполнено(ВыборкаПоРасположению.Изображение) Тогда
						Рисунок.Картинка = Новый Картинка(ВыборкаПоРасположению.Изображение.Получить());
					Иначе
						Рисунок.Картинка = Новый Картинка;
					КонецЕсли;
					
					Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
					
					Заголовок = Секция.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
					Заголовок.Лево = 3;
					Заголовок.Верх = 10;
					Заголовок.Высота = 10;
					Заголовок.Ширина = 25;
					Заголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					Заголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
					Заголовок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
					Заголовок.Текст = "Размеры: " + ВыборкаПоРасположению.ШиринаИзделия + "; " + ВыборкаПоРасположению.ВысотаИзделия + "; " + ВыборкаПоРасположению.ГлубинаИзделия;
										
					ТабДок.Присоединить(Секция, 1);
					
				КонецЦикла;
				
				Заголовок = СекцияРазмерыВерх.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
				Заголовок.Лево = 10;
				Заголовок.Верх = 1;
				Заголовок.Высота = 10;
				Заголовок.Ширина = 40;
				Заголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				Заголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				Заголовок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
				Заголовок.Шрифт = Новый Шрифт (,,Истина); //жирный
				Заголовок.Текст = "Ширина верхних изделий: " + ВыборкаПоКоробам.ШиринаИзделия;
				
				ТабДок.Вывести(СекцияРазмерыВерх);
				
			КонецЕсли;	
			
			Если ВыборкаПоКоробам.Расположение = Перечисления.Стороны.Снизу Тогда
				ТабДок.Вывести(СекцияНиз);
				Пока ВыборкаПоРасположению.Следующий() Цикл
										
					СекцияНиз.Область().ШиринаКолонки = 40;
					Рисунок = СекцияНиз.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
					Рисунок.Лево = 3;
					Рисунок.Верх = 20;
					Рисунок.Высота = 25;
					Рисунок.Ширина = 25;
					Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
					
					Если ЗначениеЗаполнено(ВыборкаПоРасположению.Изображение) Тогда
						Рисунок.Картинка = Новый Картинка(ВыборкаПоРасположению.Изображение.Получить());
					Иначе
						Рисунок.Картинка = Новый Картинка;
					КонецЕсли;
					
					Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
					
					Заголовок = СекцияНиз.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
					Заголовок.Лево = 3;
					Заголовок.Верх = 10;
					Заголовок.Высота = 10;
					Заголовок.Ширина = 25;
					Заголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					Заголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
					Заголовок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
					Заголовок.Текст = "Размеры: " + ВыборкаПоРасположению.ШиринаИзделия + "; " + ВыборкаПоРасположению.ВысотаИзделия + "; " + ВыборкаПоРасположению.ГлубинаИзделия;
					
					ТабДок.Присоединить(СекцияНиз, 2);	
					
				КонецЦикла;
				
				Заголовок = СекцияРазмерыНиз.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
				Заголовок.Лево = 10;
				Заголовок.Верх = 1;
				Заголовок.Высота = 10;
				Заголовок.Ширина = 40;
				Заголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				Заголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				Заголовок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
				Заголовок.Шрифт = Новый Шрифт (,,Истина); //жирный
				Заголовок.Текст = "Ширина нижних изделий: " + ВыборкаПоКоробам.ШиринаИзделия;
				
				ТабДок.Вывести(СекцияРазмерыНиз);
				
			КонецЕсли;
			
			Если ВыборкаПоКоробам.Расположение = Перечисления.Стороны.ПоЦентру Тогда
				ТабДок.Вывести(СекцияНиз);
				Пока ВыборкаПоРасположению.Следующий() Цикл
					
					СекцияНиз.Область().ШиринаКолонки = 40;
					Рисунок = СекцияНиз.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
					Рисунок.Лево = 3;
					Рисунок.Верх = 20;
					Рисунок.Высота = 25;
					Рисунок.Ширина = 25;
					Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
					
					Если ЗначениеЗаполнено(ВыборкаПоРасположению.Изображение) Тогда
						Рисунок.Картинка = Новый Картинка(ВыборкаПоРасположению.Изображение.Получить());
					Иначе
						Рисунок.Картинка = Новый Картинка;
					КонецЕсли;
					
					Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
					
					Заголовок = СекцияНиз.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
					Заголовок.Лево = 3;
					Заголовок.Верх = 10;
					Заголовок.Высота = 10;
					Заголовок.Ширина = 25;
					Заголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					Заголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
					Заголовок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
					Заголовок.Текст = "Размеры: " + ВыборкаПоРасположению.ШиринаИзделия + "; " + ВыборкаПоРасположению.ВысотаИзделия + "; " + ВыборкаПоРасположению.ГлубинаИзделия;
					
					ТабДок.Присоединить(СекцияНиз, 1);	
					
				КонецЦикла;
				
				Заголовок = СекцияРазмерыНиз.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
				Заголовок.Лево = 10;
				Заголовок.Верх = 1;
				Заголовок.Высота = 10;
				Заголовок.Ширина = 40;
				Заголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				Заголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				Заголовок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
				Заголовок.Шрифт = Новый Шрифт (,,Истина); //жирный
				Заголовок.Текст = "Ширина изделий: " + ВыборкаПоКоробам.ШиринаИзделия;
				
				ТабДок.Вывести(СекцияРазмерыНиз);
				
			КонецЕсли;
			
		КонецЦикла;
				
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);	
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Выборка = Запрос(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Договор") Тогда
		
		ПодготовитьПечатнуюФорму("Договор", "Договор", "Документ.Договор.Договор",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УсловияДоставкиВыписка") Тогда
		
		ПодготовитьПечатнуюФорму("УсловияДоставкиВыписка", "Условия доставки и сборки", "Документ.Договор.УсловияДоставкиВыписка",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТитульныйЛистТПМК") Тогда
		
		ПодготовитьПечатнуюФорму("ТитульныйЛистТПМК", "Технический паспорт мебельного комплекта", "Документ.Договор.ТитульныйЛистТПМК",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УсловияДоставкиИСборки") Тогда
		
		ПодготовитьПечатнуюФорму("УсловияДоставкиИСборки", "Условия доставки и сборки", "Документ.Договор.УсловияДоставкиИСборки",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнструкцияПоСборкеШкаф") Тогда
		
		ПодготовитьПечатнуюФорму("ИнструкцияПоСборкеШкаф", "Инструкция по сборке", "Документ.Договор.ИнструкцияПоСборкеШкаф",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнструкцияПоСборкеКухня") Тогда
		
		ПодготовитьПечатнуюФорму("ИнструкцияПоСборкеКухня", "Печать инструкция по сборке", "Документ.Договор.ИнструкцияПоСборкеШкаф",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнструкцияПоСборкеКорпуснаяМебель") Тогда
		
		ПодготовитьПечатнуюФорму("ИнструкцияПоСборкеКорпуснаяМебель", "Инструкция по сборке", "Документ.Договор.ИнструкцияПоСборкеШкаф",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Эскиз") Тогда
		// dmn
		ПодготовитьПечатнуюФорму("Эскиз", "Эскиз", "Документ.Договор.Эскиз",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИспользуемыеМатериалы") Тогда
		
		ПодготовитьПечатнуюФорму("ИспользуемыеМатериалы", "Используемые материалы", "Документ.Договор.ИспользуемыеМатериалы",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПоКаталогу") Тогда
		
		ПодготовитьПечатнуюФорму("ПоКаталогу", "ПоКаталогу", "Документ.Договор.ПоКаталогу",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
КонецПроцедуры

Процедура ПодготовитьПечатнуюФорму(Знач ИмяМакета, ПредставлениеМакета, ПолныйПутьКМакету = "", МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка)
	
	Если ИмяМакета = "Договор" Тогда
		
		ТабДок = ПечатьДоговора(Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "УсловияДоставкиВыписка" Тогда
		
		ТабДок = ПечатьУсловияДоставкиВыписка(Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "ТитульныйЛистТПМК" Тогда
		
		ТабДок = ПечатьТитульныйЛистТПМК(Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "ГарантийноеОбслуживание" Тогда
		
		ТабДок = ПечатьГарантийноеОбслуживание(Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "ИнструкцияПоЭксплуатации" Тогда
		
		ТабДок = ПечатьИнструкцияПоЭксплуатации(Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "ИнструкцияПоСборкеШкаф" или ИмяМакета = "ИнструкцияПоСборкеКухня" или ИмяМакета = "ИнструкцияПоСборкеКорпуснаяМебель" Тогда
		
		ТабДок = ПечатьИнструкцияПоСборке(ИмяМакета, Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "Эскиз" Тогда
		
		ТабДок = ПечатьЭскиз (Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "ИспользуемыеМатериалы" Тогда
		
		ТабДок = ПечатьСпецификации (Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "ПоКаталогу" Тогда
		
		ТабДок = ПечатьИзделийПоКаталогу (Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	КонецЕсли;
	
КонецПроцедуры

Функция Запрос(МассивОбъектов)
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ДоговорРассрочка.Сумма) КАК ИтогоРассрочка,
	|	ДоговорРассрочка.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИтогиРассрочка
	|ИЗ
	|	Документ.Договор.Рассрочка КАК ДоговорРассрочка
	|ГДЕ
	|	ДоговорРассрочка.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорРассрочка.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Договор.Ссылка КАК Договор,
	|	Договор.Организация КАК Организация,
	|	Договор.Организация.ФИОДолжностногоЛица КАК РуководительОрганизации,
	|	Договор.Организация.ДействуетНаОсновании КАК ДействуетНаОсновании,
	|	Договор.Офис.Адрес КАК АдресОфиса,
	|	Договор.Офис.Телефон КАК ТелефонОфиса,
	|	Договор.Подразделение.Руководитель КАК РуководительПодразделения,
	|	Договор.Подразделение.ДействуетНаОсновании КАК ДейсвтуетНаОсновании,
	|	Договор.Дата КАК ДатаДоговора,
	|	Договор.Номер КАК НомерДоговора,
	|	Договор.Подразделение КАК Подразделение,
	|	Договор.Подразделение.Город КАК ГородОфиса,
	|	Договор.Автор КАК ФИОПользователя,
	|	Договор.СуммаДокумента КАК СуммаДокумента,
	|	Договор.МесяцевРассрочки КАК МесяцевРассрочки,
	|	Договор.Рассрочка.(
	|		НомерСтроки,
	|		Дата,
	|		Сумма
	|	),
	|	ВЫБОР
	|		КОГДА Договор.Контрагент.ЮридическоеЛицо
	|			ТОГДА Договор.Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(Договор.Контрагент.Фамилия, 1, 20) + "" "" + ПОДСТРОКА(Договор.Контрагент.Имя, 1, 20) + "" "" + ПОДСТРОКА(Договор.Контрагент.Отчество, 1, 20)
	|	КОНЕЦ КАК ФИОКлиента,
	|	Договор.Контрагент.ИНН КАК КлиентИНН,
	|	Договор.Контрагент.КПП КАК КлиентКПП,
	|	Договор.Контрагент.ОГРН КАК КлиентОГРН,
	|	Договор.Контрагент.ЮридическоеЛицо КАК ФизЮрЛицо,
	|	Договор.Контрагент.ЮридическийАдрес КАК КлиентЮридическийАдрес,
	|	Договор.Контрагент.Руководитель КАК КонтрагентРуководитель,
	|	Договор.Контрагент.ДействуетНаОсновании КАК КонтрагентДействуетНаОсновании,
	|	Договор.Спецификация.ДатаДоставки КАК ДатаДоставки,
	|	Договор.Спецификация.ДатаИзготовления КАК ДатаИзготовления,
	|	Договор.Спецификация.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Договор.Спецификация.ДатаМонтажа КАК ДатаМонтажа,
	|	Договор.Спецификация.Изделие КАК Изделие,
	|	ЕСТЬNULL(СуммаРассрочки.ИтогоРассрочка, 0) КАК СуммаРассрочки,
	|	Договор.Спецификация.АдресМонтажа КАК Адрес,
	|	Договор.Автор.ФизическоеЛицо.ВЛице КАК АвторРодительныйПадеж,
	|	Договор.Спецификация,
	|	Договор.Автор.ФизическоеЛицо КАК Автор,
	|	Договор.Спецификация.Номер,
	|	Договор.Контрагент.ПаспортСерия КАК СерияПаспорта,
	|	Договор.Контрагент.ПаспортНомер КАК НомерПаспорта,
	|	Договор.Контрагент.ПаспортДатаВыдачи КАК ДатаВыдачиПаспорта,
	|	Договор.Контрагент.ПаспортКемВыдан КАК КемВыдан,
	|	Договор.Контрагент.Телефон КАК ТелефонСотовый,
	|	Договор.Контрагент.ТелефонДополнительный КАК ТелефонКонтактный,
	|	Договор.Контрагент.БанковскиеРеквизиты КАК БанковскиеРеквизиты,
	|	Договор.Контрагент.Наименование КАК НаименованиеЮрЛица,
	|	ВЫБОР
	|		КОГДА Договор.Спецификация.ПакетУслуг = ЗНАЧЕНИЕ(Перечисление.ПакетыУслуг.ДоставкаДоКлиентаИМонтаж)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Монтаж,
	|	ВЫБОР
	|		КОГДА Договор.Спецификация.ПакетУслуг <> ЗНАЧЕНИЕ(Перечисление.ПакетыУслуг.СамовывозОтПроизводителя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Доставка
	|ИЗ
	|	Документ.Договор КАК Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогиРассрочка КАК СуммаРассрочки
	|		ПО Договор.Ссылка = СуммаРассрочки.Ссылка
	|ГДЕ
	|	Договор.Ссылка В(&МассивСсылок)
	|	И Договор.Проведен";
	
	Запрос.Параметры.Вставить("МассивСсылок", МассивОбъектов);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // Запрос()

Функция ПолучитьСуммуДопСоглашений (Договор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ДополнительноеСоглашение.СуммаДокумента) КАК Сумма
	|ИЗ
	|	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	|ГДЕ
	|	ДополнительноеСоглашение.Договор = &Договор
	|	И ДополнительноеСоглашение.Проведен";
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Сумма = Выборка.Сумма;
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции 

Функция ПолучитьАктВыполнения(ДоговорСсылка) Экспорт
	
	МассивДокументов = ЛексСервер.НайтиПодчиненныеДокументы(ДоговорСсылка, "Документ.АктВыполненияДоговора", "Договор");
	Если МассивДокументов.Количество() = 1 Тогда
		Возврат МассивДокументов[0];
	ИначеЕсли МассивДокументов.Количество() = 0 Тогда
		Возврат Документы.Договор.ПустаяСсылка();
	Иначе
		ВызватьИсключение "Ошибка 717: Нарушена связь документов 'Договор' и 'Акта выполнения'";
	КонецЕсли;
	
КонецФункции // ПолучитьМонтаж()

Функция ПолучитьСуммуАванса(ДоговорСсылка) Экспорт
	
	Ответ = 0;
	Если НЕ ДоговорСсылка.Пустая() Тогда
		СвойстваДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДоговорСсылка, "Контрагент, Подразделение, Дата");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Договор", ДоговорСсылка);
		Запрос.УстановитьПараметр("Контрагент", СвойстваДоговора.Контрагент);
		Запрос.УстановитьПараметр("Подразделение", СвойстваДоговора.Подразделение);
		Запрос.УстановитьПараметр("Период", КонецДня(СвойстваДоговора.Дата));
		
		Запрос.Текст =		
		"ВЫБРАТЬ
		|	УправленческийОстатки.СуммаОстатокКт,
		|	УправленческийОстатки.Субконто1,
		|	УправленческийОстатки.Субконто2,
		|	УправленческийОстатки.Подразделение
		|ИЗ
		|	РегистрБухгалтерии.Управленческий.Остатки(
		|			&Период,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВзаиморасчетыСПокупателями),
		|			,
		|			Подразделение = &Подразделение
		|				И Субконто1 = &Контрагент
		|				И Субконто2 = &Договор) КАК УправленческийОстатки";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Ответ = Выборка.СуммаОстатокКт;
		КонецЕсли;
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьСуммуОстатка(ДоговорСсылка) Экспорт
	
	Ответ = 0;
	Если НЕ ДоговорСсылка.Пустая() Тогда
		СвойстваДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДоговорСсылка, "Контрагент, Подразделение");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Договор", ДоговорСсылка);
		Запрос.УстановитьПараметр("Контрагент", СвойстваДоговора.Контрагент);
		Запрос.УстановитьПараметр("Подразделение", СвойстваДоговора.Подразделение);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УправленческийОстатки.Субконто1,
		|	УправленческийОстатки.Субконто2,
		|	ВЫБОР
		|		КОГДА УправленческийОстатки.СуммаОстаток <= 0
		|			ТОГДА УправленческийОстатки.Субконто2.СуммаДокумента + УправленческийОстатки.СуммаОстаток
		|		ИНАЧЕ УправленческийОстатки.СуммаОстаток
		|	КОНЕЦ КАК Остаток
		|ИЗ
		|	РегистрБухгалтерии.Управленческий.Остатки(
		|			,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВзаиморасчетыСПокупателями),
		|			,
		|			Подразделение = &Подразделение
		|				И Субконто1 = &Контрагент
		|				И Субконто2 = &Договор) КАК УправленческийОстатки";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Ответ = Выборка.Остаток;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции