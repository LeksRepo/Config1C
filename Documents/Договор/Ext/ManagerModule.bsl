
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) Экспорт
	
	ЛексСервер.ПолучитьПредставлениеДокумента(Данные, Представление, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПечатьУведомлениеОЗадолженности(ТабДок, Ссылка) Экспорт
	
	ФормСтрока = "Л = ru_RU; ДП = Истина";
	ПарПредмета="рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 0";
	
	Макет = Документы.Договор.ПолучитьМакет("ПечатьУведомлениеОЗадолженности");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокДоговор.Ссылка,
	|	ДокДоговор.Дата КАК ДатаДоговора,
	|	ДокДоговор.Клиент КАК НаименованиеКлиента,
	|	ДокДоговор.СкидкаНаИзделия,
	|	ДокДоговор.СуммаДокумента,
	|	ДокДоговор.Клиент.ПолныйАдрес КАК КлиентПолныйАдрес,
	|	ДокДоговор.Клиент.ТелефонКонтактный КАК ТелефонКлиента,
	|	ДокДоговор.Рассрочка.(
	|		Дата КАК ДатаРассрочки,
	|		Сумма КАК СуммаРассрочки
	|	),
	|	ДокДоговор.Подразделение.Организация КАК НаименованиеОрганизации,
	|	ДокДоговор.Подразделение.Организация.ЮридическийАдрес КАК ЮридическийАдресОрганизации,
	|	ДокДоговор.Офис.Телефон КАК ТелефонОфиса,
	|	ДокДоговор.Номер КАК НомерДоговора
	|ИЗ
	|	Документ.Договор КАК ДокДоговор
	|ГДЕ
	|	ДокДоговор.Ссылка В(&Ссылка)";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОблШапка = Макет.ПолучитьОбласть("Шапка");
	ОблСтрокаРассрочки = Макет.ПолучитьОбласть("СтрокаРассрочки");
	ОблСтрокаОплаты = Макет.ПолучитьОбласть("СтрокаОплаты");
	ОблЧасть2 = Макет.ПолучитьОбласть("Часть2");
	ОблЧасть3 = Макет.ПолучитьОбласть("Часть3");
	ОблПодвал = Макет.ПолучитьОбласть("Подвал");
	ОблИзменения = Макет.ПолучитьОбласть("Изменения");
	ОблСтрокаИзменения = Макет.ПолучитьОбласть("СтрокаИзменения");
	
	ТабДок.Очистить();
	
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		СуммаРассрочек = 0;
		СуммаОплаты = 0;
		ПоследнийДеньОплаты = Выборка.ДатаДоговора;
		
		ОблШапка.Параметры.Заполнить(Выборка);
		ОблШапка.Параметры.ДатаПисьма = Формат(ТекущаяДата(), "ДЛФ=DD");
		ТабДок.Вывести(ОблШапка, Выборка.Уровень());
		
		// рассрочки
		ВыборкаРассрочки = Выборка.Рассрочка.Выбрать();
		Пока ВыборкаРассрочки.Следующий() Цикл
			ОблСтрокаРассрочки.Параметры.Заполнить(ВыборкаРассрочки);
			ОблСтрокаРассрочки.Параметры.СуммаРассрочкиПрописью = ЧислоПрописью(ВыборкаРассрочки.СуммаРассрочки, ФормСтрока, ПарПредмета);
			ТабДок.Вывести(ОблСтрокаРассрочки);
			Если ВыборкаРассрочки.ДатаРассрочки < ТекущаяДата() Тогда				
				СуммаРассрочек = СуммаРассрочек + ВыборкаРассрочки.СуммаРассрочки;
			КонецЕсли;
		КонецЦикла;
		
		ОблЧасть2.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОблЧасть2);
		
		// оплаты
		ЗапросОплаты = Новый Запрос;
		ЗапросОплаты.Текст =
		"ВЫБРАТЬ
		|	Платежи.Сумма КАК СуммаПлатежа,
		|	Платежи.Дата КАК ДатаПлатежа
		|ИЗ
		|	Документ.Платежи КАК Платежи
		|ГДЕ
		|	Платежи.Договор = &СсылкаНаДоговор
		|	И Платежи.Проведен
		|	И Платежи.Дата > КОНЕЦПЕРИОДА(&ДатаДоговора, ДЕНЬ)";
		
		ЗапросОплаты.УстановитьПараметр("СсылкаНаДоговор", Выборка.Ссылка); 
		ЗапросОплаты.УстановитьПараметр("ДатаДоговора", Выборка.ДатаДоговора);
		РезультатОплаты = ЗапросОплаты.Выполнить();
		Если НЕ РезультатОплаты.Пустой() Тогда
			ВыборкаОплаты = РезультатОплаты.Выбрать();
			Пока ВыборкаОплаты.Следующий() Цикл
				ОблСтрокаОплаты.Параметры.Заполнить(ВыборкаОплаты);
				ОблСтрокаОплаты.Параметры.СуммаПлатежаПрописью = ЧислоПрописью(ВыборкаОплаты.СуммаПлатежа, ФормСтрока, ПарПредмета);
				
				ТабДок.Вывести(ОблСтрокаОплаты);
				СуммаОплаты = СуммаОплаты + ВыборкаОплаты.СуммаПлатежа;
			КонецЦикла;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////
		// рассчет пени
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорРассрочка.Дата КАК Дата,
		|	ДоговорРассрочка.Сумма КАК Рассрочка,
		|	0 КАК Платеж
		|ИЗ
		|	Документ.Договор.Рассрочка КАК ДоговорРассрочка
		|ГДЕ
		|	ДоговорРассрочка.Ссылка = &Ссылка
		|	И ДоговорРассрочка.Дата < &ТекущаяДата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Платежи.Дата,
		|	0,
		|	Платежи.Сумма
		|ИЗ
		|	Документ.Платежи КАК Платежи
		|ГДЕ
		|	Платежи.Договор = &Ссылка
		|	И Платежи.Дата > КОНЕЦПЕРИОДА(&ДатаДоговора, ДЕНЬ)
		|	И Платежи.Дата < &ТекущаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		ДатаДоговора = Выборка.Ссылка.Дата;
		Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
		Запрос.УстановитьПараметр("ДатаДоговора", ДатаДоговора);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		СтрокаСегодня = ТЗ.Добавить();
		СтрокаСегодня.Дата = ТекущаяДата();
		СтрокаСегодня.Рассрочка = 0;
		СтрокаСегодня.Платеж = 0;
		
		СуммаПени = 0;
		Платежи = 0;
		Рассрочки = 0;
		СуммаПросрочки = 0;
		ПрошлаяДата = ДатаДоговора;
		НачислятьПеню = Ложь;
		
		Для каждого Стр Из ТЗ Цикл
			
			ОбрабатываемаяДата = НачалоДня(Стр.Дата);
			
			Если НачислятьПеню Тогда
				ДнейПросрочки = Цел((ОбрабатываемаяДата - ПрошлаяДата) / 86400);
				СуммаПени = СуммаПени + СуммаПросрочки / 100 * ДнейПросрочки;
				НачислятьПеню = Ложь;
			КонецЕсли;
			
			Платежи = Стр.Платеж + Платежи;
			Рассрочки = Стр.Рассрочка + Рассрочки;
			СуммаПросрочки = Рассрочки - Платежи;
			
			НачислятьПеню = СуммаПросрочки > 0;
			ПрошлаяДата = ОбрабатываемаяДата + 86400;
			
		КонецЦикла;
		
		СуммаПени = Окр(СуммаПени, 2);
		
		// рассчет пени
		///////////////////////////////////////////////////////////////
		
		ОбщаяСуммаДолга = СуммаРассрочек - СуммаОплаты;
		
		ОблЧасть3.Параметры.Заполнить(Выборка);
		ОблЧасть3.Параметры.ОбщаяСуммаДолга = ОбщаяСуммаДолга;
		ОблЧасть3.Параметры.ОбщаяСуммаДолгаПрописью = ЧислоПрописью(ОбщаяСуммаДолга, ФормСтрока, ПарПредмета);
		ОблЧасть3.Параметры.ДатаПисьма = Формат(ТекущаяДата(), "ДЛФ=DD");
		ОблЧасть3.Параметры.СуммаПени = СуммаПени;
		ОблЧасть3.Параметры.СуммаПениПрописью = ЧислоПрописью(СуммаПени, ФормСтрока, ПарПредмета);
		
		ТабДок.Вывести(ОблЧасть3);
		
		ОблПодвал.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОблПодвал);
		
		ВставлятьРазделительСтраниц = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПечатьДоговора(Выборка, ОбъектыПечати) // МассивОбъектов, ОбъектыПечати, ИмяМакета,
	
	ФормСтрока = "Л = ru_RU; ДП = Истина";
	ПарПредмета ="рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 0";
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_Договор";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Макет = Документы.Договор.ПолучитьМакет("Договор");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1; 
		
		СтороныДоговора = Новый Структура;
		СтороныДоговора = СтороныДоговора(Выборка.Контрагент);
		
		Артикул = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Выборка.НомерСпецификации, "0");
		СтоимостьИзделияПрописью = ЧислоПрописью(Выборка.СуммаДокумента, ФормСтрока, ПарПредмета);
		СтрокаТовары = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 артикул № %2 цена %3 руб. (%4) 1 шт.,", Выборка.Изделие, Артикул , Выборка.СуммаДокумента, СтоимостьИзделияПрописью);
		
		Если НЕ Выборка.ЮридическоеЛицо Тогда
			ОтговоркаДляФизлиц = "Мебельный комплект предназначен для личного, семейного, домашнего или иного использования, не связанного с предпринимательской деятельностью.";
		Иначе
			ОтговоркаДляФизлиц = "";
		КонецЕсли;
		
		Пункт1_1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("1.1. %3 приобретает следующий товар: %1 далее 'Мебельный комплект'. %2", СтрокаТовары, ОтговоркаДляФизлиц, СтороныДоговора.ПокупательЗаказчик);
		
		ПунктСборка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("1.12. Сборку мебельного комплекта %1 производит самостоятельно.", СтороныДоговора.ПокупательЗаказчик);
		ДатаОтгрузки = Формат(Выборка.ДатаОтгрузки, "ДЛФ=DD");
		ПунктДоставка = "1.11. %3 осуществляет доставку деталей Мебельного комплекта %1 по адресу: %2";
		ПунктДоставка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПунктДоставка, ДатаОтгрузки, Выборка.Адрес, СтороныДоговора.ПродавецИсполнитель);
		
		Если Выборка.ПакетУслуг = Перечисления.ПакетыУслуг.ДоставкаДоКлиентаИМонтаж Тогда
			ДатаДоговора = Формат(Выборка.ДатаДоговора, "ДЛФ=DD");
			
			Если ЗначениеЗаполнено(Выборка.ДатаМонтажа) Тогда
				ДатаМонтажа = Формат(Выборка.ДатаМонтажа, "ДЛФ=DD");
				ДатаУстановитьНеПозднее = Формат(Выборка.ДатаМонтажа + 30*24*3600, "ДЛФ=DD");
			Иначе
				ДатаМонтажа = "'дата по соглашению сторон'";
				ДатаУстановитьНеПозднее = "'дата по соглашению сторон'";
			КонецЕсли;
			
			УстановитьНеПозднее = " не позднее" + ДатаУстановитьНеПозднее+".";
			ПунктСборка = "1.12. %3, без взимания дополнительной платы, приступает к сборке Мебельного комплекта %1. Сборка осуществляется согласно ТПМК и Инструкции по сборке мебельного комплекта. %3 передает Мебельный комплект в собранном виде и комплектности согласно ТПМК не позднее %4";
			ПунктСборка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПунктСборка, ДатаМонтажа, УстановитьНеПозднее, СтороныДоговора.ПродавецИсполнитель, Формат(ДатаУстановитьНеПозднее, "ДЛФ=DD"));
		ИначеЕсли Выборка.ПакетУслуг = Перечисления.ПакетыУслуг.ДоставкаДоТранспортнойКомпании Тогда
			ПунктДоставка = "1.11 Детали Мебельного комплекта %1 доставляет до транспортной компании.";
			ПунктДоставка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПунктДоставка, СтороныДоговора.ПродавецИсполнитель);
		ИначеЕсли Выборка.ПакетУслуг = Перечисления.ПакетыУслуг.СамовывозОтПроизводителя Тогда
			ПунктДоставка = "1.11 Доставку деталей Мебельного комплекта %1 производит самостоятельно.";
			ПунктДоставка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПунктДоставка, СтороныДоговора.ПокупательЗаказчик);
		КонецЕсли;
		
		////////////////////////////////////////////////////////
		// Рассрочка
		//До выяснения что там с платежами - будет тупо ноль
		СуммаПервогоПлатежа = ПолучитьСуммуАванса(Выборка.Договор);
		СуммаПервогоПлатежаПрописью = ЧислоПрописью(СуммаПервогоПлатежа, ФормСтрока, ПарПредмета);
		
		ВыборкаРассрочка = Выборка.Рассрочка.Выбрать();
		
		Если ВыборкаРассрочка.Количество() = 0 Тогда
			
			ПунктРассрочка = "1.4. Рассрочка по оплате Мебельного комплекта не предоставляется.";
			
		Иначе
			
			СуммаРассрочкиПрописью = ЧислоПрописью(Выборка.СуммаРассрочки, ФормСтрока, ПарПредмета);
			СтрокаРассрочек = Символы.ПС;
			
			Пока ВыборкаРассрочка.Следующий() Цикл
				
				РассрочкаПрописью = ЧислоПрописью(ВыборкаРассрочка.Сумма, ФормСтрока, ПарПредмета);
				НоваяСтрокаРассрочек = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 руб. (%3)%4",
				Формат(ВыборкаРассрочка.Дата, "ДЛФ=DD"),
				ВыборкаРассрочка.Сумма,
				РассрочкаПрописью,
				Символы.ПС);
				СтрокаРассрочек = СтрокаРассрочек + НоваяСтрокаРассрочек;
				
			КонецЦикла;
			
			ПунктРассрочка = "1.4. %5 предоставляет %6 рассрочку оплаты за Мебельный комплект в сумме %1 руб. (%2) на %3 месяца(-ев). График оплаты: %4";
			ПунктРассрочка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПунктРассрочка,
			Выборка.СуммаРассрочки,
			СуммаРассрочкиПрописью,
			Выборка.МесяцевРассрочки,
			СтрокаРассрочек,
			СтороныДоговора.ПродавецИсполнитель,
			СтороныДоговора.ПокупателюЗаказчику);
			
		КонецЕсли;
		
		Если Выборка.ЮридическоеЛицо Тогда
			ТекстЗаголовка = "Договор изготовления мебельного комплекта № %1";
		Иначе
			ТекстЗаголовка = "Договор розничной купли-продажи № %1";
		КонецЕсли;
		ЗаголовокДоговора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Выборка.НомерДоговора);
		
		ОбластьЗаголовок.Параметры.ЗаголовокДоговора = ЗаголовокДоговора;
		ТабДок.Вывести(ОбластьЗаголовок);
		
		ВывестиОбластьШапкаДоговора(ТабДок, Выборка.Ссылка);
		
		ОбластьТело = Макет.ПолучитьОбласть("Тело");
		ОбластьТело.Параметры.ПунктРассрочка = ПунктРассрочка;
		ОбластьТело.Параметры.Заполнить(Выборка);
		ОбластьТело.Параметры.Пункт1_1 = Пункт1_1;
		ОбластьТело.Параметры.СуммаДокументаПрописью = ЧислоПрописью(Выборка.СуммаДокумента, ФормСтрока, ПарПредмета);
		ОбластьТело.Параметры.ДатаДоговора = ДатаДоговора;
		ОбластьТело.Параметры.ПунктДоставка = ПунктДоставка;
		ОбластьТело.Параметры.ПунктСборка = ПунктСборка;
		ОбластьТело.Параметры.СуммаПервогоПлатежа = СуммаПервогоПлатежа;
		ОбластьТело.Параметры.СуммаПервогоПлатежаПрописью = СуммаПервогоПлатежаПрописью;
		ОбластьТело.Параметры.Заполнить(СтороныДоговора);
		ТабДок.Вывести(ОбластьТело);
		
		ВывестиОбластьРеквизитыДоговора(ТабДок, Выборка.Ссылка);
		
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции // УсловияДоставкиВыписка()

Функция ПечатьУсловияДоставкиВыписка(Выборка, ОбъектыПечати)
	
	ТабДок 	= Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_УсловияДоставкиВыписка";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Макет 	= Документы.Договор.ПолучитьМакет("УсловияДоставкиВыписка");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1; 
		
		/////////////////////////////////////////////////////////
		// Печать Условий доставки и сборки
		ОбластьУсловияДоставкиВыписка 									= Макет.ПолучитьОбласть("Тело");
		ОбластьУсловияДоставкиВыписка.Параметры.ФИОКлиента 	= Выборка.ФИОКлиента;
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДок.Вывести(ОбластьУсловияДоставкиВыписка);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьУсловияДоставкиВыписка()

Функция ПечатьТитульныйЛистТПМК(Выборка, ОбъектыПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ТитульныйЛистТПМК";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	ФормСтрока 	= "Л = ru_RU; ДП = Истина";
	ПарПредмета	="рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 0";
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		/////////////////////////////////////////////////////////
		// Технический паспорт мебельного комплекта (ТПМК)
		// Титульный лист
		СтрокаТоварыТПМК= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 артикул %2%3",
		Выборка.Изделие, 1, Символы.ПС);
		
		Макет = Документы.Договор.ПолучитьМакет("ТитульныйЛистТПМК");
		ОбластьТитульныйЛистТПМК = Макет.ПолучитьОбласть("Титульник");
		ОбластьИнструкцияПоЭксплуатации = Макет.ПолучитьОбласть("ИнструкцияПоЭксплуатации");
		ОбластьГарантийныеОбязательства = Макет.ПолучитьОбласть("ГарантийныеОбязательства");
		ОбластьТитульныйЛистТПМК.Параметры.ДатаДоговора = Формат(Выборка.ДатаДоговора, "ДФ=""yyyy 'г.'""");
		ОбластьТитульныйЛистТПМК.Параметры.СтрокаТоварыТПМК = СтрокаТоварыТПМК;
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДок.Вывести(ОбластьТитульныйЛистТПМК);
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДок.Вывести(ОбластьИнструкцияПоЭксплуатации);
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДок.Вывести(ОбластьГарантийныеОбязательства);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьТитульныйЛистТПМК()

Функция ПечатьИнструкцияПоСборке(ИмяМакета, Выборка, ОбъектыПечати)
	
	ТабДок 										= Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати 	= "ПараметрыПечати_ИнструкцияПоСборке";
	ТабДок.АвтоМасштаб 					= Истина;
	ТабДок.ОтображатьСетку 			= Ложь;
	ТабДок.Защита 							= Истина;
	ТабДок.ТолькоПросмотр 				= Истина;
	ТабДок.ОтображатьЗаголовки 		= Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1; 
		
		Если ИмяМакета = "ИнструкцияПоСборкеШкаф" Тогда
			
			МакетИнструкцияПоСборке = Документы.Договор.ПолучитьМакет("ИнструкцияПоСборкеШкаф");
			
		ИначеЕсли ИмяМакета = "ИнструкцияПоСборкеКухня" Тогда
			
			МакетИнструкцияПоСборке = Документы.Договор.ПолучитьМакет("ИнструкцияПоСборкеКухня");
			
		ИначеЕсли ИмяМакета = "ИнструкцияПоСборкеКорпуснаяМебель" Тогда
			
			МакетИнструкцияПоСборке = Документы.Договор.ПолучитьМакет("ИнструкцияПоСборкеКорпуснаяМебель");
			
		КонецЕсли;
		
		Если МакетИнструкцияПоСборке <> Неопределено Тогда
			
			ОбластьИнструкцияПоСборке = МакетИнструкцияПоСборке.ПолучитьОбласть("Тело");
			ТабДок.Вывести(МакетИнструкцияПоСборке);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);
		
	КонецЦикла;
	
	//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, 
	//0, ОбъектыПечати, Выборка.Ссылка);
	
	Возврат ТабДок;
	
КонецФункции // ПечатьИнструкцияПоСборкеШкаф()

Функция ПечатьЭскиз(Выборка, ОбъектыПечати)
	
	ТабДок 										= Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати 	= "ПараметрыПечати_Эскиз";
	ТабДок.АвтоМасштаб 					= Истина;
	ТабДок.ОтображатьСетку 			= Ложь;
	ТабДок.Защита 							= Истина;
	ТабДок.ТолькоПросмотр 				= Истина;
	ТабДок.ОтображатьЗаголовки 		= Ложь;
	Макет 										= Документы.Договор.ПолучитьМакет("Эскиз");
	ОбластьШапка 							= Макет.ПолучитьОбласть("Шапка");
	ОбластьРисунок 							= Макет.ПолучитьОбласть("Рисунок");
	ОбластьПодвал 							= Макет.ПолучитьОбласть("Подвал");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1; 
		
		Спецификация= Выборка.Спецификация;
		// Эскизы
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Спецификация", Спецификация);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК ПрикрепленныйФайл
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &Спецификация";
		
		ВыборкаФайлов 		= Запрос.Выполнить().Выбрать();
		МассивФайлов 		= Новый Массив;
		ОбластьШапка.Параметры.Заполнить(Выборка);
		
		Пока ВыборкаФайлов.Следующий() Цикл
			
			МассивФайлов.Добавить(ВыборкаФайлов.ПрикрепленныйФайл);
			
		КонецЦикла;
		
		Для каждого Файл Из МассивФайлов Цикл
			
			Если НЕ Файл.ПометкаУдаления Тогда
				
				Рисунок 				= ОбластьРисунок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
				Рисунок.Линия 		= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
				Рисунок.Верх 			= 5; 
				Рисунок.Высота 		= 350; 
				Рисунок.Ширина 	= 100; 
				Рисунок.Лево 		= 5;
				Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Версия", Файл.ТекущаяВерсия);
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ХранимыеФайлыВерсий.ХранимыйФайл КАК Файл,
				|	ХранимыеФайлыВерсий.ВерсияФайла
				|ИЗ
				|	РегистрСведений.ХранимыеФайлыВерсий КАК ХранимыеФайлыВерсий
				|ГДЕ
				|	ХранимыеФайлыВерсий.ВерсияФайла = &Версия";
				
				НоваяВыборка = Запрос.Выполнить().Выбрать();
				НоваяВыборка.Следующий();
				Картинка 		= НоваяВыборка.Файл.Получить();
				Расширение 	= НоваяВыборка.ВерсияФайла.Расширение;
				
				Если Расширение = "jpg" или Расширение = "jpeg" или Расширение = "jp2" или Расширение = "jpe" или Расширение = "bmp" 
					или Расширение = "gif" или Расширение = "png" Тогда
					
					ТабДок.Вывести(ОбластьШапка);
					Рисунок.Картинка = Новый Картинка(Картинка);
					ТабДок.Вывести(ОбластьРисунок);
					ТабДок.Вывести(ОбластьПодвал);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции 

Функция ПечатьСпецификации(Выборка, ОбъектыПечати)
	
	ТабДок 										= Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати 	= "ПараметрыПечати_ИнструкцияПоСборке";
	ТабДок.АвтоМасштаб 					= Истина;
	ТабДок.ОтображатьСетку 			= Ложь;
	ТабДок.Защита 							= Истина;
	ТабДок.ТолькоПросмотр 				= Истина;
	ТабДок.ОтображатьЗаголовки 		= Ложь;
	Макет 										= Документы.Договор.ПолучитьМакет("ИспользуемыеМатериалы");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ОбластьШапка 						= Макет.ПолучитьОбласть("Шапка");
		ОбластьЗаголовок 					= Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаНоменклатуры 	= Макет.ПолучитьОбласть("ШапкаНоменклатуры");
		ОбластьСтрока 						= Макет.ПолучитьОбласть("Строка");
		ОбластьПодвал						= Макет.ПолучитьОбласть("Подвал");
		ОбластьПустаяСтрока				= Макет.ПолучитьОбласть("ПустаяСтрока");
		ТабДок.Вывести(ОбластьШапка);
		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.Вывести(ОбластьШапкаНоменклатуры);
		Спецификация 	= Выборка.Спецификация;
		Запрос 				= Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Спецификация);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпецификацияСписокНоменклатуры.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(СпецификацияСписокНоменклатуры.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
		|ИЗ
		|	Документ.Спецификация.СписокНоменклатуры КАК СпецификацияСписокНоменклатуры
		|ГДЕ
		|	СпецификацияСписокНоменклатуры.Ссылка = &Ссылка
		|	И СпецификацияСписокНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
		|
		|СГРУППИРОВАТЬ ПО
		|	СпецификацияСписокНоменклатуры.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	СпецификацияСписокНоменклатуры.Номенклатура.НоменклатурнаяГруппа";
		
		ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать();//Спецификация.СписокНоменклатуры;
		НомерСтроки = 0;
		
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			//Для каждого Строка Из Номенклатура Цикл
			//	
			//	Если Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
			
			ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатуры);
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
			ТабДок.Вывести(ОбластьСтрока);
			
			//КонецЕсли;
			
		КонецЦикла;
		
		ТабДок.Вывести(ОбластьПустаяСтрока);
		ОбластьПодвал.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьСпецификации()

Функция ПечатьИзделийПоКаталогу(Выборка, ОбъектыПечати)
	
	ТабДок 										= Новый ТабличныйДокумент;	
	ТабДок.ИмяПараметровПечати 		= "ПараметрыПечати_ПоКаталогу";
	ТабДок.АвтоМасштаб 					= Истина;
	ТабДок.ОтображатьСетку 			= Ложь;
	ТабДок.Защита 							= Истина;
	ТабДок.ТолькоПросмотр 				= Истина;
	ТабДок.ОтображатьЗаголовки 		= Ложь;
	ТабДок.ОриентацияСтраницы 		= ОриентацияСтраницы.Ландшафт;
	Макет 										= Документы.Договор.ПолучитьМакет("ПоКаталогу");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		Секция = Макет.ПолучитьОбласть("R5C1");
		СекцияРазмерыВерх = Макет.ПолучитьОбласть("R6C1");
		СекцияНиз = Макет.ПолучитьОбласть("R8C1");
		СекцияРазмерыНиз = Макет.ПолучитьОбласть("R9C1");
		
		Спецификация = Выборка.Спецификация;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Спецификация);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХранимыеФайлыВерсий.ХранимыйФайл КАК Изображение,
		|	ХранимыеФайлыВерсий.ВерсияФайла.Владелец.ВладелецФайла КАК Изделие,
		|	ХранимыеФайлыВерсий.ВерсияФайла.Владелец.РасположениеКартинки КАК РасположениеКартинки
		|ПОМЕСТИТЬ ФайлыКаталога
		|ИЗ
		|	РегистрСведений.ХранимыеФайлыВерсий КАК ХранимыеФайлыВерсий
		|ГДЕ
		|	ХранимыеФайлыВерсий.ВерсияФайла.Владелец.ВладелецФайла ССЫЛКА Справочник.КаталогИзделий
		|	И ХранимыеФайлыВерсий.ВерсияФайла.Владелец.ТекущаяВерсия.НомерВерсии = ХранимыеФайлыВерсий.ВерсияФайла.НомерВерсии
		|	И ХранимыеФайлыВерсий.ВерсияФайла.Владелец.Основной
		|	И НЕ ХранимыеФайлыВерсий.ВерсияФайла.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпецификацияСписокИзделийПоКаталогу.ВысотаИзделия,
		|	СпецификацияСписокИзделийПоКаталогу.ГлубинаИзделия,
		|	СпецификацияСписокИзделийПоКаталогу.Изделие,
		|	СпецификацияСписокИзделийПоКаталогу.ШиринаИзделия КАК ШиринаИзделия,
		|	СпецификацияСписокИзделийПоКаталогу.НомерСтроки,
		|	ФайлыКаталога.Изображение,
		|	СпецификацияСписокИзделийПоКаталогу.Изделие.ВидИзделия КАК ВидИзделия
		|ИЗ
		|	Документ.Спецификация.СписокИзделийПоКаталогу КАК СпецификацияСписокИзделийПоКаталогу
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФайлыКаталога КАК ФайлыКаталога
		|		ПО (СпецификацияСписокИзделийПоКаталогу.Изделие = ФайлыКаталога.Изделие
		|				И ВЫБОР
		|					КОГДА ФайлыКаталога.РасположениеКартинки = ЗНАЧЕНИЕ(Перечисление.РасположениеКартинки.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ СпецификацияСписокИзделийПоКаталогу.РасположениеИзделия = ФайлыКаталога.РасположениеКартинки
		|				КОНЕЦ)
		|ГДЕ
		|	СпецификацияСписокИзделийПоКаталогу.Ссылка В(&Ссылка)
		|ИТОГИ
		|	СУММА(ШиринаИзделия)
		|ПО
		|	ВидИзделия";
		
		ВыборкаПоКоробам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоКоробам.Следующий() Цикл
			
			ВыборкаПоРасположению = ВыборкаПоКоробам.Выбрать();
			Если ВыборкаПоКоробам.ВидИзделия = Перечисления.ВидыИзделийПоКаталогу.КухняВерхний Тогда
				ТабДок.Вывести(Секция);
				Пока ВыборкаПоРасположению.Следующий() Цикл
					
					Секция.Область().ШиринаКолонки = 40;
					Рисунок = Секция.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
					Рисунок.Лево = 3;
					Рисунок.Верх = 20;
					Рисунок.Высота = 25;
					Рисунок.Ширина = 25;
					Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
					
					Если ЗначениеЗаполнено(ВыборкаПоРасположению.Изображение) Тогда
						Рисунок.Картинка = Новый Картинка(ВыборкаПоРасположению.Изображение.Получить());
					Иначе
						Рисунок.Картинка = Новый Картинка;
					КонецЕсли;
					
					Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
					
					Заголовок = Секция.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
					Заголовок.Лево = 3;
					Заголовок.Верх = 10;
					Заголовок.Высота = 10;
					Заголовок.Ширина = 25;
					Заголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					Заголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
					Заголовок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
					Заголовок.Текст = "Размеры: " + ВыборкаПоРасположению.ШиринаИзделия + "; " + ВыборкаПоРасположению.ВысотаИзделия + "; " + ВыборкаПоРасположению.ГлубинаИзделия;
					
					ТабДок.Присоединить(Секция, 1);
					
				КонецЦикла;
				
				Заголовок = СекцияРазмерыВерх.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
				Заголовок.Лево = 10;
				Заголовок.Верх = 1;
				Заголовок.Высота = 10;
				Заголовок.Ширина = 40;
				Заголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				Заголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				Заголовок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
				Заголовок.Шрифт = Новый Шрифт (,,Истина); //жирный
				Заголовок.Текст = "Ширина верхних изделий: " + ВыборкаПоКоробам.ШиринаИзделия;
				
				ТабДок.Вывести(СекцияРазмерыВерх);
				
			КонецЕсли;	
			
			Если ВыборкаПоКоробам.ВидИзделия = Перечисления.ВидыИзделийПоКаталогу.КухняНижний Тогда
				ТабДок.Вывести(СекцияНиз);
				Пока ВыборкаПоРасположению.Следующий() Цикл
					
					СекцияНиз.Область().ШиринаКолонки = 40;
					Рисунок = СекцияНиз.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
					Рисунок.Лево = 3;
					Рисунок.Верх = 20;
					Рисунок.Высота = 25;
					Рисунок.Ширина = 25;
					Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
					
					Если ЗначениеЗаполнено(ВыборкаПоРасположению.Изображение) Тогда
						Рисунок.Картинка = Новый Картинка(ВыборкаПоРасположению.Изображение.Получить());
					Иначе
						Рисунок.Картинка = Новый Картинка;
					КонецЕсли;
					
					Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
					
					Заголовок = СекцияНиз.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
					Заголовок.Лево = 3;
					Заголовок.Верх = 10;
					Заголовок.Высота = 10;
					Заголовок.Ширина = 25;
					Заголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					Заголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
					Заголовок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
					Заголовок.Текст = "Размеры: " + ВыборкаПоРасположению.ШиринаИзделия + "; " + ВыборкаПоРасположению.ВысотаИзделия + "; " + ВыборкаПоРасположению.ГлубинаИзделия;
					
					ТабДок.Присоединить(СекцияНиз, 2);	
					
				КонецЦикла;
				
				Заголовок = СекцияРазмерыНиз.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
				Заголовок.Лево = 10;
				Заголовок.Верх = 1;
				Заголовок.Высота = 10;
				Заголовок.Ширина = 40;
				Заголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				Заголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				Заголовок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
				Заголовок.Шрифт = Новый Шрифт (,,Истина); //жирный
				Заголовок.Текст = "Ширина нижних изделий: " + ВыборкаПоКоробам.ШиринаИзделия;
				
				ТабДок.Вывести(СекцияРазмерыНиз);
				
			КонецЕсли;
			
			//Если ВыборкаПоКоробам.ВидИзделия = Перечисления.Стороны.ПоЦентру Тогда
			//	ТабДок.Вывести(СекцияНиз);
			//	Пока ВыборкаПоРасположению.Следующий() Цикл
			//		
			//		СекцияНиз.Область().ШиринаКолонки = 40;
			//		Рисунок = СекцияНиз.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			//		Рисунок.Лево = 3;
			//		Рисунок.Верх = 20;
			//		Рисунок.Высота = 25;
			//		Рисунок.Ширина = 25;
			//		Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
			//		
			//		Если ЗначениеЗаполнено(ВыборкаПоРасположению.Изображение) Тогда
			//			Рисунок.Картинка = Новый Картинка(ВыборкаПоРасположению.Изображение.Получить());
			//		Иначе
			//			Рисунок.Картинка = Новый Картинка;
			//		КонецЕсли;
			//		
			//		Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
			//		
			//		Заголовок = СекцияНиз.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
			//		Заголовок.Лево = 3;
			//		Заголовок.Верх = 10;
			//		Заголовок.Высота = 10;
			//		Заголовок.Ширина = 25;
			//		Заголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			//		Заголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			//		Заголовок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
			//		Заголовок.Текст = "Размеры: " + ВыборкаПоРасположению.ШиринаИзделия + "; " + ВыборкаПоРасположению.ВысотаИзделия + "; " + ВыборкаПоРасположению.ГлубинаИзделия;
			//		
			//		ТабДок.Присоединить(СекцияНиз, 1);	
			//		
			//	КонецЦикла;
			//	
			//	Заголовок = СекцияРазмерыНиз.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
			//	Заголовок.Лево = 10;
			//	Заголовок.Верх = 1;
			//	Заголовок.Высота = 10;
			//	Заголовок.Ширина = 40;
			//	Заголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			//	Заголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			//	Заголовок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
			//	Заголовок.Шрифт = Новый Шрифт (,,Истина); //жирный
			//	Заголовок.Текст = "Ширина изделий: " + ВыборкаПоКоробам.ШиринаИзделия;
			//	
			//	ТабДок.Вывести(СекцияРазмерыНиз);
			//	
			//КонецЕсли;
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);	
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьИзделийШкафПоКаталогу(Выборка, ОбъектыПечати)
	
	ТабДок = Новый ТабличныйДокумент;	
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ШкафПоКаталогу";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Макет = Документы.Договор.ПолучитьМакет("ШкафПоКаталогу");
	ОбластьОсновноеПоле = Макет.ПолучитьОбласть("ОсновноеПоле");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		Спецификация = Выборка.Спецификация;
		СписокДверей = Спецификация.СписокДверей;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Спецификация);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХранимыеФайлыВерсий.ХранимыйФайл КАК Изображение,
		|	ХранимыеФайлыВерсий.ВерсияФайла.Владелец.ВладелецФайла КАК Изделие,
		|	ХранимыеФайлыВерсий.ВерсияФайла.Владелец.РасположениеКартинки
		|ПОМЕСТИТЬ ФайлыКаталога
		|ИЗ
		|	РегистрСведений.ХранимыеФайлыВерсий КАК ХранимыеФайлыВерсий
		|ГДЕ
		|	ХранимыеФайлыВерсий.ВерсияФайла.Владелец.ВладелецФайла ССЫЛКА Справочник.КаталогИзделий
		|	И ХранимыеФайлыВерсий.ВерсияФайла.Владелец.ТекущаяВерсия.НомерВерсии = ХранимыеФайлыВерсий.ВерсияФайла.НомерВерсии
		|	И ХранимыеФайлыВерсий.ВерсияФайла.Владелец.Основной
		|	И НЕ ХранимыеФайлыВерсий.ВерсияФайла.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпецификацияСписокИзделийПоКаталогу.ВысотаИзделия,
		|	СпецификацияСписокИзделийПоКаталогу.ГлубинаИзделия,
		|	СпецификацияСписокИзделийПоКаталогу.Изделие,
		|	СпецификацияСписокИзделийПоКаталогу.ШиринаИзделия КАК ШиринаИзделия,
		|	СпецификацияСписокИзделийПоКаталогу.НомерСтроки,
		|	ФайлыКаталога.Изображение КАК Изображение,
		|	СпецификацияСписокИзделийПоКаталогу.ВидИзделия КАК ВидИзделия,
		|	СпецификацияСписокИзделийПоКаталогу.Комментарий,
		|	СпецификацияСписокИзделийПоКаталогу.НоменклатураЛДСП,
		|	СпецификацияСписокИзделийПоКаталогу.КромкаЛДСП,
		|	СпецификацияСписокИзделийПоКаталогу.Ручка,
		|	СпецификацияСписокИзделийПоКаталогу.Изделие.НеВлияетНаОсновной КАК НеВлияетНаОсновной
		|ИЗ
		|	Документ.Спецификация.СписокИзделийПоКаталогу КАК СпецификацияСписокИзделийПоКаталогу
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФайлыКаталога КАК ФайлыКаталога
		|		ПО СпецификацияСписокИзделийПоКаталогу.Изделие = ФайлыКаталога.Изделие
		|			И (ВЫБОР
		|				КОГДА СпецификацияСписокИзделийПоКаталогу.ВидИзделия = ЗНАЧЕНИЕ(Перечисление.ВидыИзделийПоКаталогу.ЛевыйБоковойЭлемент)
		|					ТОГДА ФайлыКаталога.ВерсияФайлаВладелецРасположениеКартинки = ЗНАЧЕНИЕ(Перечисление.РасположениеКартинки.Левая)
		|				КОГДА СпецификацияСписокИзделийПоКаталогу.ВидИзделия = ЗНАЧЕНИЕ(Перечисление.ВидыИзделийПоКаталогу.ПравыйБоковойЭлемент)
		|					ТОГДА ФайлыКаталога.ВерсияФайлаВладелецРасположениеКартинки = ЗНАЧЕНИЕ(Перечисление.РасположениеКартинки.Правая)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|ГДЕ
		|	СпецификацияСписокИзделийПоКаталогу.Ссылка В(&Ссылка)";
		
		ВыборкаПоКоробам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОбластьОсновноеПоле.Параметры.НомерСпецификации = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Выборка.НомерСпецификации, "0");
		ОбластьОсновноеПоле.Параметры.НомерДоговора = Выборка.НомерДоговора;
		ОбластьОсновноеПоле.Параметры.ДатаДоговора = Формат(Выборка.ДатаДоговора,"ДФ=dd.MM.yyyy");
		ОбластьОсновноеПоле.Параметры.ФИОКлиента = Выборка.ФИОКлиента;
		
		Если Выборка.Монтаж Тогда
			ОбластьОсновноеПоле.Параметры.АдресМонтажа = Выборка.Адрес;
			ОбластьОсновноеПоле.Параметры.ВремяМонтажа = Формат(Спецификация.ДатаМонтажа,"ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		КоличествоДверей = "Нет";
		ВысотаПроема = 0;
		ШиринаПроема = 0;
		Для Каждого ЭлементДвери Из СписокДверей Цикл
			Если ЭлементДвери.ПоКаталогу Тогда
				КоличествоДверей = ЭлементДвери.Двери.Количество;
				ВысотаПроема = ЭлементДвери.Двери.ВысотаПроема;
				ШиринаПроема = ЭлементДвери.Двери.ШиринаПроема;
			КонецЕсли;	                              
		КонецЦикла;		                      
		
		ОбластьОсновноеПоле.Параметры.ВысотаПроема = ВысотаПроема;
		ОбластьОсновноеПоле.Параметры.ШиринаПроема = ШиринаПроема;
		ОбластьОсновноеПоле.Параметры.КоличествоДверей = КоличествоДверей;
		ОбластьОсновноеПоле.Параметры.ТелефонЗаказчика = Выборка.ТелефонКонтактный;
		Примечание = "";
		ШиринаИзделия = 0;
		ВысотаИзделия = 0;
		
		Пока ВыборкаПоКоробам.Следующий() Цикл
			
			Примечание = СокрЛП(Примечание) + Символы.ПС + ВыборкаПоКоробам.Комментарий;
			
			
			
			Если ВыборкаПоКоробам.ВидИзделия = Перечисления.ВидыИзделийПоКаталогу.Крыша Тогда
				//Рисунок.Лево = 4;
				//Рисунок.Верх = 35;
				//Рисунок.Высота = 25;
				//Рисунок.Ширина = 46;
				Рисунок = ОбластьОсновноеПоле.Области.Крыша;
				ВысотаИзделия = ВысотаИзделия + ?(НЕ ВыборкаПоКоробам.НеВлияетНаОсновной, ВыборкаПоКоробам.ВысотаИзделия, 0);
			ИначеЕсли ВыборкаПоКоробам.ВидИзделия = Перечисления.ВидыИзделийПоКаталогу.ОсновнойЭлемент Тогда
				//Рисунок.Лево = 14;
				//Рисунок.Верх = 60;
				//Рисунок.Высота = 90;
				//Рисунок.Ширина = 26;
				Рисунок = ОбластьОсновноеПоле.Области.Основной;
				ОбластьОсновноеПоле.Параметры.ЛДСП = ВыборкаПоКоробам.НоменклатураЛДСП;
				ОбластьОсновноеПоле.Параметры.Торцовка = ВыборкаПоКоробам.КромкаЛДСП;
				ОбластьОсновноеПоле.Параметры.Ручки = ВыборкаПоКоробам.Ручка;
				ВысотаИзделия = ВысотаИзделия + ВыборкаПоКоробам.ВысотаИзделия;
				ШиринаИзделия = ШиринаИзделия + ВыборкаПоКоробам.ШиринаИзделия;
			ИначеЕсли ВыборкаПоКоробам.ВидИзделия = Перечисления.ВидыИзделийПоКаталогу.ЛевыйБоковойЭлемент Тогда
				//Рисунок.Лево = 4;
				//Рисунок.Верх = 60;
				//Рисунок.Высота = 115;
				//Рисунок.Ширина = 10;
				Рисунок = ОбластьОсновноеПоле.Области.Левый;
				ОбластьОсновноеПоле.Параметры.Ручки = ?(ЗначениеЗаполнено(ОбластьОсновноеПоле.Параметры.Ручки), ОбластьОсновноеПоле.Параметры.Ручки, ВыборкаПоКоробам.Ручка);
				ШиринаИзделия = ШиринаИзделия + ?(НЕ ВыборкаПоКоробам.НеВлияетНаОсновной, ВыборкаПоКоробам.ШиринаИзделия, 0);
			ИначеЕсли ВыборкаПоКоробам.ВидИзделия = Перечисления.ВидыИзделийПоКаталогу.ПравыйБоковойЭлемент Тогда
				//Рисунок.Лево = 40;
				//Рисунок.Верх = 60;
				//Рисунок.Высота = 115;
				//Рисунок.Ширина = 10;
				Рисунок = ОбластьОсновноеПоле.Области.Правый;
				ОбластьОсновноеПоле.Параметры.Ручки = ?(ЗначениеЗаполнено(ОбластьОсновноеПоле.Параметры.Ручки), ОбластьОсновноеПоле.Параметры.Ручки, ВыборкаПоКоробам.Ручка);
				ШиринаИзделия = ШиринаИзделия + ?(НЕ ВыборкаПоКоробам.НеВлияетНаОсновной, ВыборкаПоКоробам.ШиринаИзделия, 0);
			ИначеЕсли ВыборкаПоКоробам.ВидИзделия = Перечисления.ВидыИзделийПоКаталогу.Пол Тогда
				//Рисунок.Лево = 14;
				//Рисунок.Верх = 150;
				//Рисунок.Высота = 25;
				//Рисунок.Ширина = 26;
				Рисунок = ОбластьОсновноеПоле.Области.Пол;
				ВысотаИзделия = ВысотаИзделия + ?(НЕ ВыборкаПоКоробам.НеВлияетНаОсновной, ВыборкаПоКоробам.ВысотаИзделия, 0);
			КонецЕсли;
			
			Если Рисунок <> Неопределено Тогда
				//Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Пунктир);
				Если ЗначениеЗаполнено(ВыборкаПоКоробам.Изображение) Тогда
					Рисунок.Картинка = Новый Картинка(ВыборкаПоКоробам.Изображение.Получить());
				Иначе
					Рисунок.Картинка = Новый Картинка;
				КонецЕсли;
				Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбластьОсновноеПоле.Параметры.ШиринаИзделия = ШиринаИзделия;
		ОбластьОсновноеПоле.Параметры.ВысотаИзделия = ВысотаИзделия;
		ОбластьОсновноеПоле.Параметры.Примечание = Примечание;
		ТабДок.Вывести(ОбластьОсновноеПоле);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Договор);	
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьАктПередачи(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_АктПередачи";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Макет = ПолучитьОбщийМакет("АктПередачи");
	ОбластьТело = Макет.ПолучитьОбласть("Тело");
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", МассивОбъектов);
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(Монтаж.Экспедитор) КАК Экспедитор,
	|	МАКСИМУМ(Монтаж.Подразделение.Организация.ПолноеНаименование) КАК ОрганизацияИзготовилеть,
	|	МАКСИМУМ(Монтаж.Монтажник) КАК Монтажник,
	|	МАКСИМУМ(Договор.Контрагент) КАК ФИОКлиента,
	|	МАКСИМУМ(Договор.Офис) КАК АдресОфиса,
	|	МАКСИМУМ(Договор.Автор) КАК Дизайнер,
	|	МАКСИМУМ(Договор.Дата) КАК ДатаДоговора,
	|	МАКСИМУМ(Договор.Номер) КАК НомерДоговора,
	|	МАКСИМУМ(Договор.СуммаДокумента) КАК СуммаДокумента,
	|	МАКСИМУМ(Монтаж.Спецификация.Изделие) КАК Изделие,
	|	МАКСИМУМ(Договор.Спецификация.АдресМонтажа) КАК АдресМонтажа,
	|	МАКСИМУМ(Договор.Контрагент.Телефон) КАК Телефон,
	|	МАКСИМУМ(Договор.Контрагент.ТелефонДополнительный) КАК ТелефонДополнительный,
	|	МАКСИМУМ(Договор.Спецификация.КоличествоМетровЛДСП) КАК КоличествоМетровЛДСП,
	|	МАКСИМУМ(Договор.Организация.ПолноеНаименование) КАК ОрганизацияПродавец,
	|	МАКСИМУМ(Договор.Офис.Телефон) КАК ТелефонОфиса,
	|	МАКСИМУМ(ВЫРАЗИТЬ(Договор.Спецификация.ДокументОснование КАК Документ.Замер).Замерщик) КАК Замерщик,
	|	СУММА(ВЫБОР
	|			КОГДА СпецификацияСписокНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ВыездМастера)
	|				ТОГДА СпецификацияСписокНоменклатуры.ЗарплатаЦеха
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыездМастера,
	|	СУММА(ВЫБОР
	|			КОГДА СпецификацияСписокНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.СборкаИзделия)
	|				ТОГДА СпецификацияСписокНоменклатуры.ЗарплатаЦеха
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СборкаИзделия,
	|	МАКСИМУМ(СпецификацияСписокНоменклатуры.Ссылка.Номер) КАК НомерСпецификации,
	|	Договор.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА СпецификацияСписокНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.СборкаИзделия)
	|				ТОГДА СпецификацияСписокНоменклатуры.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоМетров,
	|	МАКСИМУМ(Монтаж.Подразделение.Организация) КАК Изготовилеть
	|ИЗ
	|	Документ.Договор КАК Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Монтаж КАК Монтаж
	|		ПО (Монтаж.Спецификация = Договор.Спецификация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокНоменклатуры КАК СпецификацияСписокНоменклатуры
	|		ПО Договор.Спецификация = СпецификацияСписокНоменклатуры.Ссылка
	|			И (СпецификацияСписокНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ВыездМастера)
	|				ИЛИ СпецификацияСписокНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.СборкаИзделия))
	|ГДЕ
	|	Договор.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Договор.Ссылка";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВставлятьРазделительСтраниц = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если ВставлятьРазделительСтраниц Тогда
			
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		Если ЗначениеЗаполнено(Выборка.Монтажник) Тогда
			Доверенность = ЛексСервер.ПолучитьДоверенностьСотрудника(Выборка.Монтажник, Выборка.Изготовилеть);
			ОбластьТело.Параметры.НомерДоверенности = Доверенность.НомерДоверенности;
			ОбластьТело.Параметры.ДатаДоверенности = Доверенность.ДатаДоверенности;
		КонецЕсли;
		
		ОбластьТело.Параметры.Заполнить(Выборка);
		
		ОбластьТело.Параметры.Номер = Прав(Выборка.НомерДоговора, 5)  ;
		ОбластьТело.Параметры.СуммаНаряда = Выборка.ВыездМастера + Выборка.СборкаИзделия;
		ОбластьТело.Параметры.Договор = Выборка.Ссылка;
		ОбластьТело.Параметры.ДатаДоговора = Формат(Выборка.ДатаДоговора, "ДЛФ=DD");
		ТабДок.Вывести(ОбластьТело);
		
		ВставлятьРазделительСтраниц = Истина;
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Выборка = Запрос(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Договор") Тогда
		
		ПодготовитьПечатнуюФорму("Договор", "Договор", "Документ.Договор.Договор",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УсловияДоставкиВыписка") Тогда
		
		ПодготовитьПечатнуюФорму("УсловияДоставкиВыписка", "Условия доставки и сборки", "Документ.Договор.УсловияДоставкиВыписка",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТитульныйЛистТПМК") Тогда
		
		ПодготовитьПечатнуюФорму("ТитульныйЛистТПМК", "Технический паспорт мебельного комплекта", "Документ.Договор.ТитульныйЛистТПМК",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УсловияДоставкиИСборки") Тогда
		
		ПодготовитьПечатнуюФорму("УсловияДоставкиИСборки", "Условия доставки и сборки", "Документ.Договор.УсловияДоставкиИСборки",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнструкцияПоСборкеШкаф") Тогда
		
		ПодготовитьПечатнуюФорму("ИнструкцияПоСборкеШкаф", "Инструкция по сборке", "Документ.Договор.ИнструкцияПоСборкеШкаф",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнструкцияПоСборкеКухня") Тогда
		
		ПодготовитьПечатнуюФорму("ИнструкцияПоСборкеКухня", "Печать инструкция по сборке", "Документ.Договор.ИнструкцияПоСборкеШкаф",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнструкцияПоСборкеКорпуснаяМебель") Тогда
		
		ПодготовитьПечатнуюФорму("ИнструкцияПоСборкеКорпуснаяМебель", "Инструкция по сборке", "Документ.Договор.ИнструкцияПоСборкеШкаф",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Эскиз") Тогда
		// dmn
		ПодготовитьПечатнуюФорму("Эскиз", "Эскиз", "Документ.Договор.Эскиз",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИспользуемыеМатериалы") Тогда
		
		ПодготовитьПечатнуюФорму("ИспользуемыеМатериалы", "Используемые материалы", "Документ.Договор.ИспользуемыеМатериалы",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПоКаталогу") Тогда
		
		ПодготовитьПечатнуюФорму("ПоКаталогу", "ПоКаталогу", "Документ.Договор.ПоКаталогу",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ШкафПоКаталогу") Тогда
		
		ПодготовитьПечатнуюФорму("ШкафПоКаталогу", "Шкаф по каталогу", "Документ.Договор.ШкафПоКаталогу",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПередачи") Тогда
		
		ПодготовитьПечатнуюФорму("АктПередачи", "Акт передачи мебельного комплекта", "",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка);
		
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
КонецПроцедуры

Процедура ПодготовитьПечатнуюФорму(Знач ИмяМакета, ПредставлениеМакета, ПолныйПутьКМакету = "", МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Выборка)
	
	Если ИмяМакета = "Договор" Тогда
		
		ТабДок = ПечатьДоговора(Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "УсловияДоставкиВыписка" Тогда
		
		ТабДок = ПечатьУсловияДоставкиВыписка(Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "ТитульныйЛистТПМК" Тогда
		
		ТабДок = ПечатьТитульныйЛистТПМК(Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "ИнструкцияПоСборкеШкаф" или ИмяМакета = "ИнструкцияПоСборкеКухня" или ИмяМакета = "ИнструкцияПоСборкеКорпуснаяМебель" Тогда
		
		ТабДок = ПечатьИнструкцияПоСборке(ИмяМакета, Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "Эскиз" Тогда
		
		ТабДок = ПечатьЭскиз (Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "ИспользуемыеМатериалы" Тогда
		
		ТабДок = ПечатьСпецификации (Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "ПоКаталогу" Тогда
		
		ТабДок = ПечатьИзделийПоКаталогу (Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "ШкафПоКаталогу" Тогда
		
		ТабДок = ПечатьИзделийШкафПоКаталогу (Выборка, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);	
		
	ИначеЕсли ИмяМакета = "АктПередачи" Тогда
		
		ТабДок = ПечатьАктПередачи(МассивОбъектов, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	КонецЕсли;
	
КонецПроцедуры

Функция Запрос(МассивОбъектов)
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ДоговорРассрочка.Сумма) КАК ИтогоРассрочка,
	|	ДоговорРассрочка.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИтогиРассрочка
	|ИЗ
	|	Документ.Договор.Рассрочка КАК ДоговорРассрочка
	|ГДЕ
	|	ДоговорРассрочка.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорРассрочка.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Договор.Ссылка КАК Ссылка,
	|	Договор.Ссылка КАК Договор,
	|	Договор.Организация КАК Организация,
	|	Договор.Организация.ФИОДолжностногоЛица КАК РуководительОрганизации,
	|	Договор.Организация.ДействуетНаОсновании КАК ДействуетНаОсновании,
	|	Договор.Офис.Город КАК АдресОфиса,
	|	Договор.Офис.Телефон КАК ТелефонОфиса,
	|	Договор.Подразделение.Руководитель КАК РуководительПодразделения,
	|	Договор.Подразделение.ДействуетНаОсновании КАК ДейсвтуетНаОсновании,
	|	Договор.Дата КАК ДатаДоговора,
	|	Договор.Номер КАК НомерДоговора,
	|	Договор.Подразделение КАК Подразделение,
	|	Договор.Подразделение.Город КАК ГородОфиса,
	|	Договор.Автор КАК ФИОПользователя,
	|	Договор.СуммаДокумента КАК СуммаДокумента,
	|	Договор.МесяцевРассрочки КАК МесяцевРассрочки,
	|	Договор.Рассрочка.(
	|		НомерСтроки,
	|		Дата,
	|		Сумма
	|	),
	|	ВЫБОР
	|		КОГДА Договор.Контрагент.ЮридическоеЛицо
	|			ТОГДА Договор.Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(Договор.Контрагент.Фамилия, 1, 20) + "" "" + ПОДСТРОКА(Договор.Контрагент.Имя, 1, 20) + "" "" + ПОДСТРОКА(Договор.Контрагент.Отчество, 1, 20)
	|	КОНЕЦ КАК ФИОКлиента,
	|	Договор.Контрагент.ИНН КАК КлиентИНН,
	|	Договор.Контрагент.КПП КАК КлиентКПП,
	|	Договор.Контрагент.ОГРН КАК КлиентОГРН,
	|	Договор.Контрагент.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	Договор.Контрагент.ЮридическийАдрес КАК КлиентЮридическийАдрес,
	|	Договор.Контрагент.Руководитель КАК КонтрагентРуководитель,
	|	Договор.Контрагент.ДействуетНаОсновании КАК КонтрагентДействуетНаОсновании,
	|	Договор.Спецификация.ДатаИзготовления КАК ДатаИзготовления,
	|	Договор.Спецификация.Номер КАК НомерСпецификации,
	|	Договор.Спецификация.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Договор.Спецификация.ДатаМонтажа КАК ДатаМонтажа,
	|	Договор.Спецификация.Изделие КАК Изделие,
	|	ЕСТЬNULL(СуммаРассрочки.ИтогоРассрочка, 0) КАК СуммаРассрочки,
	|	Договор.Спецификация.АдресМонтажа КАК Адрес,
	|	Договор.Автор.ФизическоеЛицо.ВЛице КАК АвторРодительныйПадеж,
	|	Договор.Спецификация,
	|	Договор.Автор.ФизическоеЛицо КАК Автор,
	|	Договор.Спецификация.Номер,
	|	Договор.Контрагент КАК Контрагент,
	|	Договор.Контрагент.ПаспортСерия КАК СерияПаспорта,
	|	Договор.Контрагент.ПаспортНомер КАК НомерПаспорта,
	|	Договор.Контрагент.ПаспортДатаВыдачи КАК ДатаВыдачиПаспорта,
	|	Договор.Контрагент.ПаспортКемВыдан КАК КемВыдан,
	|	Договор.Контрагент.Телефон КАК ТелефонСотовый,
	|	Договор.Контрагент.ТелефонДополнительный КАК ТелефонКонтактный,
	|	Договор.Контрагент.БанковскиеРеквизиты КАК БанковскиеРеквизиты,
	|	Договор.Контрагент.Наименование КАК НаименованиеЮрЛица,
	|	ВЫБОР
	|		КОГДА Договор.Спецификация.ПакетУслуг = ЗНАЧЕНИЕ(Перечисление.ПакетыУслуг.ДоставкаДоКлиентаИМонтаж)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Монтаж,
	|	ВЫБОР
	|		КОГДА Договор.Спецификация.ПакетУслуг <> ЗНАЧЕНИЕ(Перечисление.ПакетыУслуг.СамовывозОтПроизводителя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Доставка,
	|	Договор.Спецификация.ПакетУслуг КАК ПакетУслуг,
	|	Договор.ДатаУстановитьНеПозднее КАК ДатаУстановитьНеПозднее
	|ИЗ
	|	Документ.Договор КАК Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогиРассрочка КАК СуммаРассрочки
	|		ПО Договор.Ссылка = СуммаРассрочки.Ссылка
	|ГДЕ
	|	Договор.Ссылка В(&МассивСсылок)
	|	И Договор.Проведен";
	
	Запрос.Параметры.Вставить("МассивСсылок", МассивОбъектов);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // Запрос()

Функция ПолучитьСуммуДопСоглашений (Договор) Экспорт
	
	Сумма = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительноеСоглашение.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	|ГДЕ
	|	ДополнительноеСоглашение.Договор = &Договор
	|	И ДополнительноеСоглашение.Проведен
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ";
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Выборка.Следующий();
		Сумма = Выборка.Сумма;
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции 

Функция ПолучитьАктВыполнения(ДоговорСсылка) Экспорт
	
	МассивДокументов = ЛексСервер.НайтиПодчиненныеДокументы(ДоговорСсылка, "Документ.АктВыполненияДоговора", "Договор");
	Если МассивДокументов.Количество() = 1 Тогда
		Возврат МассивДокументов[0];
	ИначеЕсли МассивДокументов.Количество() = 0 Тогда
		Возврат Документы.Договор.ПустаяСсылка();
	Иначе
		ВызватьИсключение "Ошибка 717: Нарушена связь документов 'Договор' и 'Акта выполнения'";
	КонецЕсли;
	
КонецФункции // ПолучитьМонтаж()

Функция ПолучитьСуммуАванса(ДоговорСсылка) Экспорт
	
	Ответ = 0;
	Если НЕ ДоговорСсылка.Пустая() Тогда
		СвойстваДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДоговорСсылка, "Контрагент, Подразделение, Дата");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Договор", ДоговорСсылка);
		Запрос.УстановитьПараметр("Контрагент", СвойстваДоговора.Контрагент);
		Запрос.УстановитьПараметр("Подразделение", СвойстваДоговора.Подразделение);
		Запрос.УстановитьПараметр("Период", КонецДня(СвойстваДоговора.Дата));
		
		Запрос.Текст =		
		"ВЫБРАТЬ
		|	УправленческийОстатки.СуммаОстатокКт,
		|	УправленческийОстатки.Субконто1,
		|	УправленческийОстатки.Субконто2,
		|	УправленческийОстатки.Подразделение
		|ИЗ
		|	РегистрБухгалтерии.Управленческий.Остатки(
		|			&Период,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВзаиморасчетыСПокупателями),
		|			,
		|			Подразделение = &Подразделение
		|				И Субконто1 = &Контрагент
		|				И Субконто2 = &Договор) КАК УправленческийОстатки";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Ответ = Выборка.СуммаОстатокКт;
		КонецЕсли;
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьСуммуОстатка(ДоговорСсылка) Экспорт
	
	Ответ = 0;
	Если НЕ ДоговорСсылка.Пустая() Тогда
		СвойстваДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДоговорСсылка, "Контрагент, Подразделение");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Договор", ДоговорСсылка);
		Запрос.УстановитьПараметр("Контрагент", СвойстваДоговора.Контрагент);
		Запрос.УстановитьПараметр("Подразделение", СвойстваДоговора.Подразделение);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УправленческийОстатки.Субконто1,
		|	УправленческийОстатки.Субконто2,
		|	ВЫБОР
		|		КОГДА УправленческийОстатки.СуммаОстаток <= 0
		|			ТОГДА УправленческийОстатки.Субконто2.СуммаДокумента + УправленческийОстатки.СуммаОстаток
		|		ИНАЧЕ УправленческийОстатки.СуммаОстаток
		|	КОНЕЦ КАК Остаток
		|ИЗ
		|	РегистрБухгалтерии.Управленческий.Остатки(
		|			,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВзаиморасчетыСПокупателями),
		|			,
		|			Подразделение = &Подразделение
		|				И Субконто1 = &Контрагент
		|				И Субконто2 = &Договор) КАК УправленческийОстатки";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Ответ = Выборка.Остаток;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция РасчетПени(МассивДоговоров, Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОНЕЦПЕРИОДА(ДоговорРассрочка.Дата, ДЕНЬ) КАК Дата,
	|	ДоговорРассрочка.Сумма КАК Рассрочка,
	|	0 КАК Платеж,
	|	КОНЕЦПЕРИОДА(ДоговорРассрочка.Дата, ДЕНЬ) КАК СрокОплаты,
	|	NULL КАК ДатаОплаты,
	|	ДоговорРассрочка.Ссылка КАК Договор
	|ПОМЕСТИТЬ ТаблицаСроковИПлатежей
	|ИЗ
	|	Документ.Договор.Рассрочка КАК ДоговорРассрочка
	|ГДЕ
	|	ДоговорРассрочка.Ссылка В(&МассивДоговоров)
	|	И ДоговорРассрочка.Дата < &ТекущаяДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(УправленческийДвиженияССубконто.Регистратор.Дата, ДЕНЬ),
	|	0,
	|	УправленческийДвиженияССубконто.Сумма,
	|	NULL,
	|	КОНЕЦПЕРИОДА(УправленческийДвиженияССубконто.Регистратор.Дата, ДЕНЬ),
	|	УправленческийДвиженияССубконто.СубконтоКт2
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.ДвиженияССубконто(
	|			,
	|			&ТекущаяДата,
	|			СубконтоКт2 В (&МассивДоговоров)
	|				И СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВзаиморасчетыСПокупателями),
	|			,
	|			) КАК УправленческийДвиженияССубконто
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ТекущаяДата,
	|	0,
	|	0,
	|	&ТекущаяДата,
	|	NULL,
	|	Договор.Ссылка
	|ИЗ
	|	Документ.Договор КАК Договор
	|ГДЕ
	|	Договор.Ссылка В(&МассивДоговоров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСроковИПлатежей.Дата КАК Дата,
	|	СУММА(ТаблицаСроковИПлатежей.Рассрочка) КАК Рассрочка,
	|	СУММА(ТаблицаСроковИПлатежей.Платеж) КАК Платеж,
	|	МАКСИМУМ(ТаблицаСроковИПлатежей.СрокОплаты) КАК СрокОплаты,
	|	МАКСИМУМ(ТаблицаСроковИПлатежей.ДатаОплаты) КАК ДатаОплаты,
	|	ТаблицаСроковИПлатежей.Договор КАК Договор
	|ИЗ
	|	ТаблицаСроковИПлатежей КАК ТаблицаСроковИПлатежей
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСроковИПлатежей.Дата,
	|	ТаблицаСроковИПлатежей.Договор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ ПО
	|	Договор";
	
	Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
	Запрос.УстановитьПараметр("ТекущаяДата", Дата);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Договор");
	ТЗ.Колонки.Добавить("Автор");
	ТЗ.Колонки.Добавить("СуммаДоговора");
	ТЗ.Колонки.Добавить("Комментарий");
	ТЗ.Колонки.Добавить("Подразделение");
	ТЗ.Колонки.Добавить("СуммаПени");
	ТЗ.Колонки.Добавить("СуммаПросрочки");
	ТЗ.Колонки.Добавить("ДнейПросрочки");
	ТЗ.Колонки.Добавить("ПервыйПросроченныйПлатеж");
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаПоДоговорам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ПервыйЦикл = Истина;
		СуммаПени = 0;
		Платежи = 0;
		Рассрочки = 0;
		СуммаПросрочки = 0;
		ОбщееДнейПросрочки = 0;
		НачислятьПеню = Ложь;
		ПервыйПлатеж = Ложь;
		ПрошлаяДата = Дата("00010101");
		
		Пока ВыборкаПоДоговорам.Следующий() Цикл
			
			Если НЕ НачислятьПеню или ПервыйЦикл и ВыборкаПоДоговорам.Платеж = 0 Тогда
				
				ПрошлаяДата = ВыборкаПоДоговорам.Дата;
				
			КонецЕсли;
			
			ПервыйЦикл = Ложь;
			
			ОбрабатываемаяДата = ВыборкаПоДоговорам.Дата;
			
			Если НачислятьПеню Тогда
				
				ДнейПросрочки = ?(Цел((ОбрабатываемаяДата - ПрошлаяДата) / 86400) > 0, Цел((ОбрабатываемаяДата - ПрошлаяДата) / 86400), 0);
				ОбщееДнейПросрочки = ОбщееДнейПросрочки + ДнейПросрочки;
				СуммаПени = СуммаПени + СуммаПросрочки / 100 * ДнейПросрочки;
				НачислятьПеню = Ложь;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоДоговорам.ДатаОплаты) и НачалоДня(ВыборкаПоДоговорам.ДатаОплаты) <> НачалоДня(ВыборкаПоДоговорам.Договор.Дата) Тогда
				
				Платежи = ВыборкаПоДоговорам.Платеж + Платежи;
				
			КонецЕсли;
			
			Рассрочки = ВыборкаПоДоговорам.Рассрочка + Рассрочки;
			СуммаПросрочки = Рассрочки - Платежи;
			НачислятьПеню = СуммаПросрочки > 0;
			
			Если НачислятьПеню и ОбрабатываемаяДата <> Дата Тогда
				
				ДнейПросрочки = ?(Цел((ОбрабатываемаяДата - ПрошлаяДата) / 86400) > 0, Цел((ОбрабатываемаяДата - ПрошлаяДата) / 86400), 0);
				ОбщееДнейПросрочки = ОбщееДнейПросрочки + ДнейПросрочки;
				СуммаПени = СуммаПени + СуммаПросрочки / 100 * ДнейПросрочки;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоДоговорам.Платеж) И НЕ ПервыйПлатеж Тогда
				
				ДатаПервыйПлатеж = ОбрабатываемаяДата;
				ПервыйПлатеж = Истина;
				
			КонецЕсли;
			
			ПрошлаяДата = ОбрабатываемаяДата + 86400;
			
		КонецЦикла;
		
		Если СуммаПени > 0 Тогда
			
			СуммаПени = Окр(СуммаПени, 2);
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Договор = Выборка.Договор;
			СтруктураРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Договор, "Автор, СуммаДокумента, Комментарий, Подразделение");
			НоваяСтрока.Автор = СтруктураРеквизитовДоговора.Автор.ФизическоеЛицо;
			НоваяСтрока.СуммаДоговора = СтруктураРеквизитовДоговора.СуммаДокумента;
			НоваяСтрока.Комментарий = СтруктураРеквизитовДоговора.Комментарий;
			НоваяСтрока.Подразделение = СтруктураРеквизитовДоговора.Подразделение;
			НоваяСтрока.СуммаПени = СуммаПени;
			НоваяСтрока.СуммаПросрочки = СуммаПросрочки;
			НоваяСтрока.ДнейПросрочки = ОбщееДнейПросрочки;
			НоваяСтрока.ПервыйПросроченныйПлатеж = ДатаПервыйПлатеж;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция СтороныДоговора(Контрагент)
	
	Стороны = Новый Структура;
	
	Если Контрагент.ЮридическоеЛицо Тогда
		Стороны.Вставить("ПродавецИсполнитель", "Исполнитель");
		Стороны.Вставить("ПродавцаИсполнителя", "Исполнителя");
		Стороны.Вставить("ПродавцомИсполнителем", "Исполнителем");
		Стороны.Вставить("ПокупательЗаказчик", "Заказчик");
		Стороны.Вставить("ПокупателюЗаказчику", "Заказчику");
		Стороны.Вставить("ПокупателемЗаказчиком", "Заказчиком");
		Стороны.Вставить("ПокупателяЗаказчика", "Закачика");
	Иначе
		Стороны.Вставить("ПродавецИсполнитель", "Продавец");
		Стороны.Вставить("ПродавцаИсполнителя", "Продавца");
		Стороны.Вставить("ПродавцомИсполнителем", "Продавцом");
		Стороны.Вставить("ПокупательЗаказчик", "Покупатель");
		Стороны.Вставить("ПокупателюЗаказчику", "Покупателю");
		Стороны.Вставить("ПокупателемЗаказчиком", "Покупателем");
		Стороны.Вставить("ПокупателяЗаказчика", "Покупателя");
		Стороны.Вставить("ПокупателяЗаказчика", "Закачика");
	КонецЕсли;
	
	Возврат Стороны;
	
КонецФункции // ЗаполнитьСтороны()

Функция ВывестиОбластьШапкаДоговора(ТабДок, ДоговорСсылка) Экспорт
	
	// вижу, что полный пиздец, совсем не оптимально и т.п.
	// когда-нибудь, может быть
	
	#Если Клиент Тогда
		ДоговорСсылка = Документы.Договор.СоздатьДокумент();
	#КонецЕсли
	
	Макет = ПолучитьОбщийМакет("ШапкаДоговораРеквизиты");
	Область = Макет.ПолучитьОбласть("ШапкаДоговора");
	
	Доверенность = ЛексСервер.ПолучитьДоверенностьСотрудника(ДоговорСсылка.Автор.ФизическоеЛицо, ДоговорСсылка.Организация);
	СтороныДоговора = СтороныДоговора(ДоговорСсылка.Контрагент);
	РеквизитыОфиса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДоговорСсылка.Офис, "Город,Телефон");
	
	Если ДоговорСсылка.Организация <> Константы.ОрганизацияДляДоговоровСЮрЛицами.Получить() Тогда
		ЯвляетсяОфициальнымДилером = ", являющееся официальным дилером производителя ООО ""ВЯС""";
	Иначе
		ЯвляетсяОфициальнымДилером ="";
	КонецЕсли;
	
	Если ДоговорСсылка.Контрагент.ЮридическоеЛицо Тогда
		РуководительРодительныйПадеж = ДоговорСсылка.Контрагент.РуководительРодительныйПадеж;
		Если НЕ ЗначениеЗаполнено(РуководительРодительныйПадеж) Тогда
			РуководительРодительныйПадеж = ДоговорСсылка.Контрагент.Руководитель;
		КонецЕсли;
		ВЛицеВтораяСторона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(", в лице %1, действущего на основании %2, ", РуководительРодительныйПадеж, ДоговорСсылка.Контрагент.ДействуетНаОсновании);
	Иначе
		ВЛицеВтораяСторона = "";
	КонецЕсли;
	
	ПолноеНаименованиеКонтрагента = ДоговорСсылка.Контрагент.ПолноеНаименование;
	Если НЕ ЗначениеЗаполнено(ПолноеНаименованиеКонтрагента) Тогда
		ПолноеНаименованиеКонтрагента = ДоговорСсылка.Контрагент.Наименование;
	КонецЕсли;
	
	Область.Параметры.АвторРодительныйПадеж = ДоговорСсылка.Автор.ФизическоеЛицо.ВЛице;
	Область.Параметры.ПолноеНаименованиеОрганизации = ДоговорСсылка.Организация.ПолноеНаименование;
	Область.Параметры.ВЛицеВтораяСторона = ВЛицеВтораяСторона;
	Область.Параметры.ЯвляетсяОфициальнымДилером = ЯвляетсяОфициальнымДилером;
	Область.Параметры.ПолноеНаименованиеКонтрагента = ПолноеНаименованиеКонтрагента;
	Область.Параметры.ДатаДоговора = Формат(ДоговорСсылка.Дата, "ДЛФ=DD");
	Область.Параметры.Заполнить(РеквизитыОфиса);
	Область.Параметры.Заполнить(Доверенность);
	Область.Параметры.Заполнить(СтороныДоговора);
	
	ТабДок.Вывести(Область);
	
КонецФункции

Функция ВывестиОбластьРеквизитыДоговора(ТабДок, ДоговорСсылка) Экспорт
	
	#Если Клиент Тогда
		ДоговорСсылка = Документы.Договор.СоздатьДокумент();
		ТабДок = Новый ТабличныйДокумент;
	#КонецЕсли
	
	Макет = ПолучитьОбщийМакет("ШапкаДоговораРеквизиты");
	СтороныДоговора = СтороныДоговора(ДоговорСсылка.Контрагент);
	ОбластьЗаголовок = Макет.ПолучитьОбласть("РеквизитыЗаголовок");
	
	Если ДоговорСсылка.Контрагент.ЮридическоеЛицо Тогда
		ИмяОбласти = "Заказчик";
	Иначе
		ИмяОбласти = "Покупатель";
	КонецЕсли;
	ОбластьОрганизация = Макет.ПолучитьОбласть("Реквизиты|Организация");
	ОбластьКонтрагент = Макет.ПолучитьОбласть("Реквизиты|"+ИмяОбласти);
	
	Дизайнер = ДоговорСсылка.Автор.ФизическоеЛицо;
	Доверенность = ЛексСервер.ПолучитьДоверенностьСотрудника(Дизайнер, ДоговорСсылка.Организация);
	РеквизитыОрганизации = ЛексСервер.ПолучитьРеквизитыОрганизации(ДоговорСсылка.Организация);
	
	ОбластьОрганизация.Параметры.Заполнить(РеквизитыОрганизации);
	ОбластьОрганизация.Параметры.Заполнить(Доверенность);
	ОбластьОрганизация.Параметры.Заполнить(СтороныДоговора);
	ОбластьОрганизация.Параметры.Дизайнер = Дизайнер;
	
	РеквизитыКонтрагента = ПолучитьРеквизитыКонтрагента(ДоговорСсылка.Контрагент);
	ОбластьКонтрагент.Параметры.Заполнить(РеквизитыКонтрагента);
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьОрганизация);
	ТабДок.Присоединить(ОбластьКонтрагент);
	
КонецФункции

Функция ПолучитьРеквизитыКонтрагента(КонтрагентСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", КонтрагентСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.БанковскиеРеквизиты КАК КонтрагентБанковскиеРеквизиты,
	|	Контрагенты.ИНН КАК КонтрагентИНН,
	|	Контрагенты.КПП КАК КонтрагентКПП,
	|	Контрагенты.ОГРН КАК КонтрагентОГРН,
	|	Контрагенты.ПаспортКемВыдан,
	|	Контрагенты.ПаспортНомер,
	|	Контрагенты.ПаспортСерия,
	|	Контрагенты.Руководитель КАК КонтрагентРуководитель,
	|	Контрагенты.Телефон,
	|	Контрагенты.ТелефонДополнительный,
	|	ВЫБОР
	|		КОГДА Контрагенты.ПаспортДатаВыдачи = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА """"
	|		ИНАЧЕ Контрагенты.ПаспортДатаВыдачи
	|	КОНЕЦ КАК ПаспортДатаВыдачи,
	|	ВЫБОР
	|		КОГДА Контрагенты.ПолноеНаименование = """"
	|			ТОГДА Контрагенты.Наименование
	|		ИНАЧЕ Контрагенты.ПолноеНаименование
	|	КОНЕЦ КАК КонтрагентНаименование,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Контрагенты.ЮридическийАдрес КАК СТРОКА(50))) = """"
	|			ТОГДА Контрагенты.ПочтовыйАдрес
	|		ИНАЧЕ Контрагенты.ЮридическийАдрес
	|	КОНЕЦ КАК КонтрагентАдрес
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Таблица = РезультатЗапроса.Выгрузить();
	СтрокаТаблицы = Таблица[0];
	Структура = Новый Структура;
	Для каждого Колонка Из Таблица.Колонки Цикл
		ИмяКолонки = Колонка.Имя;
		Структура.Вставить(ИмяКолонки, СтрокаТаблицы[ИмяКолонки]);
	КонецЦикла;
	
	Структура.ПаспортДатаВыдачи = Формат(Структура.ПаспортДатаВыдачи, "ДЛФ=D");
	
	Возврат Структура;
	
КонецФункции

Функция СпецификацияПроверена(СпецификацияСсылка) Экспорт
	
	Ответ = Истина;
	
	СтрокаСоединения = ВРег(СтрокаСоединенияИнформационнойБазы());
	Если Найти(СтрокаСоединения, "SRVR") Тогда
		ВремяБезПроверки = 12; // Москва
	Иначе
		ВремяБезПроверки = 18; // Благовещеск
	КонецЕсли;
	
	
	Если Час(ТекущаяДата()) < ВремяБезПроверки Тогда //часовой пояс в базе - Москва Если Час(ТекущаяДата()) < 18 Тогда
		
		ЗапрещенныеСтатусы = Новый Массив;
		ЗапрещенныеСтатусы.Добавить(Перечисления.СтатусыСпецификации.Сохранен);
		ЗапрещенныеСтатусы.Добавить(Перечисления.СтатусыСпецификации.ЕстьОшибки);
		ЗапрещенныеСтатусы.Добавить(Перечисления.СтатусыСпецификации.ПроверяетсяТехнологом);
		
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(СпецификацияСсылка, "ЕстьМатериалПодЗаказ") Тогда
			ЗапрещенныеСтатусы.Добавить(Перечисления.СтатусыСпецификации.ПроверяетсяЛогистом);
		КонецЕсли;
		
		ТекущийСтатус = Документы.Спецификация.ПолучитьСтатусСпецификации(СпецификацияСсылка);
		
		Для каждого Статус Из ЗапрещенныеСтатусы Цикл
			
			Если Статус = ТекущийСтатус Тогда
				ТекстСообщения = "Для заключения договора, %1 должна быть проверена.";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СпецификацияСсылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Ответ = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция РазрешеноВвестиДоговор(СпецификацияСсылка) Экспорт
	
	МассивЗапрещенных = Новый Массив;
	МассивЗапрещенных.Добавить(Справочники.Изделия.Детали);
	МассивЗапрещенных.Добавить(Справочники.Изделия.ДопСоглашение);
	МассивЗапрещенных.Добавить(Справочники.Изделия.Переделка);
	
	Изделие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СпецификацияСсылка, "Изделие");
	
	Ответ = МассивЗапрещенных.Найти(Изделие) = Неопределено;
	
	Возврат Ответ;
	
КонецФункции
