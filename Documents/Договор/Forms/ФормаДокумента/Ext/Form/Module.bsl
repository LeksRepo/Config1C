////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ПересчитатьСуммуДокумента()
	
	Если ЗначениеЗаполнено(Объект.Спецификация) Тогда
		СтоимостьСпецификации = ЛексСервер.ЗначениеРеквизитаОбъекта(Объект.Спецификация, "СуммаДокумента");
		Объект.СуммаДокументаБезСкидки= СтоимостьСпецификации;
		Объект.ПроцентСкидки = ЛексСервер.ПолучитьСкидкуДоговора(Объект.Подразделение, Объект.Дата, Объект.СуммаДокументаБезСкидки, Объект.ВидОплатыДоговора);
		Объект.СуммаДокумента = СтоимостьСпецификации * (100 - Объект.ПроцентСкидки) / 100;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОстатокОплаты()
	
	СтруктураСумм = ПолучитьСуммыДопСоглашенийИПлатежей(Объект.Ссылка);
	СуммаДопСоглашения = СтруктураСумм.ДопСоглашение;
	ОсталосьОплатить = СтруктураСумм.Остаток;
	
КонецПроцедуры // ЗаполнитьОстатокОплаты()

&НаСервереБезКонтекста
Функция ПолучитьСуммыДопСоглашенийИПлатежей(Договор)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Структура = Новый Структура;
	Структура.Вставить("ДопСоглашение", Документы.Договор.ПолучитьСуммуДопСоглашений(Договор));
	Структура.Вставить("Остаток", Документы.Договор.ПолучитьСуммуОстатка(Договор));
	
	Возврат Структура;
	
КонецФункции // ()

&НаСервере
Процедура ЗаполнитьТаблицуРассрочка()
	
	Объект.Рассрочка.Очистить();
	
	Если Объект.МесяцевРассрочки = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СуммаПервыйПлатеж = Документы.Договор.ПолучитьСуммуАванса(Объект.Ссылка);
	ДатаРассрочки = Объект.Дата;
	НужноРаспределить = Объект.СуммаДокумента - СуммаПервыйПлатеж;
	ОсталосьРаспределить = НужноРаспределить;
	
	Для ы = 1 По Объект.МесяцевРассрочки Цикл
		
		ДатаРассрочки = ДобавитьМесяц(ДатаРассрочки, 1);
		
		Если ы = Объект.МесяцевРассрочки Тогда
			
			СуммаРаспределения = ОсталосьРаспределить;
			
		Иначе
			
			ПредполагаемаяСумма = Окр(НужноРаспределить / Объект.МесяцевРассрочки, -2);
			СуммаРаспределения = Мин(ПредполагаемаяСумма, ОсталосьРаспределить);
			
		КонецЕсли;
		
		ОсталосьРаспределить = ОсталосьРаспределить - СуммаРаспределения;
		НоваяСтрока = Объект.Рассрочка.Добавить();
		НоваяСтрока.Дата = ДатаРассрочки;
		НоваяСтрока.Сумма = СуммаРаспределения;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРассрочку()

&НаКлиенте
Процедура АктВыполненияСпецификацииНажатие(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(АктВыполнения) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Найти(АктВыполнения, "Ошибка") <> 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыАктВыполненияСпецификации = Новый Структура();
		ПараметрыАктВыполненияСпецификации.Вставить("Основание", Объект.Ссылка);
		ФормаГрафикМонтажа = ПолучитьФорму("Документ.АктВыполненияДоговора.ФормаОбъекта", ПараметрыАктВыполненияСпецификации, ЭтаФорма);
		ФормаГрафикМонтажа.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОрганизацию(Подразделение, Офис, Контрагент)
	
	Если Контрагент.ЮридическоеЛицо Тогда
		
		Организация = Константы.ОрганизацияДляДоговоровСЮрЛицами.Получить();
		
	Иначе
		
		ОрганизацияОфиса = Офис.Организация;
		
		Если ЗначениеЗаполнено(ОрганизацияОфиса) Тогда
			Организация = ОрганизацияОфиса;
		Иначе
			Организация = Подразделение.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции // ПолучитьОрганизацию()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Организация.Пустая() Тогда
		ТекущийОбъект.Организация = ПолучитьОрганизацию(ТекущийОбъект.Подразделение, ТекущийОбъект.Офис, ТекущийОбъект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьОстатокОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьОстатокОплаты();
	
	ИзмененияДоговора.Параметры.УстановитьЗначениеПараметра("Договор", Объект.Ссылка);
	
	ПлатежныеДокументы.Параметры.УстановитьЗначениеПараметра("Договор", Объект.Ссылка);
	ПлатежныеДокументы.Параметры.УстановитьЗначениеПараметра("Контрагент", Объект.Контрагент);
	ПлатежныеДокументы.Параметры.УстановитьЗначениеПараметра("Подразделение", Объект.Подразделение);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Договор = Неопределено;
	
	Если ЗначениеЗаполнено(Параметры.Основание) Тогда
		
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.Спецификация") Тогда
			
			Договор = Документы.Спецификация.ПолучитьДоговор(Параметры.Основание);
			
			Если НЕ Договор.Пустая() Тогда
				
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Договор на основании данной спецификации уже существует");
				Возврат;
				
			КонецЕсли;
			
			// проверить статус спецификации
			
			Отказ = НЕ Документы.Договор.СпецификацияПроверена(Параметры.Основание);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Договор = ?(Договор = Неопределено, Объект.Ссылка, Договор);
	ПлатежныеДокументы.Параметры.УстановитьЗначениеПараметра("Договор", Объект.Ссылка);
	ПлатежныеДокументы.Параметры.УстановитьЗначениеПараметра("Контрагент", Договор.Контрагент);
	ПлатежныеДокументы.Параметры.УстановитьЗначениеПараметра("Подразделение", Договор.Подразделение);
	ИзмененияДоговора.Параметры.УстановитьЗначениеПараметра("Договор", Объект.Ссылка);
	
	// Акт выполнения
	АктВыполнения = Документы.Договор.ПолучитьАктВыполнения(Объект.Ссылка);
	Если НЕ ЗначениеЗаполнено(АктВыполнения) Тогда
		АктВыполнения = "Ввести Акт";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Дата = ТекущаяДата();
		ПересчитатьРассрочкуСкидку();
	КонецЕсли;
	
	// убрать когда занесут остатки по договорам
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ПользовательАдминистратор = УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.Администратор);
	ЭтаФорма.Элементы.Рассрочка.ТолькоПросмотр = НЕ ПользовательАдминистратор;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияДоговораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//ОповеститьОбИзменении(
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.АктВыполненияДоговора") Тогда
		
		АктВыполнения = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПлатежныеДокументы.Параметры.УстановитьЗначениеПараметра("Контрагент", Объект.Контрагент);
	Объект.Организация = ПолучитьОрганизацию(Объект.Подразделение, Объект.Офис, Объект.Контрагент);
	ПересчитатьРассрочкуСкидку();
	ЗаполнитьОстатокОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияПриИзменении(Элемент)
	
	СтруктураДанныхСпецификации = СпецификацияПриИзмененииНаСервере(Объект.Спецификация);
	ПересчитатьСуммуДокумента();
	Если СтруктураДанныхСпецификации.УслугаМонтаж Тогда 
		Объект.ДатаУстановитьНеПозднее = ?(ЗначениеЗаполнено(СтруктураДанныхСпецификации.ДатаМонтажа), СтруктураДанныхСпецификации.ДатаМонтажа + 30*24*3600, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СпецификацияПриИзмененииНаСервере(Ссылка)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СуммаДокумента", Ссылка.СуммаДокумента);
	СтруктураДанных.Вставить("ДатаМонтажа", Ссылка.ДатаМонтажа);
	УслугаМонтаж = ?(Ссылка.ПакетУслуг = Перечисления.ПакетыУслуг.ДоставкаДоКлиентаИМонтаж, Истина, Ложь);
	СтруктураДанных.Вставить("УслугаМонтаж", УслугаМонтаж);
	Доставка = ?(Ссылка.ПакетУслуг <> Перечисления.ПакетыУслуг.СамовывозОтПроизводителя, Истина, Ложь);
	СтруктураДанных.Вставить("Доставка", Доставка);
	СтруктураДанных.Вставить("Упаковка", Ссылка.Упаковка);
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура ВидОплатыДоговораПриИзменении(Элемент)
	
	ПересчитатьРассрочкуСкидку();
	ЗаполнитьОстатокОплаты();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРассрочкуСкидку()
	
	ДоговорСЮрЛицом = Объект.Контрагент.ЮридическоеЛицо;
	Элементы.ВидОплатыДоговора.Доступность = НЕ ДоговорСЮрЛицом;
	Если ДоговорСЮрЛицом Тогда
		Объект.ВидОплатыДоговора = Перечисления.ВидыОплатыДоговоров.Рассрочка1Месяц;
	КонецЕсли;
	
	Объект.ПроцентСкидки = ЛексСервер.ПолучитьСкидкуДоговора(Объект.Подразделение, Объект.Дата, Объект.СуммаДокументаБезСкидки, Объект.ВидОплатыДоговора);
	Объект.СуммаДокумента = Объект.СуммаДокумента - (Объект.СуммаДокументаБезСкидки * Объект.ПроцентСкидки / 100);
	ВидОплаты = Объект.ВидОплатыДоговора;
	
	Если ВидОплаты = Перечисления.ВидыОплатыДоговоров.Рассрочка1Месяц Тогда
		Объект.МесяцевРассрочки = 1;
	ИначеЕсли ВидОплаты = Перечисления.ВидыОплатыДоговоров.Рассрочка4Месяца Тогда
		Объект.МесяцевРассрочки = 4;
	ИначеЕсли ВидОплаты = Перечисления.ВидыОплатыДоговоров.БанковскийКредит 
		ИЛИ ВидОплаты = Перечисления.ВидыОплатыДоговоров.Предоплата50БанковскийКредит Тогда
		Объект.Банк = Константы.БанкДляРассрочкиКлиенту;
		Объект.МесяцевРассрочки = 0;
	ИначеЕсли ВидОплаты = Перечисления.ВидыОплатыДоговоров.ПолнаяПредоплата Тогда
		Объект.МесяцевРассрочки = 0;
	КонецЕсли;
	
	ЗаполнитьТаблицуРассрочка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	Объект.Организация = ПолучитьОрганизацию(Объект.Подразделение, Объект.Подразделение, Объект.Контрагент);
	ПлатежныеДокументы.Параметры.УстановитьЗначениеПараметра("Подразделение", Объект.Подразделение);
	ПересчитатьРассрочкуСкидку();
	ЗаполнитьОстатокОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПересчитатьРассрочкуСкидку();
	ЗаполнитьОстатокОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОфисПриИзменении(Элемент)
	
	Объект.Организация = ПолучитьОрганизацию(Объект.Подразделение, Объект.Офис, Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПриИзменении(Элемент)
	
	Если НЕ Объект.Проведен Тогда
		ПересчитатьРассрочкуСкидку();
	КонецЕсли;
	ЗаполнитьОстатокОплаты();
	
КонецПроцедуры
