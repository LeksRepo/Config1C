
Процедура ОбработкаПроведения(Отказ, Режим)
	
	СчетМатериалыНаСкладе = ПланыСчетов.Управленческий.МатериалыНаСкладе;
	ПВХНоменклатура = ПланыВидовХарактеристик.ВидыСубконто.Номенклатура;
	ПВХСклады = ПланыВидовХарактеристик.ВидыСубконто.Склады;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеМатериаловСписокНоменклатуры.Номенклатура,
	|	СУММА(ПеремещениеМатериаловСписокНоменклатуры.Количество) КАК Количество,
	|	МИНИМУМ(ПеремещениеМатериаловСписокНоменклатуры.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Документ.ПеремещениеМатериалов.СписокНоменклатуры КАК ПеремещениеМатериаловСписокНоменклатуры
	|ГДЕ
	|	ПеремещениеМатериаловСписокНоменклатуры.Ссылка = &Ссылка
	|	И ПеремещениеМатериаловСписокНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|	И ПеремещениеМатериаловСписокНоменклатуры.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеМатериаловСписокНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура
	|ИЗ
	|	втНоменклатура КАК втНоменклатура";
	
	//	блокировка
	
	ТЗНоменклатура = Запрос.Выполнить().Выгрузить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Управленческий");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Подразделение", Подразделение);
	ЭлементБлокировки.УстановитьЗначение("Счет", ПланыСчетов.Управленческий.МатериалыНаСкладе);
	ЭлементБлокировки.ИсточникДанных = ТЗНоменклатура;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура, "Номенклатура");
	Блокировка.Заблокировать();
	
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втНоменклатура.Номенклатура,
	|	втНоменклатура.НомерСтроки,
	|	втНоменклатура.Количество КАК КоличествоТребуется,
	|	ЕСТЬNULL(УправленческийОстатки.КоличествоОстатокДт, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(УправленческийОстатки.СуммаОстатокДт, 0) КАК СуммаОстаток,
	|	УправленческийОстатки.Субконто1
	|ИЗ
	|	ВТНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(
	|				&МоментВремени,
	|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.МатериалыНаСкладе),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Номенклатура),
	|				Подразделение = &Подразделение
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							втНоменклатура.Номенклатура
	|						ИЗ
	|							втНоменклатура)) КАК УправленческийОстатки
	|		ПО втНоменклатура.Номенклатура = УправленческийОстатки.Субконто1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоОстаток <Выборка.КоличествоТребуется Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("На складе %1 недостаточно свободного материала %2. Из требуемых %3 есть только %4", 
			Склад,
			Выборка.Номенклатура, 
			Выборка.КоличествоТребуется,
			Выборка.КоличествоОстаток);
			Поле = "СписокНоменклатуры[" +Строка(Выборка.НомерСтроки-1) + "].Номенклатура";
			//Поле = "Автор";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле);
			Продолжить;
			Отказ = Истина;
		КонецЕсли;
		
		СуммаСписания = Выборка.КоличествоТребуется / Выборка.КоличествоОстаток * Выборка.СуммаОстаток;
		
		Проводка = Движения.Управленческий.Добавить();
		Проводка.Период = Дата;
		Проводка.Подразделение = Подразделение;
		Проводка.СчетДт = СчетМатериалыНаСкладе;
		Проводка.СубконтоДт[ПВХСклады] = СкладПолучатель;
		Проводка.СубконтоДт[ПВХНоменклатура] = Выборка.Номенклатура;
		Проводка.КоличествоДт = Выборка.КоличествоТребуется;
		
		Проводка.СчетКт = СчетМатериалыНаСкладе;
		Проводка.СубконтоКт[ПВХСклады] = Склад;
		Проводка.СубконтоКт[ПВХНоменклатура] = Выборка.Номенклатура;
		Проводка.КоличествоКт = Выборка.КоличествоТребуется;
		Проводка.Сумма = СуммаСписания;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		Движения.Управленческий.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

//Функция ПроверитьПревышениеЛимита()
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Период", МоментВремени());
//	Запрос.УстановитьПараметр("Подразделение", ПодразделениеПолучатель);
//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
//	Запрос.УстановитьПараметр("Цех", СкладПолучатель);
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	ПеремещениеМатериаловМатериалыОтгружено.Номенклатура,
//	|	МИНИМУМ(ПеремещениеМатериаловМатериалыОтгружено.НомерСтроки) КАК НомерСтроки,
//	|	СУММА(ПеремещениеМатериаловМатериалыОтгружено.Количество * ПеремещениеМатериаловМатериалыОтгружено.ЕдиницаХранения.Коэффициент) КАК Количество
//	|ПОМЕСТИТЬ ДокТЧ
//	|ИЗ
//	|	Документ.ПеремещениеМатериалов.МатериалыОтгружено КАК ПеремещениеМатериаловМатериалыОтгружено
//	|ГДЕ
//	|	ПеремещениеМатериаловМатериалыОтгружено.Ссылка = &Ссылка
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ПеремещениеМатериаловМатериалыОтгружено.Номенклатура
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	БазовыйЛимитЦехаСрезПоследних.Номенклатура,
//	|	БазовыйЛимитЦехаСрезПоследних.Количество КАК КоличествоБазовыйЛимит,
//	|	ДокТЧ.Количество КАК КоличествоПеремещаемое,
//	|	ЕСТЬNULL(ЛимитЦехаОстатки.КоличествоОстаток, 0) КАК КоличествоДополнительныйЛимит,
//	|	ДокТЧ.НомерСтроки,
//	|	ЕСТЬNULL(МатериалыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЦеха,
//	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаНоменклатуры
//	|ИЗ
//	|	ДокТЧ КАК ДокТЧ
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БазовыйЛимитЦеха.СрезПоследних(&Период, Подразделение = &Подразделение) КАК БазовыйЛимитЦехаСрезПоследних
//	|		ПО ДокТЧ.Номенклатура = БазовыйЛимитЦехаСрезПоследних.Номенклатура
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЛимитЦеха.Остатки(&Период, Подразделение = &Подразделение) КАК ЛимитЦехаОстатки
//	|		ПО ДокТЧ.Номенклатура = ЛимитЦехаОстатки.Номенклатура
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.МатериалыНаСкладах.Остатки(&Период, Склад = &Цех) КАК МатериалыНаСкладахОстатки
//	|		ПО ДокТЧ.Номенклатура = МатериалыНаСкладахОстатки.Номенклатура
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
//	|		ПО (ДокТЧ.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура)";
//	
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		Выборка = РезультатЗапроса.Выбрать();
//		Пока Выборка.Следующий() Цикл
//			
//			ПревышиниеЛимита = Выборка.КоличествоОстатокЦеха + Выборка.КоличествоПеремещаемое - Выборка.КоличествоБазовыйЛимит - Выборка.КоличествоДополнительныйЛимит;
//			
//			Если ПревышиниеЛимита > 0 Тогда
//				
//				ПревышиниеЛимита = Мин(ПревышиниеЛимита, Выборка.КоличествоПеремещаемое);
//				СуммаПревышенияЛимита = Окр(ПревышиниеЛимита * Выборка.ЦенаНоменклатуры, 2); 
//				
//				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Превышение лимита по материалу %1. В количестве %2, на сумму %3", Выборка.Номенклатура, ПревышиниеЛимита, СуммаПревышенияЛимита);
//				ИмяПоля = "МатериалыОтгружено["+Строка(Выборка.НомерСтроки-1)+"].Номенклатура";
//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, ИмяПоля);
//				
//				// уменьшить Фонд экономии
//				Запись = Движения.ФондЭкономииМатериалов.Добавить();
//				Запись.Период = Дата;
//				Запись.Подразделение = ПодразделениеПолучатель;
//				Запись.Номенклатура = Выборка.Номенклатура;
//				Запись.Стоимость = -СуммаПревышенияЛимита;
//				Запись.Количество = -ПревышиниеЛимита;
//			
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//КонецФункции // ПроверитьПревышениеЛимита()