
//Процедура ОбработкаПроведения(Отказ, РежимПроведения)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|   МИНИМУМ(МодернизацияОСОсновныеСредства.НомерСтроки) КАК НомерСтроки,
//	|   МодернизацияОСОсновныеСредства.ОС,
//	|   МАКСИМУМ(МодернизацияОСОсновныеСредства.НачислятьАмортизацию) КАК НачислятьАмортизацию,
//	|   СУММА(МодернизацияОСОсновныеСредства.СрокАмортизации) КАК СрокАмортизации,
//	|   СУММА(МодернизацияОСОсновныеСредства.Стоимость) КАК Стоимость
//	|ПОМЕСТИТЬ тчДок
//	|ИЗ
//	|   Документ.МодернизацияОС.ОсновныеСредства КАК МодернизацияОСОсновныеСредства
//	|ГДЕ
//	|   МодернизацияОСОсновныеСредства.Ссылка = &Ссылка
//	|
//	|СГРУППИРОВАТЬ ПО
//	|   МодернизацияОСОсновныеСредства.ОС
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|   тчДок.НомерСтроки,
//	|   тчДок.ОС,
//	|   тчДок.СрокАмортизации КАК ДобавитьКСрокуАмортизации,
//	|   тчДок.Стоимость,
//	|   тчДок.НачислятьАмортизацию КАК НачислятьАмортизацию,
//	|   ОсновныеСредстваОстатки.Подразделение,
//	|   ЕСТЬNULL(ОсновныеСредстваОстатки.СуммаОстаток, -1) КАК СуммаОстаток,
//	|   ЕСТЬNULL(СостояниеОССрезПоследних.СрокАмортизации, 0) КАК СрокАмортизации,
//	|   СостояниеОССрезПоследних.МОЛ,
//	|   СостояниеОССрезПоследних.ПервоначальнаяСтоимость
//	|ИЗ
//	|   тчДок КАК тчДок
//	|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОсновныеСредства.Остатки(
//	|               &МоментВремени,
//	|               ОсновноеСредство В
//	|                       (ВЫБРАТЬ
//	|                           т.ОС
//	|                       ИЗ
//	|                           тчДок КАК т)
//	|                   И Подразделение = &Подразделение) КАК ОсновныеСредстваОстатки
//	|       ПО тчДок.ОС = ОсновныеСредстваОстатки.ОсновноеСредство
//	|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеОС.СрезПоследних(
//	|               &МоментВремени,
//	|               ПринятоКУчету
//	|                   И ОсновноеСредство В
//	|                       (ВЫБРАТЬ
//	|                           т.ОС
//	|                       ИЗ
//	|                           тчДок КАК т)) КАК СостояниеОССрезПоследних
//	|       ПО тчДок.ОС = СостояниеОССрезПоследних.ОсновноеСредство";
//	
//	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
//	Запрос.УстановитьПараметр("Подразделение", Подразделение);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		// нет такого ОС в остатках
//		Если Выборка.СуммаОстаток = -1 Тогда
//			
//			ТекстСообщения = "Основное средство """ + Выборка.ОС + """ по данным управленческого учета не числится в подразделении " + Подразделение;
//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ОсновныеСредства["+(Выборка.НомерСтроки - 1)+"].ОС");
//			Отказ = Истина;
//			Продолжить;
//			
//		КонецЕсли;
//		
//		Проводки = Движения.ОсновныеСредства.ДобавитьПриход();
//		Проводки.Период = Дата;
//		Проводки.ОсновноеСредство = Выборка.ОС;
//		Проводки.Подразделение = Выборка.Подразделение;
//		Проводки.Сумма = Выборка.Стоимость;
//		
//		Проводки = Движения.СостояниеОС.Добавить();
//		Проводки.Период = Дата;
//		Проводки.ОсновноеСредство = Выборка.ОС;
//		Проводки.МОЛ = Выборка.МОЛ;
//		Проводки.ПринятоКУчету = Истина;
//		Проводки.НачислятьАмортизацию = Выборка.НачислятьАмортизацию;
//		Проводки.СрокАмортизации = Выборка.ДобавитьКСрокуАмортизации + Выборка.СрокАмортизации;
//		Проводки.ПервоначальнаяСтоимость = Выборка.ПервоначальнаяСтоимость + Выборка.Стоимость;
//		
//	КонецЦикла;
//	
//	Если ХозяйственнаяОперация = Перечисления.ХозяйственнаяОперация.ЗакупкаУПоставщика Тогда
//	
//		Проводки = Движения.ВзаиморасчетыСКонтрагентами.ДобавитьРасход();
//		Проводки.Контрагент = Контрагент;
//	
//	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственнаяОперация.ЗакупкаЧерезПодотчетноеЛицо Тогда
//		
//		Запись = Движения.ОборотыПоСтатьям.Добавить();
//		Запись.Период = Дата;
//		Запись.Подразделение = Подразделение;
//		Запись.Статья = Справочники.Статьи.ОсновныеСредства;
//		Запись.Касса = ОсновныеСредства.Итог("Стоимость");
//		
//		Проводки = Движения.ВзаиморасчетыСФизЛицами.ДобавитьРасход();
//		Проводки.Сотрудник = Подотчетник;
//	КонецЕсли;
//	
//	Проводки.Период = Дата;
//	Проводки.Подразделение = Подразделение;
//	Проводки.Сумма = ОсновныеСредства.Итог("Стоимость");
//	
//	Если НЕ Отказ Тогда
//		Движения.ВзаиморасчетыСКонтрагентами.Записывать = Истина;
//		Движения.ВзаиморасчетыСФизЛицами.Записывать = Истина;
//		Движения.ОсновныеСредства.Записывать = Истина;
//		Движения.СостояниеОС.Записывать = Истина;
//		Движения.ОборотыПоСтатьям.Записывать = Истина;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
//	
//	МассивНепроверяемыхРеквизитов = Новый Массив();
//	
//	Если ХозяйственнаяОперация = Перечисления.ХозяйственнаяОперация.ЗакупкаУПоставщика Тогда
//		МассивНепроверяемыхРеквизитов.Добавить("Подотчетник");
//		Подотчетник = Справочники.ФизическиеЛица.ПустаяСсылка();
//	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственнаяОперация.ЗакупкаЧерезПодотчетноеЛицо Тогда
//		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
//		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
//	КонецЕсли;
//	
//	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
//	
//КонецПроцедуры

//Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
//	
//	ХозяйственнаяОперация = Перечисления.ХозяйственнаяОперация.ЗакупкаУПоставщика;
//	Подразделение = ОбщегоНазначения.ПолучитьПараметрСеанса("ТекущееПодразделение");
//	
//КонецПроцедуры
