
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
		Ошибки = Неопределено;
	
	Дата = КонецМесяца(Дата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеАмортизации.Ссылка
	|ИЗ
	|	Документ.НачислениеАмортизации КАК НачислениеАмортизации
	|ГДЕ
	|	НачислениеАмортизации.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И НачислениеАмортизации.Подразделение = &Подразделение";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("За %1 по подразделению %2 уже есть документ %3", Формат(Дата, "ДФ=ММММ"),Подразделение,Выборка.Ссылка);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.Дата", ТекстОшибки);
	КонецЕсли;
	//Если Ошибки <> Неопределено Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	//	Отказ = Истина;			
	//КонецЕсли;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	СформироватьДвиженияУправленческий();
КонецПроцедуры

Функция СформироватьДвиженияУправленческий()
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Управленческий.ПервоначальнаяСтоимостьОС);
	МассивСчетов.Добавить(ПланыСчетов.Управленческий.АмортизацияОС);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("СчетПС", ПланыСчетов.Управленческий.ПервоначальнаяСтоимостьОС);
	Запрос.УстановитьПараметр("СчетАморт", ПланыСчетов.Управленческий.АмортизацияОС);
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ОсновныеСредстваСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	//|	ОсновныеСредстваСрезПоследних.СрокАмортизации,
	//|	УправленческийОстаткиПС.СуммаОстаток КАК СуммаПС,
	//|	УправленческийОстаткиАморт.СуммаОстаток КАК СуммаАморт,
	//|	ЕСТЬNULL(УправленческийОстаткиПС.СуммаОстаток + УправленческийОстаткиАморт.СуммаОстаток, УправленческийОстаткиПС.СуммаОстаток) КАК СуммаОстаток
	//|ИЗ
	//|	РегистрСведений.ОсновныеСредства.СрезПоследних КАК ОсновныеСредстваСрезПоследних
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(, Счет = &СчетПС, , Подразделение = &Подразделение) КАК УправленческийОстаткиПС
	//|		ПО ОсновныеСредстваСрезПоследних.ОсновноеСредство = УправленческийОстаткиПС.Субконто1
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(, Счет = &СчетАморт, , Подразделение = &Подразделение) КАК УправленческийОстаткиАморт
	//|		ПО ОсновныеСредстваСрезПоследних.ОсновноеСредство = УправленческийОстаткиАморт.Субконто1
	//|ГДЕ
	//|	ОсновныеСредстваСрезПоследних.НачислятьАмортизацию";
	
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ОсновныеСредстваСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(ОсновныеСредстваСрезПоследних.СрокАмортизации) КАК СрокАмортизации,
	|	СУММА(УправленческийОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА УправленческийОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.АмортизацияОС)
	|				ТОГДА УправленческийОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК АмортизацияСумма,
	|	СУММА(ВЫБОР
	|			КОГДА УправленческийОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПервоначальнаяСтоимостьОС)
	|				ТОГДА УправленческийОстатки.СуммаОстаток
	|		КОНЕЦ) КАК СуммаПС
	|ИЗ
	|	РегистрСведений.ОсновныеСредства.СрезПоследних КАК ОсновныеСредстваСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(, Счет В (&МассивСчетов), , Подразделение = &Подразделение) КАК УправленческийОстатки
	|		ПО ОсновныеСредстваСрезПоследних.ОсновноеСредство = УправленческийОстатки.Субконто1
	|ГДЕ
	|	ОсновныеСредстваСрезПоследних.НачислятьАмортизацию
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеСредстваСрезПоследних.ОсновноеСредство";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.СуммаОстаток > 0 Тогда
				
				Проводка = Движения.Управленческий.Добавить();
				Проводка.Период = Дата;
				Проводка.Подразделение = Подразделение;
				Проводка.Сумма = Окр(МИН(Выборка.СуммаПС / Выборка.СрокАмортизации, Выборка.СуммаОстаток), 2);
				Проводка.СчетДт = ПланыСчетов.Управленческий.Расходы;
				Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Справочники.СтатьиДоходовРасходов.АмортизацияОС; 
				Проводка.СчетКт = ПланыСчетов.Управленческий.АмортизацияОС;		
				Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ОсновныеСредства] = Выборка.ОсновноеСредство;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Движения.Управленческий.Записывать = Истина;
		
	КонецЕсли
	
КонецФункции // СформироватьДвиженияУправленческий()

//Процедура ОбработкаПроведения(Отказ, РежимПроведения)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ОсновныеСредстваОстатки.Подразделение КАК Подразделение,
//	|	ОсновныеСредстваОстатки.СуммаОстаток КАК СуммаОстаток,
//	|	ОсновныеСредстваОстатки.ОсновноеСредство,
//	|	ЕСТЬNULL(СостояниеОССрезПоследних.СрокАмортизации, 0) КАК СрокАмортизации,
//	|	ЕСТЬNULL(СостояниеОССрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость
//	|ИЗ
//	|	РегистрНакопления.ОсновныеСредства.Остатки(&МоментВремени, ) КАК ОсновныеСредстваОстатки
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеОС.СрезПоследних(
//	|				&МоментВремени,
//	|				ПринятоКУчету
//	|					И НачислятьАмортизацию) КАК СостояниеОССрезПоследних
//	|		ПО (СостояниеОССрезПоследних.ОсновноеСредство = ОсновныеСредстваОстатки.ОсновноеСредство)
//	|ГДЕ
//	|	ЕСТЬNULL(СостояниеОССрезПоследних.ПервоначальнаяСтоимость, 0) <> 0
//	|ИТОГИ ПО
//	|	Подразделение";
//	
//	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
//	
//	ВыборкаПодразделения = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	
//	Пока ВыборкаПодразделения.Следующий() Цикл
//		
//		АмортизацияПоПодразделению = 0;		
//		Выборка = ВыборкаПодразделения.Выбрать();
//		
//		Пока Выборка.Следующий() Цикл
//			
//			Если Выборка.СуммаОстаток > 0 Тогда
//				НачислитьАмортизацию = Окр(МИН(Выборка.ПервоначальнаяСтоимость / Выборка.СрокАмортизации, Выборка.СуммаОстаток), 2);
//				Проводки = Движения.ОсновныеСредства.ДобавитьРасход();
//				Проводки.Период = Дата;
//				Проводки.ОсновноеСредство = Выборка.ОсновноеСредство;
//				Проводки.Подразделение = Выборка.Подразделение;
//				Проводки.Сумма = НачислитьАмортизацию;
//				
//				АмортизацияПоПодразделению = НачислитьАмортизацию + АмортизацияПоПодразделению;
//				
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//		Проводки = Движения.ОборотыПоСтатьям.Добавить();
//		Проводки.Период = Дата;
//		Проводки.Подразделение = ВыборкаПодразделения.Подразделение;
//		Проводки.Факт = АмортизацияПоПодразделению;
//		Проводки.Статья = Справочники.Статьи.ОсновныеСредства;
//		
//	КонецЦикла;
//	
//	Движения.ОсновныеСредства.Записывать = Истина;
//	Движения.ОборотыПоСтатьям.Записывать = Истина;
//	
//КонецПроцедуры

//Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
//	
//	Дата = КонецМесяца(ТекущаяДата());
//	
//КонецПроцедуры