
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	РазличныеПодразделения = Подразделение <> ПодразделениеПолучатель;
	
	Если РазличныеПодразделения Тогда
		Если ПередачаПрибыли Тогда
			СформироватьДвижениеПередачаПрибыли();
		Иначе
			СформироватьДвижениеДенегВРазныхПодразделенях();
		КонецЕсли;
	Иначе
		СформироватьДвижениеДенегВОдномПодразделении();
	КонецЕсли;
	
	Движения.Управленческий.Записывать = Истина;
	
КонецПроцедуры

Функция СформироватьДвижениеДенегВОдномПодразделении()
	
	Проводки = СоздатьПроводку(Подразделение);
	
	Проводки.СчетКт = ПланыСчетов.Управленческий.РасчетныйСчет;
	Проводки.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.РасчетныйСчет] = Счет;
	Проводки.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = СтатьяДДС;
	
	Проводки.СчетДт = ПланыСчетов.Управленческий.РасчетныйСчет;
	Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.РасчетныйСчет] = СчетПолучателя;
	Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = СтатьяДДСПолучателя;
	
КонецФункции

Функция СформироватьДвижениеДенегВРазныхПодразделенях();
	
	Проводки = СоздатьПроводку(Подразделение);
	
	Проводки.СчетКт = ПланыСчетов.Управленческий.РасчетныйСчет;
	Проводки.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.РасчетныйСчет] = Счет;
	Проводки.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = СтатьяДДС;
	
	Проводки.СчетДт = ПланыСчетов.Управленческий.ВзаиморасчетыСПодразделениями;
	Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = ПодразделениеПолучатель;
	
	Проводки = СоздатьПроводку(ПодразделениеПолучатель);
	
	Проводки.СчетДт = ПланыСчетов.Управленческий.РасчетныйСчет;
	Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.РасчетныйСчет] = СчетПолучателя;
	Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = СтатьяДДСПолучателя;
	
	Проводки.СчетКт = ПланыСчетов.Управленческий.ВзаиморасчетыСПодразделениями;
	Проводки.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = Подразделение;
	
КонецФункции

Функция СформироватьДвижениеПередачаПрибыли();
	
	Проводки = СоздатьПроводку(Подразделение);
	
	Проводки.СчетКт = ПланыСчетов.Управленческий.РасчетныйСчет;
	Проводки.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.РасчетныйСчет] = Счет;
	Проводки.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = СтатьяДДС;
	
	Проводки.СчетДт = ЛексСервер.ПолучитьЗатратныйСчетПодразделения(Подразделение);
	Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Справочники.СтатьиДоходовРасходов.ПередачаВыручкиНаУправление;
	
	Проводки = СоздатьПроводку(ПодразделениеПолучатель);
	
	Проводки.СчетДт = ПланыСчетов.Управленческий.РасчетныйСчет;
	Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.РасчетныйСчет] = СчетПолучателя;
	Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = СтатьяДДСПолучателя;
	
	Проводки.СчетКт = ПланыСчетов.Управленческий.Доходы;
	Проводки.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] =ЛексСервер.ПолучитьСтатьюДоходаУправления(Подразделение) ;
	
КонецФункции

Функция СоздатьПроводку(фПодразделение)
		
	Проводки = Движения.Управленческий.Добавить();
	Проводки.Подразделение = фПодразделение;
	Проводки.Период = Дата;
	Проводки.Сумма = Сумма;
	
	Возврат Проводки;
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ПередачаПрибыли = ПередачаПрибыли И ПодразделениеПолучатель.ВидПодразделения = Перечисления.ВидыПодразделений.Управление;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//Если Подразделение <> ПодразделениеПолучатель Тогда
	//	
	//	Если СтатьяДДСОтправитель.СтатьяДоходовРасходов.ВидСтатьи <> Перечисления.ВидСтатьи.Расход Тогда
	//		
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = "Статья ДДС отправителя должна быть расходной";
	//		Сообщение.Поле = "СтатьяДДСОтправитель";
	//		Сообщение.УстановитьДанные(ЭтотОбъект);
	//		Сообщение.Сообщить();
	//		
	//		Отказ = Истина;
	//		
	//	КонецЕсли;
	//	
	//	Если СтатьяДДСПолучатель.СтатьяДоходовРасходов.ВидСтатьи <> Перечисления.ВидСтатьи.Доход Тогда
	//		
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = "Статья ДДС получателя должна быть расходной";
	//		Сообщение.Поле = "СтатьяДДСПолучатель";
	//		Сообщение.УстановитьДанные(ЭтотОбъект);
	//		Сообщение.Сообщить();
	//		
	//		Отказ = Истина;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры
