////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		Если Элементы.СпособЗаполнения.СписокВыбора.НайтиПоЗначению(Объект.СпособЗаполнения) = Неопределено Тогда
			Объект.СпособЗаполнения = СпособЗаполненияВручную;
		КонецЕсли;
	КонецЕсли;

	//При открытии из журнала проводок активизируем выбранную строку
	Если ЗначениеЗаполнено(Параметры.ПараметрТекущаяСтрока) Тогда
		Элементы.Управленческий.ТекущаяСтрока  = Параметры.ПараметрТекущаяСтрока-1;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ТекущийОбъект.СпособЗаполнения = СпособЗаполненияВручную Тогда
		ТекущийОбъект.ТиповаяОперация = Неопределено;
		ТекущийОбъект.ЗаполнениеДвижений.Очистить();
		ТекущийОбъект.СторнируемыйДокумент = Неопределено;
	Иначе
		ТекущийОбъект.ТиповаяОперация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьДоступностьСубконто()
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)

	ЕстьДвижения = Объект.Движения.Управленческий.Количество() > 0;

	Если ЕстьДвижения Тогда
		ТекстВопроса = НСтр("ru = 'Указанные в проводках расчетные счета, договоры, подразделения, документы будут очищены. Продолжить?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Объект.Подразделение = ТекущееПодразделение;
		Возврат;
	КонецЕсли;

	Если ЕстьДвижения Тогда

		Для каждого Проводка Из Объект.Движения.Управленческий Цикл

			Для Инд = 1 по 3 Цикл
				ЗначениеСубконто = Проводка["СубконтоДт" + Инд];
				Если ЗначениеЗаполнено(ЗначениеСубконто)
					И ТипыСвязанныеСПодразделением.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
					Проводка["СубконтоДт" + Инд] = Неопределено;
				КонецЕсли;
			КонецЦикла;

			Для Инд = 1 по 3 Цикл
				ЗначениеСубконто = Проводка["СубконтоКт" + Инд];
				Если ЗначениеЗаполнено(ЗначениеСубконто)
					И ТипыСвязанныеСПодразделением.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
					Проводка["СубконтоКт" + Инд] = Неопределено;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	ТекущееПодразделение = Объект.Подразделение;
	
	УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация(Объект.Подразделение)

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияКлиентПереопределяемый.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	 
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияПриИзменении(Элемент)

	ОбновлениеОтображения();

КонецПроцедуры

&НаКлиенте
Процедура ФлажокСписокПриИзменении(Элемент)

	ОбновлениеОтображения();

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СПИСКА "БУХГАЛТЕРСКИЙ"

&НаКлиенте
Процедура УправленческийПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Управленческий.ТекущиеДанные;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"УправленческийСубконтоДт1", "УправленческийСубконтоДт2", "УправленческийСубконтоДт3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетДт, ЭтаФорма, ПоляФормы, Неопределено, Истина);
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"УправленческийСубконтоКт1", "УправленческийСубконтоКт2", "УправленческийСубконтоКт3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетКт, ЭтаФорма, ПоляФормы, Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ПересчитатьСуммуОперации(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УправленческийПослеУдаления(Элемент)

	ПересчитатьСуммуОперации(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УправленческийСчетДтПриИзменении(Элемент)

	ОбработатьИзменениеСчета("Дт");

КонецПроцедуры

&НаКлиенте
Процедура УправленческийСчетКтПриИзменении(Элемент)

	ОбработатьИзменениеСчета("Кт");

КонецПроцедуры

&НаКлиенте
Процедура УправленческийСуммаПриИзменении(Элемент)

	РасчетСуммы();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СПИСКОВ РЕГИСТРОВ НАКОПЛЕНИЯ И СВЕДЕНИЙ

// Общая процедура для всех регистров. Устанавливает период и Подразделение в добавляемых строках.
//
&НаКлиенте
Процедура Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Свойство("Период") Тогда
		Элемент.ТекущиеДанные.Период = Объект.Дата;
	КонецЕсли;

	Если НоваяСтрока
			И НЕ Копирование
			И Элемент.ТекущиеДанные.Свойство("Подразделение")
			И ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Элемент.ТекущиеДанные.Подразделение = Объект.Подразделение;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СПИСКА "ЗАПОЛНЕНИЕ ДВИЖЕНИЙ"

&НаКлиенте
Процедура ЗаполнениеДвиженийДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ЗаполнениеДвижений.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		Элемент.ВыбиратьТип = Истина;
	Иначе
		Элемент.ВыбиратьТип = Ложь;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура КнопкаЗаполнить(Команда)

	Если Объект.СпособЗаполнения <> СпособЗаполненияСторно Тогда
		Возврат;
	КонецЕсли;
	
	// Очистка существующих движений
	Если ЕстьДвижения() Тогда
		Ответ = Вопрос(НСтр("ru = 'Существующие проводки и движения регистров будут очищены.
			|Продолжить?'"),РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	//Формирование движений
	СформироватьДвиженияСторноСервер();

КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоставРегистров(Команда)

	АдресСпискаРегистров = ПодготовитьСписокРегистровДляЕгоНастройки();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресСпискаРегистров", АдресСпискаРегистров);
	
	РезультатДействийПользователя = ОткрытьФормуМодально("Документ.Операция.Форма.ФормаНастройки", СтруктураПараметров, ЭтаФорма);

	// Обработаем результат действий пользователя
	Если ТипЗнч(РезультатДействийПользователя) = Тип("СписокЗначений")
	   И РезультатДействийПользователя.Количество() <> 0 Тогда
	   
		Модифицированность = Истина;
		ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАктивностьПроводок(Команда)

	Если Объект.ПометкаУдаления Тогда
		Предупреждение(НСтр(
		"ru = 'Операция помечена на удаление, 
        |поэтому переключить активность проводок нельзя.
        |Снимите пометку удаления.'"));
		Возврат;
	КонецЕсли;
	
	ПереключитьАктивностьПроводокСервер();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаКлиенте
Процедура ОбработатьИзменениеСчета(ДтКт)

	ТекущиеДанные = Элементы.Управленческий.ТекущиеДанные;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"УправленческийСубконто"+ДтКт+"1", "УправленческийСубконто"+ДтКт+"2", "УправленческийСубконто"+ДтКт+"3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные["Счет"+ДтКт], ЭтаФорма, ПоляФормы, Неопределено, Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто"+ДтКт+"1", "Субконто"+ДтКт+"2", "Субконто"+ДтКт+"3");
	ПоляОбъекта.Вставить("Подразделение"  , Объект.Подразделение);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ТекущиеДанные["Счет"+ДтКт], ТекущиеДанные, ПоляОбъекта, Истина);
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные["Счет"+ДтКт]);

	Если СвойстваСчета.Количественный Тогда
		ТекущиеДанные["Количество" + ДтКт] = ОписаниеТиповКоличество.ПривестиЗначение(ТекущиеДанные["Количество" + ДтКт]);
	Иначе
		ТекущиеДанные["Количество" + ДтКт] = NULL;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()

	Для Каждого Проводка Из Объект.Движения.Управленческий Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетДт, Проводка, ПоляОбъекта);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетКт, Проводка, ПоляОбъекта);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация(Объект.Дата)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение движений

&НаСервере
Функция ЕстьДвижения()

	Для каждого Регистр Из Регистры Цикл
		Если Объект.Движения[Регистр.Имя].Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		Возврат Истина;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

&НаСервере
Процедура ОбновитьСписокДействий()

	Элементы.СпособЗаполнения.СписокВыбора.Очистить();
	Элементы.СпособЗаполнения.СписокВыбора.Добавить(СпособЗаполненияВручную,СпособЗаполненияВручную);
	Элементы.СпособЗаполнения.СписокВыбора.Добавить(СпособЗаполненияСторно,СпособЗаполненияСторно);

	Если НЕ ЗначениеЗаполнено(Объект.СпособЗаполнения) Тогда
		Объект.СпособЗаполнения = Элементы.СпособЗаполнения.СписокВыбора[0].Значение;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отрисовка формы

&НаСервере
Процедура ОбновлениеОтображения()

	Если Объект.СпособЗаполнения = СпособЗаполненияВручную Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаИнформация;
		Элементы.ФлажокСписок.Видимость = Ложь;
		ФлажокСписок = Ложь;
	ИначеЕсли Объект.СпособЗаполнения = СпособЗаполненияСторно Тогда
		Элементы.ГруппаСторнирование.Видимость = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСторнирование;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(ФлажокСписок,Элементы.ГруппаСписокДокументов,Элементы.ГруппаСторнируемыйДокумент);
		Элементы.ФлажокСписок.Видимость = Истина;
	КонецЕсли;

	Элементы.ГруппаСписокДокументов.Видимость = ФлажокСписок;

	Если Объект.СпособЗаполнения = СпособЗаполненияСторно Тогда
		Если ФлажокСписок И Объект.ЗаполнениеДвижений.Количество() = 0 Тогда
			Объект.ЗаполнениеДвижений.Добавить();
			Элементы.ЗаполнениеДвижений.ТекущаяСтрока = Объект.ЗаполнениеДвижений[0].ПолучитьИдентификатор();
			Объект.ЗаполнениеДвижений[0].Документ = Объект.СторнируемыйДокумент;
		ИначеЕсли НЕ ФлажокСписок И Объект.ЗаполнениеДвижений.Количество() > 0 Тогда
			Объект.СторнируемыйДокумент = Объект.ЗаполнениеДвижений[0].Документ;
			Объект.ЗаполнениеДвижений.Очистить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()

	ПоказатьУправленческий               = Истина;
	ПоказатьКнигаУчетаДоходовИРасходов = Ложь;
	ПоказатьРасшифровкаКУДиР           = Ложь;
	ПорядковыйНомер                    = 0;
	КоличествоВидимых                  = 0;
	Всего                              = Регистры.Количество();

	Для каждого СтрокаРегистра Из Регистры Цикл

		ПорядковыйНомер = ПорядковыйНомер + 1;
		КоличествоВидимых = КоличествоВидимых + Число(СтрокаРегистра.Отображение);

		Если СтрокаРегистра.Имя = "Управленческий" Тогда
			Продолжить;
		КонецЕсли;

		// Создаем страницу для регистра в "правильном" месте между "предопределенными" закладками
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено И СтрокаРегистра.Отображение Тогда

			//Найдем группу перед которой будем вставлять новую группу
			Для каждого Строка Из Регистры Цикл
				Если Строка.ТипРегистра >= СтрокаРегистра.ТипРегистра
					И Строка.Синоним > СтрокаРегистра.Синоним
					И Строка.Отрисован Тогда

					ВпередиСледующийЭлемент=Элементы["Группа" + Строка.Имя];
					Прервать;

				КонецЕсли;
			КонецЦикла;

			ТекГруппа = Элементы.Вставить(
				ИмяГруппы,
				Тип("ГруппаФормы"),
				Элементы.ПанельРегистров,
				ВпередиСледующийЭлемент);

			ТекГруппа.Заголовок = СтрокаРегистра.Синоним;
			СтрокаРегистра.Отрисован = Истина;

			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрБухгалтерии;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРБ;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрНакопления;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРН;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрСведений;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРС;
			КонецЕсли;

			// На странице регистра создаем таблицу
			ИмяТаблицы = СтрокаРегистра.Имя;
			ТекТаблица = Элементы.Найти(ИмяТаблицы);
			Если ТекТаблица <> Неопределено Тогда
				Элементы.Удалить(ТекТаблица);
			КонецЕсли;
			ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
			ТекТаблица.ПутьКДанным = "Объект.Движения." + СтрокаРегистра.Имя;
			// Назначаем общий обработчик
			ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
			ТекТаблица.КартинкаСтрок = КартинкаАктивности;
			ТекТаблица.ПутьКДаннымКартинкиСтроки = "Объект.Движения." + СтрокаРегистра.Имя+".Активность";

			НоваяКнопка = Элементы.Добавить(ИмяТаблицы+"ПереключитьАктивностьПроводок", Тип("КнопкаФормы"), ТекТаблица.КоманднаяПанель);
			НоваяКнопка.ИмяКоманды = "ПереключитьАктивностьПроводок";
			
			// Определяем набор колонок для таблицы, соответствующих метаданным регистра
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				НаборЗаписей = РегистрыНакопления[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
				МетаданныеРегистра    = Метаданные.РегистрыНакопления[СтрокаРегистра.Имя];
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				НаборЗаписей = РегистрыСведений[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
				МетаданныеРегистра    = Метаданные.РегистрыСведений[СтрокаРегистра.Имя];
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				НаборЗаписей = РегистрыБухгалтерии[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
				МетаданныеРегистра    = Метаданные.РегистрыБухгалтерии[СтрокаРегистра.Имя];
			КонецЕсли;
			
			РеквизитыНабораЗаписей = НаборЗаписей.ВыгрузитьКолонки();

			// Некоторые колонки не показываем
			РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
			РеквизитыНабораЗаписей.Колонки.Удалить("Активность");

			Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Период");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Подразделение") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Подразделение");
			КонецЕсли;

			// Обновление заголовков колонок таблицы по синонимам полей регистра.
			МассивПолейРегистра = Новый Массив;
			МассивПолейРегистра.Добавить("Реквизиты");
			МассивПолейРегистра.Добавить("Измерения");
			МассивПолейРегистра.Добавить("Ресурсы");

			Для каждого ВидПоля Из МассивПолейРегистра Цикл
				Для каждого Поле Из МетаданныеРегистра[ВидПоля] Цикл
					КолонкаТаблицы = РеквизитыНабораЗаписей.Колонки.Найти(Поле.Имя);
					Если КолонкаТаблицы <> Неопределено Тогда
						КолонкаТаблицы.Заголовок = Поле.Синоним;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

			// Создаем колонки таблицы
			Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
				ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
				ТекКолонка = Элементы.Найти(ИмяКолонки);
				Если ТекКолонка = Неопределено Тогда
					ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				КонецЕсли;
				ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + "." + КолонкаРеквизита.Имя;
				ТекКолонка.Заголовок   = КолонкаРеквизита.Заголовок;
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
			КонецЦикла;

		КонецЕсли;

		// Делаем страницу регистра невидимой, если она не нужна
		Если ТекГруппа <> Неопределено Тогда
			ТекГруппа.Видимость = СтрокаРегистра.Отображение;
		КонецЕсли;

	КонецЦикла;

	Элементы.ГруппаУправленческий.Видимость = ПоказатьУправленческий;

	//Если движения только по регистру бухгалтерии то прячем заголовок у панели регистров
	Если КоличествоВидимых <= 1 Тогда
		Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьФорму()

	МетаданныеДокумента = Документы.Операция.ПустаяСсылка().Метаданные();
	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	СоздатьЭлементыФормы();

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента			= Объект.Дата;
	
	//ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	СпособЗаполненияВручную = НСтр("ru = 'Вручную'");
	СпособЗаполненияСторно 	= НСтр("ru = 'Сторно движений документа'");
	ОбновитьСписокДействий();
	
	ФлажокСписок = Объект.ЗаполнениеДвижений.Количество() > 1;
	
	ОбновитьФорму();

	ТекущееПодразделение = Объект.Подразделение;

	ОписаниеТиповКоличество    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3));
	ОписаниеТиповПодразделение = БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения();
	ОписаниеТиповСумма         = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));

	// Назначаем общий обработчик
	Элементы.Управленческий.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
	
	УстановитьДоступностьСубконто();

	ОбновлениеОтображения();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = Объект.Ссылка.Метаданные();
	КонецЕсли;

	Регистры.Очистить();

	Для Каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл

		Регистр     = Регистры.Добавить();
		Регистр.Имя = МетаданныеРегистра.Имя;
		ПолноеИмя   = МетаданныеРегистра.ПолноеИмя();

		ПозицияТочки = Найти(ПолноеИмя, ".");
		ТипРегистра  = Лев(ПолноеИмя, ПозицияТочки - 1);

		Регистр.ТипРегистра = ТипРегистра;
		Регистр.Синоним     = МетаданныеРегистра.Синоним;

		Если Регистр.ТипРегистра = "РегистрНакопления" Тогда
			Регистр.РегистрОстатков = (МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки);
		КонецЕсли;

		Регистр.ЕстьДвижения = (Объект.Движения[Регистр.Имя].Количество() > 0);
		
		Если Регистр.ЕстьДвижения Тогда
			
			Регистр.Отображение  = Истина;
			
		ИначеЕсли Регистр.Имя = "Управленческий" Тогда
			
			Регистр.Отображение  = Истина; // Этот регистр отображается всегда
			
		Иначе
			
			// Отображаем те регистры, которые пользователь отметил флагами
			Отбор = Новый Структура("Имя", Регистр.Имя);
			Если Объект.ТаблицаРегистровНакопления.НайтиСтроки(Отбор).Количество() > 0 Тогда
				Регистр.Отображение  = Истина;
			ИначеЕсли Объект.ТаблицаРегистровСведений.НайтиСтроки(Отбор).Количество() > 0 Тогда
				Регистр.Отображение  = Истина;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	// Первым показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сторнирование

&НаСервере
Процедура СформироватьДвиженияСторноСервер()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если Объект.Движения[СтрокаРегистра.Имя].Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Объект.Движения[СтрокаРегистра.Имя].Очистить();
	КонецЦикла;

	//Формирование движений
	Если ФлажокСписок Тогда
		ВыполнитьСторнированиеДокументов(Объект.ЗаполнениеДвижений);
	Иначе
		ТЗДокументов = новый ТаблицаЗначений;
		ТЗДокументов.Колонки.Добавить("Документ");
		ТЗДокументов.Добавить().Документ = Объект.СторнируемыйДокумент;
		ВыполнитьСторнированиеДокументов(ТЗДокументов);
	КонецЕсли;

	ПересчитатьСуммуОперации(ЭтаФорма);
	
    УстановитьДоступностьСубконто();
	
	ОбновитьФорму();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьСторнированиеДокументов(СторнируемыеДокументы, СторнироватьРегистры = Истина, СторнироватьПроводки = Истина)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТЧ Из СторнируемыеДокументы Цикл

		СторнируемыйДокумент = СтрокаТЧ.Документ;
		Если НЕ ЗначениеЗаполнено(СторнируемыйДокумент) Тогда

			//ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
			//	"Колонка",
			//	"Заполнение",
			//	"Сторнируемый документ",
			//	СтрокаТЧ.НомерСтроки,
			//	"Сторнируемые документы");

			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//	ТекстСообщения,
			//	Объект,
			//	,
			//	"Объект");
			Продолжить;
		КонецЕсли;

		МетаданныеДокумент	= СторнируемыйДокумент.Метаданные();

		Для Каждого МетаданныеРегистр Из МетаданныеДокумент.Движения Цикл

			// если документ "Ручная операция" не может иметь таких движений,
			// то это не сторнируемый регистр
			Если НЕ Объект.Движения.Свойство(МетаданныеРегистр.Имя) Тогда
				Продолжить;
			КонецЕсли;

			НаборДвижений = ДокументОбъект.Движения[МетаданныеРегистр.Имя];

			ЭтоРегистрБухгалтерии = Ложь;
			Если СторнироватьПроводки И Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистр) Тогда

				СторнируемыйНаборЗаписей = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
				ЭтоРегистрБухгалтерии = Истина;

			ИначеЕсли СторнироватьРегистры И Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистр) Тогда

				СторнируемыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();

			Иначе
				Продолжить;
			КонецЕсли;

			СторнируемыйНаборЗаписей.Отбор.Регистратор.Значение = СторнируемыйДокумент;
			СторнируемыйНаборЗаписей.Прочитать();

			Для Каждого ДвижениеСторнируемое Из СторнируемыйНаборЗаписей Цикл

				ДвижениеСторно = НаборДвижений.Добавить();

				// реквизиты
				Если ЭтоРегистрБухгалтерии Тогда
					ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
				Иначе
					ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
				КонецЕсли;

				ДвижениеСторно.Период = Объект.Дата;

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);

КонецПроцедуры

// Копирует значения движения в строку сторно нового движения
// для измерений и реквизитов. Ресурсы инвертируются
//
&НаСервере
Процедура ЗаполнитьДвижениеСторно(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор,ВидДвижения");

	// вид движения
	Если МетаданныеОбъект.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		Движение.ВидДвижения = Строка.ВидДвижения;
	КонецЕсли;

	// ресурсы
	Для каждого МДОбъект Из МетаданныеОбъект.Ресурсы Цикл
		Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвижениеСторно

// Копирует значения движения по регистру бухгалтерии в строку сторно
// нового движения для измерений и реквизитов. Ресурсы инвертируются
//
&НаСервере
Процедура ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор");

	// субконто
	Если МетаданныеОбъект.Корреспонденция Тогда
		Для каждого Субконто Из Строка.СубконтоДт Цикл
			Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;
		Для каждого Субконто Из Строка.СубконтоКт Цикл
			Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;
	Иначе
		Для каждого Субконто Из Строка.Субконто Цикл
			Движение.Субконто[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;
	КонецЕсли;

	// ресурсы
	Для каждого МДОбъект Из МетаданныеОбъект.Ресурсы Цикл
		Если МДОбъект.ПризнакУчета = Неопределено Тогда
			Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
		Иначе
			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Дт"]) Тогда
				Движение[МДОбъект.Имя + "Дт"] = - Строка[МДОбъект.Имя + "Дт"];
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Кт"]) Тогда
				Движение[МДОбъект.Имя + "Кт"] = - Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с проводками

&НаКлиенте
Функция ПреобразоватьДанныеЭлементаФормыВСтруктуру(ТекущиеДанные)

	СтруктураПроводки = Новый Структура("НомерСтроки,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,
		|КоличествоДт,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,
		|КоличествоКт,Сумма,Содержание");
	ЗаполнитьЗначенияСвойств(СтруктураПроводки, ТекущиеДанные);

	Возврат СтруктураПроводки;

КонецФункции

// Пересчитывает сумму операции при изменении сумм в проводках.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуОперации(Форма)
	
	Объект = Форма.Объект;
	
	Объект.СуммаОперации = 0;
	Для каждого Проводка Из Объект.Движения.Управленческий Цикл
		Объект.СуммаОперации = Объект.СуммаОперации + Проводка.Сумма;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммы()

	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные     = Элементы.Управленческий.ТекущиеДанные;
	СтруктураПроводки = ПреобразоватьДанныеЭлементаФормыВСтруктуру(ТекущиеДанные);
	
	ЗаполнитьЗначенияСвойств(Элементы.Управленческий.ТекущиеДанные, СтруктураПроводки);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка состава регистров

&НаСервере
Функция ПодготовитьСписокРегистровДляЕгоНастройки()

	// Актуализируем информацию о наличии движений
	Для Каждого Регистр Из Регистры Цикл
		
		Если НЕ Регистр.Отображение Тогда 
			Продолжить;
		КонецЕсли;
		
		Регистр.ЕстьДвижения = (Объект.Движения[Регистр.Имя].Количество() > 0);
		
	КонецЦикла;
	
	// Поместим таблицу Регистры во временное хранилище
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Регистры"), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя)
	
	Для Каждого ИзмененныйРегистр Из РезультатДействийПользователя Цикл
		
		ИмяРегистра = ИзмененныйРегистр.Значение;
		
		// Найдем регистр в коллекции Регистры
		Отбор = Новый Структура("Имя", ИмяРегистра);
		РезультатПоиска = Регистры.НайтиСтроки(Отбор);
		Если РезультатПоиска.Количество() = 0 Тогда
			// Имя регистра неизвестно в этой форме
			Продолжить;
		КонецЕсли;
		Регистр = РезультатПоиска[0];
		
		// Изменим отображение регистра
		Регистр.Отображение = ИзмененныйРегистр.Пометка;
		
		// Удалим данные из отключенных наборов записей
		Если НЕ ИзмененныйРегистр.Пометка Тогда
			Если Объект.Движения[ИмяРегистра].Количество() > 0 Тогда
				Объект.Движения[ИмяРегистра].Очистить();
			КонецЕсли;
			Регистр.ЕстьДвижения = Ложь;
		КонецЕсли;
		
		// Обновим данные в табличных частях ТаблицаРегистровСведений и ТаблицаРегистровНакопления
		Если Регистр.ТипРегистра = "РегистрНакопления" Тогда
			ОбновляемаяКоллекция = Объект.ТаблицаРегистровНакопления;
		ИначеЕсли Регистр.ТипРегистра = "РегистрСведений" Тогда
			ОбновляемаяКоллекция = Объект.ТаблицаРегистровСведений;
		Иначе
			ОбновляемаяКоллекция = Неопределено;
		КонецЕсли;
		
		Если ОбновляемаяКоллекция <> Неопределено Тогда
		
			Отбор = Новый Структура("Имя", Регистр.Имя);
			ОбновляемыеЭлементыКоллекции = ОбновляемаяКоллекция.НайтиСтроки(Отбор);
			
			КоличествоЭлементовКоллекции = ОбновляемыеЭлементыКоллекции.Количество();
			Если КоличествоЭлементовКоллекции > 1 Тогда
				// Удалим все, кроме первого
				Для ИндексЭлемента = 1 По КоличествоЭлементовКоллекции - 1 Цикл
					ОбновляемаяКоллекция.Удалить(ОбновляемыеЭлементыКоллекции[ИндексЭлемента]);
				КонецЦикла;
				КоличествоЭлементовКоллекции = 1;
			КонецЕсли;
			
			РегистрЕстьВКоллекции = (КоличествоЭлементовКоллекции <> 0);
			
			Если Регистр.Отображение И НЕ РегистрЕстьВКоллекции Тогда
				// Добавим регистр в коллекцию
				ОбновляемаяКоллекция.Добавить().Имя = Регистр.Имя;
			ИначеЕсли РегистрЕстьВКоллекции И НЕ Регистр.Отображение Тогда
				// Удалим регистр из коллекции
				ОбновляемаяКоллекция.Удалить(ОбновляемыеЭлементыКоллекции[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	СоздатьЭлементыФормы();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ПереключитьАктивностьПроводокСервер()

	ТекущаяАктивность = Ложь;
	ТекущаяСтраница = СтрЗаменить(Элементы.ПанельРегистров.ТекущаяСтраница.Имя,"Группа","");
	Если Объект.Движения[ТекущаяСтраница].Количество() > 0 Тогда
		ТекущаяАктивность = Объект.Движения[ТекущаяСтраница][0].Активность;
	КонецЕсли;
	Для каждого СтрокаДвижения Из Объект.Движения[ТекущаяСтраница] Цикл
		СтрокаДвижения.Активность = (НЕ ТекущаяАктивность);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация(ОбъектИзменения)
	
	Если Не ЗначениеЗаполнено(ОбъектИзменения) Тогда
		Возврат;
	КонецЕсли;

	//ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

КонецПроцедуры
