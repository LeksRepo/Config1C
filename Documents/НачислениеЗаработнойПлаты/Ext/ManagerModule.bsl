
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	ЛексСервер.ПолучитьПредставлениеДокумента(Данные, Представление, СтандартнаяОбработка);
	
КонецПроцедуры

Функция ПолучитьПоказателиДизайнера(ДатаНачала, ДатаОкончания, Дизайнер, Подразделение) Экспорт
	
	//УстановитьПривилегированныйРежим(Истина);
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	УправленческийОбороты.СуммаОборот КАК Сумма,
	//|	УправленческийОбороты.Субконто2 КАК Дизайнер,
	//|	УправленческийОбороты.Субконто1 КАК Показатель
	//|ИЗ
	//|	РегистрБухгалтерии.Управленческий.Обороты(
	//|			&ДатаНачала,
	//|			&ДатаОкончания,
	//|			,
	//|			,
	//|			,
	//|			Подразделение = &Подразделение
	//|				И Субконто2 = &Дизайнер
	//|				И ТИПЗНАЧЕНИЯ(Субконто1) = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСотрудников),
	//|			,
	//|			) КАК УправленческийОбороты
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ПлановыеПоказателиДизайнеровОбороты.Дизайнер,
	//|	ПлановыеПоказателиДизайнеровОбороты.Показатель КАК Показатель,
	//|	ПлановыеПоказателиДизайнеровОбороты.ЗначениеОборот КАК Сумма
	//|ИЗ
	//|	РегистрНакопления.ПлановыеПоказателиДизайнеров.Обороты(
	//|			&ДатаНачала,
	//|			&ДатаОкончания,
	//|			,
	//|			Дизайнер = &Дизайнер
	//|				И Подразделение = &Подразделение) КАК ПлановыеПоказателиДизайнеровОбороты
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	РеализованныеИзделияОбороты.ВидИзделия,
	//|	РеализованныеИзделияОбороты.КоличествоОборот КАК КоличествоКухонь,
	//|	NULL КАК КоличествоШкафов
	//|ИЗ
	//|	РегистрНакопления.РеализованныеИзделия.Обороты(
	//|			&ДатаНачала,
	//|			&ДатаОкончания,
	//|			,
	//|			Дизайнер = &Дизайнер
	//|				И Подразделение = &Подразделение
	//|				И ВидИзделия = ЗНАЧЕНИЕ(Перечисление.ВидыИзделий.Кухня)) КАК РеализованныеИзделияОбороты
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	NULL,
	//|	NULL,
	//|	РеализованныеИзделияОбороты.КоличествоОборот
	//|ИЗ
	//|	РегистрНакопления.РеализованныеИзделия.Обороты(
	//|			&ДатаНачала,
	//|			&ДатаОкончания,
	//|			,
	//|			Дизайнер = &Дизайнер
	//|				И Подразделение = &Подразделение
	//|				И ВидИзделия <> ЗНАЧЕНИЕ(Перечисление.ВидыИзделий.Кухня)) КАК РеализованныеИзделияОбороты";
	//
	//Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	//Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//Запрос.УстановитьПараметр("Дизайнер", Дизайнер);
	//
	//МассивЗапросов = Запрос.ВыполнитьПакет();
	//МассивВыборок = Новый Массив;
	//
	//ВыборкаФактическиеПоказатели = МассивЗапросов[0].Выбрать();
	//ВыборкаПлановыеПоказатели = МассивЗапросов[1].Выбрать();
	//ВыборкаПоВидамИзделий = МассивЗапросов[2].Выбрать();
	//СтруктураПоказателей = Новый Структура;
	//
	//Пока ВыборкаФактическиеПоказатели.Следующий() Цикл
	//	
	//	Если ВыборкаФактическиеПоказатели.Показатель = Перечисления.ВидыПоказателейСотрудников.КоличествоЗаключенныхДоговоров Тогда
	//		
	//		СтруктураПоказателей.Вставить("КоличествоФактическиЗаключенныхДоговоров", ВыборкаФактическиеПоказатели.Сумма);
	//		
	//	ИначеЕсли ВыборкаФактическиеПоказатели.Показатель = Перечисления.ВидыПоказателейСотрудников.КоличествоЗамеров Тогда
	//		
	//		СтруктураПоказателей.Вставить("КоличествоФактическихЗамеров", ВыборкаФактическиеПоказатели.Сумма);
	//		
	//	ИначеЕсли ВыборкаФактическиеПоказатели.Показатель = Перечисления.ВидыПоказателейСотрудников.СтоимостьЗаключенныхДоговоров Тогда
	//		
	//		СтруктураПоказателей.Вставить("СтоимостьФактическиЗаключенныхДоговоров", ВыборкаФактическиеПоказатели.Сумма);
	//		
	//	ИначеЕсли ВыборкаФактическиеПоказатели.Показатель = Перечисления.ВидыПоказателейСотрудников.ВыручкаПоДоговорам Тогда
	//		
	//		СтруктураПоказателей.Вставить("ФактическаяВыручкаПоДоговорам", ВыборкаФактическиеПоказатели.Сумма);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Пока ВыборкаПлановыеПоказатели.Следующий() Цикл
	//	
	//	Если ВыборкаПлановыеПоказатели.Показатель = Перечисления.ВидыПоказателейСотрудников.КоличествоЗаключенныхДоговоров Тогда
	//		
	//		СтруктураПоказателей.Вставить("КоличествоПлановыхЗаключенныхДоговоров", ВыборкаПлановыеПоказатели.Сумма);
	//		
	//	ИначеЕсли ВыборкаПлановыеПоказатели.Показатель = Перечисления.ВидыПоказателейСотрудников.КоличествоЗамеров Тогда
	//		
	//		СтруктураПоказателей.Вставить("КоличествоПлановыхЗамеров", ВыборкаПлановыеПоказатели.Сумма);
	//		
	//	ИначеЕсли ВыборкаПлановыеПоказатели.Показатель = Перечисления.ВидыПоказателейСотрудников.СтоимостьЗаключенныхДоговоров Тогда
	//		
	//		СтруктураПоказателей.Вставить("СтоимостьПлановоЗаключенныхДоговоров", ВыборкаПлановыеПоказатели.Сумма);
	//		
	//	ИначеЕсли ВыборкаПлановыеПоказатели.Показатель = Перечисления.ВидыПоказателейСотрудников.ВыручкаПоДоговорам Тогда
	//		
	//		СтруктураПоказателей.Вставить("ПлановаяВыручкаПоДоговорам", ВыборкаПлановыеПоказатели.Сумма);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//ВыборкаПоВидамИзделий.Следующий();
	//СтруктураПоказателей.Вставить("КоличествоКухонь", ВыборкаПоВидамИзделий.КоличествоКухонь);
	//СтруктураПоказателей.Вставить("КоличествоШкафов", ВыборкаПоВидамИзделий.КоличествоШкафов);
	//
	//Возврат СтруктураПоказателей;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьНачислениеЗаработнойПлаты") Тогда
		ПодготовитьПечатнуюФорму("ПечатьНачислениеЗаработнойПлаты", "Печать начисление заработной платы", "Документ.НачислениеЗаработнойПлаты.ПечатьНачислениеЗаработнойПлаты",
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
КонецПроцедуры

Процедура ПодготовитьПечатнуюФорму(Знач ИмяМакета, ПредставлениеМакета, ПолныйПутьКМакету = "", МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета);
	
	Если НужноПечататьМакет Тогда
		
		Если ИмяМакета = "ПечатьНачислениеЗаработнойПлаты" Тогда
			
			ТабДок = ПечатьНачислениеЗаработнойПлаты(МассивОбъектов, ОбъектыПечати);
			
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета,
		ПредставлениеМакета, ТабДок,, ПолныйПутьКМакету);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьНачислениеЗаработнойПлаты(МассивДокументов, ОбъектыПечати) Экспорт
	
	Макет = Документы.НачислениеЗаработнойПлаты.ПолучитьМакет("ПечатьНачислениеЗаработнойПлаты");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал"); 
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ПечатьНачислениеЗаработнойПлаты";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("МассивДокументов", МассивДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Список.Ссылка КАК Ссылка,
	|	Список.ВидыНачисленийУдержаний КАК ВидНачислений,
	|	Список.Комментарий КАК Комментарий,
	|	Список.Статья КАК Статья,
	|	Список.Сумма КАК Сумма,
	|	Список.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.НачислениеЗаработнойПлаты.СписокФизлиц КАК Список
	|ГДЕ
	|	Список.Ссылка В(&МассивДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВставлятьРазделительСтраниц = Ложь;
	
	Первый = Истина;
	СуммаДок = 0;
	НомерСтроки = 1;
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		Если ВставлятьРазделительСтраниц Тогда
			
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		Если Первый Тогда
			
			Первый = Ложь;
			
			Док = Выборка.Ссылка;
			СуммаДок = Док.СуммаДокумента;
						
			ОбластьЗаголовок.Параметры.Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Док.Номер);
			ОбластьЗаголовок.Параметры.Дата = Формат(Док.Дата, "ДЛФ=DD");
			ТабДок.Вывести(ОбластьЗаголовок);
			
			ОбластьШапка.Параметры.Подразделение = Док.Подразделение;
			ОбластьШапка.Параметры.Автор = Док.Автор;
			ОбластьШапка.Параметры.НачалоПериода = Формат(Док.НачалоПериода, "ДЛФ=DD");
			ОбластьШапка.Параметры.ОкончаниеПериода = Формат(Док.ОкончаниеПериода, "ДЛФ=DD");
			ОбластьШапка.Параметры.Комментарий = Док.Комментарий;
			ТабДок.Вывести(ОбластьШапка);
		
			ТабДок.Вывести(ОбластьШапкаТаблицы);
			
		КонецЕсли;
		
		ОбластьСтрокаТаблицы.Параметры.Заполнить(Выборка);
		ОбластьСтрокаТаблицы.Параметры.НомерСтроки = НомерСтроки;
		ТабДок.Вывести(ОбластьСтрокаТаблицы);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ОбластьПодвал.Параметры.СуммаДокумента = СуммаДок;	
	ТабДок.Вывести(ОбластьПодвал); 
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, МассивДокументов);
	
	Возврат ТабДок;
	
КонецФункции
