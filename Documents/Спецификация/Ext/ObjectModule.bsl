
Функция ВернутьОтступ(Сторона)
	
	Если Сторона > 1800 Тогда
		
		Возврат 150;
		
	ИначеЕсли Сторона > 900 Тогда
		
		Возврат 120;
		
	ИначеЕсли Сторона > 600 Тогда
		
		Возврат 70;
		
	ИначеЕсли Сторона > 300 Тогда
		
		Возврат 64;
		
	ИначеЕсли Сторона > 200 Тогда
		
		Возврат 50;
		
	Иначе
		
		Возврат 45;
		
	КонецЕсли;
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Производство = ЛексСервер.ПолучитьОсновноеПроизводство(Подразделение);
	
	//Создаем строку раскроя ЛДСП
	
	Если ЭтотОбъект.Дилерский Тогда
		
		ПутьЛоготипа = "%РОСПИЛ%";
		
	Иначе
		
		ПутьЛоготипа = "%ЛЕКС%"
		
	КонецЕсли;
	
	ДанныеДляРаскроя = "";
	ДанныеДляРаскроя = ДанныеДляРаскроя + ПутьЛоготипа + "☻";
	ДанныеДляПередачиСтекла = "";
	ДанныеДляПередачиСтекла = ДанныеДляПередачиСтекла + ПутьЛоготипа + "☻";
	ЕстьРадиус 	= Ложь; //Для радиуса стеклянной детали
	Реквизиты 		= Новый Структура;//Массив;
	СписокНоменклатурныхГрупп = Новый СписокЗначений;
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кант);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.АГТПрофиль);
	Срочность = ?(ЭтотОбъект.Срочный или ЭтотОбъект.Изделие = Справочники.Изделия.Переделка, " СРОЧНЫЙ", "");
	
	Если ЭтотОбъект.СписокМатериалы.Количество() > 0 Тогда
		
		Реквизиты.Вставить("Толщина", "");
		Реквизиты.Вставить("Номенклатура", ЭтотОбъект.СписокМатериалы[0].Номенклатура);
		Реквизиты.Вставить("СокращенноеНом", ЭтотОбъект.СписокМатериалы[0].Номенклатура.КраткоеНаименование);
		Реквизиты.Вставить("Кант", "");//ЭтотОбъект.СписокМатериалы[0].Кант);
		Реквизиты.Вставить("СокрКант", "");
		Реквизиты.Вставить("ВторойКант", ""); //ВторойКант,
		Реквизиты.Вставить("СокрВторойКант", ""); // СокрВторойКант,
		Реквизиты.Вставить("Кромка045мм", ""); //ЭтотОбъект.СписокМатериалы[0].Кромка045мм);
		Реквизиты.Вставить("Сокр045мм", "");
		Реквизиты.Вставить("Кромка2мм", ""); //ЭтотОбъект.СписокМатериалы[0].Кромка2мм);
		Реквизиты.Вставить("Сокр2мм", "");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", СписокНоменклатурныхГрупп);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 3
		|	СпецификацияСписокНоменклатуры.Номенклатура,
		|	КОЛИЧЕСТВО(СпецификацияСписокНоменклатуры.Номенклатура) КАК Количество
		|ИЗ
		|	Документ.Спецификация.СписокНоменклатуры КАК СпецификацияСписокНоменклатуры
		|ГДЕ
		|	СпецификацияСписокНоменклатуры.Ссылка = &Ссылка
		|	И СпецификацияСписокНоменклатуры.Номенклатура.НоменклатурнаяГруппа В ИЕРАРХИИ(&НоменклатурнаяГруппа)
		|
		|СГРУППИРОВАТЬ ПО
		|	СпецификацияСписокНоменклатуры.Номенклатура";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Реквизиты.СокрКант = Выборка.Номенклатура.КраткоеНаименование;
			
		КонецЕсли;
		
		Если Выборка.Следующий() Тогда
			
			Реквизиты.Сокр045мм = Выборка.Номенклатура.КраткоеНаименование;
			
		КонецЕсли;
		
		Если Выборка.Следующий() Тогда 
			
			Реквизиты.Сокр2мм = Выборка.Номенклатура.КраткоеНаименование;
			
		КонецЕсли;
		
		Реквизиты.Вставить("АдресМонтажа", ЭтотОбъект.АдресМонтажа);
		Реквизиты.Вставить("Контрагент", ЭтотОбъект.Контрагент);
		
	Иначе
		
		Реквизиты.Вставить("Толщина", ""); //Толщина
		Реквизиты.Вставить("Номенклатура", ""); //Номенклатура
		Реквизиты.Вставить("СокращенноеНом", "");  //Сокращенное наименование
		Реквизиты.Вставить("Кант", "");  //Кант
		Реквизиты.Вставить("СокрКант", ""); //Сокр. наименование канта
		Реквизиты.Вставить("ВторойКант", ""); //ВторойКант,
		Реквизиты.Вставить("СокрВторойКант", ""); // СокрВторойКант,
		Реквизиты.Вставить("Кромка045мм", ""); //Кромка045мм
		Реквизиты.Вставить("Сокр045мм", ""); //Сокр045мм,
		Реквизиты.Вставить("Кромка2мм", ""); //Кромка2мм
		Реквизиты.Вставить("Сокр2мм", ""); //Сокр2мм,
		Реквизиты.Вставить("АдресМонтажа", ""); //Ссылка1,
		Реквизиты.Вставить("Контрагент", ""); //Ссылка2
		
	КонецЕсли;
	//Данные завода 
	ТолщинаПропила 			= 5;
	Sотхода 						= 0.150;
	ПроцентРазличияОтхода 	= 5;
	ПроцентКривойПил 		= 30;
	
	Если ЗначениеЗаполнено(Производство.ТолщинаПропила) Тогда
		
		Если Производство.ТолщинаПропила > 0 Тогда
			
			ТолщинаПропила = Производство.ТолщинаПропила;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Элемент Из Реквизиты Цикл
		
		ДанныеДляРаскроя = ДанныеДляРаскроя + Элемент.Значение + "☺";
		
	КонецЦикла;
	
	ДанныеДляРаскроя = ДанныеДляРаскроя + ЭтотОбъект.Ссылка +"☺" + Строка(ЭтотОбъект.Номер) + Срочность + ЭтотОбъект.Комментарий + "☻";
	
	ДанныеДляРаскроя = ДанныеДляРаскроя  + ТолщинаПропила +"☺" + Sотхода + "☺" + ПроцентРазличияОтхода + "☺" + ПроцентКривойПил+ "☺" + 0 + "☺" + 3600 + "☻";
	
	Для Каждого Строка Из ЭтотОбъект.СписокМатериалы Цикл
		
		Материал 					= Строка.Материал;
		ОсновныеРеквизиты 	= Новый Массив;
		ОбычныйФасад 			= Материал = "ФасадАГТ" ИЛИ Материал = "ФасадЛДСП" ИЛИ Материал = "ФасадМДФ" ИЛИ Материал = "ФасадАлюминиевый" или Материал = "ФасадСтеклянный" или Материал = "ФасадСтеклянныйЗакругленный";
		ОбычныйМатериал		= Материал = "10 ЛДСП" Или Материал = "16 ЛДСП" Или Материал = "10 ЛДСП+10 ЛДСП" Или  Материал = "16 ЛДСП+10 ЛДСП" Или 
		Материал = "16 ЛДСП+16 ЛДСП" Или Материал = "ДВП" или Материал = "Столешница" или Материал = "Стекло" или Материал = "Пристенок" или Материал = "МДФ";
		
		//Строка вида НомерСтроки/НомерИздели/ИдентификаторПоКаталогу
		СтрокаИдентификатор = Строка(Строка.НомерСтроки) + ?(ЗначениеЗаполнено(Строка.НомерИзделия), "/" + Строка.НомерИзделия, "") + ?(ЗначениеЗаполнено(Строка.Идентификатор), "/" + Строка.Идентификатор, "");
		
		Если ОбычныйМатериал Тогда
			
			ПравыйНижнийРадиус = Строка.РадиусПравоНиз;
			
			ОсновныеРеквизиты.Добавить(Строка.Номенклатура);
			ОсновныеРеквизиты.Добавить(Строка.НоменклатураДляСклеивания);
			ОсновныеРеквизиты.Добавить(Строка.ВысотаДетали);
			ОсновныеРеквизиты.Добавить(Строка.ШиринаДетали);
			ОсновныеРеквизиты.Добавить(Строка.РадиусЛевоВерх);
			ОсновныеРеквизиты.Добавить(Строка.РадиусПравоВерх);
			
			Если Строка.Срез и ПравыйНижнийРадиус > 0 Тогда
				
				ОсновныеРеквизиты.Добавить("" + ПравыйНижнийРадиус + "_1");
				
			Иначе
				
				ОсновныеРеквизиты.Добавить(ПравыйНижнийРадиус);
				
			КонецЕсли;
			
			ОсновныеРеквизиты.Добавить(Строка.РадиусЛевоНиз);
			ОсновныеРеквизиты.Добавить(Строка.КривойПилСверху);
			ОсновныеРеквизиты.Добавить(Строка.КривойПилСнизу);
			ОсновныеРеквизиты.Добавить(Строка.КривойПилСлева);
			ОсновныеРеквизиты.Добавить(Строка.КривойПилСправа);
			ОсновныеРеквизиты.Добавить(0); //Эксц1,
			ОсновныеРеквизиты.Добавить(0); //Эксц2,
			ОсновныеРеквизиты.Добавить(0); //Эксц3,
			ОсновныеРеквизиты.Добавить(0); //Эксц4,
			ОсновныеРеквизиты.Добавить(Строка.СоблюдениеТекстуры);
			ОсновныеРеквизиты.Добавить(Строка.СоблюдениеТекстуры);  //СоблюдениеТекстуры2
			ОсновныеРеквизиты.Добавить(Строка.Количество);
			КантПоМесту = Ложь;
			
			Если Строка.ПереключательКромкаСверху = "По месту" или Строка.ПереключательКромкаСнизу = "По месту" или Строка.ПереключательКромкаСлева = "По месту"
				или Строка.ПереключательКромкаСправа = "По месту" Тогда
				
				ОсновныеРеквизиты.Добавить(Строка.Комментарий + " кант по месту");
				КантПоМесту = Истина;
				
			Иначе
				
				ОсновныеРеквизиты.Добавить(Строка.Комментарий);
				
			КонецЕсли;
			
			Надпись = ?(КантПоМесту, "Кант по месту. ", "");
			
			Если Строка.Обтачивать и Материал = "Столешница" Тогда
				
				Надпись = Надпись + "Ст (Скр)";
				
			ИначеЕсли Строка.Обтачивать и (Материал = "Стекло" или Материал = "ФасадСтеклянный") Тогда
				
				Надпись = Надпись + "Обтачивать";
				
			ИначеЕсли НЕ Строка.Обтачивать и (Материал = "Стекло" или Материал = "ФасадСтеклянный") Тогда
				
				Надпись = Надпись + "Без обточки";
				
			Иначе
				
				Надпись = Надпись + СтрокаИдентификатор;
				
			КонецЕсли;
			
			Если Строка.НеТорцевать Тогда
					
				Надпись = Надпись + ", НЕ ТОРЦЕВАТЬ ПО ДЛИНЕ";
					
			КонецЕсли;
			
			ОсновныеРеквизиты.Добавить(Надпись);
			ОсновныеРеквизиты.Добавить(Строка.Номенклатура.ШиринаДетали); //ШиринаПолотна,
			ОсновныеРеквизиты.Добавить(Строка.Номенклатура.ДлинаДетали); //ДлинаПолотна,
			ОсновныеРеквизиты.Добавить(Строка.ВыборМебельнойКромкиСверху.КраткоеНаименование);
			ОсновныеРеквизиты.Добавить(Строка.ВыборМебельнойКромкиСнизу.КраткоеНаименование);
			ОсновныеРеквизиты.Добавить(Строка.ВыборМебельнойКромкиСлева.КраткоеНаименование);
			ОсновныеРеквизиты.Добавить(Строка.ВыборМебельнойКромкиСправа.КраткоеНаименование);
			ОсновныеРеквизиты.Добавить(0); //Нх1,
			ОсновныеРеквизиты.Добавить(0); //Нх2,
			ОсновныеРеквизиты.Добавить(0); //Нх3,
			ОсновныеРеквизиты.Добавить(0); //Нх4,
			СтрокаОтверстий = "";
			
			ЕвропазСверху 	= 0;
			ЕвропазСнизу 	= 0;
			ЕвропазСлева 	= 0;
			ЕвропазСправа 	= 0;
			
			Если ЗначениеЗаполнено(Строка.СтруктураОтверстий) Тогда
				
				Если НЕ ЗначениеЗаполнено(Строка.Идентификатор) Тогда
					СтрокаОтверстий = ЛексСервер.ЗаполнитьРеквизитОтверстиями(СтрокаОтверстий, Строка.СтруктураОтверстий, Строка.ШиринаДетали, Строка.ВысотаДетали);
				КонецЕсли;
				СтруктураЕвропазов 	= ЛексСервер.ПолучитьСтруктуруЕвропазов(Строка.СтруктураОтверстий);
				ЕвропазСверху 			= СтруктураЕвропазов.Сверху;
				ЕвропазСнизу 			= СтруктураЕвропазов.Снизу;
				ЕвропазСлева 			= СтруктураЕвропазов.Слева;
				ЕвропазСправа 			= СтруктураЕвропазов.Справа;
			КонецЕсли;
			
			ОсновныеРеквизиты.Добавить(СтрокаОтверстий);
			ОсновныеРеквизиты.Добавить(ЕвропазСверху); //(Отверстие европаз)
			ОсновныеРеквизиты.Добавить(ЕвропазСнизу); //(Отверстие европаз)
			ОсновныеРеквизиты.Добавить(ЕвропазСлева); //(Отверстие европаз)
			ОсновныеРеквизиты.Добавить(ЕвропазСправа); //(Отверстие европаз)
			ОсновныеРеквизиты.Добавить("☻"); //КонецДетали
			
			
			Для каждого Элемент Из ОсновныеРеквизиты Цикл
				
				Данные = "";
				
				Если Не Элемент = "☻" Тогда
					
					Данные = Данные + Элемент + "☺";
					
				Иначе
					
					Если Строка.НеТорцевать Тогда
						
						Данные = Данные + "1" + Элемент;
						
					Иначе
						
						Данные = Данные + Элемент;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ДанныеДляРаскроя = ДанныеДляРаскроя + Данные;
				
			КонецЦикла;
			
			// Фасады в раскрой
		ИначеЕсли ОбычныйФасад Тогда
			
			
			РеквизитыФасадов = Новый Массив;
			РеквизитыФасадов.Добавить(Строка.Номенклатура);
			РеквизитыФасадов.Добавить("");
			
			РеквизитыФасадов.Добавить(Строка.ВысотаДетали);
			РеквизитыФасадов.Добавить(Строка.ШиринаДетали);
			
			РеквизитыФасадов.Добавить("");
			РеквизитыФасадов.Добавить("");
			РеквизитыФасадов.Добавить("");
			РеквизитыФасадов.Добавить("");
			РеквизитыФасадов.Добавить("");
			РеквизитыФасадов.Добавить("");
			РеквизитыФасадов.Добавить("");
			РеквизитыФасадов.Добавить("");
			РеквизитыФасадов.Добавить("");
			РеквизитыФасадов.Добавить("");
			РеквизитыФасадов.Добавить("");
			РеквизитыФасадов.Добавить("");
			РеквизитыФасадов.Добавить(Строка.НомерСтроки);
			РеквизитыФасадов.Добавить("");  //СоблюдениеТекстуры2
			РеквизитыФасадов.Добавить(Строка.Количество);
			РеквизитыФасадов.Добавить(Строка.Комментарий);
			Надпись = "";
			
			Если Материал = "ФасадСтеклянныйЗакругленный" Тогда
				
				Надпись = Надпись + "Скр. " + Строка.РадиусФасада;
				
			КонецЕсли;
			
			РеквизитыФасадов.Добавить(Надпись + Строка.Идентификатор);
			РеквизитыФасадов.Добавить(Строка.Номенклатура.ШиринаДетали); //ШиринаПолотна,
			РеквизитыФасадов.Добавить(Строка.Номенклатура.ДлинаДетали); //ДлинаПолотна,
			РеквизитыФасадов.Добавить(Строка.ВыборМебельнойКромкиСверху.КраткоеНаименование);
			РеквизитыФасадов.Добавить(Строка.ВыборМебельнойКромкиСнизу.КраткоеНаименование);
			РеквизитыФасадов.Добавить(Строка.ВыборМебельнойКромкиСлева.КраткоеНаименование);
			РеквизитыФасадов.Добавить(Строка.ВыборМебельнойКромкиСправа.КраткоеНаименование);
			РеквизитыФасадов.Добавить(""); //Нх1,
			РеквизитыФасадов.Добавить(""); //Нх2,
			РеквизитыФасадов.Добавить(""); //Нх3,
			РеквизитыФасадов.Добавить(""); //Нх4,
			СтрокаОтверстий = "";
			
			ЕвропазСверху = 0;
			ЕвропазСнизу = 0;
			ЕвропазСлева = 0;
			ЕвропазСправа = 0;
			
			/////////////////////////////Петли/////////////////
			КоличествоПетель = Строка.КоличествоПетель;
			
			Если КоличествоПетель > 0 и (Материал = "ФасадЛДСП" ИЛИ Материал = "ФасадМДФ") Тогда
				
				Стороны = Перечисления.Стороны;
				
				Если Строка.РасположениеПазов = Стороны.Слева Тогда
					
						Сторона 	= "3";
						РазмерСтороны = Строка.ВысотаДетали;
						
					ИначеЕсли Строка.РасположениеПазов = Стороны.Справа Тогда
						
						Сторона = "4";
						РазмерСтороны = Строка.ВысотаДетали;
						
					ИначеЕсли Строка.РасположениеПазов = Стороны.Сверху Тогда
						
						Сторона = "1";
						РазмерСтороны = Строка.ШиринаДетали;
						
					ИначеЕсли Строка.РасположениеПазов = Стороны.Снизу Тогда
						
						Сторона = "2";
						РазмерСтороны = Строка.ШиринаДетали;
						
					КонецЕсли;
					
						Отступ 	= ВернутьОтступ(РазмерСтороны);
						Шаг 		= Окр((РазмерСтороны - 2 * Отступ) / (КоличествоПетель - 1) , 0);
					
					СтрокаОтверстий = "3_"+ Сторона + "_" + КоличествоПетель + "_" + Отступ + "_" + Шаг + "_0#";
					
			КонецЕсли;
						
			////////////////////////////////////////////////////
			
			Если ЗначениеЗаполнено(Строка.СтруктураОтверстий) Тогда
				Если НЕ ЗначениеЗаполнено(Строка.Идентификатор) Тогда
					СтрокаОтверстий = ЛексСервер.ЗаполнитьРеквизитОтверстиями(СтрокаОтверстий, Строка.СтруктураОтверстий, Строка.ШиринаДетали, Строка.ВысотаДетали);
				КонецЕсли;
				СтруктураЕвропазов = ЛексСервер.ПолучитьСтруктуруЕвропазов(Строка.СтруктураОтверстий);
				ЕвропазСверху = СтруктураЕвропазов.Сверху;
				ЕвропазСнизу = СтруктураЕвропазов.Снизу;
				ЕвропазСлева = СтруктураЕвропазов.Слева;
				ЕвропазСправа = СтруктураЕвропазов.Справа;
			КонецЕсли;
			
			РеквизитыФасадов.Добавить(СтрокаОтверстий);
			РеквизитыФасадов.Добавить(ЕвропазСверху); //(Отверстие европаз)
			РеквизитыФасадов.Добавить(ЕвропазСнизу); //(Отверстие европаз)
			РеквизитыФасадов.Добавить(ЕвропазСлева); //(Отверстие европаз)
			РеквизитыФасадов.Добавить(ЕвропазСправа); //(Отверстие европаз)
			
			РеквизитыФасадов.Добавить("☻"); //КонецДетали
			
			Данные = "";
			
			Для каждого Элемент Из РеквизитыФасадов Цикл
				
				Если Не Элемент = "☻" Тогда
					
					Данные = Данные + Элемент + "☺";
					
				Иначе
					
					Данные = Данные + Элемент;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДанныеДляРаскроя = ДанныеДляРаскроя + Данные;   // "☺" +
			//КонецЦикла;
			
			//ИначеЕсли Материал = "Стекло" Тогда 
			//	
			//	//Создаем строку раскроя Стекла
			//	
			//	Если НЕ ЗначениеЗаполнено(Строка.СтрокаДляФлэш) Тогда
			//		
			//		РеквизитыСтекол = Новый Массив;
			//		
			//		РеквизитыСтекол.Добавить(Строка.Номенклатура);
			//		РеквизитыСтекол.Добавить(" 2500*2500☺☺☺☺☺☺☺☺☺"); 
			//		РеквизитыСтекол.Добавить(Строка.СтрокаДляФлэш);
			//		РеквизитыСтекол.Добавить("☺"); 
			//		РеквизитыСтекол.Добавить(Строка.ВысотаДетали);
			//		РеквизитыСтекол.Добавить("#"); 
			//		РеквизитыСтекол.Добавить(Строка.ШиринаДетали);
			//		РеквизитыСтекол.Добавить("#2500#2500#"); 
			//		РеквизитыСтекол.Добавить(Строка.РадиусЛевоВерх);
			//		РеквизитыСтекол.Добавить("#"); 
			//		РеквизитыСтекол.Добавить(Строка.РадиусПравоВерх);
			//		РеквизитыСтекол.Добавить("#"); 
			//		РеквизитыСтекол.Добавить(Строка.РадиусЛевоНиз);
			//		РеквизитыСтекол.Добавить("#"); 
			//		РеквизитыСтекол.Добавить(Строка.РадиусПравоНиз);
			//		РеквизитыСтекол.Добавить("#1#"); 
			//		РеквизитыСтекол.Добавить(Строка.ДанныеДляФлэшПоГравировке);
			//		РеквизитыСтекол.Добавить("☻");
			//		
			//		ЕстьРадиус = ?(ЗначениеЗаполнено(Строка.РадиусЛевоВерх) или  ЗначениеЗаполнено(Строка.РадиусПравоВерх) или ЗначениеЗаполнено(Строка.РадиусЛевоНиз) или ЗначениеЗаполнено(Строка.РадиусПравоНиз), Истина, Ложь); 
			//		
			//		Для каждого Элемент Из РеквизитыСтекол Цикл
			//			
			//			ДанныеДляПередачиСтекла = ДанныеДляПередачиСтекла + Элемент;
			//			
			//		КонецЦикла;
			
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	/////////////////////////////////////////////////////////////////Раскрой ящиков//////////////////////////////////////////////
	Для Каждого Строка Из ЭтотОбъект.СписокЯщики Цикл
		
		СтрокаИдентификатор = "" + Строка.НомерСтроки + ?(ЗначениеЗаполнено(Строка.НомерИзделия), "/" + Строка.НомерИзделия, "")  + "ящ."; //+ ?(ЗначениеЗаполнено(Строка.Идентификатор), "/" + Строка.Идентификатор, "")
		
		/////////////////////////////////////////////////////////////Дно/////////////////////////////////////////////////////////////
		РеквизитыЯщика = Новый Массив;
		РеквизитыЯщика.Добавить(Строка.ДноНоменклатура);
		РеквизитыЯщика.Добавить(""); //клееная 
		РеквизитыЯщика.Добавить(Строка.ДлинаДно);
		РеквизитыЯщика.Добавить(Строка.ШиринаДно);
		РеквизитыЯщика.Добавить(""); //R1
		РеквизитыЯщика.Добавить(""); //R2
		РеквизитыЯщика.Добавить(""); //R3
		РеквизитыЯщика.Добавить(""); //R4
		РеквизитыЯщика.Добавить(""); //КрПил1
		РеквизитыЯщика.Добавить(""); //КрПил2
		РеквизитыЯщика.Добавить(""); //КрПил3
		РеквизитыЯщика.Добавить(""); //КрПил4
		РеквизитыЯщика.Добавить(""); //Эксц1
		РеквизитыЯщика.Добавить(""); //Эксц2
		РеквизитыЯщика.Добавить(""); //Эксц3
		РеквизитыЯщика.Добавить(""); //Эксц4
		РеквизитыЯщика.Добавить(Строка.НомерСтроки);
		РеквизитыЯщика.Добавить("");  //СоблюдениеТекстуры2
		РеквизитыЯщика.Добавить(Строка.КоличествоЯщиков);
		РеквизитыЯщика.Добавить(""); //Комментарий
		РеквизитыЯщика.Добавить(СтрокаИдентификатор); //Скругление
		РеквизитыЯщика.Добавить(Строка.ДноНоменклатура.ШиринаДетали); //ШиринаПолотна,
		РеквизитыЯщика.Добавить(Строка.ДноНоменклатура.ДлинаДетали); //ДлинаПолотна,
		РеквизитыЯщика.Добавить(""); //кромка
		РеквизитыЯщика.Добавить(""); //кромка
		РеквизитыЯщика.Добавить(""); //кромка
		РеквизитыЯщика.Добавить(""); //кромка
		РеквизитыЯщика.Добавить(""); //Нх1,
		РеквизитыЯщика.Добавить(""); //Нх2,
		РеквизитыЯщика.Добавить(""); //Нх3,
		РеквизитыЯщика.Добавить(""); //Нх4,
		РеквизитыЯщика.Добавить(""); //Отверстия
		РеквизитыЯщика.Добавить(""); //Нх5,
		РеквизитыЯщика.Добавить(""); //Нх6,
		РеквизитыЯщика.Добавить(""); //Нх7,
		РеквизитыЯщика.Добавить(""); //Нх8,
		РеквизитыЯщика.Добавить("☻"); //КонецДетали
		
		Для каждого Элемент Из РеквизитыЯщика Цикл
			Данные = "";
			Если Не Элемент = "☻" Тогда
				Данные = Данные + Элемент + "☺";
			Иначе
				Данные = Данные + Элемент;
			КонецЕсли;
			ДанныеДляРаскроя = ДанныеДляРаскроя + Данные;
		КонецЦикла;
		
		Если Строка.ВидЯщика = Перечисления.ВидыЯщика.Обычный Тогда
			/////////////////////////////////////////////////////////////Ребро/////////////////////////////////////////////////////////////
			Если ЗначениеЗаполнено(Строка.ДлинаРебро) Тогда
				РеквизитыЯщика = Новый Массив;
				РеквизитыЯщика.Добавить(Строка.Номенклатура);
				РеквизитыЯщика.Добавить(""); //клееная 
				РеквизитыЯщика.Добавить(Строка.ДлинаРебро);
				РеквизитыЯщика.Добавить(Строка.ВысотаЯщика);
				РеквизитыЯщика.Добавить(""); //R1
				РеквизитыЯщика.Добавить(""); //R2
				РеквизитыЯщика.Добавить(""); //R3
				РеквизитыЯщика.Добавить(""); //R4
				РеквизитыЯщика.Добавить(""); //КрПил1
				РеквизитыЯщика.Добавить(""); //КрПил2
				РеквизитыЯщика.Добавить(""); //КрПил3
				РеквизитыЯщика.Добавить(""); //КрПил4
				РеквизитыЯщика.Добавить(""); //Эксц1
				РеквизитыЯщика.Добавить(""); //Эксц2
				РеквизитыЯщика.Добавить(""); //Эксц3
				РеквизитыЯщика.Добавить(""); //Эксц4
				РеквизитыЯщика.Добавить(Строка.НомерСтроки);
				РеквизитыЯщика.Добавить("");  //СоблюдениеТекстуры2
				РеквизитыЯщика.Добавить(Строка.КоличествоЯщиков);
				РеквизитыЯщика.Добавить(""); //Комментарий
				РеквизитыЯщика.Добавить(СтрокаИдентификатор); //Скругление
				РеквизитыЯщика.Добавить(Строка.Номенклатура.ШиринаДетали); //ШиринаПолотна,
				РеквизитыЯщика.Добавить(Строка.Номенклатура.ДлинаДетали); //ДлинаПолотна,
				РеквизитыЯщика.Добавить(""); //кромка
				РеквизитыЯщика.Добавить(""); //кромка
				РеквизитыЯщика.Добавить(Строка.КромкаНоменклатура.КраткоеНаименование); //кромка
				РеквизитыЯщика.Добавить(""); //кромка
				РеквизитыЯщика.Добавить(""); //Нх1,
				РеквизитыЯщика.Добавить(""); //Нх2,
				РеквизитыЯщика.Добавить(""); //Нх3,
				РеквизитыЯщика.Добавить(""); //Нх4,
				РеквизитыЯщика.Добавить(""); //Отверстия
				РеквизитыЯщика.Добавить(""); //Нх5,
				РеквизитыЯщика.Добавить(""); //Нх6,
				РеквизитыЯщика.Добавить(""); //Нх7,
				РеквизитыЯщика.Добавить(""); //Нх8,
				РеквизитыЯщика.Добавить("☻"); //КонецДетали
				Для каждого Элмент Из РеквизитыЯщика Цикл
					Данные = "";
					Если Не Элмент = "☻" Тогда
						Данные = Данные + Элмент + "☺";
					Иначе
						Данные = Данные + Элмент;
					КонецЕсли;
					ДанныеДляРаскроя = ДанныеДляРаскроя + Данные;
				КонецЦикла;
				
			КонецЕсли;
			/////////////////////////////////////////////////////////////Боковая Сторона1/////////////////////////////////////////////////////////////
			РеквизитыЯщика = Новый Массив;
			РеквизитыЯщика.Добавить(Строка.Номенклатура);
			РеквизитыЯщика.Добавить(""); //клееная 
			РеквизитыЯщика.Добавить(Строка.ШиринаБоковойСтороны);
			РеквизитыЯщика.Добавить(Строка.ВысотаБоковойСтороны);
			РеквизитыЯщика.Добавить(""); //R1
			РеквизитыЯщика.Добавить(""); //R2
			РеквизитыЯщика.Добавить(""); //R3
			РеквизитыЯщика.Добавить(""); //R4
			РеквизитыЯщика.Добавить(""); //КрПил1
			РеквизитыЯщика.Добавить(""); //КрПил2
			РеквизитыЯщика.Добавить(""); //КрПил3
			РеквизитыЯщика.Добавить(""); //КрПил4
			РеквизитыЯщика.Добавить(""); //Эксц1
			РеквизитыЯщика.Добавить(""); //Эксц2
			РеквизитыЯщика.Добавить(""); //Эксц3
			РеквизитыЯщика.Добавить(""); //Эксц4
			РеквизитыЯщика.Добавить(Строка.НомерСтроки);
			РеквизитыЯщика.Добавить("");  //СоблюдениеТекстуры2
			РеквизитыЯщика.Добавить(2 * Строка.КоличествоЯщиков);
			РеквизитыЯщика.Добавить(""); //Комментарий
			РеквизитыЯщика.Добавить(СтрокаИдентификатор); //Скругление
			РеквизитыЯщика.Добавить(Строка.Номенклатура.ШиринаДетали); //ШиринаПолотна,
			РеквизитыЯщика.Добавить(Строка.Номенклатура.ДлинаДетали); //ДлинаПолотна,
			РеквизитыЯщика.Добавить(""); //кромка
			РеквизитыЯщика.Добавить(""); //кромка
			РеквизитыЯщика.Добавить(Строка.КромкаНоменклатура.КраткоеНаименование); //кромка
			РеквизитыЯщика.Добавить(""); //кромка
			РеквизитыЯщика.Добавить(""); //Нх1,
			РеквизитыЯщика.Добавить(""); //Нх2,
			РеквизитыЯщика.Добавить(""); //Нх3,
			РеквизитыЯщика.Добавить(""); //Нх4,
			РеквизитыЯщика.Добавить(""); //Отверстия
			РеквизитыЯщика.Добавить(""); //Нх5,
			РеквизитыЯщика.Добавить(""); //Нх6,
			РеквизитыЯщика.Добавить(""); //Нх7,
			РеквизитыЯщика.Добавить(""); //Нх8,
			РеквизитыЯщика.Добавить("☻"); //КонецДетали
			Для каждого Элмент Из РеквизитыЯщика Цикл
				Данные = "";
				Если Не Элмент = "☻" Тогда
					Данные = Данные + Элмент + "☺";
				Иначе
					Данные = Данные + Элмент;
				КонецЕсли;
				ДанныеДляРаскроя = ДанныеДляРаскроя + Данные;
			КонецЦикла;
			/////////////////////////////////////////////////////////////Боковая Сторона2/////////////////////////////////////////////////////////////
			РеквизитыЯщика = Новый Массив;
			РеквизитыЯщика.Добавить(Строка.Номенклатура);
			РеквизитыЯщика.Добавить(""); //клееная 
			РеквизитыЯщика.Добавить(Строка.ДлинаБоковойСтороны);
			РеквизитыЯщика.Добавить(Строка.ВысотаБоковойСтороны);
			РеквизитыЯщика.Добавить(""); //R1
			РеквизитыЯщика.Добавить(""); //R2
			РеквизитыЯщика.Добавить(""); //R3
			РеквизитыЯщика.Добавить(""); //R4
			РеквизитыЯщика.Добавить(""); //КрПил1
			РеквизитыЯщика.Добавить(""); //КрПил2
			РеквизитыЯщика.Добавить(""); //КрПил3
			РеквизитыЯщика.Добавить(""); //КрПил4
			РеквизитыЯщика.Добавить(""); //Эксц1
			РеквизитыЯщика.Добавить(""); //Эксц2
			РеквизитыЯщика.Добавить(""); //Эксц3
			РеквизитыЯщика.Добавить(""); //Эксц4
			РеквизитыЯщика.Добавить(Строка.НомерСтроки);
			РеквизитыЯщика.Добавить("");  //СоблюдениеТекстуры2
			РеквизитыЯщика.Добавить(2 * Строка.КоличествоЯщиков);
			РеквизитыЯщика.Добавить(""); //Комментарий
			РеквизитыЯщика.Добавить(СтрокаИдентификатор); //Скругление
			РеквизитыЯщика.Добавить(Строка.Номенклатура.ШиринаДетали); //ШиринаПолотна,
			РеквизитыЯщика.Добавить(Строка.Номенклатура.ДлинаДетали); //ДлинаПолотна,
			РеквизитыЯщика.Добавить(Строка.КромкаНоменклатура.КраткоеНаименование); //кромка
			РеквизитыЯщика.Добавить(Строка.КромкаНоменклатура.КраткоеНаименование); //кромка
			РеквизитыЯщика.Добавить(Строка.КромкаНоменклатура.КраткоеНаименование); //кромка
			РеквизитыЯщика.Добавить(""); //кромка
			РеквизитыЯщика.Добавить(""); //Нх1,
			РеквизитыЯщика.Добавить(""); //Нх2,
			РеквизитыЯщика.Добавить(""); //Нх3,
			РеквизитыЯщика.Добавить(""); //Нх4,
			РеквизитыЯщика.Добавить(""); //Отверстия
			РеквизитыЯщика.Добавить(""); //Нх5,
			РеквизитыЯщика.Добавить(""); //Нх6,
			РеквизитыЯщика.Добавить(""); //Нх7,
			РеквизитыЯщика.Добавить(""); //Нх8,
			РеквизитыЯщика.Добавить("☻"); //КонецДетали
			Для каждого Элмент Из РеквизитыЯщика Цикл
				Данные = "";
				Если Не Элмент = "☻" Тогда
					Данные = Данные + Элмент + "☺";
				Иначе
					Данные = Данные + Элмент;
				КонецЕсли;
				ДанныеДляРаскроя = ДанныеДляРаскроя + Данные;
			КонецЦикла;
		Иначе
			/////////////////////////////////////////////////////////////////////////////МТбоксы//////////////////////////////////////////////////////////
			РеквизитыЯщика = Новый Массив;
			РеквизитыЯщика.Добавить(Строка.Номенклатура);
			РеквизитыЯщика.Добавить(""); //клееная 
			РеквизитыЯщика.Добавить(Строка.ШиринаБоковойСтороны);
			РеквизитыЯщика.Добавить(Строка.ВысотаБоковойСтороны);
			РеквизитыЯщика.Добавить(""); //R1
			РеквизитыЯщика.Добавить(""); //R2
			РеквизитыЯщика.Добавить(""); //R3
			РеквизитыЯщика.Добавить(""); //R4
			РеквизитыЯщика.Добавить(""); //КрПил1
			РеквизитыЯщика.Добавить(""); //КрПил2
			РеквизитыЯщика.Добавить(""); //КрПил3
			РеквизитыЯщика.Добавить(""); //КрПил4
			РеквизитыЯщика.Добавить(""); //Эксц1
			РеквизитыЯщика.Добавить(""); //Эксц2
			РеквизитыЯщика.Добавить(""); //Эксц3
			РеквизитыЯщика.Добавить(""); //Эксц4
			РеквизитыЯщика.Добавить(Строка.НомерСтроки);
			РеквизитыЯщика.Добавить("");  //СоблюдениеТекстуры2
			РеквизитыЯщика.Добавить(Строка.КоличествоЯщиков);
			РеквизитыЯщика.Добавить(""); //Комментарий
			РеквизитыЯщика.Добавить(СтрокаИдентификатор); //Скругление
			РеквизитыЯщика.Добавить(Строка.Номенклатура.ШиринаДетали); //ШиринаПолотна,
			РеквизитыЯщика.Добавить(Строка.Номенклатура.ДлинаДетали); //ДлинаПолотна,
			РеквизитыЯщика.Добавить(Строка.КромкаНоменклатура.КраткоеНаименование); //кромка
			РеквизитыЯщика.Добавить(Строка.КромкаНоменклатура.КраткоеНаименование); //кромка
			РеквизитыЯщика.Добавить(Строка.КромкаНоменклатура.КраткоеНаименование); //кромка
			РеквизитыЯщика.Добавить(Строка.КромкаНоменклатура.КраткоеНаименование); //кромка
			РеквизитыЯщика.Добавить(""); //Нх1,
			РеквизитыЯщика.Добавить(""); //Нх2,
			РеквизитыЯщика.Добавить(""); //Нх3,
			РеквизитыЯщика.Добавить(""); //Нх4,
			РеквизитыЯщика.Добавить(""); //Отверстия
			РеквизитыЯщика.Добавить(""); //Нх5,
			РеквизитыЯщика.Добавить(""); //Нх6,
			РеквизитыЯщика.Добавить(""); //Нх7,
			РеквизитыЯщика.Добавить(""); //Нх8,
			РеквизитыЯщика.Добавить("☻"); //КонецДетали
			Для каждого Элмент Из РеквизитыЯщика Цикл
				Данные = "";
				Если Не Элмент = "☻" Тогда
					Данные = Данные + Элмент + "☺";
				Иначе 
					Данные = Данные + Элмент;
				КонецЕсли;
				ДанныеДляРаскроя = ДанныеДляРаскроя + Данные;
			КонецЦикла;
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////Фасады к ящикам/////////////////////////////////////////////////////////////////////\
		Если Строка.ВидФасада <> "Нет" Тогда
			Если ЗначениеЗаполнено(Строка.ФасадНоменклатура) Тогда 
				НоменклатурнаяГруппаФасада = Строка.ФасадНоменклатура.НоменклатурнаяГруппа;
				
				//Если НоменклатурнаяГруппаФасада = Справочники.НоменклатурныеГруппы.ЛДСП16 ИЛИ НоменклатурнаяГруппаФасада = Справочники.НоменклатурныеГруппы.МДФ Тогда
				РеквизитыЯщика = Новый Массив;
				РеквизитыЯщика.Добавить(Строка.ФасадНоменклатура);
				РеквизитыЯщика.Добавить(""); //клееная 
				РеквизитыЯщика.Добавить(Строка.ВысотаФасад - 2 * Строка.КромкаФасадНоменклатура.ГлубинаДетали);
				РеквизитыЯщика.Добавить(Строка.ШиринаФасад -2 * Строка.КромкаФасадНоменклатура.ГлубинаДетали);
				РеквизитыЯщика.Добавить(""); //R1
				РеквизитыЯщика.Добавить(""); //R2
				РеквизитыЯщика.Добавить(""); //R3
				РеквизитыЯщика.Добавить(""); //R4
				РеквизитыЯщика.Добавить(""); //КрПил1
				РеквизитыЯщика.Добавить(""); //КрПил2
				РеквизитыЯщика.Добавить(""); //КрПил3
				РеквизитыЯщика.Добавить(""); //КрПил4
				РеквизитыЯщика.Добавить(""); //Эксц1
				РеквизитыЯщика.Добавить(""); //Эксц2
				РеквизитыЯщика.Добавить(""); //Эксц3
				РеквизитыЯщика.Добавить(""); //Эксц4
				РеквизитыЯщика.Добавить(Строка.НомерСтроки);
				РеквизитыЯщика.Добавить("");  //СоблюдениеТекстуры2
				РеквизитыЯщика.Добавить(Строка.КоличествоЯщиков);
				РеквизитыЯщика.Добавить(""); //Комментарий
				РеквизитыЯщика.Добавить(СтрокаИдентификатор); //Скругление
				РеквизитыЯщика.Добавить(Строка.ФасадНоменклатура.ШиринаДетали); //ШиринаПолотна,
				РеквизитыЯщика.Добавить(Строка.ФасадНоменклатура.ДлинаДетали); //ДлинаПолотна,
				РеквизитыЯщика.Добавить(Строка.КромкаФасадНоменклатура.КраткоеНаименование); //кромка
				РеквизитыЯщика.Добавить(Строка.КромкаФасадНоменклатура.КраткоеНаименование); //кромка
				РеквизитыЯщика.Добавить(Строка.КромкаФасадНоменклатура.КраткоеНаименование); //кромка
				РеквизитыЯщика.Добавить(Строка.КромкаФасадНоменклатура.КраткоеНаименование); //кромка
				РеквизитыЯщика.Добавить(""); //Нх1,
				РеквизитыЯщика.Добавить(""); //Нх2,
				РеквизитыЯщика.Добавить(""); //Нх3,
				РеквизитыЯщика.Добавить(""); //Нх4,
				РеквизитыЯщика.Добавить(""); //Отверстия
				РеквизитыЯщика.Добавить(""); //Нх5,
				РеквизитыЯщика.Добавить(""); //Нх6,
				РеквизитыЯщика.Добавить(""); //Нх7,
				РеквизитыЯщика.Добавить(""); //Нх8,
				РеквизитыЯщика.Добавить("☻"); //КонецДетали
				Для каждого Элмент Из РеквизитыЯщика Цикл
					Данные = "";
					Если Не Элмент = "☻" Тогда
						Данные = Данные + Элмент + "☺";
					Иначе 
						Данные = Данные + Элмент;
					КонецЕсли;
					ДанныеДляРаскроя = ДанныеДляРаскроя + Данные;
				КонецЦикла;
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеДляРаскроя <> "☻☺☺☺☺☺☺☺☺☺☺☺☺☺☻☺☺☺☺☺☻" Тогда
		
		ЭтотОбъект.СтрокаРаскрояЛДСП = ЛексКлиентСервер.ПеревестиСтрокуВКодыСимволов(ДанныеДляРаскроя);
		
	Иначе 
		
		ЭтотОбъект.СтрокаРаскрояЛДСП = Неопределено;
		
	КонецЕсли;
	
	ЭтотОбъект.СтрокаРаскрояСтекла = Неопределено;// ?(ЕстьРадиус и ДанныеДляПередачиСтекла <> "☻", ЛексКлиентСервер.ПеревестиСтрокуВКодыСимволов(ДанныеДляПередачиСтекла), Неопределено);
	
	//Создаем строку для кривого пила
	
	СтрокаДляПередачиКривойПил 	= "";
	СтрокаДляПередачиКривойПил 	= СтрокаДляПередачиКривойПил + ПутьЛоготипа + "☻";
	РеквизитыКривогоПила 				= Новый Массив;
	
	Для Каждого Элемент Из ЭтотОбъект.СписокМатериалы Цикл
		
		Материал = Элемент.Материал;
		
		Если ЗначениеЗаполнено(Элемент.СтрокаДляФлэш) Тогда
			
			РеквизитыКривогоПила.Добавить(Элемент.Номенклатура);
			РеквизитыКривогоПила.Добавить(Элемент.ВыборМебельнойКромкиСверху.КраткоеНаименование);
			РеквизитыКривогоПила.Добавить(Элемент.ВыборМебельнойКромкиСнизу.КраткоеНаименование);
			РеквизитыКривогоПила.Добавить(Элемент.ВыборМебельнойКромкиСлева.КраткоеНаименование);
			РеквизитыКривогоПила.Добавить(Элемент.ВыборМебельнойКромкиСправа.КраткоеНаименование);
			РеквизитыКривогоПила.Добавить(""); // АдресМонтажа,
			РеквизитыКривогоПила.Добавить("Количество деталей: " + Элемент.Количество); 
			РеквизитыКривогоПила.Добавить(""); // КАК НомерДоговора,
			
			Если Элемент.Обтачивать и Элемент.Материал = "Стекло" Тогда
				
				РеквизитыКривогоПила.Добавить("Обтачивать");
				
			ИначеЕсли НЕ Элемент.Обтачивать и Элемент.Материал = "Стекло" Тогда
				
				РеквизитыКривогоПила.Добавить("Без обточки");
				
			Иначе
				
				РеквизитыКривогоПила.Добавить("");
				
			КонецЕсли;
			
			РеквизитыКривогоПила.Добавить(Элемент.НомерСтроки);
			РеквизитыКривогоПила.Добавить(Элемент.СтрокаДляФлэш);
			РеквизитыКривогоПила.Добавить("☻");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из РеквизитыКривогоПила Цикл
		
		Если Не Строка = "☻" Тогда
			
			СтрокаДляПередачиКривойПил = СтрокаДляПередачиКривойПил + Строка + "☺";
			
		Иначе 
			
			СтрокаДляПередачиКривойПил = СтрокаДляПередачиКривойПил + Строка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СтрокаДляПередачиКривойПил = "%РОСПИЛ%☻" и НЕ СтрокаДляПередачиКривойПил = "%ЛЕКС%☻" Тогда
		
		ЭтотОбъект.СтрокаКривогоПила = ЛексКлиентСервер.ПеревестиСтрокуВКодыСимволов(СтрокаДляПередачиКривойПил);
		
	Иначе
		
		ЭтотОбъект.СтрокаКривогоПила = Неопределено;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////СРОЧНОСТЬ//////////////////////////////////////////////////////////
	
	Если НЕ Ссылка.Проведен И ЗначениеЗаполнено(ДатаИзготовления) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СтоимостьУслуг = ПолучитьСтоимостьУслуг(СписокНоменклатуры.Выгрузить());
		СтруктураНорматива = Документы.Спецификация.ПолучитьСтруктуруНорматива(ДатаИзготовления, Производство);
		
		// тут проверять превышение норматива
		ЗаказовВЭтомРасчете = СтоимостьУслуг.ЗарплатаЦеха;
		НормативНаДень = СтруктураНорматива.Норматив;
		НормативныйМаксимум = СтруктураНорматива.НормативныйМаксимум;
		НарядовНаДень = СтруктураНорматива.ОборотЗаДень;
		
		ЭтотПлюсНаДень = ЗаказовВЭтомРасчете + НарядовНаДень;
		
		Если ЭтотПлюсНаДень > НормативныйМаксимум Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Превышен максимум нарядов на день изготовления");
			Возврат;
		КонецЕсли;
		
		Срочный = Ложь;
		
		КоличествоДней = 2 + (ДеньНедели(Дата) >= 5);
		
		Если НачалоДня(ДатаОтгрузки) - НачалоДня(Дата) <= 86400 * КоличествоДней Тогда
			Срочный = Истина;
		Иначе
			Срочный = ЭтотПлюсНаДень > НормативНаДень;
		КонецЕсли;
		
		Если Срочный И Изделие = Справочники.Изделия.Детали Тогда
			// здесь будем считать и добавлять строку
			
			КоэффициентСрочности = 0.5; // взять из регистра
			
			НоваяСтрока = СписокНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура = Справочники.Номенклатура.СрочностьЗаказа;
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.НомерИзделия = 0;
			НоваяСтрока.ЗарплатаЦеха = СтоимостьУслуг.ЗарплатаЦеха * СтруктураНорматива.КоэффициентСрочности;
			НоваяСтрока.ВнутренняяСтоимость = СтоимостьУслуг.ВнутренняяСтоимость * СтруктураНорматива.КоэффициентСрочности;
			НоваяСтрока.РозничнаяСтоимость = СтоимостьУслуг.РозничнаяСтоимость * СтруктураНорматива.КоэффициентСрочности;
			
		Иначе
			// удалим строку срочности, если есть
			СтрокаСрочности = СписокНоменклатуры.Найти(Справочники.Номенклатура.СрочностьЗаказа, "Номенклатура");
			Если СтрокаСрочности <> Неопределено Тогда
				СписокНоменклатуры.Удалить(СтрокаСрочности);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ВнутренняяСтоимостьСпецификации = СписокНоменклатуры.Итог("ВнутренняяСтоимость");
	СуммаНарядаСпецификации = Документы.Спецификация.ПолучитьЗарплатуЦеха(СписокНоменклатуры.Выгрузить());
	СуммаДокумента = СписокНоменклатуры.Итог("РозничнаяСтоимость");
		
	ПроверитьЗаполнение(); 
	
КонецПроцедуры

Функция ПосчитатьКилометраж() 
	
	//Отбор 							= Новый Структура("Подразделение, НаселенныйПункт", Подразделение, НаселенныйПункт);
	//КилометражПоРегистру 	= РегистрыСведений.Адреса.Получить(Отбор).Километраж;
	
	//Возврат КилометражПоРегистру;
	
КонецФункции // ПосчитатьКилометраж()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Замер") Тогда
		
		ЭтотОбъект.ДокументОснование	= ДанныеЗаполнения;
		ЭтотОбъект.АдресМонтажа			= ДанныеЗаполнения.АдресЗамера;
		ЭтотОбъект.Километраж				= ДанныеЗаполнения.Километраж;
		
	КонецЕсли;
	
	Дилерский = РольДоступна("ДилерскийДоступКСпецификации");
	
	Если Дилерский И ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		
		ЭтотОбъект.Контрагент = ПараметрыСеанса.ТекущийВнешнийПользователь.ОбъектАвторизации;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ СтатусВышеРазмещен() Тогда
		Отказ = Истина;
		ТекстСообщения = "Проведение разрешено только для размещенных документов";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Движения.Записать();
	
	Если Изделие = Справочники.Изделия.Детали Тогда
		
		Отказ = ВзаиморасчетыПроводки();
		
	КонецЕсли;
	
	Проводка = Движения.Управленческий.Добавить();
	Проводка.Период = Ссылка.ДатаИзготовления;
	Проводка.Подразделение = Производство;
	Проводка.СчетДт = ПланыСчетов.Управленческий.ПоказателиПодразделения;
	Проводка.СубконтоДт.ВидыПоказателейПодразделений = Перечисления.ВидыПоказателейПодразделений.СуммаНарядов;
	Проводка.Сумма = ЭтотОбъект.СуммаНарядаСпецификации;
	
	Если ЗначениеЗаполнено(Виновный) Тогда
		
		Проводка = Движения.ОшибкиСотрудников.Добавить();
		Проводка.Период = Дата;
		Проводка.Сотрудник = Виновный;
		Проводка.Количество = 1;
		Проводка.Сумма = СуммаДокумента;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Движения.Управленческий.Записывать = Истина;
		Движения.ОшибкиСотрудников.Записывать = Истина;
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ВзаиморасчетыПроводки()
	
	Отказ = Ложь;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Управленческий");
	ЭлементБлокировки.УстановитьЗначение("Подразделение", Подразделение);
	ЭлементБлокировки.УстановитьЗначение("Счет", ПланыСчетов.Управленческий.ВзаиморасчетыСПокупателями);
	ЭлементБлокировки.УстановитьЗначение("Субконто1", Контрагент);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Субконто1", Контрагент);
	Если Дилерский Тогда
		Запрос.УстановитьПараметр("Субконто2", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Субконто2", Ссылка);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УправленческийОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.Остатки(
	|			&МоментВремени,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВзаиморасчетыСПокупателями),
	|			,
	|			Подразделение = &Подразделение
	|				И Субконто1 = &Субконто1
	|				И Субконто2 = &Субконто2) КАК УправленческийОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТекстСообщения = "";
	Если РезультатЗапроса.Пустой() Тогда // денег нет совсем
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Отсутствует аванса у контрагента %1, для проведения спецификации необходимо %2", Контрагент, СуммаДокумента);
	Иначе
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ОстатокПоСчету = Выборка.Сумма;
		
		Если ОстатокПоСчету < СуммаДокумента Тогда // аванс недостаточен
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Суммы аванса %1 у контрагента %2 недостаточно для проведения спецификации, необходимо %3", ОстатокПоСчету, Контрагент, СуммаДокумента);
		Иначе
			
			Если Дилерский Тогда
				Движение = Движения.Управленческий.Добавить();
				Движение.Период = Дата;
				Движение.Подразделение = Подразделение;
				Движение.СчетКт = ПланыСчетов.Управленческий.ВзаиморасчетыСПокупателями;
				Движение.СчетДт = ПланыСчетов.Управленческий.ВспомогательныйСчет;
				Движение.СубконтоКт.Контрагенты = Контрагент;
				Движение.Сумма = -СуммаДокумента;
				Движение.Содержание = "Дилер разместил Спецификацию № " + Строка(Номер);
				
				Движение = Движения.Управленческий.Добавить();
				Движение.Период = Дата;
				Движение.Подразделение = Подразделение;
				Движение.СчетКт = ПланыСчетов.Управленческий.ВзаиморасчетыСПокупателями;
				Движение.СчетДт = ПланыСчетов.Управленческий.ВспомогательныйСчет;
				Движение.СубконтоКт.Контрагенты = Контрагент;
				Движение.СубконтоКт.СпецификацияДоговор = Ссылка;
				Движение.Сумма = СуммаДокумента;
				
			КонецЕсли;
		КонецЕсли; // аванс недостаточен
	КонецЕсли; // денег нет совсем
	
	Если ТекстСообщения <> "" Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Процедура ПриЗаписи(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Документы.Спецификация.ПолучитьСтатусСпецификации(Ссылка)) Тогда
		
		Документы.Спецификация.УстановитьСтатусСпецификации(Ссылка, Перечисления.СтатусыСпецификации.Сохранен);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Контрагент.Дилер И НЕ Дилерский Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Запрещено создавать спецификации для дилеров");
		
	КонецЕсли;
	
	Если Дилерский Тогда
		
		Индекс = ПроверяемыеРеквизиты.Найти("Офис");
		ПроверяемыеРеквизиты.Удалить(Индекс);
		
	КонецЕсли;
	
	Если Контрагент = Справочники.Контрагенты.ЧастноеЛицо И Изделие = Справочники.Изделия.Детали Тогда
		
		ПроверяемыеРеквизиты.Добавить("Телефон");
		
	КонецЕсли;
	
	Если Изделие = Справочники.Изделия.Переделка Тогда
		
		ПроверяемыеРеквизиты.Добавить("Виновный");             
		ПроверяемыеРеквизиты.Добавить("ЗамечанияИнженера");
		
	КонецЕсли;	
	
	Если ДеньНедели(ДатаОтгрузки) = 7 Тогда
		
		Сообщение 			= Новый СообщениеПользователю;
		Сообщение.Текст 	= "Нельзя устанавливать дату отгрузки на воскресенье. Выберите другой день";
		Сообщение.Поле 	= "Объект.ДатаОтгрузки";
		Сообщение.Сообщить();
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Дата > КонецДня(ДатаОтгрузки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата отгрузки не может быть меньше даты размещения");
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтатусВышеРазмещен()
	
	СтатусыДляПроведения = Новый Массив;
	СтатусыДляПроведения.Добавить(Перечисления.СтатусыСпецификации.Изготовлен);
	СтатусыДляПроведения.Добавить(Перечисления.СтатусыСпецификации.Отгружен);
	СтатусыДляПроведения.Добавить(Перечисления.СтатусыСпецификации.ПереданВЦех);
	СтатусыДляПроведения.Добавить(Перечисления.СтатусыСпецификации.Размещен);
	СтатусыДляПроведения.Добавить(Перечисления.СтатусыСпецификации.Установлен);
	
	СтатусСпецификации = Документы.Спецификация.ПолучитьСтатусСпецификации(Ссылка);
	Проводить = Ложь;
	
	Для каждого Строка Из СтатусыДляПроведения Цикл
		Если СтатусСпецификации = Строка Тогда
			Проводить = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Проводить;
	
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ПользовательАдминистратор = УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.Администратор);
	
	Если  НЕ ПользовательАдминистратор И СтатусВышеРазмещен() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Запрещено отменять проведение документа со статусом выше 'Размещен'");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтоимостьУслуг(СписокНоменклатуры) Экспорт
	
	Структура = Новый Структура;
	
	Запрос= Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.ЗарплатаЦеха,
	|	СписокНоменклатуры.РозничнаяСтоимость,
	|	СписокНоменклатуры.ВнутренняяСтоимость
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	&СписокНоменклатуры КАК СписокНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(СписокНоменклатуры.ЗарплатаЦеха, 0)) КАК ЗарплатаЦеха,
	|	СУММА(ЕСТЬNULL(СписокНоменклатуры.РозничнаяСтоимость, 0)) КАК РозничнаяСтоимость,
	|	СУММА(ЕСТЬNULL(СписокНоменклатуры.ВнутренняяСтоимость, 0)) КАК ВнутренняяСтоимость
	|ИЗ
	|	СписокНоменклатуры КАК СписокНоменклатуры
	|ГДЕ
	|	СписокНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	Структура.Вставить("ЗарплатаЦеха", Документы.Спецификация.ПолучитьЗарплатуЦеха(СписокНоменклатуры));
	Структура.Вставить("ВнутренняяСтоимость", ?(ЗначениеЗаполнено(Выборка.ВнутренняяСтоимость), Выборка.ВнутренняяСтоимость, 0));
	Структура.Вставить("РозничнаяСтоимость", ?(ЗначениеЗаполнено(Выборка.РозничнаяСтоимость), Выборка.РозничнаяСтоимость, 0));
	
	Возврат Структура;
	
КонецФункции
