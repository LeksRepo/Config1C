
#Область ОбщегоНазначения

Функция ПолучитьКоличествоДнейНаИзготовление(Спецификация) Экспорт
	
	ДнейНаИзготовление = 0;
	Номенклатура = Null;
	
	Таблица = Спецификация.СписокНоменклатуры.Выгрузить();
	
	Если Таблица.Количество()>0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Таб", Спецификация.СписокНоменклатуры.Выгрузить());
		Запрос.УстановитьПараметр("Подразделение", Спецификация.Подразделение);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТТаб.Номенклатура
		|ПОМЕСТИТЬ втТаб
		|ИЗ
		|	&Таб КАК ТТаб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Список.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(НастройкиНоменклатуры.ДнейНаИзготовление, 0) КАК ДнейНаИзготовление
		|ИЗ
		|	втТаб КАК Список
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиНоменклатуры.СрезПоследних(, Подразделение = &Подразделение) КАК НастройкиНоменклатуры
		|		ПО (НастройкиНоменклатуры.Номенклатура = Список.Номенклатура)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДнейНаИзготовление УБЫВ";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			ДнейНаИзготовление = Выборка.ДнейНаИзготовление;
			Номенклатура = Выборка.Номенклатура;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Стр = Новый Структура();
	Стр.Вставить("ДнейНаИзготовление",ДнейНаИзготовление);
	Стр.Вставить("Номенклатура",Номенклатура);
	
	Возврат Стр; 
	
КонецФункции

Функция ПолучитьВсеФормулы()
	
	ВсеФормулы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФормулыКаталога.Наименование,
	|	ФормулыКаталога.РазвернутаяФормула
	|ИЗ
	|	Справочник.ФормулыКаталога КАК ФормулыКаталога
	|ГДЕ
	|	НЕ ФормулыКаталога.ПометкаУдаления
	|	И ФормулыКаталога.Активность";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Мас = Новый Массив;
		Мас.Добавить(Выборка.Наименование);
		Мас.Добавить(Выборка.РазвернутаяФормула);
		
		ВсеФормулы.Добавить(Мас);
		
	КонецЦикла;
	
	Возврат ВсеФормулы;
	
КонецФункции

Функция ПолучитьТаблицуМатериаловЯщики(ТаблицаДеталей, Документ, ОбщаяНоменклатура) Экспорт
	
	Метр = 1000;
	КвМетр = Метр * Метр;
	
	ИзделиеДетали = Документ.Изделие.ЭтоДетали;
	ИзделиеШкаф = (Документ.Изделие.ВидИзделия = Перечисления.ВидыИзделий.ШкафКупе);
	ИзделиеКорпуснаяМебель = (Документ.Изделие.ВидИзделия = Перечисления.ВидыИзделий.КорпуснаяМебель);
	
	ПрипускККромке = ЛексСервер.ПолучитьНастройкуПодразделения(Документ.Подразделение, Перечисления.ВидыНастроекПодразделений.ПрипускККромке);
	
	Если НЕ ЗначениеЗаполнено(ПрипускККромке) Тогда
		ПрипускККромке = 0;	
	КонецЕсли;
	
	Формулы = ПолучитьВсеФормулы();
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Номенклатура");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("НомерИзделия");
	ТЗ.Колонки.Добавить("МестоОбработки");
	ТЗ.Колонки.Добавить("Листовой");
	ТЗ.Колонки.Добавить("КриволинейнаяКромка");
	
	Для Каждого Деталь Из ТаблицаДеталей Цикл
		
		НомГруппа = ЛексСервер.ЗначениеРеквизитаОбъекта(Деталь.Номенклатура, "НоменклатурнаяГруппа");
		
		//Площадь детали
		Запись = ТЗ.Добавить();
		Запись.Номенклатура = Деталь.Номенклатура;
		Запись.Количество = (Деталь.ВысотаДетали * Деталь.ШиринаДетали) * Деталь.Количество / КвМетр;
		Запись.НомерИзделия = Деталь.НомерИзделия;
		Запись.Листовой = ЛексСервер.ЗначениеРеквизитаОбъекта(НомГруппа, "ВидМатериала") = Перечисления.ВидыМатериалов.Листовой;
		
		//Длина кромки
		ДлинаКромки = ?(ЗначениеЗаполнено(Деталь.ВыборМебельнойКромкиСверху), ПрипускККромке + Деталь.ВыборМебельнойКромкиСверху.ГлубинаДетали * 2 + Деталь.ШиринаДетали,0) +
		?(ЗначениеЗаполнено(Деталь.ВыборМебельнойКромкиСнизу), ПрипускККромке + Деталь.ВыборМебельнойКромкиСнизу.ГлубинаДетали * 2 + Деталь.ШиринаДетали,0) +
		?(ЗначениеЗаполнено(Деталь.ВыборМебельнойКромкиСлева), ПрипускККромке + Деталь.ВыборМебельнойКромкиСлева.ГлубинаДетали * 2 + Деталь.ВысотаДетали,0) +
		?(ЗначениеЗаполнено(Деталь.ВыборМебельнойКромкиСправа), ПрипускККромке + Деталь.ВыборМебельнойКромкиСправа.ГлубинаДетали * 2 + Деталь.ВысотаДетали,0);
		
		Если ДлинаКромки > 0 Тогда
			
			Запись = ТЗ.Добавить();
			Запись.Номенклатура = Деталь.КромкаНоменклатура;
			Запись.Количество = ДлинаКромки * Деталь.Количество / Метр;
			Запись.НомерИзделия = Деталь.НомерИзделия;
			Запись.Листовой = Ложь;
			
			Если ЗначениеЗаполнено(Деталь.КриволинейныйВыпилПодРучку) Тогда
				Запись.КриволинейнаяКромка = Деталь.КриволинейныйВыпилПодРучку;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Ящик Из Документ.СписокЯщики Цикл
		
		СхемаЯщика = Ящик.СхемаЯщика;
		Короб = Документ.СписокИзделийПоКаталогу.Найти(Запись.НомерИзделия,"НомерСтроки");
		МестоОбработкиНаправляющие = Неопределено;
		
		//Направляющие
		Если ЗначениеЗаполнено(Ящик.НаправляющиеНоменклатура) И (НЕ Ящик.БезНаправляющих) Тогда
			
			Запись = ТЗ.Добавить();
			Запись.Номенклатура = Ящик.НаправляющиеНоменклатура;
			Запись.Количество = Ящик.КоличествоЯщиков;
			Запись.НомерИзделия = Ящик.НомерИзделия;
			Запись.Листовой = Ложь;
			
			Если ЗначениеЗаполнено(Ящик.НомерИзделия) Тогда
				
				Если ИзделиеШкаф Тогда
					
					Если СхемаЯщика.СборкаБезНаправляющихНевозможна Тогда
						Запись.МестоОбработки = "Цех";	
					Иначе
						Запись.МестоОбработки = "Склад";
					КонецЕсли;
					
				Иначе
					
					Если Короб.Сборка Тогда
						Запись.МестоОбработки = "Цех";
					Иначе
						Запись.МестоОбработки = "Склад";
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если Ящик.ВидФасада = "Нет" Тогда
					Запись.МестоОбработки = "Склад";
				Иначе
					
					Если СхемаЯщика.СборкаБезНаправляющихНевозможна Тогда
						Запись.МестоОбработки = "Цех";
					Иначе
						Запись.МестоОбработки = "Склад";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			МестоОбработкиНаправляющие = Запись.МестоОбработки; 
			
		КонецЕсли;
		
		//Ручки
		Если ЗначениеЗаполнено(Ящик.РучкаНоменклатура) И (Ящик.КоличествоРучек > 0) Тогда
			
			Запись = ТЗ.Добавить();
			Запись.Номенклатура = Ящик.РучкаНоменклатура;
			Запись.Количество = Ящик.КоличествоРучек * Ящик.КоличествоЯщиков;
			Запись.НомерИзделия = Ящик.НомерИзделия;
			Запись.Листовой = Ложь;
			
			Если ЗначениеЗаполнено(Ящик.НомерИзделия) Тогда
				
				Если ИзделиеДетали ИЛИ ИзделиеШкаф ИЛИ (ИзделиеКорпуснаяМебель И Короб.Сборка) Тогда
					Запись.МестоОбработки = "Цех";
				Иначе
					Запись.МестоОбработки = "Склад";
				КонецЕсли;
				
			Иначе
				
				Если Ящик.ВидФасада = "Нет" Тогда
					Запись.МестоОбработки = "Склад";
				Иначе
					Запись.МестоОбработки = "Цех";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//Комплектация
		Если Ящик.СхемаЯщика.Комплектация.Количество() > 0 Тогда
			
			ТабКомп = Ящик.СхемаЯщика.Комплектация;
			
			Для Каждого Стр Из ТабКомп Цикл
				
				СтрНоменклатура = Стр.Номенклатура; 
				
				Если ТипЗнч(СтрНоменклатура) = Тип("СправочникСсылка.ОбщаяНоменклатура") Тогда 		 
					СтрНоменклатура = ЛексСервер.ПолучитьНоменклатуру(ОбщаяНоменклатура, СтрНоменклатура);			
				КонецЕсли;
				
				НомГруппа = ЛексСервер.ЗначениеРеквизитаОбъекта(СтрНоменклатура, "НоменклатурнаяГруппа");
				Запись = ТЗ.Добавить();
				Запись.НомерИзделия = Ящик.НомерИзделия;
				Запись.Номенклатура = СтрНоменклатура;
				
				
				Выполнить("Запись.Количество = " + ЛексКлиентСервер.ПодставитьОбъектВФормулуЯщика("Ящик", ПодставитьЗначенияФормул(Стр.Количество, Формулы)));
				Запись.Количество = Запись.Количество * Ящик.КоличествоЯщиков;
				Запись.Листовой = ЛексСервер.ЗначениеРеквизитаОбъекта(НомГруппа, "ВидМатериала") = Перечисления.ВидыМатериалов.Листовой;
				
				Если ЗначениеЗаполнено(МестоОбработкиНаправляющие) И НЕ (СтрНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга)  Тогда
					Запись.МестоОбработки = МестоОбработкиНаправляющие;	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Стр = Новый Структура();
	Стр.Вставить("Количество", 0);
	
	СтрокиДляУдаления = ТЗ.НайтиСтроки(Стр);
	
	Для каждого Строка Из СтрокиДляУдаления Цикл
		ТЗ.Удалить(Строка);
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция ПодставитьЗначенияФормул(Знач Формула, СписокФормул)
	
	Для Каждого Фор Из СписокФормул Цикл
		
		Формула = СтрЗаменить(Формула,"Фор."+Фор[0],Фор[1]);
		
	КонецЦикла;
	
	Возврат Формула;
	
КонецФункции

Функция РазложитьЯщикиНаДетали(Документ) Экспорт
	
	Формулы = ПолучитьВсеФормулы();
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("НомерСтроки");
	ТЗ.Колонки.Добавить("НомерИзделия");
	ТЗ.Колонки.Добавить("Тип");
	ТЗ.Колонки.Добавить("Номенклатура");
	ТЗ.Колонки.Добавить("ВысотаДетали");
	ТЗ.Колонки.Добавить("ШиринаДетали");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("КромкаНоменклатура");
	ТЗ.Колонки.Добавить("ВыборМебельнойКромкиСверху");
	ТЗ.Колонки.Добавить("ВыборМебельнойКромкиСнизу");
	ТЗ.Колонки.Добавить("ВыборМебельнойКромкиСлева");
	ТЗ.Колонки.Добавить("ВыборМебельнойКромкиСправа");
	ТЗ.Колонки.Добавить("Материал");
	ТЗ.Колонки.Добавить("СтруктураОтверстий");
	ТЗ.Колонки.Добавить("КриволинейныйВыпилПодРучку");
	ТЗ.Колонки.Добавить("СхемаЯщика");
	ТЗ.Колонки.Добавить("ЭтоСклейка");
	ТЗ.Колонки.Добавить("Ручка");
	
	Для Каждого Ящик Из Документ.СписокЯщики Цикл
		
		Схема = Ящик.СхемаЯщика;
		
		Для Каждого ДетальСхема Из Схема.Детали Цикл
			
			ЭтоПластик = Ложь;
			
			НоваяДеталь = ТЗ.Добавить();
			НоваяДеталь.СхемаЯщика = Схема;
			НоваяДеталь.НомерСтроки = Ящик.НомерСтроки;
			НоваяДеталь.НомерИзделия = Ящик.НомерИзделия;
			НоваяДеталь.Тип = ДетальСхема.Тип;
			НоваяДеталь.ЭтоСклейка = Ложь;
			
			Если ДетальСхема.Тип = Перечисления.ВидыДеталейЯщиков.Фасад 
				И ЗначениеЗаполнено(Ящик.РучкаНоменклатура)
				И Ящик.КоличествоРучек > 0 Тогда
				
				НоваяДеталь.Ручка = Строка(?(Ящик.КоличествоРучек > 1, "Две ", "") + Ящик.РучкаНоменклатура); 
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДетальСхема.СтруктураОтверстий) Тогда
				НоваяДеталь.СтруктураОтверстий = ДетальСхема.СтруктураОтверстий;	
			КонецЕсли;
			
			Если ДетальСхема.Тип = Перечисления.ВидыДеталейЯщиков.Корпус Тогда
				
				НоваяДеталь.Номенклатура = Ящик.Номенклатура;
				Кромка = Ящик.КромкаНоменклатура;
				
			КонецЕсли;
			
			Если ДетальСхема.Тип = Перечисления.ВидыДеталейЯщиков.Дно Тогда
				
				НоваяДеталь.Номенклатура = Ящик.ДноНоменклатура;
				Кромка = Ящик.КромкаНоменклатура;
				
			КонецЕсли;
			
			Если ДетальСхема.Тип = Перечисления.ВидыДеталейЯщиков.Фасад Тогда
				
				НоваяДеталь.Номенклатура = Ящик.ФасадНоменклатура;
				Кромка = Ящик.КромкаФасадНоменклатура;
				НоваяДеталь.Материал = "ФасадЯщика";
				НоваяДеталь.КриволинейныйВыпилПодРучку = Ящик.КриволинейныйВыпилПодРучку; 
				
				Если Ящик.ФасадНоменклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Пластик Тогда
					ЭтоПластик = Истина;
					НоваяДеталь.Номенклатура = Ящик.Номенклатура;
				КонецЕсли;
				
			КонецЕсли;
			
			Выполнить("НоваяДеталь.ВысотаДетали = " + ЛексКлиентСервер.ПодставитьОбъектВФормулуЯщика("Ящик", ПодставитьЗначенияФормул(ДетальСхема.Высота, Формулы)));
			Выполнить("НоваяДеталь.ШиринаДетали = " + ЛексКлиентСервер.ПодставитьОбъектВФормулуЯщика("Ящик", ПодставитьЗначенияФормул(ДетальСхема.Ширина, Формулы)));
			Выполнить("НоваяДеталь.Количество = " + ЛексКлиентСервер.ПодставитьОбъектВФормулуЯщика("Ящик", ПодставитьЗначенияФормул(ДетальСхема.Количество, Формулы)));
			
			Если ЭтоПластик Тогда
				НоваяДеталь.ВысотаДетали = НоваяДеталь.ВысотаДетали + 20;
				НоваяДеталь.ШиринаДетали = НоваяДеталь.ШиринаДетали + 20;
			КонецЕсли;
			
			НоваяДеталь.Количество = НоваяДеталь.Количество * Ящик.КоличествоЯщиков;
			
			Если (НоваяДеталь.ВысотаДетали <= 0) ИЛИ (НоваяДеталь.ВысотаДетали <= 0) Тогда
				НоваяДеталь.Количество = 0;
			КонецЕсли;
			
			Если (ДетальСхема.Тип = Перечисления.ВидыДеталейЯщиков.Фасад) И (Ящик.ВидФасада = "Нет") Тогда
				НоваяДеталь.Количество = 0;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Кромка) Тогда
				
				НоваяДеталь.КромкаНоменклатура = Кромка;
				
				Если ДетальСхема.КромкаВерх Тогда 
					НоваяДеталь.ВыборМебельнойКромкиСверху = Кромка;
					НоваяДеталь.ВысотаДетали = НоваяДеталь.ВысотаДетали - Кромка.ГлубинаДетали;
				КонецЕсли;
				Если ДетальСхема.КромкаНиз Тогда 
					НоваяДеталь.ВыборМебельнойКромкиСнизу = Кромка;
					НоваяДеталь.ВысотаДетали = НоваяДеталь.ВысотаДетали - Кромка.ГлубинаДетали;
				КонецЕсли;
				Если ДетальСхема.КромкаЛево Тогда 
					НоваяДеталь.ВыборМебельнойКромкиСлева = Кромка;
					НоваяДеталь.ШиринаДетали = НоваяДеталь.ШиринаДетали - Кромка.ГлубинаДетали;
				КонецЕсли;
				Если ДетальСхема.КромкаПраво Тогда 
					НоваяДеталь.ВыборМебельнойКромкиСправа = Кромка;
					НоваяДеталь.ШиринаДетали = НоваяДеталь.ШиринаДетали - Кромка.ГлубинаДетали;
				КонецЕсли;
				
			Иначе
				
				НоваяДеталь.КромкаНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
				
			КонецЕсли;
			
			Если ЭтоПластик Тогда
				
				НоваяДеталь.ЭтоСклейка = Истина;
				
				ДетальПластик = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(ДетальПластик,НоваяДеталь);
				
				ДетальПластик.Номенклатура = Ящик.ФасадНоменклатура;
				
				ДетальПластик.КромкаНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
				ДетальПластик.ВыборМебельнойКромкиСверху = Справочники.Номенклатура.ПустаяСсылка();
				ДетальПластик.ВыборМебельнойКромкиСнизу = Справочники.Номенклатура.ПустаяСсылка();
				ДетальПластик.ВыборМебельнойКромкиСлева = Справочники.Номенклатура.ПустаяСсылка();
				ДетальПластик.ВыборМебельнойКромкиСправа = Справочники.Номенклатура.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Стр = Новый Структура();
	Стр.Вставить("Количество", 0);
	
	СтрокиДляУдаления = ТЗ.НайтиСтроки(Стр);
	
	Для каждого Строка Из СтрокиДляУдаления Цикл
		ТЗ.Удалить(Строка);
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьСуммаСДилерскимиНаценками(СпецификацияСсылка) Экспорт
	
	Если СпецификацияСсылка = Документы.Спецификация.ПустаяСсылка() Тогда
		
		Возврат 0;
		
	Иначе
		
		РеквизитыСпецификации = ЛексСервер.ЗначенияРеквизитовОбъекта(СпецификацияСсылка, "Контрагент,СуммаДокумента");
		
		НаценкиДилера = ЛексСервер.ЗначенияРеквизитовОбъекта(РеквизитыСпецификации.Контрагент, "ПроцентНаценки,СуммаНаценки");
		Сумма = РеквизитыСпецификации.СуммаДокумента + РеквизитыСпецификации.СуммаДокумента * (НаценкиДилера.ПроцентНаценки / 100) + НаценкиДилера.СуммаНаценки;
		
		Возврат Сумма;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДоговор(СсылкаСпецификация) Экспорт
	
	МассивДокументов = ЛексСервер.НайтиПодчиненныеДокументы(СсылкаСпецификация, "Документ.Договор", "Спецификация");
	Если МассивДокументов.Количество() = 1 Тогда
		Возврат МассивДокументов[0];
	ИначеЕсли МассивДокументов.Количество() = 0 Тогда
		Возврат Документы.Договор.ПустаяСсылка();
	Иначе
		ВызватьИсключение "Ошибка 795: Нарушена связь ""Спецификации"" и документа ""Договор""";
	КонецЕсли;
	
КонецФункции // ПолучитьМонтаж()

Функция ПолучитьНарядЗадание(СсылкаСпецификация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаСпецификация.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НарядЗаданиеСписокСпецификаций.Ссылка КАК Наряд,
	|	НарядЗаданиеСписокСпецификаций.Ссылка.Номер,
	|	НарядЗаданиеСписокСпецификаций.Ссылка.ДатаИзготовления,
	|	НарядЗаданиеСписокСпецификаций.Ссылка.Дата КАК ДатаНаряда
	|ИЗ
	|	Документ.НарядЗадание.СписокСпецификаций КАК НарядЗаданиеСписокСпецификаций
	|ГДЕ
	|	НарядЗаданиеСписокСпецификаций.Спецификация = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		СтруктураНаряда = Новый Структура();
		СтруктураНаряда.Вставить("Номер", Выборка.Номер);
		СтруктураНаряда.Вставить("ДатаИзготовления", Выборка.ДатаИзготовления);
		СтруктураНаряда.Вставить("ДатаНаряда", Выборка.ДатаНаряда);
		СтруктураНаряда.Вставить("Наряд", Выборка.Наряд);
		
		Возврат СтруктураНаряда;
		
	ИначеЕсли Выборка.Количество() = 0 Тогда
		
		Возврат Документы.НарядЗадание.ПустаяСсылка();
		
	Иначе
		
		ВызватьИсключение "Ошибка 797: Нарушена связь ""Спецификации"" и документа ""НарядЗадание""";
		
	КонецЕсли;
	
КонецФункции // ПолучитьМонтаж()

Функция ПерезаполнитьКомплектацию(СсылкаСпецификация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаСпецификация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склад.Номенклатура КАК Номенклатура,
	|	Склад.ЕдиницаИзмерения,
	|	Склад.КоличествоСклад КАК КоличествоСклад,
	|	Склад.КоличествоЦех,
	|	ВЫБОР
	|		КОГДА Склад.ЭтоОбрезок
	|			ТОГДА ""Обрезок "" + ЕСТЬNULL(СписокПодЗаказ.Комментарий, """")
	|		ИНАЧЕ СписокПодЗаказ.Комментарий
	|	КОНЕЦ КАК Комментарий
	|ИЗ
	|	Документ.Спецификация.СкладГотовойПродукции КАК Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокМатериаловПодЗаказ КАК СписокПодЗаказ
	|		ПО Склад.Номенклатура = СписокПодЗаказ.Номенклатура
	|			И (СписокПодЗаказ.Ссылка = &Ссылка)
	|ГДЕ
	|	Склад.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Возвращает структуру с размерами полотна материала и кромки
//
// Параметры
//  Номенклатура - Номенклатура полотна
//  ТорцеваяЛента - Структура - Структура кромок. 4-ре ссылки на номенклатуру(могут быть пустыми)
Функция ПолучитьРазмерыМатериалов(Номенклатура, ТорцеваяЛента) Экспорт
	
	СтруктураРазмеров = Новый Структура;
	
	СтруктураРазмеров.Вставить("ДлинаПолотна", Номенклатура.ДлинаДетали);
	СтруктураРазмеров.Вставить("ШиринаПолотна", Номенклатура.ШиринаДетали);
	
	Если ЗначениеЗаполнено(ТорцеваяЛента) Тогда 
		
		СтруктураРазмеров.Вставить("ВычитаемоеДляШирины", ТорцеваяЛента.ТорцеваяЛентаСлева.ГлубинаДетали + ТорцеваяЛента.ТорцеваяЛентаСправа.ГлубинаДетали);
		СтруктураРазмеров.Вставить("ВычитаемоеДляВысоты", ТорцеваяЛента.ТорцеваяЛентаСверху.ГлубинаДетали + ТорцеваяЛента.ТорцеваяЛентаСнизу.ГлубинаДетали);
		
	Иначе
		
		СтруктураРазмеров.Вставить("ВычитаемоеДляШирины", 0);
		СтруктураРазмеров.Вставить("ВычитаемоеДляВысоты", 0);
		
	КонецЕсли;
	
	Возврат СтруктураРазмеров;
	
КонецФункции // ПолучитьРазмерыПолотна()

//Получить структуру норматива
//
// Параметры:
//  СсылкаСпецификация  - Документы.Спецификация - Ссылка на спецификацию
//
// Возвращаемое значение:
//   Структура
//
Функция ПолучитьСтруктуруНорматива(Период, Подразделение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Данные = Новый Структура;
	Данные.Вставить("СтоимостьУслугФакт", 0);
	Данные.Вставить("СтоимостьУслугПлан", 0);
	Данные.Вставить("КоличествоКоробовФакт", 0);
	Данные.Вставить("КоличествоКоробовПлан", 0);
	Данные.Вставить("КоличествоДеталейФакт", 0);
	Данные.Вставить("КоличествоДеталейПлан", 0);
	Данные.Вставить("КоличествоДоставокФакт", 0);
	Данные.Вставить("КоличествоДоставокПлан", 0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ЦеховойЛимит.СтоимостьУслугФактОборот, 0) КАК СтоимостьУслугФакт,
	|	ЕСТЬNULL(ЦеховойЛимит.СтоимостьУслугПланОборот, 0) КАК СтоимостьУслугПлан,
	|	ЕСТЬNULL(ЦеховойЛимит.КоличествоКоробовФактОборот, 0) КАК КоличествоКоробовФакт,
	|	ЕСТЬNULL(ЦеховойЛимит.КоличествоКоробовПланОборот, 0) КАК КоличествоКоробовПлан,
	|	ЕСТЬNULL(ЦеховойЛимит.КоличествоДеталейФактОборот, 0) КАК КоличествоДеталейФакт,
	|	ЕСТЬNULL(ЦеховойЛимит.КоличествоДеталейПланОборот, 0) КАК КоличествоДеталейПлан,
	|	ЕСТЬNULL(ЦеховойЛимит.КоличествоДоставокФактОборот, 0) КАК КоличествоДоставокФакт,
	|	ЕСТЬNULL(ЦеховойЛимит.КоличествоДоставокПланОборот, 0) КАК КоличествоДоставокПлан
	|ИЗ
	|	РегистрНакопления.ЦеховойЛимит.Обороты(&Период, &Период, День, Подразделение = &Подразделение) КАК ЦеховойЛимит";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции // ПолучитьСтруктуруНорматива()

Функция ПолучитьЗарплатуЦеха(ТаблицаЗначений) Экспорт
	
	ЗарплатаЦеха = 0;
	
	Если ТаблицаЗначений.Количество() > 0 Тогда
	
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТЗ", ТаблицаЗначений);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.ЗарплатаЦеха КАК ЗарплатаЦеха,
		|	ВЫРАЗИТЬ(Таб.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
		|ПОМЕСТИТЬ втТаб
		|ИЗ
		|	&ТЗ КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(Таб2.ЗарплатаЦеха) КАК ЗарплатаЦеха
		|ИЗ
		|	втТаб КАК Таб2
		|ГДЕ
		|	Таб2.ЗарплатаЦеха > 0
		|	И Таб2.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
		|	И Таб2.Номенклатура.ЦеховаяЗона <> ЗНАЧЕНИЕ(Перечисление.ЦеховыеЗоны.ВнешниеУслуги)
		|	И Таб2.Номенклатура.ЦеховаяЗона <> ЗНАЧЕНИЕ(Перечисление.ЦеховыеЗоны.Офис)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если НЕ (Выборка.ЗарплатаЦеха = NULL) Тогда
				ЗарплатаЦеха = Выборка.ЗарплатаЦеха;
			КонецЕсли;
		КонецЦикла;
		 
	КонецЕсли;
	
	Возврат ЗарплатаЦеха;
	
КонецФункции

Функция ПолучитьСтоимостьУслугБезВнешних(СписокНоменклатуры) Экспорт
	
	// у дилеров нет прав на все спецификации
	УстановитьПривилегированныйРежим(Истина);
	Структура = Новый Структура;
	
	Запрос= Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СписокНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(СписокНоменклатуры.РозничнаяСтоимость КАК ЧИСЛО(15, 2)) КАК РозничнаяСтоимость
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	&СписокНоменклатуры КАК СписокНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(СписокНоменклатуры.РозничнаяСтоимость, 0)) КАК РозничнаяСтоимость
	|ИЗ
	|	СписокНоменклатуры КАК СписокНоменклатуры
	|ГДЕ
	|	СписокНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|	И СписокНоменклатуры.Номенклатура.ЦеховаяЗона <> ЗНАЧЕНИЕ(Перечисление.ЦеховыеЗоны.ВнешниеУслуги)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура.Вставить("ЗарплатаЦеха", Документы.Спецификация.ПолучитьЗарплатуЦеха(СписокНоменклатуры));
	Структура.Вставить("РозничнаяСтоимость", ?(ЗначениеЗаполнено(Выборка.РозничнаяСтоимость), Выборка.РозничнаяСтоимость, 0));
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Записыват в Регистр сведений текущий статус Спецификации
//
// Параметры
//  СпецификацияСсылка - СправочникСсылка.Спецификация - Ссылка на спецификацию для которой меняем статус
//  НовыйСтатус - ПеречислениеСсылка.СтатусыСпецификаций - Ссылка на перечисление нового статуса спецификации
Функция УстановитьСтатусСпецификации(СпецификацияСсылка, НовыйСтатус) Экспорт
	
	ДатаВремя = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.СтатусСпецификации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Спецификация.Установить(СпецификацияСсылка);
	НаборЗаписей.Отбор.Период.Установить(ДатаВремя);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
	Иначе
		
		Запись = НаборЗаписей[0];
		Если Запись.Статус = НовыйСтатус Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запись.Статус = НовыйСтатус;
	Запись.Спецификация = СпецификацияСсылка;
	Запись.Период = ДатаВремя;
	Запись.Автор = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	НаборЗаписей.Записать();
	
	Если НовыйСтатус = Перечисления.СтатусыСпецификации.Отгружен Тогда
		Документы.Спецификация.ОчиститьРаскрой(СпецификацияСсылка);	
	КонецЕсли;
	
	Если НовыйСтатус = Перечисления.СтатусыСпецификации.ОжиданиеМатериала 
	 ИЛИ НовыйСтатус = Перечисления.СтатусыСпецификации.Сохранен
	 ИЛИ НовыйСтатус = Перечисления.СтатусыСпецификации.Проверяется
	 ИЛИ НовыйСтатус = Перечисления.СтатусыСпецификации.Рассчитывается Тогда
		Документы.Спецификация.УстановитьПроверкуСпецификации(СпецификацияСсылка, "Ложь");
	КонецЕсли;
КонецФункции

Функция УстановитьПроверкуСпецификации(СпецификацияСсылка, Проверен) Экспорт
	
	ДатаВремя = ТекущаяДата();
	ТекущийСтатус = Документы.Спецификация.ПолучитьСтатусСпецификации(СпецификацияСсылка);

	НаборЗаписей = РегистрыСведений.ПроверкаСпецификации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Спецификация.Установить(СпецификацияСсылка);
	НаборЗаписей.Отбор.Период.Установить(ДатаВремя);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Запись.Статус = ТекущийСтатус;
	Запись.Спецификация = СпецификацияСсылка;
	Запись.Период = ДатаВремя;
	Запись.Автор = ПользователиКлиентСервер.АвторизованныйПользователь();
	Запись.Проверен = Проверен; 
	
	НаборЗаписей.Записать();

КонецФункции

Функция ОчиститьРаскрой(СпецификацияСсылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.РаскройДеталей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(СпецификацияСсылка);
	
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл 
		
		НаборЗаписей.Удалить(Запись);		
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецФункции	

// Получает из Регистр сведений текущий статус Спецификации
//
// Параметры
//  СпецификацияСсылка - СправочникСсылка.Спецификация - Ссылка на спецификацию для которой получаем статус
Функция ПолучитьСтатусСпецификации(СпецификацияСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусСпецификацииСрезПоследних.Статус
	|ИЗ
	|	РегистрСведений.СтатусСпецификации.СрезПоследних(, Спецификация = &Спецификация) КАК СтатусСпецификацииСрезПоследних";
	
	Запрос.УстановитьПараметр("Спецификация", СпецификацияСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Ответ = Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Ответ = Выборка.Статус;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Печать

Процедура ПечатьАктДоставкаСборка(ТабДок, Ссылка) Экспорт
	
	Перем Инженер;
	
	// { Васильев Александр Леонидович [22.06.2015]
	// Сделать, в запросе убрать соединения с таблицами договоров и нарядов.
	// Дилеры печатают Акты, у них нет и не должно быть прав на эти документы.
	// } Васильев Александр Леонидович [22.06.2015]
	
	ФормСтрока = "Л = ru_RU; ДП = Истина";
	ПарПредмета="рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 0";
	Спецификация = Ссылка;
	ДоговорСсылка = Документы.Спецификация.ПолучитьДоговор(Спецификация);
	
	Макет = Документы.Спецификация.ПолучитьМакет("АктДоставкаСборка");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	докСпецификация.Дата,
	|	докСпецификация.Ссылка,
	|	докСпецификация.Подразделение,
	|	докСпецификация.ДовозОсуществил КАК Экспедитор,
	|	докСпецификация.Подразделение.Организация.ПолноеНаименование КАК ПолноеНаименование,
	|	докСпецификация.Монтажник,
	|	докСпецификация.Технолог КАК Инженер,
	|	докСпецификация.Номер КАК НомерСпецификации,
	|	докСпецификация.ПакетУслугИзделия КАК Изделие,
	|	ПРЕДСТАВЛЕНИЕ(Договор.Ссылка) КАК Договор,
	|	Договор.Спецификация.Контрагент КАК ФИОКлиента,
	|	Договор.Офис КАК АдресОфиса,
	|	Договор.Автор КАК Дизайнер,
	|	Договор.Дата КАК ДатаДоговора,
	|	Договор.Номер КАК НомерДоговора,
	|	Договор.СуммаДокумента КАК СуммаДокумента,
	|	Договор.Спецификация.АдресМонтажа КАК АдресМонтажа,
	|	Договор.Спецификация.Контрагент.Телефон КАК Телефон,
	|	Договор.Спецификация.Контрагент.ТелефонДополнительный КАК ТелефонДополнительный,
	|	НарядЗаданиеСписокСпецификаций.Ссылка.ДатаИзготовления,
	|	НарядЗаданиеСписокСпецификаций.Ссылка.Номер КАК НомерНаряда,
	|	НарядЗаданиеСписокСпецификаций.Ссылка.Дата КАК ДатаНаряда
	|ИЗ
	|	Документ.Спецификация КАК докСпецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Договор КАК Договор
	|		ПО докСпецификация.Ссылка = Договор.Спецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НарядЗадание.СписокСпецификаций КАК НарядЗаданиеСписокСпецификаций
	|		ПО (НарядЗаданиеСписокСпецификаций.Спецификация = докСпецификация.Ссылка)
	|			И (НарядЗаданиеСписокСпецификаций.Ссылка.Проведен)
	|ГДЕ
	|	докСпецификация.Ссылка = &Ссылка";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	//////////////////////////
	// Доставка
	
	ОбластьТело = Макет.ПолучитьОбласть("Тело");
	
	ОбластьТело.Параметры.Заполнить(Выборка);
	ОбластьТело.Параметры.ДатаДоговора = Формат(Выборка.ДатаДоговора, "ДЛФ=DD");
	ОбластьТело.Параметры.ДатаДоставки = Формат(Выборка.Дата, "ДЛФ=DD");
	ТабДок.Вывести(ОбластьТело);
	
КонецПроцедуры

Процедура ПечатьСпецификации_ВывестиШапку(Спецификация, ТабДок, НазваниеЗоны)
	
	Макет = Документы.Спецификация.ПолучитьМакет("Спецификация");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	Логотип = ЛексСервер.ПолучитьЛоготипСервер(Спецификация);
	ДокументОснование = Спецификация.ДокументОснование;
	ЭтоДилер = ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();
	
	НомерВНаряде = "";
	
	Если НЕ ЭтоДилер Тогда
		
		ЗапросНаряд = Новый Запрос;
		ЗапросНаряд.УстановитьПараметр("Спецификация", Спецификация);
		ЗапросНаряд.Текст =
		"ВЫБРАТЬ
		|	Список.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.НарядЗадание.СписокСпецификаций КАК Список
		|ГДЕ
		|	Список.Спецификация = &Спецификация";
		
		РезультатНаряд = ЗапросНаряд.Выполнить().Выбрать();
		
		Если РезультатНаряд.Количество() > 0 Тогда
			РезультатНаряд.Следующий();
			НомерВНаряде = "№ "+РезультатНаряд.НомерСтроки;	
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапросФ = Новый Запрос;
	ЗапросФ.УстановитьПараметр("Документ", Спецификация);
	ЗапросФ.УстановитьПараметр("ДокументОснование", Спецификация.ДокументОснование);
	ЗапросФ.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Вид КАК ВидФайла
	|ИЗ
	|	Справочник.ФайлыЛекс КАК Файлы
	|ГДЕ
	|	((ВЫРАЗИТЬ(Файлы.ВладелецФайла КАК Документ.Спецификация)) = &Документ
	|			ИЛИ (ВЫРАЗИТЬ(Файлы.ВладелецФайла КАК Документ.Замер)) = &ДокументОснование)
	|	И НЕ Файлы.ПометкаУдаления";
	
	КоличествоПрикрепленныхФайлов = ЗапросФ.Выполнить().Выбрать().Количество();
	
	Договор = ПолучитьДоговор(Спецификация);
	СтруктураНаряда = ПолучитьНарядЗадание(Спецификация);
	НарядЗадание = ?(ТипЗнч(СтруктураНаряда) = Тип("Структура"), "№ "+ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтруктураНаряда.Номер), "");
	НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
	ОбластьЗаголовок.Параметры.СтрокаСрочный = ?(Спецификация.Срочный,"СРОЧНЫЙ","");
	ОбластьЗаголовок.Параметры.НазваниеЗоны = НазваниеЗоны;
	
	Если ТипЗнч(Логотип) = Тип("ДвоичныеДанные") Тогда
		ОбластьЗаголовок.Рисунки.К1.Картинка = Новый Картинка(Логотип);
		ОбластьЗаголовок.Рисунки.К1.ВыводитьНаПечать = Истина;
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Спецификация.Номер);
	ОбластьЗаголовок.Параметры.Договор = "" + Договор;
	ОбластьЗаголовок.Параметры.Адрес = "" + Спецификация.АдресМонтажа;
	ОбластьЗаголовок.Параметры.Комментарий = Спецификация.Комментарий;
	ОбластьЗаголовок.Параметры.НарядЗадание = НарядЗадание;
	ОбластьЗаголовок.Параметры.Автор = Спецификация.Автор;
	ОбластьЗаголовок.Параметры.Подразделение = Спецификация.Подразделение;
	ОбластьЗаголовок.Параметры.Контрагент = Спецификация.Контрагент;
	
	Если ЗначениеЗаполнено(НарядЗадание) Тогда
		ОбластьЗаголовок.Параметры.ДатаИзготовления = Формат(СтруктураНаряда.ДатаИзготовления,"ДФ=dd.MM.yyyy");	
	Иначе
		ОбластьЗаголовок.Параметры.ДатаИзготовления = "";
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.НадписьУпаковка = ?(Спецификация.Упаковка,"УПАКОВАТЬ","");
	ОбластьЗаголовок.Параметры.КоличествоФайлов = КоличествоПрикрепленныхФайлов;
	ОбластьЗаголовок.Параметры.НомерВНаряде = НомерВНаряде; 
	
	Если Спецификация.ПакетУслуг = Перечисления.ПакетыУслуг.СамовывозОтПроизводителя Тогда
		ОбластьЗаголовок.Рисунки.Удалить(ОбластьЗаголовок.Рисунки.ПодЗаказКартинка);
	Иначе
		ОбластьЗаголовок.Параметры.УслугаДоставки = Спецификация.ПакетУслуг;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Процедура ПечатьСпецификации_Материалы(Спецификация, ТабДок, НазваниеЗоны)
	
	Макет = Документы.Спецификация.ПолучитьМакет("Спецификация");
	
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьКоличествоДеталей = Макет.ПолучитьОбласть("КоличествоДеталей");
	ОбластьИтогФасады = Макет.ПолучитьОбласть("ИтогФасады");
	ОбластьИтогСтекла = Макет.ПолучитьОбласть("ИтогСтекла");
	
	ОбластьШапкаФасады = Макет.ПолучитьОбласть("ШапкаФасады");
	ОбластьСтрокаФасады = Макет.ПолучитьОбласть("СтрокаФасады");
	
	ОбластьШапкаЛДСП = Макет.ПолучитьОбласть("ШапкаЛДСП");
	ОбластьСтрокаЛДСП = Макет.ПолучитьОбласть("СтрокаЛДСП");
	
	ОбластьШапкаСтекла = Макет.ПолучитьОбласть("ШапкаСтекла");
	ОбластьСтрокаСтекла = Макет.ПолучитьОбласть("СтрокаСтекла");
	
	ОбластьШапкаКарСтяжка = Макет.ПолучитьОбласть("КарСтяжкаШапка");
	ОбластьШапкаПуфики = Макет.ПолучитьОбласть("ПуфикиШапка");
	ОбластьСтрокаПуфики = Макет.ПолучитьОбласть("ПуфикиСтрока");
	
	ЦеховыеЗоны = ПолучитьЦеховыеЗоны(НазваниеЗоны);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("ЦеховыеЗоны", ЦеховыеЗоны);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокДеталей.ВидДетали КАК ВидДетали,
	|	СписокДеталей.ВидДетали.Наименование КАК ВидДеталиНаименование,
	|	СписокДеталей.Ссылка КАК Ссылка,
	|	СписокДеталей.НомерСтроки КАК НомерСтроки,
	|	СписокДеталей.ВыборМебельнойКромкиСверху,
	|	СписокДеталей.ВыборМебельнойКромкиСлева,
	|	СписокДеталей.ВыборМебельнойКромкиСнизу,
	|	СписокДеталей.ВыборМебельнойКромкиСправа,
	|	СписокДеталей.ВысотаДетали,
	|	СписокДеталей.ДлинаКривогоПила,
	|	СписокДеталей.Кант,
	|	СписокДеталей.Количество,
	|	СписокДеталей.Комментарий,
	|	СписокДеталей.КривойПилСверху,
	|	СписокДеталей.КривойПилСлева,
	|	СписокДеталей.КривойПилСнизу,
	|	СписокДеталей.КривойПилСправа,
	|	СписокДеталей.Кромка045мм,
	|	СписокДеталей.Кромка2мм,
	|	СписокДеталей.Номенклатура,
	|	СписокДеталей.НоменклатураДляСклеивания,
	|	СписокДеталей.ДопНоменклатураДляСклеивания,
	|	СписокДеталей.ПереключательКромкаСверху,
	|	СписокДеталей.ПереключательКромкаСлева,
	|	СписокДеталей.ПереключательКромкаСнизу,
	|	СписокДеталей.ПереключательКромкаСправа,
	|	СписокДеталей.РадиусЛевоВерх,
	|	СписокДеталей.РадиусЛевоНиз,
	|	СписокДеталей.РадиусПравоВерх,
	|	СписокДеталей.РадиусПравоНиз,
	|	СписокДеталей.СоблюдениеТекстуры,
	|	СписокДеталей.Срез,
	|	СписокДеталей.ШиринаДетали,
	|	СписокДеталей.Обтачивать,
	|	СписокДеталей.НеТорцевать,
	|	СписокДеталей.Периметр,
	|	СписокДеталей.РадиусФасада,
	|	СписокДеталей.ОтверстийПодРучку,
	|	СписокДеталей.Петли,
	|	СписокДеталей.КоличествоПетель,
	|	СписокДеталей.ДиаметрПазов,
	|	СписокДеталей.ДетальРедактированная КАК РедактированнаяДеталь,
	|	СписокДеталей.УниверсальнаяКромка,
	|	СписокДеталей.НомерИзделия,
	|	ВЫБОР
	|		КОГДА СписокДеталей.Ручка.КраткоеНаименование > """"
	|			ТОГДА СписокДеталей.Ручка.КраткоеНаименование
	|		ИНАЧЕ СписокДеталей.Ручка
	|	КОНЕЦ КАК Ручка,
	|	СписокДеталей.Ручка КАК РучкаСсылка,
	|	СписокДеталей.Ссылка.Комментарий КАК ОбщийКомментарий,
	|	СписокДеталей.Ссылка.Автор,
	|	СписокДеталей.Ссылка.Подразделение,
	|	СписокДеталей.Ссылка.Номер,
	|	СписокДеталей.Ссылка.АдресМонтажа,
	|	СписокДеталей.Ссылка.Контрагент,
	|	СписокДеталей.Ссылка.Изделие.ВидИзделия КАК ВидИзделия,
	|	ВЫБОР
	|		КОГДА СписокДеталей.РасположениеПазовИРучкиНаФасадах = ЗНАЧЕНИЕ(Справочник.РасположениеПазовИРучкиНаФасадах.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ СписокДеталей.РасположениеПазовИРучкиНаФасадах.ПоложениеПазов
	|	КОНЕЦ КАК РасложениеПазов,
	|	ВЫБОР
	|		КОГДА СписокДеталей.РасположениеПазовИРучкиНаФасадах = ЗНАЧЕНИЕ(Справочник.РасположениеПазовИРучкиНаФасадах.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ СписокДеталей.РасположениеПазовИРучкиНаФасадах.ПоложениеРучки
	|	КОНЕЦ КАК ПоложениеРучки,
	|	ЕСТЬNULL(СписокПоКаталогу.Сборка, ЛОЖЬ) КАК Сборка,
	|	ВЫБОР
	|		КОГДА НЕ СписокМатЗаказчика.Ссылка ЕСТЬ NULL
	|			ТОГДА СписокМатЗаказчика.Комментарий
	|		КОГДА НЕ СписокПодЗаказ.Ссылка ЕСТЬ NULL
	|			ТОГДА СписокПодЗаказ.Комментарий
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КомПодЗаказНомДляСклеивания
	|ИЗ
	|	Документ.Спецификация.СписокДеталей КАК СписокДеталей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокИзделийПоКаталогу КАК СписокПоКаталогу
	|		ПО СписокДеталей.НомерИзделия = СписокПоКаталогу.НомерСтроки
	|			И СписокДеталей.Ссылка = СписокПоКаталогу.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокМатериаловПодЗаказ КАК СписокПодЗаказ
	|		ПО СписокДеталей.Ссылка = СписокПодЗаказ.Ссылка
	|			И СписокДеталей.НоменклатураДляСклеивания = СписокПодЗаказ.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокМатериаловЗаказчика КАК СписокМатЗаказчика
	|		ПО СписокДеталей.Ссылка = СписокМатЗаказчика.Ссылка
	|			И СписокДеталей.НоменклатураДляСклеивания = СписокМатЗаказчика.Номенклатура
	|ГДЕ
	|	СписокДеталей.Ссылка = &Спецификация
	|	И СписокДеталей.РадиусФасада = """"
	|	И НЕ СписокДеталей.ВидДетали.ЭтоФасад
	|	И СписокДеталей.ВидДетали.ЦеховаяЗона В(&ЦеховыеЗоны)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДеталиНаименование,
	|	НомерСтроки
	|ИТОГИ ПО
	|	ВидДетали";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ВидДетали = Выборка.ВидДетали;
		ДанныеДетали = ПолучитьДанныеДетали(ВидДетали);
		ЦеховаяЗона = ДанныеДетали.ЦеховаяЗона;
		
		Пуфик = ДанныеДетали.ЭтоПуфик;
		КарСтяжка = ДанныеДетали.ЭтоКаретнаяСтяжка;
		
		ЕстьЛДСП = Ложь;
		ЕстьДВП = Ложь;
		ЕстьМДФ = Ложь;
		ЕстьАГТПанель = Ложь;
		ЕстьСтолешница = Ложь;
		ЕстьПристенок = Ложь;
		ЭтоПластик = ДанныеДетали.Пластик;
		
		Для Каждого Стр Из ДанныеДетали.НомГруппы Цикл
			
			Если Стр.Значение.ПолеВыбора = "Текстура" Тогда
				
				Если Стр.Значение.Группа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.ЛДСП) 
					ИЛИ Стр.Значение.Группа = Справочники.НоменклатурныеГруппы.ЛДСП Тогда
					
					ЕстьЛДСП = Истина;
					
				КонецЕсли;
				
				Если Стр.Значение.Группа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.ДВП) 
					ИЛИ Стр.Значение.Группа = Справочники.НоменклатурныеГруппы.ДВП Тогда
					
					ЕстьДВП = Истина;
					
				КонецЕсли;
				
				Если Стр.Значение.Группа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.МДФ) 
					ИЛИ Стр.Значение.Группа = Справочники.НоменклатурныеГруппы.МДФ Тогда
					
					ЕстьМДФ = Истина;
					
				КонецЕсли;
				
				Если Стр.Значение.Группа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.АГТПанель) 
					ИЛИ Стр.Значение.Группа = Справочники.НоменклатурныеГруппы.АГТПанель Тогда
					
					ЕстьАГТПанель = Истина;
					
				КонецЕсли;
				
				Если Стр.Значение.Группа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.Столешница) 
					ИЛИ Стр.Значение.Группа = Справочники.НоменклатурныеГруппы.Столешница Тогда
					
					ЕстьСтолешница = Истина;
					
				КонецЕсли;
				
				Если Стр.Значение.Группа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.Пристенок) 
					ИЛИ Стр.Значение.Группа = Справочники.НоменклатурныеГруппы.Пристенок Тогда
					
					ЕстьПристенок = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		МатериалЛДСП = (НЕ ДанныеДетали.ЭтоФасад) И ЕстьЛДСП;
		МатериалДВП = (НЕ МатериалЛДСП) И ЕстьДВП;  
		
		Если ДанныеДетали.ЭтоФасад Тогда
			
			ОбластьШапка = ОбластьШапкаФасады;
			ОбластьСтрока = ОбластьСтрокаФасады;
			ОбластьШапка.Параметры.ВидФасада = ВидДетали;
			
		ИначеЕсли (МатериалЛДСП ИЛИ ЕстьДВП ИЛИ ЕстьМДФ ИЛИ ЕстьАГТПанель ИЛИ ЕстьСтолешница ИЛИ ЕстьПристенок ИЛИ ЭтоПластик) 
			И (НЕ ДанныеДетали.ЭтоФасад) И НЕ Пуфик И НЕ КарСтяжка Тогда
			
			ОбластьШапка = ОбластьШапкаЛДСП;
			ОбластьСтрока = ОбластьСтрокаЛДСП;
			ОбластьШапка.Параметры.ВидДетали = ВидДетали;
			
		ИначеЕсли ДанныеДетали.ЭтоСтекло Тогда
			
			ОбластьШапка = ОбластьШапкаСтекла;
			ОбластьСтрока = ОбластьСтрокаСтекла;
			
		ИначеЕсли Пуфик Тогда
			
			ОбластьШапка = ОбластьШапкаПуфики;
			ОбластьСтрока = ОбластьСтрокаПуфики;
			
		ИначеЕсли КарСтяжка Тогда
			
			ОбластьШапка = ОбластьШапкаКарСтяжка;
			ОбластьСтрока = ОбластьСтрокаПуфики;
				
		КонецЕсли;
		
		Первый = Истина;
		
		КоличествоДеталей = 0;
		Фасад = Ложь;
		
		ВыборкаПоМатериалам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоМатериалам.Следующий() Цикл
			
			УниверсальнаяКромка = ВыборкаПоМатериалам.УниверсальнаяКромка;
			
			ШиринаДетали = ВыборкаПоМатериалам.ШиринаДетали;
			ВысотаДетали = ВыборкаПоМатериалам.ВысотаДетали;
			
			ШиринаТекстура = 0;
			ВысотаТекстура = 0;
			ШиринаДопНоменклатура = 0;
			ВысотаДопНоменклатура = 0;
			
			Если ДанныеДетали.ШиринаТекстура <> "" Тогда
				
				Попытка
					Выполнить("ШиринаТекстура = " + ДанныеДетали.ШиринаТекстура);
				Исключение
					Сообщить("Ошибка при формировании формулы: №006");
				КонецПопытки;
				
			КонецЕсли;
			
			Если ДанныеДетали.ВысотаТекстура <> "" Тогда
				
				Попытка
					Выполнить("ВысотаТекстура = " + ДанныеДетали.ВысотаТекстура);
				Исключение
					Сообщить("Ошибка при формировании формулы: №007");
				КонецПопытки;
				
			КонецЕсли;
			
			Если ДанныеДетали.ШиринаДопНоменклатура <> "" Тогда
				
				Попытка
					Выполнить("ШиринаДопНоменклатура = " + ДанныеДетали.ШиринаДопНоменклатура);
				Исключение
					Сообщить("Ошибка при формировании формулы: №008");
				КонецПопытки;
				
			КонецЕсли;
			
			Если ДанныеДетали.ВысотаДопНоменклатура <> "" Тогда
				
				Попытка
					Выполнить("ВысотаДопНоменклатура = " + ДанныеДетали.ВысотаДопНоменклатура);
				Исключение
					Сообщить("Ошибка при формировании формулы: №009");
				КонецПопытки;
				
			КонецЕсли;
			
			Если Пуфик ИЛИ КарСтяжка Тогда
				
				ОбластьСтрока.Параметры.НомерСтроки = ВыборкаПоМатериалам.НомерСтроки;
				ОбластьСтрока.Параметры.Количество = ВыборкаПоМатериалам.Количество;
				
				ОбластьСтрока.Параметры.ШиринаДеталиЛДСП = ШиринаТекстура;
				ОбластьСтрока.Параметры.ВысотаДеталиЛДСП = ВысотаТекстура;
				ОбластьСтрока.Параметры.ШиринаДеталиКожа = ШиринаДопНоменклатура;
				ОбластьСтрока.Параметры.ВысотаДеталиКожа = ВысотаДопНоменклатура;
				ОбластьСтрока.Параметры.НоменклатураЛДСП = ВыборкаПоМатериалам.Номенклатура;
				ОбластьСтрока.Параметры.НоменклатураКожа = ВыборкаПоМатериалам.НоменклатураДляСклеивания;
				ОбластьСтрока.Параметры.Комментарий = ВыборкаПоМатериалам.Комментарий + ВыборкаПоМатериалам.КомПодЗаказНомДляСклеивания;
				
				Если Первый Тогда
					ТабДок.Вывести(ОбластьПустаяСтрока);
					ТабДок.Вывести(ОбластьШапка);
					Первый = Ложь;
				КонецЕсли;
				
				ТабДок.Вывести(ОбластьСтрока);
				
			Иначе
				
				Если НЕ ((МатериалЛДСП ИЛИ МатериалДВП) 
					И ЗначениеЗаполнено(ВыборкаПоМатериалам.НомерИзделия) 
					И ВыборкаПоМатериалам.Сборка 
					И ВыборкаПоМатериалам.ВидИзделия <> Перечисления.ВидыИзделий.ШкафКупе) Тогда
					
					ТорцеваяЛента = Новый Структура;
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСверху", ВыборкаПоМатериалам.ВыборМебельнойКромкиСверху);
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСнизу", ВыборкаПоМатериалам.ВыборМебельнойКромкиСнизу);
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСлева", ВыборкаПоМатериалам.ВыборМебельнойКромкиСлева);
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСправа", ВыборкаПоМатериалам.ВыборМебельнойКромкиСправа);
					Размеры = ПолучитьРазмерыМатериалов(ВыборкаПоМатериалам.Номенклатура, ТорцеваяЛента);
					КромкаПоШирине = Размеры.ВычитаемоеДляШирины;
					КромкаПоВысоте = Размеры.ВычитаемоеДляВысоты;
					
					ОбластьСтрока.Параметры.Заполнить(ВыборкаПоМатериалам);
					
					Фасад = ДанныеДетали.ЭтоФасад;
					
					КоличествоДеталей = КоличествоДеталей + ВыборкаПоМатериалам.Количество;
					
					Если ЗначениеЗаполнено(ВыборкаПоМатериалам.РучкаСсылка) И Фасад Тогда
						
						ОбластьСтрока.Параметры.ДлинаРучки = ВыборкаПоМатериалам.РучкаСсылка.ДлинаДетали;
						
					КонецЕсли;
					
					ОбластьСтрока.Параметры.ШиринаДетали = ОКР(ВыборкаПоМатериалам.ШиринаДетали + КромкаПоШирине);
					ОбластьСтрока.Параметры.ВысотаДетали = ОКР(ВыборкаПоМатериалам.ВысотаДетали + КромкаПоВысоте);
					
					Если Первый Тогда
						ТабДок.Вывести(ОбластьПустаяСтрока);
						ТабДок.Вывести(ОбластьШапка);
						Первый = Ложь;
					КонецЕсли;
					
					ТабДок.Вывести(ОбластьСтрока);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПечатьСпецификации_ВывестиМатериалПодЗаказ(ТабДок,Спецификация)
	
	Если Спецификация.СписокМатериаловПодЗаказ.Количество()>0 Тогда
		
		Первый = Истина;
		
		Для Каждого Строка ИЗ Спецификация.СписокМатериаловПодЗаказ Цикл
			
			Если Строка.Комментарий <> "" Тогда
				
				Если Первый Тогда
					Макет = Документы.Спецификация.ПолучитьМакет("Спецификация");
					ОбластьШапкаПодЗаказ = Макет.ПолучитьОбласть("МатериалПодЗаказШапка");
					ОбластьШапкаПодЗаказ.Параметры.НазваниеШапки = "Материал под заказ";
					ТабДок.Вывести(ОбластьШапкаПодЗаказ);
					
					Первый = Ложь;	
				КонецЕсли;
				
				ОбластьСтрокаПодЗаказ = Макет.ПолучитьОбласть("МатериалПодЗаказСтрока");
				ОбластьСтрокаПодЗаказ.Параметры.Заполнить(Строка);
				ТабДок.Вывести(ОбластьСтрокаПодЗаказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьСпецификации_Услуги(Спецификация, ТабДок, НазваниеЗоны)
	
	Макет = Документы.Спецификация.ПолучитьМакет("Спецификация");	
	
	ЦеховыеЗоны = ПолучитьЦеховыеЗоны(НазваниеЗоны);
	
	ЗапросПоУслугам = Новый Запрос;
	ЗапросПоУслугам.УстановитьПараметр("Ссылка", Спецификация);
	ЗапросПоУслугам.УстановитьПараметр("ЦеховыеЗоны", ЦеховыеЗоны);
	ЗапросПоУслугам.Текст =
	"ВЫБРАТЬ
	|	СпецификацияСписокНоменклатуры.Номенклатура КАК Номенклатура,
	|	СУММА(СпецификацияСписокНоменклатуры.Количество) КАК Количество,
	|	СУММА(СпецификацияСписокНоменклатуры.ЗарплатаЦеха) КАК Сумма,
	|	СпецификацияСписокНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.Спецификация.СписокНоменклатуры КАК СпецификацияСписокНоменклатуры
	|ГДЕ
	|	СпецификацияСписокНоменклатуры.Ссылка = &Ссылка
	|	И СпецификацияСписокНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|	И СпецификацияСписокНоменклатуры.Номенклатура.ЦеховаяЗона В(&ЦеховыеЗоны)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацияСписокНоменклатуры.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпецификацияСписокНоменклатуры.Номенклатура.Наименование";
	
	ВыборкаУслуг = ЗапросПоУслугам.Выполнить().Выбрать();
	
	Если ВыборкаУслуг.Количество() > 0 Тогда
		
		ОбластьШапкаУслуг = Макет.ПолучитьОбласть("ШапкаУслуги");
		ОбластьСтрокаУслуг = Макет.ПолучитьОбласть("СтрокаУслуги");
		ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
		
		ТабДок.Вывести(ОбластьПустаяСтрока);
		ТабДок.Вывести(ОбластьШапкаУслуг);
		
		НомерСтроки = 0;
		
		Пока ВыборкаУслуг.Следующий() Цикл
			
			Если ВыборкаУслуг.Сумма > 0 Тогда
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьСтрокаУслуг.Параметры.Заполнить(ВыборкаУслуг);
				ОбластьСтрокаУслуг.Параметры.НомерСтроки = НомерСтроки;
				
				ТабДок.Вывести(ОбластьСтрокаУслуг);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьСпецификации_МатериалЗаказчика(Спецификация, ТабДок)
	
	Если Спецификация.СписокМатериаловЗаказчика.Количество()>0 Тогда
		
		Первый = Истина;
		
		Для Каждого Строка ИЗ Спецификация.СписокМатериаловЗаказчика Цикл
			
			Если Строка.Комментарий <> "" Тогда
				
				Если Первый Тогда
					
					Макет = Документы.Спецификация.ПолучитьМакет("Спецификация");
					ОбластьШапкаПодЗаказ = Макет.ПолучитьОбласть("МатериалПодЗаказШапка");
					ОбластьШапкаПодЗаказ.Параметры.НазваниеШапки = "Материал заказчика";
					ТабДок.Вывести(ОбластьШапкаПодЗаказ);
					
					Первый = Ложь;
					
				КонецЕсли;
				
				ОбластьСтрокаПодЗаказ = Макет.ПолучитьОбласть("МатериалПодЗаказСтрока");
				ОбластьСтрокаПодЗаказ.Параметры.Заполнить(Строка);
				ТабДок.Вывести(ОбластьСтрокаПодЗаказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьСпецификации_Фасады(Спецификация, ТабДок, НазваниеЗоны)
	
	ЦеховыеЗоны = ПолучитьЦеховыеЗоны(НазваниеЗоны);
	ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.Стеколка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("ЦеховыеЗоны", ЦеховыеЗоны);
	
	ТаблицаПетли = Спецификация.ПетлиДетали.Выгрузить();
	
	Если НазваниеЗоны = "Зона ОТК" Тогда
		Запрос.УстановитьПараметр("ПоказыватьВСборе", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПоказыватьВСборе", Истина);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Список.НомерИзделия,
	|	Список.НомерСтроки КАК НомерДетали,
	|	Список.ВидДетали,
	|	Список.Номенклатура КАК НоменклатураВставки,
	|	Список.ВыборМебельнойКромкиСверху КАК КромкаСверху,
	|	Список.ВыборМебельнойКромкиСлева КАК КромкаСлева,
	|	Список.ВыборМебельнойКромкиСнизу КАК КромкаСнизу,
	|	Список.ВыборМебельнойКромкиСправа КАК КромкаСправа,
	|	Список.Количество,
	|	Список.ШиринаДетали,
	|	Список.ВысотаДетали,
	|	Список.РадиусФасада,
	|	Список.Ручка,
	|	Список.Петли,
	|	Список.РасположениеПазовИРучкиНаФасадах КАК ПазыИРучки,
	|	Список.Комментарий КАК Комментарий,
	|	Список.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	Список.Номенклатура.ПоперечнаяТекстура КАК ПоперечнаяТекстура,
	|	Список.МежцентровоеРасстояние КАК МежцентровоеРасстояние,
	|	Список.КромкаДляСборнойРамки,
	|	Список.КромкаДляСборнойРамки.ГлубинаДетали КАК ГлубинаКромкиДляСборнойРамки,
	|	Список.ШиринаСборнойРамки,
	|	Список.ИдентификаторПетли
	|ИЗ
	|	Документ.Спецификация.СписокДеталей КАК Список
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокИзделийПоКаталогу КАК ПоКаталогу
	|		ПО Список.НомерИзделия = ПоКаталогу.НомерСтроки
	|			И Список.Ссылка = ПоКаталогу.Ссылка
	|ГДЕ
	|	Список.Ссылка = &Спецификация
	|	И Список.ВидДетали.ЦеховаяЗона В(&ЦеховыеЗоны)
	|	И Список.ВидДетали.ЭтоФасад
	|	И ВЫБОР
	|			КОГДА &ПоказыватьВСборе
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ЕСТЬNULL(ПоКаталогу.Сборка, ЛОЖЬ)
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНаименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Макет = Документы.Спецификация.ПолучитьМакет("Спецификация");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	Заголовок = Макет.ПолучитьОбласть("ЗаголовокФасадСтекляный");
	
	Если Выборка.Количество() > 0 Тогда
		
		ТабДок.Вывести(ОбластьПустаяСтрока);
		ТабДок.Вывести(Заголовок);
		
	КонецЕсли;
	
	Очередь = 1;
	
	Пока Выборка.Следующий() Цикл
		
		Если Очередь%2 Тогда			
			ОбластьСтрокаЯчейка = Макет.ПолучитьОбласть("ОбластьФасадыЛево");
			ОблКартинка = ОбластьСтрокаЯчейка.Рисунки.КартинкаФасадЛево;
			ОблКартинкаТекстура = ОбластьСтрокаЯчейка.Рисунки.КартинкаТекстураЛево;
		Иначе
			ОбластьСтрокаЯчейка = Макет.ПолучитьОбласть("ОбластьФасадыПраво");
			ОблКартинка = ОбластьСтрокаЯчейка.Рисунки.КартинкаФасадПраво;
			ОблКартинкаТекстура = ОбластьСтрокаЯчейка.Рисунки.КартинкаТекстураПраво;
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ОбластьСтрокаЯчейка.Параметры.Заполнить(Выборка);
		СборныйРамочныйФасад = ЗначениеЗаполнено(Выборка.КромкаДляСборнойРамки);
		
		Если СборныйРамочныйФасад Тогда
			
			ДопРазмер = Выборка.ШиринаСборнойРамки * 2 - 24;
			
			ОбластьСтрокаЯчейка.Параметры.ВысотаДетали = Выборка.ВысотаДетали + ДопРазмер;
			ОбластьСтрокаЯчейка.Параметры.ШиринаДетали = Выборка.ШиринаДетали + ДопРазмер;
			
		Иначе
			
			ОбластьСтрокаЯчейка.Параметры.ВысотаДетали = Выборка.ВысотаДетали + ?(ЗначениеЗаполнено(Выборка.КромкаСверху),Выборка.КромкаСверху.ГлубинаДетали,0) + ?(ЗначениеЗаполнено(Выборка.КромкаСнизу),Выборка.КромкаСнизу.ГлубинаДетали,0);
			ОбластьСтрокаЯчейка.Параметры.ШиринаДетали = Выборка.ШиринаДетали + ?(ЗначениеЗаполнено(Выборка.КромкаСлева),Выборка.КромкаСлева.ГлубинаДетали,0) + ?(ЗначениеЗаполнено(Выборка.КромкаСправа),Выборка.КромкаСправа.ГлубинаДетали,0);
			
		КонецЕсли;
		СтрокаРамка = "";
		Мас = Новый Массив();
		Мас.Добавить(Выборка.КромкаСверху);
		Мас.Добавить(Выборка.КромкаСнизу);
		Мас.Добавить(Выборка.КромкаСлева);
		Мас.Добавить(Выборка.КромкаСправа);
		
		Для Каждого Кромка Из Мас Цикл
			СтрокаРамка = ?(Найти(СтрокаРамка, Строка(Кромка)) > 0, СтрокаРамка, СтрокаРамка + Строка(Кромка));	
		КонецЦикла;
		
		ОбластьСтрокаЯчейка.Параметры.НоменклатураРамки = СтрокаРамка;
		
		КартинкаТекстура = ?(Выборка.ПоперечнаяТекстура,БиблиотекаКартинок.ТекстураПраво,БиблиотекаКартинок.ТекстураВерх); 
		ОблКартинкаТекстура.Картинка = Новый Картинка(КартинкаТекстура.ПолучитьДвоичныеДанные());
		
		Картинка = Неопределено;
		ПазыИРучки = Выборка.ПазыИРучки;
		
		Если ЗначениеЗаполнено(ПазыИРучки) Тогда
			Если ЗначениеЗаполнено(ПазыИРучки.ИмяКартинки) Тогда
				Картинка = БиблиотекаКартинок[ПазыИРучки.ИмяКартинки];
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Картинка) Тогда
			ОблКартинка.Картинка = Новый Картинка(Картинка.ПолучитьДвоичныеДанные());					
		КонецЕсли;
		
		ДлинаРучки = ?(ЗначениеЗаполнено(Выборка.Ручка),"Ручка " + Строка(Выборка.Ручка.ДлинаДетали)+" мм",0);
		
		Если НЕ ЗначениеЗаполнено(Выборка.Ручка) И ЗначениеЗаполнено(Выборка.МежцентровоеРасстояние) Тогда
			ДлинаРучки = Строка(Выборка.МежцентровоеРасстояние) + " мм";
		КонецЕсли;
		
		СтрокиПетли = ТаблицаПетли.НайтиСтроки(Новый Структура("ИдентификаторДетали", Выборка.ИдентификаторПетли));	
		
		Если СтрокиПетли.Количество() > 0 Тогда
			
			Сторона = СтрокиПетли[0].Сторона;
			КоличествоПазов = СтрокиПетли.Количество();
			
			ПИнд = 1;
			
			Для Каждого СтрокаПетли Из СтрокиПетли Цикл
				
				ОбластьСтрокаЯчейка.Параметры["Петля" + ПИнд] = СтрокаПетли.Координата; 
				
				ПИнд = ПИнд + 1;
				
			КонецЦикла;
			
			
			Если Сторона = Перечисления.Стороны.Справа Тогда
				ОбластьСтрокаЯчейка.Параметры.ПравоЦентр = КоличествоПазов;
				ОбластьСтрокаЯчейка.Параметры.ЛевоЦентр = ДлинаРучки;
			КонецЕсли;
			
			Если Сторона = Перечисления.Стороны.Слева Тогда
				ОбластьСтрокаЯчейка.Параметры.ЛевоЦентр = КоличествоПазов;
				ОбластьСтрокаЯчейка.Параметры.ПравоЦентр = ДлинаРучки;
			КонецЕсли;
			
			Если Сторона = Перечисления.Стороны.Сверху Тогда
				ОбластьСтрокаЯчейка.Параметры.ВерхЦентр = КоличествоПазов;
				ОбластьСтрокаЯчейка.Параметры.НизЦентр = ДлинаРучки;
			КонецЕсли;	
			
			Если Сторона = Перечисления.Стороны.Снизу Тогда
				ОбластьСтрокаЯчейка.Параметры.НизЦентр = КоличествоПазов;
				ОбластьСтрокаЯчейка.Параметры.ВерхЦентр = ДлинаРучки;
			КонецЕсли;		
			
		Иначе
			ОбластьСтрокаЯчейка.Параметры.ВерхЦентр = ДлинаРучки;
		КонецЕсли;
		
		Если Очередь%2 Тогда
			ТабДок.Вывести(ОбластьСтрокаЯчейка);
		Иначе
			ТабДок.Присоединить(ОбластьСтрокаЯчейка);
		КонецЕсли;
		
		Очередь = Очередь + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПечатьСпецификации_Комплектация(Спецификация, ТабДок)
	
	Макет = Документы.Спецификация.ПолучитьМакет("Спецификация");
	
	ВыборкаКомплектации = Документы.Спецификация.ПерезаполнитьКомплектацию(Спецификация);
	
	Если ВыборкаКомплектации.Количество() > 0 Тогда
		
		ОбластьШапкаКомплектации = Макет.ПолучитьОбласть("ШапкаКомплектация");
		ОбластьСтрокаКомплектации = Макет.ПолучитьОбласть("СтрокаКомплектация");
		
		ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
		
		ТабДок.Вывести(ОбластьПустаяСтрока);
		ТабДок.Вывести(ОбластьШапкаКомплектации);
		
		НомерСтроки = 0;
		
		Пока ВыборкаКомплектации.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтрокаКомплектации.Параметры.Заполнить(ВыборкаКомплектации);
			ОбластьСтрокаКомплектации.Параметры.ЕдиницаИзмерения = ВыборкаКомплектации.Номенклатура.ЕдиницаИзмерения;
			ОбластьСтрокаКомплектации.Параметры.НомерСтроки = НомерСтроки;
			
			ТабДок.Вывести(ОбластьСтрокаКомплектации);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьСпецификации_МерныйМатериал(ТабДок, Ссылка)
	
	// { Васильев Александр Леонидович [09.10.2015]
	// Сделать.
	// Убрать механизм кантов, удалить табличную часть МерныйМатериал.
	// Переделать всю эту корявую функцию. Стыдоба.
	// } Васильев Александр Леонидович [09.10.2015]
	
	Макет = Документы.Спецификация.ПолучитьМакет("Спецификация");
	ОбластьМерныйМатериалШапка = Макет.ПолучитьОбласть("МерныйМатериалШапка");
	ОбластьМерныйМатериалСтрока = Макет.ПолучитьОбласть("МерныйМатериалСтрока");
	
	ТЗМерныйМатериал = Ссылка.МерныйМатериал;
	ТЗКомплектация = Ссылка.Комплектация;
	
	ПечататьШапку = Ложь;
	
	Если ТЗКомплектация.Количество() <> 0 Тогда
		
		Для каждого Строка Из ТЗКомплектация Цикл
			
			Если Строка.Номенклатура.МестоОбработки = Перечисления.МестоОбработки.Цех Тогда
				
				ПечататьШапку= Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПечататьШапку = ПечататьШапку ИЛИ ТЗМерныйМатериал.Количество() > 0;
	
	Если ПечататьШапку Тогда
		
		ТабДок.Вывести(ОбластьМерныйМатериалШапка);
		
	КонецЕсли;
	
	Если ТЗМерныйМатериал.Количество() <> 0 Тогда
		
		Для каждого Строка Из ТЗМерныйМатериал Цикл
			ОбластьМерныйМатериалСтрока.Параметры.Заполнить(Строка);
			ОбластьМерныйМатериалСтрока.Параметры.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
			ОбластьМерныйМатериалСтрока.Параметры.ЦеховаяЗона = Строка.Номенклатура.ЦеховаяЗона;
			ТабДок.Вывести(ОбластьМерныйМатериалСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТЗКомплектация.Количество() <> 0 Тогда
		
		Для каждого Строка Из ТЗКомплектация Цикл
			
			Если Строка.Номенклатура.МестоОбработки = Перечисления.МестоОбработки.Цех Тогда
				ОбластьМерныйМатериалСтрока.Параметры.Заполнить(Строка);
				ОбластьМерныйМатериалСтрока.Параметры.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
				ОбластьМерныйМатериалСтрока.Параметры.ЦеховаяЗона = Строка.Номенклатура.ЦеховаяЗона;
				ТабДок.Вывести(ОбластьМерныйМатериалСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьСпецификации_Короба(Спецификация, ТабДок)
	
	Макет = Документы.Спецификация.ПолучитьМакет("Спецификация");	
	
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьШапкаКороба = Макет.ПолучитьОбласть("ШапкаКороба");
	ОбластьСтрокаКороба = Макет.ПолучитьОбласть("СтрокаКороба");
	
	ЗапросПоКоробам = Новый Запрос;
	ЗапросПоКоробам.УстановитьПараметр("Ссылка", Спецификация);
	ЗапросПоКоробам.Текст =
	"ВЫБРАТЬ
	|	Изделия.НомерСтроки КАК Номер,
	|	Изделия.ШиринаИзделия КАК Ширина,
	|	Изделия.ГлубинаИзделия КАК Глубина,
	|	Изделия.ВысотаИзделия КАК Высота,
	|	Изделия.Изделие КАК Изделие,
	|	Изделия.Комментарий КАК Комментарий,
	|	Изделия.Сборка КАК Сборка
	|ИЗ
	|	Документ.Спецификация.СписокИзделийПоКаталогу КАК Изделия
	|ГДЕ
	|	Изделия.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	
	ВыборкаКоробов = ЗапросПоКоробам.Выполнить().Выбрать();
	
	Если ВыборкаКоробов.Количество() > 0 Тогда
		
		ТабДок.Вывести(ОбластьПустаяСтрока);
		ТабДок.Вывести(ОбластьШапкаКороба);
		
		Пока ВыборкаКоробов.Следующий() Цикл
			
			ОбластьСтрокаКороба.Параметры.Заполнить(ВыборкаКоробов);
			ТабДок.Вывести(ОбластьСтрокаКороба);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьСпецификации_Двери(Спецификация, ТабДок)
	
	Макет = Документы.Спецификация.ПолучитьМакет("Спецификация");	
	
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьШапкаДвери = Макет.ПолучитьОбласть("ШапкаДвери");
	ОбластьСтрокаДвери = Макет.ПолучитьОбласть("СтрокаДвери");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Спецификация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокДверей.НомерСтроки КАК Номер,
	|	СписокДверей.Двери.АлюминПрофиль КАК Профиль,
	|	СписокДверей.Двери.Количество КАК Количество
	|ИЗ
	|	Документ.Спецификация.СписокДверей КАК СписокДверей
	|ГДЕ
	|	СписокДверей.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	
	ВыборкаДвери = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДвери.Количество() > 0 Тогда
		
		ТабДок.Вывести(ОбластьПустаяСтрока);
		ТабДок.Вывести(ОбластьШапкаДвери);
		
		Пока ВыборкаДвери.Следующий() Цикл
			
			ОбластьСтрокаДвери.Параметры.Заполнить(ВыборкаДвери);
			ТабДок.Вывести(ОбластьСтрокаДвери);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьСпецификации_Ящики(Спецификация, ТабДок, НазваниеЗоны)
	
	Если Спецификация.СписокЯщики.Количество() > 0 Тогда
		
		Макет = Документы.Спецификация.ПолучитьМакет("Спецификация");	
		
		ЗапросПоЯщикам = Новый Запрос;
		ЗапросПоЯщикам.УстановитьПараметр("Ссылка", Спецификация);
		
		Если НазваниеЗоны = "Зона Ящики" Тогда
			ЗапросПоЯщикам.УстановитьПараметр("ПоказыватьСобранные", Истина);	
		Иначе
			ЗапросПоЯщикам.УстановитьПараметр("ПоказыватьСобранные", Ложь);
		КонецЕсли;
		
		ЗапросПоЯщикам.Текст =
		"ВЫБРАТЬ
		|	Ящики.НомерИзделия,
		|	Ящики.Номенклатура КАК ЛДСП,
		|	Ящики.КромкаНоменклатура КАК Кромка,
		|	Ящики.НаправляющиеНоменклатура КАК Направляющие,
		|	Ящики.ДноНоменклатура КАК Дно,
		|	Ящики.ВысотаЯщика,
		|	Ящики.ГлубинаЯщика,
		|	Ящики.ФасадНоменклатура КАК ФасадНаполнение,
		|	Ящики.КромкаФасадНоменклатура КАК ФасадНаименование,
		|	Ящики.РучкаНоменклатура КАК Ручка,
		|	Ящики.КоличествоРучек КАК ФасадКоличествоРучек,
		|	Ящики.ВысотаФасад,
		|	Ящики.ШиринаФасад,
		|	Ящики.ВидФасада,
		|	Ящики.КоличествоЯщиков КАК КоличествоЯщиков,
		|	Ящики.КоличествоЯщиков КАК ФасадКоличество,
		|	Ящики.Комментарий,
		|	Ящики.ПроемЯщика КАК ПроемЯщика,
		|	Ящики.ШиринаЯщика КАК ШиринаЯщика,
		|	ЕСТЬNULL(ПоКаталогу.Сборка, ЛОЖЬ) КАК Сборка
		|ИЗ
		|	Документ.Спецификация.СписокЯщики КАК Ящики
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокИзделийПоКаталогу КАК ПоКаталогу
		|		ПО Ящики.НомерИзделия = ПоКаталогу.НомерСтроки
		|			И Ящики.Ссылка = ПоКаталогу.Ссылка
		|ГДЕ
		|	Ящики.Ссылка = &Ссылка
		|	И ВЫБОР
		|			КОГДА &ПоказыватьСобранные
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ЕСТЬNULL(ПоКаталогу.Сборка, ЛОЖЬ)
		|		КОНЕЦ";
		
		ВыборкаЯщиков = ЗапросПоЯщикам.Выполнить().Выбрать();
		
		Если ВыборкаЯщиков.Количество() > 0 Тогда
			
			ОбластьКоличествоФасадовЯщики = Макет.ПолучитьОбласть("КоличествоФасадовЯщики");
			
			ОбластьШапкаФасадовЯщиков = Макет.ПолучитьОбласть("ШапкаФасадЯщики");
			ОбластьСтрокаФасадовЯщиков = Макет.ПолучитьОбласть("СтрокаФасадаЯщики");
			
			ОбластьШапкаЯщиков = Макет.ПолучитьОбласть("ШапкаЯщики");
			ОбластьСтрокаЯщиков = Макет.ПолучитьОбласть("СтрокаЯщики");
			ОбластьШапкаЯщикиДетали = Макет.ПолучитьОбласть("ШапкаЯщикиДетали");
			ОбластьСтрокаЯщикиДетали = Макет.ПолучитьОбласть("СтрокаЯщикиДетали");
			
			ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
			
			ТаблицаФасадовЯщиков = Новый ТаблицаЗначений;
			ТаблицаФасадовЯщиков.Колонки.Добавить("НомерСтроки");
			ТаблицаФасадовЯщиков.Колонки.Добавить("НомерИзделия");
			ТаблицаФасадовЯщиков.Колонки.Добавить("ФасадНаименование");
			ТаблицаФасадовЯщиков.Колонки.Добавить("ФасадНаполнение");
			ТаблицаФасадовЯщиков.Колонки.Добавить("Ручка");
			ТаблицаФасадовЯщиков.Колонки.Добавить("ФасадКоличествоРучек");
			ТаблицаФасадовЯщиков.Колонки.Добавить("ФасадКоличество");
			ТаблицаФасадовЯщиков.Колонки.Добавить("ВысотаФасад");
			ТаблицаФасадовЯщиков.Колонки.Добавить("ВысотаВставки");
			ТаблицаФасадовЯщиков.Колонки.Добавить("ШиринаФасад");
			ТаблицаФасадовЯщиков.Колонки.Добавить("ШиринаВставки");
			
			ТабДок.Вывести(ОбластьПустаяСтрока);
			ТабДок.Вывести(ОбластьШапкаЯщиков);
			
			НомерСтроки = 0;
			НомерСтрокиФасада = 0;
			КоличествоДеталейЯщика = 0;
			КоличествоФасадов = 0;
			
			ТаблицаДеталиЯщиков = Документы.Спецификация.РазложитьЯщикиНаДетали(Спецификация);
			
			Пока ВыборкаЯщиков.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				КоличествоДеталейЯщика = КоличествоДеталейЯщика + ВыборкаЯщиков.КоличествоЯщиков;
				
				Если НЕ ВыборкаЯщиков.ВидФасада = "Нет" Тогда
					
					НомерСтрокиФасада = НомерСтрокиФасада + 1;
					КоличествоФасадов = КоличествоФасадов + ВыборкаЯщиков.ФасадКоличество;
					
					ТорцеваяЛента = Новый Структура;
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСверху", ВыборкаЯщиков.ФасадНаименование);
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСнизу", ВыборкаЯщиков.ФасадНаименование);
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСлева", ВыборкаЯщиков.ФасадНаименование);
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСправа", ВыборкаЯщиков.ФасадНаименование);
					
					Размеры = ПолучитьРазмерыМатериалов(ВыборкаЯщиков.ФасадНаполнение, ТорцеваяЛента);
					
					КромкаПоШирине = Размеры.ВычитаемоеДляШирины;
					КромкаПоВысоте = Размеры.ВычитаемоеДляВысоты;
					
					НоваяСтрока = ТаблицаФасадовЯщиков.Добавить();
					НоваяСтрока.НомерСтроки = НомерСтрокиФасада;
					НоваяСтрока.НомерИзделия = ВыборкаЯщиков.НомерИзделия;
					НоваяСтрока.ФасадНаименование = ВыборкаЯщиков.ФасадНаименование;
					НоваяСтрока.ФасадНаполнение = ВыборкаЯщиков.ФасадНаполнение;
					НоваяСтрока.Ручка = ВыборкаЯщиков.Ручка;
					НоваяСтрока.ФасадКоличествоРучек = ВыборкаЯщиков.ФасадКоличествоРучек;
					НоваяСтрока.ФасадКоличество = ВыборкаЯщиков.ФасадКоличество;
					НоваяСтрока.ВысотаФасад = ВыборкаЯщиков.ВысотаФасад;
					НоваяСтрока.ВысотаВставки = ВыборкаЯщиков.ВысотаФасад - КромкаПоШирине;
					НоваяСтрока.ШиринаФасад = ВыборкаЯщиков.ШиринаФасад;
					НоваяСтрока.ШиринаВставки = ВыборкаЯщиков.ШиринаФасад - КромкаПоВысоте;
					
				КонецЕсли;
				
				ОбластьСтрокаЯщиков.Параметры.Заполнить(ВыборкаЯщиков);
				ОбластьСтрокаЯщиков.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтрокаЯщиков.Параметры.ШиринаЯщика = ?(ЗначениеЗаполнено(ВыборкаЯщиков.ШиринаЯщика),ВыборкаЯщиков.ШиринаЯщика,(ВыборкаЯщиков.ПроемЯщика - ВыборкаЯщиков.Направляющие.ГлубинаДетали));
				
				ТабДок.Вывести(ОбластьСтрокаЯщиков);
				
				Если НазваниеЗоны = "Зона Ящики" Тогда
					
					ТабДок.Вывести(ОбластьШапкаЯщикиДетали);
					
					Для Каждого Деталь Из ТаблицаДеталиЯщиков Цикл
						
						Если Деталь.НомерСтроки = НомерСтроки И НЕ (Деталь.Тип = Перечисления.ВидыДеталейЯщиков.Фасад) Тогда
							
							ОбластьСтрокаЯщикиДетали.Параметры.Заполнить(Деталь);
							ТабДок.Вывести(ОбластьСтрокаЯщикиДетали);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаФасадовЯщиков.Количество() > 0 Тогда
				
				ТабДок.Вывести(ОбластьПустаяСтрока);
				ТабДок.Вывести(ОбластьШапкаФасадовЯщиков);
				
				Для Каждого Строка Из ТаблицаФасадовЯщиков Цикл
					
					ОбластьСтрокаФасадовЯщиков.Параметры.Заполнить(Строка);
					ТабДок.Вывести(ОбластьСтрокаФасадовЯщиков);
					
				КонецЦикла;
				
				//ОбластьКоличествоФасадовЯщики.Параметры.КоличествоДеталей = КоличествоФасадов;
				//ТабДок.Вывести(ОбластьКоличествоФасадовЯщики);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьСпецификации_СдалПринял(ТабДок)
	
	Макет = Документы.Спецификация.ПолучитьМакет("Спецификация");	
	
	ОбластьСдалПринял = Макет.ПолучитьОбласть("СдалПринял");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ТабДок.Вывести(ОбластьПустаяСтрока);
	ТабДок.Вывести(ОбластьПустаяСтрока);
	ТабДок.Вывести(ОбластьСдалПринял);
	
КонецПроцедуры

Функция ПечатьСпецификации(МассивДокументов, ОбъектыПечати, НазваниеЗоны) Экспорт
	
	Метр = 1000;
	МетрКв = Метр * Метр;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_Спецификация_"+НазваниеЗоны;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Спецификация = МассивДокументов[0];
	
	НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
	ПечатьСпецификации_ВывестиШапку(Спецификация,ТабДок, НазваниеЗоны);
	
	Если НазваниеЗоны = "Стекольная зона" Тогда
		
		ПечатьСпецификации_Материалы(Спецификация, ТабДок, НазваниеЗоны);
		ПечатьСпецификации_Фасады(Спецификация, ТабДок, НазваниеЗоны);
		
	ИначеЕсли НазваниеЗоны = "Зона сборки" Тогда
		
		ПечатьСпецификации_Материалы(Спецификация, ТабДок, НазваниеЗоны);
		ПечатьСпецификации_Фасады(Спецификация, ТабДок, НазваниеЗоны);
		ПечатьСпецификации_Короба(Спецификация, ТабДок);
		
	ИначеЕсли НазваниеЗоны = "Зона ОТК" Тогда
		
		ПечатьСпецификации_ВывестиМатериалПодЗаказ(ТабДок,Спецификация);
		ПечатьСпецификации_МатериалЗаказчика(Спецификация, ТабДок);
		ПечатьСпецификации_Материалы(Спецификация, ТабДок, НазваниеЗоны);
		ПечатьСпецификации_Фасады(Спецификация, ТабДок, НазваниеЗоны);
		ПечатьСпецификации_Ящики(Спецификация, ТабДок, НазваниеЗоны);
		ПечатьСпецификации_Короба(Спецификация, ТабДок);
		ПечатьСпецификации_Двери(Спецификация, ТабДок);
		
	ИначеЕсли НазваниеЗоны = "Зона Ящики" Тогда
		
		ПечатьСпецификации_Ящики(Спецификация, ТабДок, НазваниеЗоны);
		
	КонецЕсли;
	
	ПустойДок = Ложь;
	
	Если ТабДок.Области.Количество() <= 3 Тогда
		
		ТабДок.Очистить();
		ПустойДок = Истина;
		
	КонецЕсли;
	
	Если НЕ ПустойДок Тогда
		
		//ПечатьСпецификации_СдалПринял(ТабДок);
		
		ТабДок.ВерхнийКолонтитул.НачальнаяСтраница = 1;
		ТабДок.ВерхнийКолонтитул.ВертикальноеПоложение=ВертикальноеПоложение.Центр;
		ТабДок.ВерхнийКолонтитул.ТекстВЦентре = "Комплект 'Спецификация: " + НазваниеЗоны + "'. Страница [&НомерСтраницы] из [&СтраницВсего]. Спецификация № " + Спецификация.Номер;
		ТабДок.ВерхнийКолонтитул.Выводить=Истина;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Спецификация);
		
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьЦеховыеЗоны(НазваниеЗоны)
	
	ЦеховыеЗоны = Новый Массив();
	
	Если НазваниеЗоны = "Зона ФРС" Тогда
		
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.ФРС);
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.Кромочная);
		
	ИначеЕсли  НазваниеЗоны = "Стекольная зона"  Тогда
		
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.Стеколка);
		
	ИначеЕсли  НазваниеЗоны = "Зона сборки"  Тогда
		
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.Кухонная);
		
	ИначеЕсли  НазваниеЗоны = "Зона ОТК"  Тогда
		
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.ФРС);
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.Кромочная);
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.Отгрузка);
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.Комплектация);
		
	ИначеЕсли  НазваниеЗоны = "Зона Ящики"  Тогда
		
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.Ящики);
		
	ИначеЕсли  НазваниеЗоны = "Все"  Тогда
		
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.ФРС);
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.Кромочная);
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.Стеколка);
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.Кухонная);
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.Отгрузка);
		ЦеховыеЗоны.Добавить(Перечисления.ЦеховыеЗоны.Комплектация);
		
	КонецЕсли;
	
	Возврат ЦеховыеЗоны;
	
КонецФункции

Функция ПечатьЧертежДвери(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДок.ТочностьПечати=ТочностьПечати.Точная;
	
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу = 2;
	ТабДок.ПолеСлева = 5;
	ТабДок.ПолеСправа = 2;
	
	ТабДок.РазмерКолонтитулаСверху = 0;
	ТабДок.РазмерКолонтитулаСнизу = 0;
	
	Макет = Документы.Спецификация.ПолучитьМакет("ЧертежДвери");
	ОбластьКартинка = Макет.ПолучитьОбласть("Картинка");
	
	НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
	Для каждого Дверь Из МассивОбъектов.КартинкиДвери Цикл
		
		ЧертежДвери = Base64Значение(Дверь);
		ОбластьКартинка.Рисунки.D1.Картинка = Новый Картинка(ЧертежДвери);
		ТабДок.Вывести(ОбластьКартинка);
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, МассивОбъектов.МассивОбъектов.Получить(0));
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьЗаказ(МассивДокументов, ОбъектыПечати) Экспорт
	
	Логотип = ЛексСервер.ПолучитьЛоготипСервер(МассивДокументов[0]);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_Заказ";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.Защита = Истина;
	
	Подразделение = МассивДокументов[0].Подразделение;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификацияСписокНоменклатуры.Ссылка.Контрагент.ПолноеНаименование КАК ПолноеНаименованиеКонтрагента,
	|	СпецификацияСписокНоменклатуры.Ссылка.Подразделение,
	|	СпецификацияСписокНоменклатуры.Ссылка.Офис,
	|	СпецификацияСписокНоменклатуры.Ссылка.СуммаДокумента,
	|	МИНИМУМ(СпецификацияСписокНоменклатуры.Ссылка.Номер) КАК СпецификацияНомер,
	|	СпецификацияСписокНоменклатуры.Номенклатура,
	|	СУММА(СпецификацияСписокНоменклатуры.Количество) КАК Количество,
	|	МАКСИМУМ(СпецификацияСписокНоменклатуры.Цена) КАК Цена,
	|	СУММА(СпецификацияСписокНоменклатуры.РозничнаяСтоимость) КАК РозничнаяСтоимость,
	|	МИНИМУМ(СпецификацияСписокНоменклатуры.НомерСтроки) КАК НомерСтроки,
	|	СпецификацияСписокНоменклатуры.Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|	СпецификацияСписокНоменклатуры.Ссылка КАК Ссылка,
	|	"""" + СпецификацияСписокНоменклатуры.Ссылка.Контрагент.Фамилия + "" "" + СпецификацияСписокНоменклатуры.Ссылка.Контрагент.Имя + "" "" + СпецификацияСписокНоменклатуры.Ссылка.Контрагент.Отчество КАК ПолноеНаименование,
	|	СпецификацияСписокНоменклатуры.Ссылка.ДатаОтгрузки КАК ДатаОтгрузки,
	|	СпецификацияСписокНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СписокПодЗаказ.Номенклатура ЕСТЬ NULL
	|				И СписокМатериаловЗаказчика.Номенклатура ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ СписокПодЗаказ.Номенклатура ЕСТЬ NULL
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидПредоставления,
	|	ЕСТЬNULL(НастройкиНоменклатуры.ОкруглятьДоЛистов, ЛОЖЬ) КАК ОкруглятьДоЛистов
	|ИЗ
	|	Документ.Спецификация.СписокНоменклатуры КАК СпецификацияСписокНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиНоменклатуры.СрезПоследних(, Подразделение = &Подразделение) КАК НастройкиНоменклатуры
	|		ПО (СпецификацияСписокНоменклатуры.Номенклатура = НастройкиНоменклатуры.Номенклатура
	|				ИЛИ СпецификацияСписокНоменклатуры.Номенклатура.БазоваяНоменклатура = НастройкиНоменклатуры.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокМатериаловПодЗаказ КАК СписокПодЗаказ
	|		ПО (СписокПодЗаказ.Ссылка = СпецификацияСписокНоменклатуры.Ссылка)
	|			И (СписокПодЗаказ.Номенклатура = СпецификацияСписокНоменклатуры.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокМатериаловЗаказчика КАК СписокМатериаловЗаказчика
	|		ПО (СписокМатериаловЗаказчика.Ссылка = СпецификацияСписокНоменклатуры.Ссылка)
	|			И (СписокМатериаловЗаказчика.Номенклатура = СпецификацияСписокНоменклатуры.Номенклатура)
	|ГДЕ
	|	СпецификацияСписокНоменклатуры.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацияСписокНоменклатуры.Номенклатура,
	|	СпецификацияСписокНоменклатуры.Ссылка.СуммаДокумента,
	|	СпецификацияСписокНоменклатуры.Ссылка.Контрагент.ПолноеНаименование,
	|	СпецификацияСписокНоменклатуры.Ссылка.Подразделение,
	|	СпецификацияСписокНоменклатуры.Ссылка.Офис,
	|	СпецификацияСписокНоменклатуры.Номенклатура.ВидНоменклатуры,
	|	СпецификацияСписокНоменклатуры.Ссылка,
	|	"""" + СпецификацияСписокНоменклатуры.Ссылка.Контрагент.Фамилия + "" "" + СпецификацияСписокНоменклатуры.Ссылка.Контрагент.Имя + "" "" + СпецификацияСписокНоменклатуры.Ссылка.Контрагент.Отчество,
	|	СпецификацияСписокНоменклатуры.Ссылка.ДатаОтгрузки,
	|	СпецификацияСписокНоменклатуры.Номенклатура.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СписокПодЗаказ.Номенклатура ЕСТЬ NULL
	|				И СписокМатериаловЗаказчика.Номенклатура ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ СписокПодЗаказ.Номенклатура ЕСТЬ NULL
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЕСТЬNULL(НастройкиНоменклатуры.ОкруглятьДоЛистов, ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураВидНоменклатуры,
	|	СпецификацияСписокНоменклатуры.Номенклатура.Наименование
	|ИТОГИ ПО
	|	Ссылка КАК Документ,
	|	НоменклатураВидНоменклатуры КАК ВидНоменклатуры";
	
	ВыборкаПоДокументу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = Документы.Спецификация.ПолучитьМакет("Заказ");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаНоменклатуры = Макет.ПолучитьОбласть("ШапкаНоменклатуры");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМатериалы = Макет.ПолучитьОбласть("Материалы");
	ОбластьУслуги = Макет.ПолучитьОбласть("Услуги");
	ОбластьИтог = Макет.ПолучитьОбласть("Итог");
	ИтогСтоимостиМатериалов = 0;
	ИтогСтоимостиМатериаловСоСкидкой = 0;
	ИтогСтоимостиУслуг = 0;
	ИтогСтоимостиУслугСоСкидкой = 0;
	РозничнаяСтоимость = 0;
	НомерСтрокиУслуг = 0;
	НомерСтрокиМатериалов = 0;
	
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		ОбластьШапка.Параметры.СпецификацияНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументу.СпецификацияНомер);
		ТабДок.Вывести(ОбластьШапка);
		
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументу);
		ОбластьЗаголовок.Параметры.ПолноеНаименование = ?(ЗначениеЗаполнено(ВыборкаПоДокументу.ПолноеНаименованиеКонтрагента), ВыборкаПоДокументу.ПолноеНаименованиеКонтрагента, ВыборкаПоДокументу.ПолноеНаименование);
		
		Если ТипЗнч(Логотип) = Тип("ДвоичныеДанные") Тогда
			ОбластьЗаголовок.Рисунки.К1.Картинка = Новый Картинка(Логотип);
			ОбластьЗаголовок.Рисунки.К1.ВыводитьНаПечать = Истина;
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьЗаголовок);
		
		ВыборкаПоВидуНоменклатуры = ВыборкаПоДокументу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Пока ВыборкаПоВидуНоменклатуры.Следующий() Цикл
			
			ВидНомеклатуры = ВыборкаПоВидуНоменклатуры.НоменклатураВидНоменклатуры;
			
			Если ВидНомеклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
				
				ТабДок.Вывести(ОбластьМатериалы);
				ВыборкаМатериалов = ВыборкаПоВидуНоменклатуры.Выбрать();
				ТабДок.Вывести(ОбластьШапкаНоменклатуры);
				
				Пока ВыборкаМатериалов.Следующий() Цикл
					
					ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
					
					НомерСтрокиМатериалов = НомерСтрокиМатериалов + 1;
					РозничнаяСтоимость = 0;
					РозничнаяСтоимость = ВыборкаМатериалов.РозничнаяСтоимость;
					РозничнаяСтоимостьСоСкидкой = 0;
					
					ОбластьСтрока.Параметры.Цена = ВыборкаМатериалов.Цена;
					ОбластьСтрока.Параметры.Стоимость = РозничнаяСтоимость;
					РозничнаяСтоимостьСоСкидкой = РозничнаяСтоимость;
					ОбластьСтрока.Параметры.СтоимостьСоСкидкой = РозничнаяСтоимостьСоСкидкой;
					ИтогСтоимостиМатериалов = ИтогСтоимостиМатериалов + РозничнаяСтоимость;
					ИтогСтоимостиМатериаловСоСкидкой = ИтогСтоимостиМатериаловСоСкидкой + РозничнаяСтоимостьСоСкидкой;
					ОбластьСтрока.Параметры.Заполнить(ВыборкаМатериалов);
					ОбластьСтрока.Параметры.НомерСтроки = НомерСтрокиМатериалов;
					
					
					Если ВыборкаМатериалов.ВидПредоставления = 0 Тогда			
						ОбластьСтрока.Рисунки.Удалить(ОбластьСтрока.Рисунки.КартинкаПодЗаказ);
						ОбластьСтрока.Рисунки.Удалить(ОбластьСтрока.Рисунки.КартинкаПредоставляемый);
					ИначеЕсли ВыборкаМатериалов.ВидПредоставления = 1 Тогда
						ОбластьСтрока.Рисунки.Удалить(ОбластьСтрока.Рисунки.КартинкаПредоставляемый);
					Иначе
						ОбластьСтрока.Рисунки.Удалить(ОбластьСтрока.Рисунки.КартинкаПодЗаказ);
					КонецЕсли;
					
					Если НЕ ВыборкаМатериалов.ОкруглятьДоЛистов Тогда
					    ОбластьСтрока.Рисунки.Удалить(ОбластьСтрока.Рисунки.КартинкаОкруглять);
					КонецЕсли;	
						
					ТабДок.Вывести(ОбластьСтрока);
					
				КонецЦикла;
				
				ОбластьИтог.Параметры.ИтогСтоимости = ИтогСтоимостиМатериалов;
				ОбластьИтог.Параметры.ИтогСтоимостиСоСкидкой = ИтогСтоимостиМатериаловСоСкидкой;
				
				ТабДок.Вывести(ОбластьИтог);
				
			ИначеЕсли ВидНомеклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
				
				ТабДок.Вывести(ОбластьУслуги);
				ВыборкаУслуг = ВыборкаПоВидуНоменклатуры.Выбрать();
				ТабДок.Вывести(ОбластьШапкаНоменклатуры);
				
				Пока ВыборкаУслуг.Следующий() Цикл
					
					ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
					
					ОбластьСтрока.Рисунки.Удалить(ОбластьСтрока.Рисунки.КартинкаПодЗаказ);
					ОбластьСтрока.Рисунки.Удалить(ОбластьСтрока.Рисунки.КартинкаПредоставляемый);
					ОбластьСтрока.Рисунки.Удалить(ОбластьСтрока.Рисунки.КартинкаОкруглять);
					
					НомерСтрокиУслуг = НомерСтрокиУслуг + 1;
					РозничнаяСтоимость = 0;
					РозничнаяСтоимость = ВыборкаУслуг.РозничнаяСтоимость;
					РозничнаяСтоимостьСоСкидкой = 0;
					ОбластьСтрока.Параметры.Цена = ВыборкаУслуг.Цена;
					ОбластьСтрока.Параметры.Стоимость = РозничнаяСтоимость;
					РозничнаяСтоимостьСоСкидкой = РозничнаяСтоимость;
					ОбластьСтрока.Параметры.СтоимостьСоСкидкой = РозничнаяСтоимостьСоСкидкой;
					ИтогСтоимостиУслуг = ИтогСтоимостиУслуг + РозничнаяСтоимость;
					ИтогСтоимостиУслугСоСкидкой = ИтогСтоимостиУслугСоСкидкой + РозничнаяСтоимостьСоСкидкой;
					ОбластьСтрока.Параметры.Заполнить(ВыборкаУслуг);
					
					ОбластьСтрока.Параметры.НомерСтроки = НомерСтрокиУслуг;
					ТабДок.Вывести(ОбластьСтрока);
					
				КонецЦикла;
				
				ОбластьИтог.Параметры.ИтогСтоимости = ИтогСтоимостиУслуг;
				
				ОбластьИтог.Параметры.ИтогСтоимостиСоСкидкой = ИтогСтоимостиУслугСоСкидкой;
				
				ТабДок.Вывести(ОбластьИтог);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ФормСтрока = "Л = ru_RU; ДП = Истина";
		ПарПредмета="рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 0";
		ИтогСтоимости = Окр((ИтогСтоимостиУслуг + ИтогСтоимостиМатериалов) + 0.499);
		//ИтогСтоимостиСоСкидкой = ИтогСтоимостиУслугСоСкидкой + ИтогСтоимостиМатериаловСоСкидкой;
		ИтогПрописью = ЧислоПрописью(ИтогСтоимости, ФормСтрока, ПарПредмета);
		//СоСкидкойПрописью = ЧислоПрописью(ИтогСтоимостиСоСкидкой, ФормСтрока, ПарПредмета);
		ОбластьПодвал.Параметры.ПолноеНаименование = ВыборкаПоДокументу.ПолноеНаименование;
		ОбластьПодвал.Параметры.ИтогСтоимости = ИтогСтоимости;
		ОбластьПодвал.Параметры.ИтогПрописью = ИтогПрописью;
		ТабДок.Вывести(ОбластьПодвал);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, МассивДокументов);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьБуквуСпецификации(Спецификация) Экспорт
	
	Буква = "";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Спецификация",Спецификация);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	НарядЗаданиеСписокСпецификаций.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.НарядЗадание.СписокСпецификаций КАК НарядЗаданиеСписокСпецификаций
	|ГДЕ
	|	НарядЗаданиеСписокСпецификаций.Спецификация = &Спецификация";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		НомерСимвола = 65 + (Выборка.НомерСтроки-1);
		Буква = Символ(НомерСимвола);
		
	КонецЕсли;
	
	Возврат Буква;
	
КонецФункции

Функция ПечатьАктГотовности(МассивДокументов, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_АктГотовности";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ПолеСправа = 0;
	ТабДок.ПолеСверху = 2;
	
	НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
	ОбщаяНоменклатура = ЛексСерверПовтИсп.ПолучитьОбщуюНоменклатуруПолностью(МассивДокументов[0].Подразделение);
	
	Спецификация = МассивДокументов[0];
	Логотип = ЛексСервер.ПолучитьЛоготипСервер(Спецификация);
	ТекущийСтатус = Документы.Спецификация.ПолучитьСтатусСпецификации(Спецификация);
	БукваСпецификации = ПолучитьБуквуСпецификации(Спецификация);
	
	НарядСтр = ПолучитьНарядЗадание(Спецификация); 
	Если ТипЗнч(НарядСтр) = Тип("Структура") Тогда
		Наряд = НарядСтр.Наряд;
	Иначе
		Наряд = НарядСтр;
	КонецЕсли;
	
	Макет = Документы.Спецификация.ПолучитьМакет("АктГотовности");
	
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьНаименованиеРаздела = Макет.ПолучитьОбласть("НаименованиеРаздела");
	
	ТабдокЛево = Новый ТабличныйДокумент;
	ТабдокПраво = Новый ТабличныйДокумент;
	
	УстановитьПривилегированныйРежим(Истина); // костыль
	
	ЦеховыеЗоны = ПолучитьЦеховыеЗоны("Все");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("Дилерский", Спецификация.Дилерский);
	Запрос.УстановитьПараметр("Подразделение", Спецификация.Подразделение);
	Запрос.УстановитьПараметр("ЦеховыеЗоны", ЦеховыеЗоны);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Спец.Дилерский
	|			ТОГДА Спец.Контрагент
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Спец.Изделие.ЭтоПеределка
	|					ТОГДА ""ПЕРЕДЕЛКА""
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Договор.Ссылка ЕСТЬ NULL
	|							ТОГДА ПОДСТРОКА(Спец.Контрагент.Фамилия, 1, 20) + "" "" + ПОДСТРОКА(Спец.Контрагент.Имя, 1, 20) + "" "" + ПОДСТРОКА(Спец.Контрагент.Отчество, 1, 20)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА Договор.Спецификация.Контрагент.ЮридическоеЛицо
	|									ТОГДА Договор.Спецификация.Контрагент.Наименование
	|								ИНАЧЕ ПОДСТРОКА(Договор.Спецификация.Контрагент.Фамилия, 1, 20) + "" "" + ПОДСТРОКА(Договор.Спецификация.Контрагент.Имя, 1, 20) + "" "" + ПОДСТРОКА(Договор.Спецификация.Контрагент.Отчество, 1, 20)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Заказчик,
	|	Спец.Контрагент.Телефон КАК Телефон,
	|	ВЫБОР
	|		КОГДА Спец.АдресМонтажа = ""Введите адрес""
	|			ТОГДА """"
	|		ИНАЧЕ Спец.АдресМонтажа
	|	КОНЕЦ КАК АдресЗаказчика,
	|	Договор.Ссылка КАК Договор,
	|	Спец.Номер КАК НомерСпецификации,
	|	Спец.ПакетУслуг,
	|	Спец.Дилерский,
	|	Спец.ТребуетсяПроверка
	|ИЗ
	|	Документ.Спецификация КАК Спец
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Договор КАК Договор
	|		ПО (Договор.Спецификация = Спец.Ссылка)
	|ГДЕ
	|	Спец.Ссылка = &Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА Список.ДетальРедактированная
	|						И (Список.КривойПилСверху > 0
	|							ИЛИ Список.КривойПилСнизу > 0
	|							ИЛИ Список.КривойПилСлева > 0
	|							ИЛИ Список.КривойПилСправа > 0)
	|					ИЛИ Список.РадиусЛевоВерх > 0
	|					ИЛИ Список.РадиусЛевоНиз > 0
	|					ИЛИ Список.РадиусПравоВерх > 0
	|					ИЛИ Список.РадиусПравоНиз > 0
	|				ТОГДА Список.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоКриволинейных,
	|	СУММА(Список.Количество) КАК Количество,
	|	Список.ВидДетали КАК Наименование
	|ИЗ
	|	Документ.Спецификация.СписокДеталей КАК Список
	|ГДЕ
	|	Список.Ссылка = &Спецификация
	|	И Список.НомерИзделия = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Список.ВидДетали
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Список.Номенклатура КАК Номенклатура,
	|	Список.КоличествоСклад КАК КоличествоСклад,
	|	Список.КоличествоЦех КАК КоличествоЦех,
	|	Список.Номенклатура.НоменклатурнаяГруппа.ВидМатериала КАК ВидМатериала,
	|	Список.Номенклатура.Наименование КАК Наименование
	|ИЗ
	|	Документ.Спецификация.СкладГотовойПродукции КАК Список
	|ГДЕ
	|	Список.Ссылка = &Спецификация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|ИТОГИ
	|	СУММА(КоличествоСклад),
	|	СУММА(КоличествоЦех)
	|ПО
	|	ВидМатериала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокЛистов.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.Спецификация.СписокЛистовНоменклатуры КАК СписокЛистов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиНоменклатуры.СрезПоследних(, Подразделение = &Подразделение) КАК НастройкиНоменклатуры
	|		ПО (НастройкиНоменклатуры.Номенклатура = СписокЛистов.Номенклатура)
	|ГДЕ
	|	СписокЛистов.Ссылка = &Спецификация
	|	И ЕСТЬNULL(НастройкиНоменклатуры.ОкруглятьДоЛистов, ИСТИНА)
	|	И &Дилерский
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацияСписокНоменклатуры.Номенклатура КАК Услуга,
	|	СУММА(СпецификацияСписокНоменклатуры.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА СпецификацияСписокНоменклатуры.Номенклатура.ЦеховаяЗона В (&ЦеховыеЗоны)
	|			ТОГДА ""Цеховые""
	|		ИНАЧЕ ""Дополнительные""
	|	КОНЕЦ КАК ВидУслуг,
	|	СпецификацияСписокНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.Спецификация.СписокНоменклатуры КАК СпецификацияСписокНоменклатуры
	|ГДЕ
	|	СпецификацияСписокНоменклатуры.Ссылка = &Спецификация
	|	И СпецификацияСписокНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацияСписокНоменклатуры.Номенклатура,
	|	ВЫБОР
	|		КОГДА СпецификацияСписокНоменклатуры.Номенклатура.ЦеховаяЗона В (&ЦеховыеЗоны)
	|			ТОГДА ""Цеховые""
	|		ИНАЧЕ ""Дополнительные""
	|	КОНЕЦ,
	|	СпецификацияСписокНоменклатуры.Номенклатура.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидУслуг УБЫВ,
	|	СпецификацияСписокНоменклатуры.Номенклатура.Наименование
	|ИТОГИ ПО
	|	ВидУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Список.Номенклатура КАК Наименование,
	|	Список.ВидДетали КАК ВидДетали,
	|	СУММА(ВЫБОР
	|			КОГДА Список.ДетальРедактированная
	|						И (Список.КривойПилСверху > 0
	|							ИЛИ Список.КривойПилСнизу > 0
	|							ИЛИ Список.КривойПилСлева > 0
	|							ИЛИ Список.КривойПилСправа > 0)
	|					ИЛИ Список.РадиусЛевоВерх > 0
	|					ИЛИ Список.РадиусЛевоНиз > 0
	|					ИЛИ Список.РадиусПравоВерх > 0
	|					ИЛИ Список.РадиусПравоНиз > 0
	|				ТОГДА Список.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоКриволинейных,
	|	СУММА(Список.Количество) КАК Количество
	|ИЗ
	|	Документ.Спецификация.СписокДеталей КАК Список
	|ГДЕ
	|	Список.Ссылка = &Спецификация
	|	И (Список.Номенклатура.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ЛДСП16)
	|			ИЛИ Список.Номенклатура.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ДВП))
	|
	|СГРУППИРОВАТЬ ПО
	|	Список.Номенклатура,
	|	Список.ВидДетали
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокПодЗаказ.Номенклатура,
	|	СписокПодЗаказ.Поставщик,
	|	СписокПодЗаказ.Комментарий,
	|	СписокПодЗаказ.НомерСтроки
	|ИЗ
	|	Документ.Спецификация.СписокМатериаловПодЗаказ КАК СписокПодЗаказ
	|ГДЕ
	|	СписокПодЗаказ.Ссылка = &Спецификация
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокПодЗаказ.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокПредоставленный.Номенклатура,
	|	СписокПредоставленный.Комментарий,
	|	СписокПредоставленный.НомерСтроки
	|ИЗ
	|	Документ.Спецификация.СписокМатериаловЗаказчика КАК СписокПредоставленный
	|ГДЕ
	|	СписокПредоставленный.Ссылка = &Спецификация
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокПредоставленный.НомерСтроки";
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаШапка = МассивРезультатовЗапроса[0];
	ВыборкаДетали = МассивРезультатовЗапроса[1];
	ВыборкаКомплектация = МассивРезультатовЗапроса[2];
	ВыборкаВернутьОстатки = МассивРезультатовЗапроса[3];
	ВыборкаУслуги = МассивРезультатовЗапроса[4];
	КоличествоДеталей = МассивРезультатовЗапроса[5].Выгрузить();
	ВыборкаПодЗаказ = МассивРезультатовЗапроса[6];
	ВыборкаПредоставленный = МассивРезультатовЗапроса[7];
	
	// Область шапка
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	Выборка = ВыборкаШапка.Выбрать();
	Выборка.Следующий();
	
	ОбластьШапка.Параметры.Заполнить(Выборка);
	
	Договор = Выборка.Договор;
	
	Если ТипЗнч(Договор) = Тип("ДокументСсылка.Договор") 
		И Договор <> Документы.Договор.ПустаяСсылка()  
		И Выборка.ПакетУслуг <> Перечисления.ПакетыУслуг.ДоставкаДоКлиентаИМонтаж Тогда
		ОбластьШапка.Параметры.СтрокаДоговор = Договор;
	КонецЕсли;
	
	Если НЕ (Выборка.ТребуетсяПроверка) Тогда
		ОбластьШапка.Рисунки.Удалить(ОбластьШапка.Рисунки.Проверка);
	КонецЕсли;
	
	ДоговорБезМонтажа = (ТипЗнч(Договор) = Тип("ДокументСсылка.Договор")) И (Договор <> Документы.Договор.ПустаяСсылка()) И (Выборка.ПакетУслуг <> Перечисления.ПакетыУслуг.ДоставкаДоКлиентаИМонтаж); 
	
    Если ДоговорБезМонтажа Тогда
		ОбластьШапка.Параметры.СтрокаДоговор = Договор;
	КонецЕсли;
	
	ОбластьШапка.Параметры.НомерСпецификации = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.НомерСпецификации) + " ";
	ОбластьШапка.Параметры.СпецификацияСтатус = ТекущийСтатус;
	
	Если ТипЗнч(Логотип) = Тип("ДвоичныеДанные") Тогда
		ОбластьШапка.Рисунки.К1.Картинка = Новый Картинка(Логотип);
		ОбластьШапка.Рисунки.К1.ВыводитьНаПечать = Истина;
	КонецЕсли;
	
	Если НЕ Спецификация.Упаковка Тогда
		ОбластьШапка.Рисунки.Удалить(ОбластьШапка.Рисунки.Упаковка);
	КонецЕсли;
		
	Если Выборка.ПакетУслуг = Перечисления.ПакетыУслуг.СамовывозОтПроизводителя Тогда
		ОбластьШапка.Рисунки.Удалить(ОбластьШапка.Рисунки.Доставка);
	КонецЕсли;
		
	ОбластьШапка.Параметры.Норматив = Спецификация.СуммаНарядаСпецификации;
	ОбластьШапка.Параметры.БукваСпецификации = БукваСпецификации;
	ОбластьШапка.Параметры.Наряд = Наряд;
	
	ТабДок.Вывести(ОбластьШапка);
	
	// Область детали
	
	ОбластьДеталиШапка = Макет.ПолучитьОбласть("ДеталиШапка");
	ОбластьДеталиСтрока = Макет.ПолучитьОбласть("ДеталиСтрока");
	ОбластьДеталиСтрокаЦвет = Макет.ПолучитьОбласть("ДеталиСтрокаЦвет");
	
	Выборка = ВыборкаДетали;
	
	Если НЕ Выборка.Пустой() Тогда
		
		ОбластьНаименованиеРаздела.Параметры.НаименованиеРаздела = "Детали";
		ТабдокЛево.Вывести(ОбластьПустаяСтрока);
		ТабдокЛево.Вывести(ОбластьНаименованиеРаздела);
		ТабдокЛево.Вывести(ОбластьДеталиШапка);
		
		Выборка = Выборка.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДеталиПоВиду = КоличествоДеталей.НайтиСтроки(Новый Структура("ВидДетали", Выборка.Наименование));
			
			Если ДеталиПоВиду.Количество() = 0 Тогда 
				ОбластьДеталиСтрока.Параметры.Заполнить(Выборка);
			Иначе
				ОбластьДеталиСтрока.Параметры.Наименование = Выборка.Наименование;
				ОбластьДеталиСтрока.Параметры.Количество = "";
				ОбластьДеталиСтрока.Параметры.КоличествоКриволинейных = "";
			КонецЕсли;
			
			ТабдокЛево.Вывести(ОбластьДеталиСтрока);
			
			Для Каждого Стр Из ДеталиПоВиду Цикл
				
				ОбластьДеталиСтрокаЦвет.Параметры.Заполнить(Стр);
				ОбластьДеталиСтрокаЦвет.Параметры.Наименование = "   " + Стр.Наименование; 
				ТабдокЛево.Вывести(ОбластьДеталиСтрокаЦвет);
				
			КонецЦикла;			
			
		КонецЦикла;
		
	КонецЕсли;
	
	//ОбластьИзделия
	
	ОбластьИзделияШапка = Макет.ПолучитьОбласть("ИзделияШапка");
	ОбластьИзделияСтрока = Макет.ПолучитьОбласть("ИзделияСтрока");
	
	Если (Спецификация.СписокДверей.Количество() > 0)
		ИЛИ (Спецификация.СписокЯщики.Количество() > 0)
		ИЛИ (Спецификация.СписокИзделийПоКаталогу.Количество() > 0) Тогда
		
		ОбластьНаименованиеРаздела.Параметры.НаименованиеРаздела = "Изделия";
		ТабдокЛево.Вывести(ОбластьПустаяСтрока);
		ТабдокЛево.Вывести(ОбластьНаименованиеРаздела);
		ТабдокЛево.Вывести(ОбластьИзделияШапка);
		
	КонецЕсли;
	
	Если Спецификация.СписокДверей.Количество() > 0 Тогда
		
		КоличествоДверей = 0;
		
		Для Каждого Дверь ИЗ Спецификация.СписокДверей Цикл
			КоличествоДверей = КоличествоДверей + Дверь.Двери.Количество;
		КонецЦикла;
		
		ОбластьИзделияСтрока.Параметры.Наименование = "Двери";
		ОбластьИзделияСтрока.Параметры.Количество = КоличествоДверей;
		ТабдокЛево.Вывести(ОбластьИзделияСтрока);
		
	КонецЕсли;
	
	Если Спецификация.СписокЯщики.Количество() > 0 Тогда
		
		КоличествоЯщиков = 0;
		КоличествоФасадовЯщиков = 0;
		
		Для Каждого Ящик ИЗ Спецификация.СписокЯщики Цикл
			
			КоличествоЯщиков = КоличествоЯщиков + Ящик.КоличествоЯщиков;
			
			Если Ящик.ВидФасада <> "Нет" Тогда
				КоличествоФасадовЯщиков = КоличествоФасадовЯщиков + Ящик.КоличествоЯщиков;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбластьИзделияСтрока.Параметры.Наименование = "Ящики";
		ОбластьИзделияСтрока.Параметры.Количество = КоличествоЯщиков;
		ТабдокЛево.Вывести(ОбластьИзделияСтрока);
		
		Если КоличествоФасадовЯщиков > 0 Тогда
			ОбластьИзделияСтрока.Параметры.Количество = КоличествоФасадовЯщиков;
		Иначе
			ОбластьИзделияСтрока.Параметры.Количество = "нет";
		КонецЕсли;
		
		ОбластьИзделияСтрока.Параметры.Наименование = "Фасады для ящиков";
		ТабдокЛево.Вывести(ОбластьИзделияСтрока);
		
	КонецЕсли;
	
	Если Спецификация.СписокИзделийПоКаталогу.Количество() > 0 Тогда
		
		Если Спецификация.Изделие.ВидИзделия = Перечисления.ВидыИзделий.ШкафКупе Тогда 
			
			Для Каждого Стр ИЗ Спецификация.СписокИзделийПоКаталогу Цикл
				Если НЕ Стр.Изделие.Предопределенный Тогда
					
					ОбластьИзделияСтрока.Параметры.Наименование = Стр.Изделие.Наименование;
					ОбластьИзделияСтрока.Параметры.Количество = 1;
					
					КоличествоДеталей = 0;
					
					Для Каждого Деталь ИЗ Спецификация.СписокДеталей Цикл
						Если Деталь.НомерИзделия = Стр.НомерСтроки Тогда
							КоличествоДеталей = КоличествоДеталей + Деталь.Количество;	
						КонецЕсли;
					КонецЦикла;
					
					ОбластьИзделияСтрока.Параметры.КоличествоДеталей = КоличествоДеталей;
					ТабдокЛево.Вывести(ОбластьИзделияСтрока);
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			КоличествоКоробов = Спецификация.СписокИзделийПоКаталогу.Количество();
			
			КоличествоДеталей = 0;
			
			Для Каждого Деталь ИЗ Спецификация.СписокДеталей Цикл
				Если Деталь.НомерИзделия > 0 Тогда
					КоличествоДеталей = КоличествоДеталей + Деталь.Количество;	
				КонецЕсли;
			КонецЦикла;
			
			ОбластьИзделияСтрока.Параметры.Наименование = "Короба";
			ОбластьИзделияСтрока.Параметры.Количество = КоличествоКоробов;
			ОбластьИзделияСтрока.Параметры.КоличествоДеталей = КоличествоДеталей;
			ТабдокЛево.Вывести(ОбластьИзделияСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//ОбластьКомплектация
	
	Если НЕ ВыборкаКомплектация.Пустой() Тогда
		
		ОбластьКомплектацияШапка = Макет.ПолучитьОбласть("КомплектацияШапка");
		ОбластьКомплектацияСтрока = Макет.ПолучитьОбласть("КомплектацияСтрока");
		ОбластьКомплектацияСтрокаВид = Макет.ПолучитьОбласть("КомплектацияСтрокаВид");
		
		ОбластьНаименованиеРаздела.Параметры.НаименованиеРаздела = "Комплектация";
		ТабдокПраво.Вывести(ОбластьНаименованиеРаздела);
		ТабдокПраво.Вывести(ОбластьКомплектацияШапка);
		
		Выборка = ВыборкаКомплектация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			ОбластьКомплектацияСтрокаВид.Параметры.Номенклатура = Выборка.ВидМатериала;
			ТабдокПраво.Вывести(ОбластьКомплектацияСтрокаВид);
			
			ВыборкаПоНоменклатуре = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоНоменклатуре.Следующий() Цикл
				
				ОбластьКомплектацияСтрока.Параметры.Заполнить(ВыборкаПоНоменклатуре);
				ТабдокПраво.Вывести(ОбластьКомплектацияСтрока);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//ОбластьВернутьОстатки
	
	Если НЕ ВыборкаВернутьОстатки.Пустой() Тогда
		
		ОбластьВернутьОстаткиШапка = Макет.ПолучитьОбласть("ВернутьОстаткиШапка");
		ОбластьВернутьОстаткиСтрока = Макет.ПолучитьОбласть("ВернутьОстаткиСтрока");
		
		ОбластьНаименованиеРаздела.Параметры.НаименованиеРаздела = "Вернуть остатки";
		ТабдокЛево.Вывести(ОбластьПустаяСтрока);
		ТабдокЛево.Вывести(ОбластьНаименованиеРаздела);
		ТабдокЛево.Вывести(ОбластьВернутьОстаткиШапка);
		
		Выборка = ВыборкаВернутьОстатки.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбластьВернутьОстаткиСтрока.Параметры.Заполнить(Выборка);
			ТабдокЛево.Вывести(ОбластьВернутьОстаткиСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Область услуги
	
	Если НЕ ВыборкаУслуги.Пустой() Тогда
		
		ОбластьУслугиШапка = Макет.ПолучитьОбласть("УслугиШапка");
		ОбластьУслугиСтрока = Макет.ПолучитьОбласть("УслугиСтрока");
		ОбластьУслугиСтрокаВид = Макет.ПолучитьОбласть("УслугиСтрокаВид");
		
		ОбластьНаименованиеРаздела.Параметры.НаименованиеРаздела = "Услуги";
		ТабдокЛево.Вывести(ОбластьПустаяСтрока);
		ТабдокЛево.Вывести(ОбластьНаименованиеРаздела);
		ТабдокЛево.Вывести(ОбластьУслугиШапка);
		
		Выборка = ВыборкаУслуги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			ОбластьУслугиСтрокаВид.Параметры.Заполнить(Выборка);
			ТабдокЛево.Вывести(ОбластьУслугиСтрокаВид);
			
			ВыборкаУслуги = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаУслуги.Следующий() Цикл
				
				ОбластьУслугиСтрока.Параметры.Заполнить(ВыборкаУслуги);
				ТабдокЛево.Вывести(ОбластьУслугиСтрока);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Область Под заказ и предоставленый
	
	Если НЕ ВыборкаПодЗаказ.Пустой() ИЛИ НЕ ВыборкаПредоставленный.Пустой() Тогда
		
		ТабДокДляВывода = ?(ТабдокЛево.ВысотаТаблицы>ТабдокПраво.ВысотаТаблицы,ТабдокПраво,ТабдокЛево);
		
		ОбластьПодЗаказСтрока = Макет.ПолучитьОбласть("ПодЗаказСтрока");
		ОбластьПредоставленныйСтрока = Макет.ПолучитьОбласть("ПредоставленныйСтрока");
		
		ОбластьНаименованиеРаздела.Параметры.НаименованиеРаздела = "Материал под заказ и предоставленный";
		ТабДокДляВывода.Вывести(ОбластьПустаяСтрока);
		ТабДокДляВывода.Вывести(ОбластьНаименованиеРаздела);
		
		ВыборкаПодЗаказ = ВыборкаПодЗаказ.Выбрать();
		
		Пока ВыборкаПодЗаказ.Следующий() Цикл
			
			ОбластьПодЗаказСтрока.Параметры.Данные = "     " + "[" + ВыборкаПодЗаказ.НомерСтроки + "] " + ВыборкаПодЗаказ.Номенклатура + ?(ЗначениеЗаполнено(ВыборкаПодЗаказ.Комментарий), " ("+ВыборкаПодЗаказ.Комментарий+")","") + ?(ЗначениеЗаполнено(ВыборкаПодЗаказ.Поставщик), " - "+ВыборкаПодЗаказ.Поставщик,"");  
			ТабДокДляВывода.Вывести(ОбластьПодЗаказСтрока);
			
		КонецЦикла;
		
		ВыборкаПредоставленный = ВыборкаПредоставленный.Выбрать();
		
		Пока ВыборкаПредоставленный.Следующий() Цикл
			
			ОбластьПредоставленныйСтрока.Параметры.Данные = "     " + "[" + ВыборкаПредоставленный.НомерСтроки + "] " + ВыборкаПредоставленный.Номенклатура + ?(ЗначениеЗаполнено(ВыборкаПредоставленный.Комментарий), " ("+ВыборкаПредоставленный.Комментарий+")","");  
			ТабДокДляВывода.Вывести(ОбластьПредоставленныйСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТабдокЛево.Области.Количество() > 0 Тогда
		
		ТабДок.Вывести(ТабдокЛево);
		
		Если ТабдокПраво.ВысотаТаблицы > 0 Тогда
			ТабДок.ВставитьОбласть(ТабдокПраво.Область("C1:C6"), ТабДок.Область("R10C8:R"+(10+ТабдокПраво.ВысотаТаблицы)+"C13"));
		КонецЕсли;
		
	Иначе
		
		ТабДок.Вывести(ОбластьПустаяСтрока);
		ТабДок.Вывести(ТабдокПраво);
		
	КонецЕсли;
	
	ОбластьНадписьЗаказчику = Макет.ПолучитьОбласть("ОбластьНадписьЗаказчику");
	ТабДок.Вывести(ОбластьПустаяСтрока);
	ТабДок.Вывести(ОбластьНадписьЗаказчику);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, МассивДокументов);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьУпаковочныйЛист(МассивДокументов, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_УпаковочныйЛист";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Макет = Документы.Спецификация.ПолучитьМакет("УпаковочныйЛист");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьЛинияОтрыва = Макет.ПолучитьОбласть("ЛинияОтрыва");
	ОбластьТаблица = Макет.ПолучитьОбласть("Таблица");
	
	Логотип = ЛексСервер.ПолучитьЛоготипСервер(МассивДокументов[0]);
	ОбщаяНоменклатура = ЛексСерверПовтИсп.ПолучитьОбщуюНоменклатуруПолностью(МассивДокументов[0].Подразделение);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("УпаковкаДеталей", ОбщаяНоменклатура.УпаковкаДеталей);
	Запрос.УстановитьПараметр("УпаковкаКороба", ОбщаяНоменклатура.УпаковкаКороба);
	Запрос.УстановитьПараметр("УпаковкаДверей", ОбщаяНоменклатура.УпаковкаДверей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спецификация.Ссылка,
	|	Спецификация.Контрагент.Наименование КАК Заказчик,
	|	Спецификация.Номер,
	|	Спецификация.ДатаОтгрузки
	|ПОМЕСТИТЬ втСпецификации
	|ИЗ
	|	Документ.Спецификация КАК Спецификация
	|ГДЕ
	|	Спецификация.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(СпецификацияСписокНоменклатуры.ЗарплатаЦеха) КАК ЗарплатаЦеха,
	|	СпецификацияСписокНоменклатуры.Ссылка
	|ПОМЕСТИТЬ втСтоимостьУпаковки
	|ИЗ
	|	Документ.Спецификация.СписокНоменклатуры КАК СпецификацияСписокНоменклатуры
	|ГДЕ
	|	СпецификацияСписокНоменклатуры.Ссылка В
	|			(ВЫБРАТЬ
	|				т.Ссылка
	|			ИЗ
	|				втСпецификации КАК т)
	|	И (СпецификацияСписокНоменклатуры.Номенклатура = &УпаковкаДеталей
	|			ИЛИ СпецификацияСписокНоменклатуры.Номенклатура = &УпаковкаКороба
	|			ИЛИ СпецификацияСписокНоменклатуры.Номенклатура = &УпаковкаДверей)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацияСписокНоменклатуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСпецификации.Ссылка,
	|	втСпецификации.Заказчик,
	|	втСпецификации.Номер,
	|	втСпецификации.ДатаОтгрузки,
	|	втСтоимостьУпаковки.ЗарплатаЦеха КАК НарядЗаУпаковку
	|ИЗ
	|	втСпецификации КАК втСпецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтоимостьУпаковки КАК втСтоимостьУпаковки
	|		ПО втСпецификации.Ссылка = втСтоимостьУпаковки.Ссылка" ;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер);
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		ОбластьТаблица.Параметры.Заполнить(Выборка);
		ОбластьТаблица.Параметры.Номер = Номер;
		
		// номер, заказчик, дата отгрузки
		
		Если ТипЗнч(Логотип) = Тип("ДвоичныеДанные") Тогда
			ОбластьШапка.Рисунки.К1.Картинка = Новый Картинка(Логотип);
			ОбластьШапка.Рисунки.К1.ВыводитьНаПечать = Истина;
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьШапка);
		ТабДок.Вывести(ОбластьТаблица);
		////ТабДок.Вывести(ОбластьЛинияОтрыва);
		////ТабДок.Вывести(ОбластьШапка);
		////ТабДок.Вывести(ОбластьТаблица);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, МассивДокументов);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьАктГотовности()

Функция ПечатьПрисадкиПоКаталогу(МассивДокументов, ОбъектыПечати) Экспорт
	
	Макет = Документы.Спецификация.ПолучитьМакет("ПрисадкиПоКаталогу");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьОперация = Макет.ПолучитьОбласть("Операция");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьСтрокаТаблицыЖир = Макет.ПолучитьОбласть("СтрокаТаблицыЖир");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ПрисадкиПоКаталогу";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку= Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	ТабДок.ПолеСправа = 4;
	ТабДок.ПолеСлева = 2;
	
	Спецификация = МассивДокументов[0];
	Подразделение = Спецификация.Подразделение;
	
	НомерСпец = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Спецификация.Номер);
	ДатаИзготовления = Спецификация.ДатаИзготовления;
	
	ОбластьШапка.Параметры.Номер = НомерСпец;
	ОбластьШапка.Параметры.ДатаИзготовления = Формат(ДатаИзготовления, "ДФ=dd.MM.yyyy");
	
	Логотип = ЛексСервер.ПолучитьЛоготипСервер(Спецификация);
	
	Если ТипЗнч(Логотип) = Тип("ДвоичныеДанные") Тогда
		ОбластьШапка.Рисунки.К1.Картинка = Новый Картинка(Логотип);
		ОбластьШапка.Рисунки.К1.ВыводитьНаПечать = Истина;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьШапка);
	
	НомерСтрокиНачало = 1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокДеталей.ВысотаДетали,
	|	СписокДеталей.ШиринаДетали,
	|	СписокДеталей.НомерДеталиИзделия,
	|	СписокДеталей.НомерИзделия,
	|	СписокДеталей.НомерСтроки,
	|	СписокДеталей.ВидДетали КАК ДетальВидДетали,
	|	СписокДеталей.Номенклатура,
	|	СписокДеталей.ВыборМебельнойКромкиСверху,
	|	СписокДеталей.ВыборМебельнойКромкиСнизу,
	|	СписокДеталей.ВыборМебельнойКромкиСлева,
	|	СписокДеталей.ВыборМебельнойКромкиСправа,
	|	СписокДеталей.ДиаметрПазов КАК ДетальДиаметрПазов,
	|	СписокДеталей.КоличествоПетель КАК ДетальКоличествоПетель,
	|	СписокДеталей.Обтачивать КАК ДетальОбтачивать,
	|	СписокДеталей.Петли КАК ДетальПетли,
	|	СписокДеталей.Срез КАК ДетальСрез,
	|	СписокИзделий.Изделие,
	|	СписокИзделий.ШиринаИзделия,
	|	СписокИзделий.ВысотаИзделия,
	|	СписокИзделий.ВысотаИзделияВерх,
	|	СписокИзделий.ВысотаИзделияНиз,
	|	СписокИзделий.ГлубинаИзделия,
	|	СписокИзделий.Европаз,
	|	СписокИзделий.Столешница,
	|	СписокИзделий.НоменклатураЛДСП.ГлубинаДетали КАК ГлубинаМатериала,
	|	СписокИзделий.НоменклатураЛДСПДоп.ГлубинаДетали КАК ГлубинаМатериалаДоп,
	|	СписокИзделий.Расположение КАК Расположение
	|ПОМЕСТИТЬ втДетали
	|ИЗ
	|	Документ.Спецификация.СписокДеталей КАК СписокДеталей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокИзделийПоКаталогу КАК СписокИзделий
	|		ПО СписокДеталей.НомерИзделия = СписокИзделий.НомерСтроки
	|ГДЕ
	|	СписокДеталей.Ссылка = &Спецификация
	|	И СписокИзделий.Ссылка = &Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДеталиСпец.ВысотаДетали,
	|	ДеталиСпец.ШиринаДетали,
	|	ДеталиСпец.НомерИзделия,
	|	ДеталиСпец.НомерСтроки,
	|	ДеталиСпец.ДетальВидДетали,
	|	ДеталиСпец.ДетальДиаметрПазов,
	|	ДеталиСпец.ДетальКоличествоПетель,
	|	ДеталиСпец.ДетальОбтачивать,
	|	ДеталиСпец.ДетальПетли,
	|	ДеталиСпец.ДетальСрез,
	|	ДеталиСпец.Номенклатура,
	|	ДеталиСпец.ВыборМебельнойКромкиСверху,
	|	ДеталиСпец.ВыборМебельнойКромкиСнизу,
	|	ДеталиСпец.ВыборМебельнойКромкиСлева,
	|	ДеталиСпец.ВыборМебельнойКромкиСправа,
	|	ДеталиСпец.ШиринаИзделия,
	|	ДеталиСпец.ВысотаИзделия,
	|	ДеталиСпец.ВысотаИзделияВерх,
	|	ДеталиСпец.ВысотаИзделияНиз,
	|	ДеталиСпец.ГлубинаИзделия,
	|	ДеталиСпец.Европаз,
	|	ДеталиСпец.Столешница,
	|	ДеталиСпец.ГлубинаМатериала,
	|	ДеталиСпец.ГлубинаМатериалаДоп,
	|	ДеталиСпец.Расположение,
	|	ДеталиКаталог.ВысотаДетали КАК КаталогВысотаДетали,
	|	ДеталиКаталог.ШиринаДетали КАК КаталогШиринаДетали,
	|	ДеталиКаталог.Количество КАК КаталогКоличество,
	|	ДеталиКаталог.ДиаметрПазов КАК КаталогДиаметрПазов,
	|	ДеталиКаталог.КоличествоПетель КАК КаталогКоличествоПетель,
	|	ДеталиКаталог.Обтачивать КАК КаталогОбтачивать,
	|	ДеталиКаталог.Петли КАК КаталогПетли,
	|	ДеталиКаталог.Срез КАК КаталогСрез,
	|	ДеталиКаталог.ВидДетали КАК КаталогВидДетали,
	|	Присадки.ЛинейкаВерхНиз КАК ЛинейкаВерхНиз,
	|	Присадки.ЛинейкаВерхНизФормула,
	|	Присадки.ЛинейкаЛевоПраво КАК ЛинейкаЛевоПраво,
	|	Присадки.ЛинейкаЛевоПравоФормула,
	|	Присадки.Операция КАК Операция,
	|	Присадки.Перевернуть,
	|	Присадки.Развернуть,
	|	Присадки.СверлоЛево,
	|	Присадки.СверлоПраво,
	|	Присадки.ТипСверла
	|ИЗ
	|	втДетали КАК ДеталиСпец
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогИзделий.СписокДеталей КАК ДеталиКаталог
	|		ПО ДеталиСпец.Изделие = ДеталиКаталог.Ссылка
	|			И ДеталиСпец.НомерДеталиИзделия = ДеталиКаталог.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогИзделий.СписокПрисадок КАК Присадки
	|		ПО (ДеталиКаталог.ИдентификаторПрисадок = Присадки.ИдентификаторПрисадок)
	|			И ДеталиСпец.Изделие = Присадки.Ссылка
	|ГДЕ
	|	НЕ Присадки.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операция,
	|	ЛинейкаЛевоПраво,
	|	ЛинейкаВерхНиз,
	|	Присадки.ТипСверла,
	|	ДеталиСпец.НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ТЗ = Результат.Выгрузить();
		
		ТекущаяОперация = Неопределено;
		
		ПрошлыеДанные = Новый Структура();
		ПрошлыеДанные.Вставить("ЛинейкаВерхНиз", "");
		ПрошлыеДанные.Вставить("ЛинейкаВерхНизЗначение", "");
		ПрошлыеДанные.Вставить("ЛинейкаЛевоПраво", "");
		ПрошлыеДанные.Вставить("ЛинейкаЛевоПравоЗначение", "");
		ПрошлыеДанные.Вставить("СверлоЛево", "");
		ПрошлыеДанные.Вставить("СверлоПраво", "");
		ПрошлыеДанные.Вставить("ТипСверла", "");
		
		ПерваяСтрока = Ложь;
		
		Для Каждого Строка ИЗ ТЗ Цикл
			
			НомерДетали = "" + Строка.НомерСтроки + " / " + Строка.НомерИзделия + " / ";
			
			ВысотаДетали = Строка.ВысотаДетали;
			ШиринаДетали = Строка.ШиринаДетали;
			
			ШиринаИзделия = Строка.ШиринаИзделия;
			ВысотаИзделия = Строка.ВысотаИзделия;
			ВысотаИзделияВерх = Строка.ВысотаИзделияВерх;
			ВысотаИзделияНиз = Строка.ВысотаИзделияНиз;
			ГлубинаИзделия = Строка.ГлубинаИзделия;
			
			Европаз = Строка.Европаз;
			Столешница = Строка.Столешница;
			
			ЛинейкаВерхНизЗначение = 0;
			ЛинейкаЛевоПравоЗначение = 0;
			СверлоЛевоЗначение = 0;
			СверлоПравоЗначение = 0;
			
			Левый = (Строка.Расположение = Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая);
			
			Попытка
				
				Выполнить("Строка.ЛинейкаВерхНизФормула = " + Строка.ЛинейкаВерхНизФормула);
				Выполнить("Строка.ЛинейкаЛевоПравоФормула = " + Строка.ЛинейкаЛевоПравоФормула);
				Выполнить("Строка.СверлоЛево = " + Строка.СверлоЛево);
				Выполнить("Строка.СверлоПраво = " + Строка.СверлоПраво);
				
			Исключение
				Сообщить("Ошибка при формировании формулы для присадок. Деталь: " + НомерДетали);
			КонецПопытки;
			
		КонецЦикла;
		
		ТЗ.Сортировать("Операция Возр, ЛинейкаЛевоПраво Возр, ЛинейкаЛевоПравоФормула Возр, ЛинейкаВерхНиз Возр, ЛинейкаВерхНизФормула Возр, ТипСверла Возр, НомерСтроки Возр");
		
		ТЗ.Колонки.Добавить("Редактирована", Новый ОписаниеТипов("Булево"));
		
		Для Каждого Строка ИЗ ТЗ Цикл
			
			Редактирована = ПроверитьРедактированностьКаталожнойДетали(Строка);
			
			Если Редактирована Тогда
			
				Для Каждого Строка2 ИЗ ТЗ Цикл
				
					Если Строка2.НомерИзделия = Строка.НомерИзделия Тогда
						 Строка2.Редактирована = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка ИЗ ТЗ Цикл
						
			Если Строка.Редактирована Тогда
				Продолжить;	
			КонецЕсли;
			
			ПерваяСтрока = Ложь;
			
			Если Строка.Операция <> ТекущаяОперация Тогда
				
				ТекущаяОперация = Строка.Операция;
				ОбластьОперация.Параметры.Операция = ТекущаяОперация;
				ТабДок.Вывести(ОбластьОперация);
				ТабДок.Вывести(ОбластьШапкаТаблицы);
				
				ПерваяСтрока = Истина;
				
			КонецЕсли;
			
			НомерДетали = "" + Строка.НомерСтроки + " / " + Строка.НомерИзделия + " / ";
			
			Отбор = Новый Структура();
			Отбор.Вставить("НомерСтроки",Строка.НомерСтроки);
			
			Операции = ТЗ.НайтиСтроки(Отбор);
			МассивОпераций = Новый Массив();
			
			Для Каждого Оп ИЗ Операции Цикл
				
				Эл = МассивОпераций.Найти(Оп.Операция);
				Если НЕ ЗначениеЗаполнено(Эл) И (Оп.Операция <> Строка.Операция) Тогда
					МассивОпераций.Добавить(Оп.Операция);
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаОпераций = Строка.Операция;
			
			Для Каждого Эл ИЗ МассивОпераций Цикл
				СтрокаОпераций = СтрокаОпераций + "," + Эл;
			КонецЦикла;
			
			ВысотаДетали = Строка.ВысотаДетали;
			ШиринаДетали = Строка.ШиринаДетали;
			
			ШиринаИзделия = Строка.ШиринаИзделия;
			ВысотаИзделия = Строка.ВысотаИзделия;
			ВысотаИзделияВерх = Строка.ВысотаИзделияВерх;
			ВысотаИзделияНиз = Строка.ВысотаИзделияНиз;
			ГлубинаИзделия = Строка.ГлубинаИзделия;
			
			Европаз = Строка.Европаз;
			Столешница = Строка.Столешница;
			
			ЛинейкаВерхНизЗначение = 0;
			ЛинейкаЛевоПравоЗначение = 0;
			СверлоЛевоЗначение = 0;
			СверлоПравоЗначение = 0;
			
			Левый = (Строка.Расположение = Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая);
			
			Попытка
				
				Выполнить("ЛинейкаВерхНизЗначение = " + СтрЗаменить(Строка.ЛинейкаВерхНизФормула, ",", "."));
				Выполнить("ЛинейкаЛевоПравоЗначение = " + СтрЗаменить(Строка.ЛинейкаЛевоПравоФормула, ",", "."));
				Выполнить("СверлоЛевоЗначение = " + СтрЗаменить(Строка.СверлоЛево, ",", "."));
				Выполнить("СверлоПравоЗначение = " + СтрЗаменить(Строка.СверлоПраво, ",", "."));
				
			Исключение
				Сообщить("Ошибка при формировании формулы для присадок. Деталь: " + НомерДетали);
			КонецПопытки;
			
			ЕстьИзменения = Ложь;
			ОбластьСтрока = ОбластьСтрокаТаблицы; 
			
			Если НЕ ПерваяСтрока
				И (ПрошлыеДанные.ЛинейкаВерхНиз <> Строка.ЛинейкаВерхНиз
				ИЛИ ПрошлыеДанные.ЛинейкаЛевоПраво <> Строка.ЛинейкаЛевоПраво
				ИЛИ ПрошлыеДанные.ЛинейкаВерхНизЗначение <> ЛинейкаВерхНизЗначение
				ИЛИ ПрошлыеДанные.ЛинейкаЛевоПравоЗначение <> ЛинейкаЛевоПравоЗначение
				ИЛИ ПрошлыеДанные.СверлоЛево <> СверлоЛевоЗначение
				ИЛИ ПрошлыеДанные.СверлоПраво <> СверлоПравоЗначение
				ИЛИ ПрошлыеДанные.ТипСверла <> Строка.ТипСверла) Тогда
				ЕстьИзменения = Истина;
			КонецЕсли;
			
			Если ПерваяСтрока Тогда
				
				ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыЖир");
				ОбластьСтрока.Параметры.Заполнить(Строка);
				ОбластьСтрока.Параметры.ЛинейкаВерхНизЗначение = ОКР(ЛинейкаВерхНизЗначение,1);
				ОбластьСтрока.Параметры.ЛинейкаЛевоПравоЗначение = ОКР(ЛинейкаЛевоПравоЗначение,1);
				ОбластьСтрока.Параметры.СверлоЛево = СверлоЛевоЗначение;
				ОбластьСтрока.Параметры.СверлоПраво = СверлоПравоЗначение;
				
			ИначеЕсли НЕ ЕстьИзменения Тогда 
				
				ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы");
				
			Иначе
				
				ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыЖир");
				
				Если ПрошлыеДанные.ЛинейкаВерхНиз <> Строка.ЛинейкаВерхНиз Тогда
					ОбластьСтрока.Параметры.ЛинейкаВерхНиз = Строка.ЛинейкаВерхНиз; 	
				КонецЕсли;
				
				Если ПрошлыеДанные.ЛинейкаЛевоПраво <> Строка.ЛинейкаЛевоПраво Тогда
					ОбластьСтрока.Параметры.ЛинейкаЛевоПраво = Строка.ЛинейкаЛевоПраво; 	
				КонецЕсли;
				
				Если ПрошлыеДанные.ЛинейкаВерхНизЗначение <> ЛинейкаВерхНизЗначение Тогда
					ОбластьСтрока.Параметры.ЛинейкаВерхНизЗначение = ОКР(ЛинейкаВерхНизЗначение,1); 	
				КонецЕсли;
				
				Если ПрошлыеДанные.ЛинейкаЛевоПравоЗначение <> ЛинейкаЛевоПравоЗначение Тогда
					ОбластьСтрока.Параметры.ЛинейкаЛевоПравоЗначение = ОКР(ЛинейкаЛевоПравоЗначение,1); 	
				КонецЕсли;
				
				Если (ПрошлыеДанные.СверлоЛево <> СверлоЛевоЗначение) ИЛИ (ПрошлыеДанные.СверлоПраво <> СверлоПравоЗначение)  Тогда
					ОбластьСтрока.Параметры.СверлоЛево = СверлоЛевоЗначение;
					ОбластьСтрока.Параметры.СверлоПраво = СверлоПравоЗначение;
				КонецЕсли;
								
				Если ПрошлыеДанные.ТипСверла <> Строка.ТипСверла Тогда
					ОбластьСтрока.Параметры.ТипСверла = Строка.ТипСверла; 	
				КонецЕсли;
				
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Деталь = НомерДетали + СтрокаОпераций;
			ОбластьСтрока.Параметры.Перевернуть = Строка.Перевернуть;
			ОбластьСтрока.Параметры.Развернуть = ОКР(Строка.Развернуть,1);
			
			ТабДок.Вывести(ОбластьСтрока);
			
			ПрошлыеДанные.ЛинейкаВерхНиз = Строка.ЛинейкаВерхНиз;
			ПрошлыеДанные.ЛинейкаЛевоПраво = Строка.ЛинейкаЛевоПраво;
			ПрошлыеДанные.ЛинейкаВерхНизЗначение = ЛинейкаВерхНизЗначение;
			ПрошлыеДанные.ЛинейкаЛевоПравоЗначение = ЛинейкаЛевоПравоЗначение;
			ПрошлыеДанные.СверлоЛево = СверлоЛевоЗначение;
			ПрошлыеДанные.СверлоПраво = СверлоПравоЗначение;
			ПрошлыеДанные.ТипСверла = Строка.ТипСверла;
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Спецификация);
		
	КонецЕсли;	
	
	Возврат ТабДок; 
	
КонецФункции

Функция ПроверитьРедактированностьКаталожнойДетали(Данные)
	
	ТорцеваяЛента = Новый Структура;
	
	ТорцеваяЛента.Вставить("ТорцеваяЛентаСверху", Данные.ВыборМебельнойКромкиСверху);
	ТорцеваяЛента.Вставить("ТорцеваяЛентаСнизу", Данные.ВыборМебельнойКромкиСнизу);
	ТорцеваяЛента.Вставить("ТорцеваяЛентаСлева", Данные.ВыборМебельнойКромкиСлева);
	ТорцеваяЛента.Вставить("ТорцеваяЛентаСправа", Данные.ВыборМебельнойКромкиСправа);
	
	РазмерыКромок = ПолучитьРазмерыМатериалов(Данные.Номенклатура, ТорцеваяЛента);
	
	ШиринаИзделия = Данные.ШиринаИзделия;
	ВысотаИзделия = Данные.ВысотаИзделия;
	ГлубинаИзделия = Данные.ГлубинаИзделия;
	Европаз = Данные.Европаз;
	Столешница = Данные.Столешница;
	ГлубинаМатериала = Данные.ГлубинаМатериала;
	ГлубинаМатериалаДоп = Данные.ГлубинаМатериалаДоп;
	
	НоваяВысотаДетали = 0;
	НоваяШиринаДетали = 0;
	НоваяКоличество = 0;
	
	Попытка
		Выполнить("НоваяВысотаДетали = " + Данные.КаталогВысотаДетали);
		НоваяВысотаДетали = НоваяВысотаДетали - РазмерыКромок.ВычитаемоеДляВысоты;
	Исключение
		НоваяВысотаДетали = Данные.ВысотаДетали;
	КонецПопытки;
	
	Попытка
		Выполнить("НоваяШиринаДетали = " + Данные.КаталогШиринаДетали);
		НоваяШиринаДетали = НоваяШиринаДетали - РазмерыКромок.ВычитаемоеДляШирины;
	Исключение
		НоваяШиринаДетали = Данные.ШиринаДетали;
	КонецПопытки;
	
	Редактирована = (НЕ Данные.ДетальВидДетали.ЭтоФасад И Данные.ДетальВидДетали <> Данные.КаталогВидДетали) 
	ИЛИ Данные.ДетальДиаметрПазов <> Данные.КаталогДиаметрПазов 
	ИЛИ Данные.ДетальКоличествоПетель <> Данные.КаталогКоличествоПетель 
	ИЛИ Данные.ДетальОбтачивать <> Данные.КаталогОбтачивать 
	ИЛИ Данные.ДетальСрез <> Данные.КаталогСрез 
	ИЛИ Данные.ВысотаДетали <> НоваяВысотаДетали 
	ИЛИ Данные.ШиринаДетали <> НоваяШиринаДетали;
	
	Возврат Редактирована;
	
КонецФункции

Функция ПечатьИзделиеПоКаталогу(МассивДокументов, ОбъектыПечати) Экспорт
	
	Макет = Документы.Спецификация.ПолучитьМакет("ИзделиеПоКаталогу");
	ОбластьТело = Макет.ПолучитьОбласть("Тело");
	
	ОбластьШапкаФасады = Макет.ПолучитьОбласть("ШапкаФасады");
	ОбластьСтрокаФасады = Макет.ПолучитьОбласть("СтрокаФасады");
	
	ОбластьШапкаДетали = Макет.ПолучитьОбласть("ШапкаДетали");
	ОбластьСтрокаДетали = Макет.ПолучитьОбласть("СтрокаДетали");
	
	ОбластьШапкаЯщикиФасады = Макет.ПолучитьОбласть("ШапкаЯщикиФасады");
	ОбластьСтрокаЯщикиФасады = Макет.ПолучитьОбласть("СтрокаЯщикиФасады");
	
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	МассивСтрок = Новый Массив;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ИзделиеПоКаталогу";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку= Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	ТабДок.ПолеСправа = 2;
	ТабДок.ПолеСлева = 2;
	
	Логотип = ЛексСервер.ПолучитьЛоготипСервер(МассивДокументов[0]);
	
	ВидыФайлов = Новый Массив;
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.ОсновнаяКартинка);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КартинкаПравая);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.ВзрывСхемаОсновная);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.ВзрывСхемаЛевая);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.ВзрывСхемаПравая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыФайлов", ВидыФайлов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецификацияСписокИзделийПоКаталогу.Изделие
	|ПОМЕСТИТЬ втИзделия
	|ИЗ
	|	Документ.Спецификация.СписокИзделийПоКаталогу КАК СпецификацияСписокИзделийПоКаталогу
	|ГДЕ
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Файлы.ВладелецФайла КАК Изделие,
	|	Файлы.Вид КАК ВидФайла,
	|	Файлы.Данные КАК Данные
	|ПОМЕСТИТЬ втКартинки
	|ИЗ
	|	Справочник.ФайлыЛекс КАК Файлы
	|ГДЕ
	|	НЕ Файлы.ПометкаУдаления
	|	И Файлы.ВладелецФайла В
	|			(ВЫБРАТЬ
	|				т.Изделие
	|			ИЗ
	|				втИзделия КАК т)
	|	И Файлы.Вид В(&ВидыФайлов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецификацияСписокИзделийПоКаталогу.ВысотаФактическая КАК ВысотаКороба,
	|	СпецификацияСписокИзделийПоКаталогу.ГлубинаФактическая КАК ГлубинаКороба,
	|	СпецификацияСписокИзделийПоКаталогу.ШиринаФактическая КАК ШиринаКороба,
	|	СпецификацияСписокИзделийПоКаталогу.ГлубинаИзделия КАК ГлубинаИзделия,
	|	СпецификацияСписокИзделийПоКаталогу.ВысотаИзделия КАК ВысотаИзделия,
	|	СпецификацияСписокИзделийПоКаталогу.ШиринаИзделия КАК ШиринаИзделия,
	|	СпецификацияСписокИзделийПоКаталогу.Комментарий,
	|	СпецификацияСписокИзделийПоКаталогу.Изделие.Комментарий КАК КомментарийИзделие,
	|	СпецификацияСписокИзделийПоКаталогу.Изделие КАК Изделие,
	|	СпецификацияСписокИзделийПоКаталогу.НомерСтроки КАК НомерКороба,
	|	СпецификацияСписокИзделийПоКаталогу.Изделие.Наименование КАК Наименование,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.Номер КАК Номер,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.Автор КАК Автор,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.Подразделение КАК Подразделение,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.Контрагент КАК Контрагент,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.ДатаИзготовления КАК ДатаИзготовления,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка КАК Ссылка,
	|	СпецификацияСписокИзделийПоКаталогу.НоменклатураЛДСП,
	|	СпецификацияСписокИзделийПоКаталогу.НоменклатураДВП,
	|	СпецификацияСписокИзделийПоКаталогу.КромкаЛДСП,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.Изделие.ВидИзделия КАК ВидИзделия,
	|	СпецификацияСписокИзделийПоКаталогу.Сушка,
	|	СпецификацияСписокИзделийПоКаталогу.Мойка,
	|	СпецификацияСписокИзделийПоКаталогу.Расположение,
	|	СпецификацияСписокИзделийПоКаталогу.Европаз,
	|	СпецификацияСписокИзделийПоКаталогу.Столешница,
	|	СпецификацияСписокИзделийПоКаталогу.НоменклатураЛДСП.ГлубинаДетали КАК ГлубинаМатериала,
	|	СпецификацияСписокИзделийПоКаталогу.НоменклатураЛДСПДоп.ГлубинаДетали КАК ГлубинаМатериалаДоп,
	|	СпецификацияСписокИзделийПоКаталогу.Сборка,
	|	СпецификацияСписокИзделийПоКаталогу.UID,
	|	втКартинкиРисунок.Данные КАК РисунокКороба,
	|	втКартинкиСхема.Данные КАК СхемаКороба
	|ИЗ
	|	Документ.Спецификация.СписокИзделийПоКаталогу КАК СпецификацияСписокИзделийПоКаталогу
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКартинки КАК втКартинкиРисунок
	|		ПО СпецификацияСписокИзделийПоКаталогу.Изделие = втКартинкиРисунок.Изделие
	|			И (ВЫБОР
	|				КОГДА СпецификацияСписокИзделийПоКаталогу.Расположение = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.КартинкаПравая)
	|					ТОГДА втКартинкиРисунок.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.КартинкаПравая)
	|							ИЛИ втКартинкиРисунок.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.ОсновнаяКартинка)
	|				ИНАЧЕ втКартинкиРисунок.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.КартинкаЛевая)
	|						ИЛИ втКартинкиРисунок.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.ОсновнаяКартинка)
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКартинки КАК втКартинкиСхема
	|		ПО СпецификацияСписокИзделийПоКаталогу.Изделие = втКартинкиСхема.Изделие
	|			И (ВЫБОР
	|				КОГДА СпецификацияСписокИзделийПоКаталогу.Расположение = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.КартинкаПравая)
	|					ТОГДА втКартинкиСхема.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.ВзрывСхемаПравая)
	|							ИЛИ втКартинкиСхема.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.ВзрывСхемаОсновная)
	|				ИНАЧЕ втКартинкиСхема.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.ВзрывСхемаЛевая)
	|						ИЛИ втКартинкиСхема.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.ВзрывСхемаОсновная)
	|			КОНЕЦ)
	|ГДЕ
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка В(&МассивДокументов)
	|ИТОГИ
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Автор),
	|	МАКСИМУМ(Подразделение),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(ДатаИзготовления),
	|	МАКСИМУМ(ВидИзделия)
	|ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		СписокДеталей = Выборка.Ссылка.СписокДеталей.Выгрузить();
		СписокФасадов = Выборка.Ссылка.ФасадыКаталога.Выгрузить();
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		НомерСпец = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Ссылка.Номер);
		ОбластьТело.Параметры.НомерСпец = НомерСпец;
		
		Если ТипЗнч(Логотип) = Тип("ДвоичныеДанные") Тогда
			ОбластьТело.Рисунки.К1.Картинка = Новый Картинка(Логотип);
			ОбластьТело.Рисунки.К1.ВыводитьНаПечать = Истина;
		КонецЕсли;
		
		ВыборкаПоИзделиям = Выборка.Выбрать();
		
		Пока ВыборкаПоИзделиям.Следующий() Цикл
			
			ОбластьТело.Параметры.Заполнить(ВыборкаПоИзделиям);
			
			ОбластьТело.Параметры.Комментарий = ВыборкаПоИзделиям.Комментарий + Символы.ПС + ВыборкаПоИзделиям.КомментарийИзделие;
			
			Если ВыборкаПоИзделиям.Сборка Тогда
				ОбластьТело.Параметры.Сборка = "Собрать в цеху";
			Иначе
				ОбластьТело.Параметры.Сборка = "Без сборки";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоИзделиям.РисунокКороба) Тогда
				ДвоичныеДанные = ВыборкаПоИзделиям.РисунокКороба.Получить();
				РисунокИзделияКартинка = Новый Картинка(ДвоичныеДанные);
			Иначе
				РисунокИзделияКартинка = Новый Картинка;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоИзделиям.СхемаКороба) Тогда
				ДвоичныеДанные = ВыборкаПоИзделиям.СхемаКороба.Получить();
				СхемаИзделияКартинка = Новый Картинка(ДвоичныеДанные);
			Иначе
				СхемаИзделияКартинка = Новый Картинка;
			КонецЕсли;
			
			ОбластьТело.Рисунки.РисунокИзделия.Картинка = РисунокИзделияКартинка;
			ОбластьТело.Рисунки.СхемаИзделия.Картинка = СхемаИзделияКартинка;
			
			СписокНоменклатуры = ВыборкаПоИзделиям.Изделие.СписокНоменклатуры;
			ФурнитураВСборе = "";
			ФурнитураОтдельно = "";
			ГлубинаИзделия = ВыборкаПоИзделиям.ГлубинаИзделия;
			ВысотаИзделия = ВыборкаПоИзделиям.ВысотаИзделия;
			ШиринаИзделия = ВыборкаПоИзделиям.ШиринаИзделия;
			
			Для Каждого СтрокаНоменклатуры Из СписокНоменклатуры Цикл
				КоличествоНоменклатуры = 0;
				Попытка
					Выполнить("КоличествоНоменклатуры = " + СтрокаНоменклатуры.Количество);
				Исключение
					КоличествоНоменклатуры = СтрокаНоменклатуры.Количество;
				КонецПопытки;
				
				Если СтрокаНоменклатуры.ВСборе Тогда
					ФурнитураВСборе = СокрЛП(ФурнитураВСборе) + Символы.ПС + СтрокаНоменклатуры.Номенклатура + " - " + КоличествоНоменклатуры + " шт.";
				Иначе
					ФурнитураОтдельно = СокрЛП(ФурнитураОтдельно) + Символы.ПС + СтрокаНоменклатуры.Номенклатура + " - " + КоличествоНоменклатуры + " шт.";
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ВыборкаПоИзделиям.Сушка) Тогда
				ФурнитураВСборе = ФурнитураВСборе + Символы.ПС + ВыборкаПоИзделиям.Сушка + " - 1 шт.";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоИзделиям.Мойка) Тогда
				ФурнитураОтдельно = ФурнитураОтдельно + Символы.ПС + ВыборкаПоИзделиям.Мойка + " - 1 шт.";
			КонецЕсли;
			
			ОбластьТело.Параметры.ФурнитураОтдельно = СокрЛП(ФурнитураОтдельно);
			ОбластьТело.Параметры.ФурнитураВСборе = СокрЛП(ФурнитураВСборе);
			
			ТабДок.Вывести(ОбластьТело);
			
			////////////////
			
			СписокДеталейКороба = ВыборкаПоИзделиям.Изделие.СписокДеталей.Выгрузить();
			ЕстьДеталиКороба = Ложь;
			
			Если СписокДеталейКороба.Количество() > 0 Тогда
				
				ЕстьДеталиКороба = Истина;
				
				ТабДокДеталей = Новый ТабличныйДокумент;
				ТабДокДеталей.Вывести(ОбластьШапкаДетали);
				
				Для Каждого ЭлементКороба Из СписокДеталейКороба Цикл
					
					МассивДеталиКороба = СписокДеталей.НайтиСтроки(Новый Структура("НомерИзделия, НомерДеталиИзделия", ВыборкаПоИзделиям.НомерКороба, ЭлементКороба.НомерСтроки));
					
					//Если МассивДеталиКороба.Количество() = 1 Тогда
					Для Каждого ДетальКороба ИЗ МассивДеталиКороба Цикл
						
						ТекущаяДеталь = ДетальКороба;
						
						ТорцеваяЛента = Новый Структура;
						
						ТорцеваяЛента.Вставить("ТорцеваяЛентаСверху", ТекущаяДеталь.ВыборМебельнойКромкиСверху);
						ТорцеваяЛента.Вставить("ТорцеваяЛентаСнизу", ТекущаяДеталь.ВыборМебельнойКромкиСнизу);
						ТорцеваяЛента.Вставить("ТорцеваяЛентаСлева", ТекущаяДеталь.ВыборМебельнойКромкиСлева);
						ТорцеваяЛента.Вставить("ТорцеваяЛентаСправа", ТекущаяДеталь.ВыборМебельнойКромкиСправа);
						
						РазмерыКромок = ПолучитьРазмерыМатериалов(ТекущаяДеталь.Номенклатура, ТорцеваяЛента);
						
						НадписьДетали = ПолучитьНадпись(ТекущаяДеталь);
						
						НоваяВысотаДетали = 0;
						НоваяШиринаДетали = 0;
						НоваяКоличество = 0;
						
						//Размеры изделия
						ШиринаИзделия = ВыборкаПоИзделиям.ШиринаИзделия;
						ВысотаИзделия = ВыборкаПоИзделиям.ВысотаИзделия;
						ГлубинаИзделия = ВыборкаПоИзделиям.ГлубинаИзделия;
						Европаз = ВыборкаПоИзделиям.Европаз;
						Столешница = ВыборкаПоИзделиям.Столешница;
						ГлубинаМатериала = ВыборкаПоИзделиям.ГлубинаМатериала;
						ГлубинаМатериалаДоп = ВыборкаПоИзделиям.ГлубинаМатериалаДоп;
						
						Попытка
							Выполнить("НоваяВысотаДетали = " + ЭлементКороба.ВысотаДетали);
							НоваяВысотаДетали = НоваяВысотаДетали - РазмерыКромок.ВычитаемоеДляВысоты;
						Исключение
							НоваяВысотаДетали = ТекущаяДеталь.ВысотаДетали;
						КонецПопытки;
						
						Попытка
							Выполнить("НоваяШиринаДетали = " + ЭлементКороба.ШиринаДетали);
							НоваяШиринаДетали = НоваяШиринаДетали - РазмерыКромок.ВычитаемоеДляШирины;
						Исключение
							НоваяШиринаДетали = ТекущаяДеталь.ШиринаДетали;
						КонецПопытки;
						
						Попытка
							Выполнить("НоваяКоличество = " + ЭлементКороба.Количество);
						Исключение
							НоваяКоличество = ТекущаяДеталь.Количество;
						КонецПопытки;
						
						Редактирована = (НЕ ТекущаяДеталь.ВидДетали.ЭтоФасад И ТекущаяДеталь.ВидДетали <> ЭлементКороба.ВидДетали)
						ИЛИ ТекущаяДеталь.ДиаметрПазов <> ЭлементКороба.ДиаметрПазов
						ИЛИ ТекущаяДеталь.КоличествоПетель <> ЭлементКороба.КоличествоПетель
						ИЛИ ТекущаяДеталь.Обтачивать <> ЭлементКороба.Обтачивать
						ИЛИ ТекущаяДеталь.Срез <> ЭлементКороба.Срез
						ИЛИ ТекущаяДеталь.Количество <> НоваяКоличество
						ИЛИ ТекущаяДеталь.ВысотаДетали <> НоваяВысотаДетали
						ИЛИ ТекущаяДеталь.ШиринаДетали <> НоваяШиринаДетали;
						
						ОбластьСтрокаДетали.Параметры.НомерДетали = ЭлементКороба.НомерСтроки;
						ОбластьСтрокаДетали.Параметры.МатериалДетали = ТекущаяДеталь.Номенклатура;
						ОбластьСтрокаДетали.Параметры.ВысотаДетали = ОКР(ТекущаяДеталь.ВысотаДетали + РазмерыКромок.ВычитаемоеДляВысоты);
						ОбластьСтрокаДетали.Параметры.ШиринаДетали = ОКР(ТекущаяДеталь.ШиринаДетали + РазмерыКромок.ВычитаемоеДляШирины);
						ОбластьСтрокаДетали.Параметры.КолвоДетали = ТекущаяДеталь.Количество;
						ОбластьСтрокаДетали.Параметры.НадписьДетали = НадписьДетали;
						ОбластьСтрокаДетали.Параметры.Редактирована = Редактирована;
						
						ТабДокДеталей.Вывести(ОбластьСтрокаДетали);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ЕстьДеталиКороба Тогда
				
				ТабДок.Вывести(ТабДокДеталей.ПолучитьОбласть(1, 1, ТабДокДеталей.ВысотаТаблицы, ТабДокДеталей.ШиринаТаблицы));	
				
			КонецЕсли;
			
			КоличествоЯщиков = 0;
			
			СписокЯщиков = ВыборкаПоИзделиям.Ссылка.СписокЯщики;
			МассивЯщиков = Новый Массив();
			ТабДокЯщикиФасады = Новый ТабличныйДокумент;
			
			Если СписокЯщиков.Количество()>0 Тогда
				
				МассивЯщиков = СписокЯщиков.НайтиСтроки(Новый Структура("НомерИзделия", ВыборкаПоИзделиям.НомерКороба));
				
				Если МассивЯщиков.Количество()>0 Тогда
					
					КоличествоЯщиков = МассивЯщиков.Количество(); 
					ТабДокЯщикиФасады.Вывести(ОбластьШапкаЯщикиФасады);
					
					Для Каждого Ящ Из МассивЯщиков Цикл
						
						ОбластьСтрокаЯщикиФасады.Параметры.Номер = Ящ.НомерЯщикаИзделия;
						ОбластьСтрокаЯщикиФасады.Параметры.Данные = "Ящ: " + Ящ.НаправляющиеНоменклатура;
						
						ТабДокЯщикиФасады.Вывести(ОбластьСтрокаЯщикиФасады);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;

			КоличествоФасадов = 0;
			
			Если СписокФасадов.Количество() > 0 Тогда
				ТаблицаФасадов = СписокФасадов.НайтиСтроки(Новый Структура("sUID, ВидЭлемента", ВыборкаПоИзделиям.UID, "Фасад")); 
				КоличествоФасадов = ТаблицаФасадов.Количество();
			КонецЕсли;
			
			Если КоличествоФасадов > 0 Тогда
				
				Если МассивЯщиков.Количество() = 0 Тогда
					ТабДокЯщикиФасады.Вывести(ОбластьШапкаЯщикиФасады);
				КонецЕсли;
				
				Для Каждого Строка Из ТаблицаФасадов Цикл
					
					ОбластьСтрокаЯщикиФасады.Параметры.Номер = Строка.НомерДетали;
					
					СтрДанные = "";
					
					Если ЗначениеЗаполнено(Строка.Петли) Тогда
						 СтрДанные = СтрДанные + Строка.Петли + ": " + Строка.КоличествоПетель + " ";
					КонецЕсли;
					 
					Если ЗначениеЗаполнено(Строка.МеханизмФасада) Тогда
						 СтрДанные = СтрДанные + Строка.МеханизмФасада + ": " + Строка.КоличествоМеханизмФасада + " ";
					КонецЕсли;
					
					Если СтрДанные <> "" Тогда
						ОбластьСтрокаЯщикиФасады.Параметры.Данные = СтрДанные; 
						ТабДокЯщикиФасады.Вывести(ОбластьСтрокаЯщикиФасады);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если КоличествоЯщиков > 0 ИЛИ КоличествоФасадов > 0 Тогда
				 ТабДок.Присоединить(ТабДокЯщикиФасады);
			КонецЕсли;
			
			ТабДок.Вывести(ОбластьПустаяСтрока);
			
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьКоординатыПрисадокПоКаталогу(МассивДокументов, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ИзделиеПоКаталогу";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку= Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;	
	ТабДок.ПолеСправа = 2;
	ТабДок.ПолеСлева = 2;
	
	Логотип = ЛексСервер.ПолучитьЛоготипСервер(МассивДокументов[0]);
	
	ВидыФайлов = Новый Массив;
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.ЦеховаяСхема);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.ОсновнаяКартинка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыФайлов", ВидыФайлов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецификацияСписокИзделийПоКаталогу.Изделие
	|ПОМЕСТИТЬ втИзделия
	|ИЗ
	|	Документ.Спецификация.СписокИзделийПоКаталогу КАК СпецификацияСписокИзделийПоКаталогу
	|ГДЕ
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Файлы.ВладелецФайла КАК Изделие,
	|	Файлы.Вид КАК ВидФайла,
	|	Файлы.Ссылка КАК Данные
	|ПОМЕСТИТЬ втКартинки
	|ИЗ
	|	Справочник.ФайлыЛекс КАК Файлы
	|ГДЕ
	|	НЕ Файлы.ПометкаУдаления
	|	И Файлы.ВладелецФайла В
	|			(ВЫБРАТЬ
	|				т.Изделие
	|			ИЗ
	|				втИзделия КАК т)
	|	И Файлы.Вид В(&ВидыФайлов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецификацияСписокИзделийПоКаталогу.ВысотаФактическая КАК ВысотаКороба,
	|	СпецификацияСписокИзделийПоКаталогу.ГлубинаФактическая КАК ГлубинаКороба,
	|	СпецификацияСписокИзделийПоКаталогу.ШиринаФактическая КАК ШиринаКороба,
	|	СпецификацияСписокИзделийПоКаталогу.ГлубинаИзделия КАК ГлубинаИзделия,
	|	СпецификацияСписокИзделийПоКаталогу.ВысотаИзделия КАК ВысотаИзделия,
	|	СпецификацияСписокИзделийПоКаталогу.ВысотаИзделия КАК ВысотаИзделияВерх,
	|	СпецификацияСписокИзделийПоКаталогу.ВысотаИзделия КАК ВысотаИзделияНиз,
	|	СпецификацияСписокИзделийПоКаталогу.ШиринаИзделия КАК ШиринаИзделия,
	|	СпецификацияСписокИзделийПоКаталогу.Изделие КАК Изделие,
	|	СпецификацияСписокИзделийПоКаталогу.НомерСтроки КАК НомерКороба,
	|	СпецификацияСписокИзделийПоКаталогу.Изделие.Наименование КАК Наименование,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.Номер КАК Номер,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.Автор КАК Автор,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка КАК Ссылка,
	|	СпецификацияСписокИзделийПоКаталогу.Сушка,
	|	СпецификацияСписокИзделийПоКаталогу.Мойка,
	|	СпецификацияСписокИзделийПоКаталогу.Расположение,
	|	СпецификацияСписокИзделийПоКаталогу.Европаз КАК Европаз,
	|	СпецификацияСписокИзделийПоКаталогу.Столешница КАК Столешница,
	|	втКартинкиРисунок.Данные КАК РисунокКороба,
	|	втКартинкиСхема.Данные КАК СхемаКороба,
	|	КаталогДетали.НомерСтроки КАК НомерДеталиКороба,
	|	КаталогДетали.ШиринаДетали КАК КаталогШиринаДетали,
	|	КаталогДетали.ВысотаДетали КАК КаталогВысотаДетали,
	|	КаталогПрисадки.Название КАК ПрисадкиНазвание,
	|	КаталогПрисадки.Значение КАК ПрисадкиЗначение,
	|	КаталогПрисадки.НомерСтроки КАК ПрисадкиНомерСтроки
	|ИЗ
	|	Документ.Спецификация.СписокИзделийПоКаталогу КАК СпецификацияСписокИзделийПоКаталогу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогИзделий.СписокДеталей КАК КаталогДетали
	|		ПО СпецификацияСписокИзделийПоКаталогу.Изделие = КаталогДетали.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогИзделий.СписокКоординатПрисадок КАК КаталогПрисадки
	|		ПО (КаталогДетали.Ссылка = КаталогПрисадки.Ссылка)
	|			И (КаталогДетали.ИдентификаторПрисадок = КаталогПрисадки.ИдентификаторПрисадок)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКартинки КАК втКартинкиРисунок
	|		ПО СпецификацияСписокИзделийПоКаталогу.Изделие = втКартинкиРисунок.Изделие
	|			И (ВЫБОР
	|				КОГДА СпецификацияСписокИзделийПоКаталогу.Расположение = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.КартинкаПравая)
	|					ТОГДА втКартинкиРисунок.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.КартинкаПравая)
	|							ИЛИ втКартинкиРисунок.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.ОсновнаяКартинка)
	|				ИНАЧЕ втКартинкиРисунок.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.КартинкаЛевая)
	|						ИЛИ втКартинкиРисунок.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.ОсновнаяКартинка)
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКартинки КАК втКартинкиСхема
	|		ПО СпецификацияСписокИзделийПоКаталогу.Изделие = втКартинкиСхема.Изделие
	|			И (втКартинкиСхема.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.ЦеховаяСхема))
	|ГДЕ
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка В(&МассивДокументов)
	|	И НЕ КаталогПрисадки.ИдентификаторПрисадок ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерКороба,
	|	НомерДеталиКороба,
	|	ПрисадкиНомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(ГлубинаИзделия),
	|	МАКСИМУМ(ВысотаИзделия),
	|	МАКСИМУМ(ВысотаИзделияВерх),
	|	МАКСИМУМ(ВысотаИзделияНиз),
	|	МАКСИМУМ(ШиринаИзделия),
	|	МАКСИМУМ(Изделие),
	|	МАКСИМУМ(НомерКороба),
	|	МАКСИМУМ(Европаз),
	|	МАКСИМУМ(Столешница),
	|	МАКСИМУМ(РисунокКороба),
	|	МАКСИМУМ(СхемаКороба),
	|	МАКСИМУМ(КаталогШиринаДетали),
	|	МАКСИМУМ(КаталогВысотаДетали)
	|ПО
	|	Ссылка,
	|	НомерКороба,
	|	НомерДеталиКороба";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = Документы.Спецификация.ПолучитьМакет("КоординатыПрисадокПоКаталогу");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьИзображение = Макет.ПолучитьОбласть("ОбластьИзображение");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьНомерДетали = Макет.ПолучитьОбласть("НомерДетали");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьДетальРедактирована = Макет.ПолучитьОбласть("ДетальРедактирована");
	ОбластьОбщая = Макет.ПолучитьОбласть("ОбластьОбщая");
	
	Пока Выборка.Следующий() Цикл
		
		СписокДеталейСпец = Выборка.Ссылка.СписокДеталей.Выгрузить();
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		 
		ОбластьШапка.Параметры.НомерСпец = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер);
		
		Если ТипЗнч(Логотип) = Тип("ДвоичныеДанные") Тогда
			ОбластьШапка.Рисунки.К1.Картинка = Новый Картинка(Логотип);
			ОбластьШапка.Рисунки.К1.ВыводитьНаПечать = Истина;
		КонецЕсли;
		
		ВыборкаПоИзделиям = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоИзделиям.Следующий() Цикл
			
			ОбластьОбщая = Макет.ПолучитьОбласть("ОбластьОбщая");
			ТабДокИзделие = Новый ТабличныйДокумент();
			
			Если ЗначениеЗаполнено(ВыборкаПоИзделиям.РисунокКороба) Тогда
				ДвоичныеДанные = ВыборкаПоИзделиям.РисунокКороба.Данные.Получить();
				РисунокИзделияКартинка = Новый Картинка(ДвоичныеДанные);
			Иначе
				РисунокИзделияКартинка = Новый Картинка;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоИзделиям.СхемаКороба) Тогда
				ДвоичныеДанные = ВыборкаПоИзделиям.СхемаКороба.Данные.Получить();
				СхемаИзделияКартинка = Новый Картинка(ДвоичныеДанные);
			Иначе
				СхемаИзделияКартинка = Новый Картинка;
			КонецЕсли;
			
			ОбластьШапка.Рисунки.РисунокИзделия.Картинка = РисунокИзделияКартинка;
			ОбластьШапка.Параметры.НомерКороба = ВыборкаПоИзделиям.НомерКороба;
			ОбластьШапка.Параметры.Наименование = ВыборкаПоИзделиям.Изделие;
			
			ТабДокИзделие.Вывести(ОбластьШапка);
			ТабДокИзделие.Вывести(ОбластьШапкаТаблицы);
			
			//Размеры изделия
			
			ВысотаИзделия = ВыборкаПоИзделиям.ВысотаИзделия;
			ВысотаИзделияВерх = ВыборкаПоИзделиям.ВысотаИзделияВерх;
			ВысотаИзделияНиз = ВыборкаПоИзделиям.ВысотаИзделияНиз;
			
			ШиринаИзделия = ВыборкаПоИзделиям.ШиринаИзделия;
			ГлубинаИзделия = ВыборкаПоИзделиям.ГлубинаИзделия;
			
			Европаз = ВыборкаПоИзделиям.Европаз;
			Столешница = ВыборкаПоИзделиям.Столешница;
			
			ВыборкаПоДеталям = ВыборкаПоИзделиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
			Пока ВыборкаПоДеталям.Следующий() Цикл
				
				 ДетальРедактирована = Ложь;
				 МассивДеталиКороба = СписокДеталейСпец.НайтиСтроки(Новый Структура("НомерИзделия, НомерДеталиИзделия", ВыборкаПоИзделиям.НомерКороба, ВыборкаПоДеталям.НомерДеталиКороба));
					
				 Если МассивДеталиКороба.Количество() > 0 Тогда

					ТекущаяДеталь = МассивДеталиКороба[0];
					
					ТорцеваяЛента = Новый Структура;
					
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСверху", ТекущаяДеталь.ВыборМебельнойКромкиСверху);
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСнизу", ТекущаяДеталь.ВыборМебельнойКромкиСнизу);
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСлева", ТекущаяДеталь.ВыборМебельнойКромкиСлева);
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСправа", ТекущаяДеталь.ВыборМебельнойКромкиСправа);
					
					РазмерыКромок = ПолучитьРазмерыМатериалов(ТекущаяДеталь.Номенклатура, ТорцеваяЛента);
					
					НоваяВысотаДетали = 0;
					НоваяШиринаДетали = 0;

					Попытка
						Выполнить("НоваяВысотаДетали = " + ВыборкаПоДеталям.КаталогВысотаДетали);
						НоваяВысотаДетали = НоваяВысотаДетали - РазмерыКромок.ВычитаемоеДляВысоты;
					Исключение
						НоваяВысотаДетали = ТекущаяДеталь.ВысотаДетали;
					КонецПопытки;
					
					Попытка
						Выполнить("НоваяШиринаДетали = " + ВыборкаПоДеталям.КаталогШиринаДетали);
						НоваяШиринаДетали = НоваяШиринаДетали - РазмерыКромок.ВычитаемоеДляШирины;
					Исключение
						НоваяШиринаДетали = ТекущаяДеталь.ШиринаДетали;
					КонецПопытки;
										
					ДетальРедактирована = (ТекущаяДеталь.ВысотаДетали <> НоваяВысотаДетали ИЛИ ТекущаяДеталь.ШиринаДетали <> НоваяШиринаДетали);
				 
				  КонецЕсли;
				  
				  Если ДетальРедактирована Тогда
					  ОбластьДетальРедактирована.Параметры.НомерДетали = ВыборкаПоДеталям.НомерДеталиКороба;
					  ТабДокИзделие.Вывести(ОбластьДетальРедактирована);
					  
				  Иначе
					  
					ОбластьНомерДетали.Параметры.НомерДетали = ВыборкаПоДеталям.НомерДеталиКороба; 
				 	ТабДокИзделие.Вывести(ОбластьНомерДетали);
 
					ВыборкаПоПрисадкам = ВыборкаПоДеталям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
					Пока ВыборкаПоПрисадкам.Следующий() Цикл
						
						ОбластьСтрокаТаблицы.Параметры.Название = ВыборкаПоПрисадкам.ПрисадкиНазвание;
						
						ЗначениеПрисадки = "";
						 
						Попытка
							Выполнить("ЗначениеПрисадки = " + ВыборкаПоПрисадкам.ПрисадкиЗначение);
						Исключение
							ЗначениеПрисадки = "Ошибка";
						КонецПопытки;

						ОбластьСтрокаТаблицы.Параметры.Значение = ЗначениеПрисадки; 
						ТабДокИзделие.Вывести(ОбластьСтрокаТаблицы);
						 
					КонецЦикла;
					
				  КонецЕсли;

			КонецЦикла;
			
			ОбластьИзображение.Рисунки.СхемаИзделия.Картинка = СхемаИзделияКартинка;
			ТабДок.Вывести(ОбластьИзображение);
			
			ТабДок.Присоединить(ТабДокИзделие);

			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
					
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьШкафПоКаталогу(МассивДокументов, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ШкафПоКаталогу";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Данные КАК Изображение,
	|	Файлы.ВладелецФайла КАК Изделие,
	|	Файлы.Вид КАК ВидФайла
	|ПОМЕСТИТЬ ФайлыКаталога
	|ИЗ
	|	Справочник.ФайлыЛекс КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла ССЫЛКА Справочник.КаталогИзделий
	|	И (Файлы.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.ОсновнаяКартинка)
	|			ИЛИ Файлы.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.КартинкаЛевая)
	|			ИЛИ Файлы.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.КартинкаПравая))
	|	И НЕ Файлы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецификацияСписокИзделийПоКаталогу.ВысотаИзделия,
	|	СпецификацияСписокИзделийПоКаталогу.ГлубинаИзделия,
	|	СпецификацияСписокИзделийПоКаталогу.Изделие,
	|	СпецификацияСписокИзделийПоКаталогу.ШиринаИзделия КАК ШиринаИзделия,
	|	СпецификацияСписокИзделийПоКаталогу.НомерСтроки,
	|	ФайлыКаталога.Изображение КАК Изображение,
	|	СпецификацияСписокИзделийПоКаталогу.ВидИзделия КАК ВидИзделия,
	|	ФайлыКаталога.ВидФайла,
	|	СпецификацияСписокИзделийПоКаталогу.Комментарий,
	|	СпецификацияСписокИзделийПоКаталогу.НоменклатураЛДСП,
	|	СпецификацияСписокИзделийПоКаталогу.КромкаЛДСП,
	|	СпецификацияСписокИзделийПоКаталогу.Ручка,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.Подразделение КАК Подразделение,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.Контрагент КАК Контрагент,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.Номер КАК Номер,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка КАК Ссылка,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.Автор КАК Автор,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.ВариантШкафаПоКаталогу.КоличествоОтсеков КАК КоличествоОтсеков,
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка.ДатаИзготовления КАК ДатаИзготовления,
	|	СпецификацияСписокИзделийПоКаталогу.Изделие.НеВлияетНаОсновной КАК НеВлияетНаОсновной,
	|	СпецификацияСписокИзделийПоКаталогу.Завал,
	|	СпецификацияСписокИзделийПоКаталогу.ВидСтены,
	|	СпецификацияСписокИзделийПоКаталогу.Изделие.ВидИзделияПоКаталогу КАК ВидИзделияПоКаталогу,
	|	СпецификацияСписокИзделийПоКаталогу.НомерОтсека КАК НомерОтсека
	|ИЗ
	|	Документ.Спецификация.СписокИзделийПоКаталогу КАК СпецификацияСписокИзделийПоКаталогу
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФайлыКаталога КАК ФайлыКаталога
	|		ПО СпецификацияСписокИзделийПоКаталогу.Изделие = ФайлыКаталога.Изделие
	|			И (ВЫБОР
	|				КОГДА СпецификацияСписокИзделийПоКаталогу.ВидИзделия = ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.ЛевыйБоковойЭлемент)
	|					ТОГДА ФайлыКаталога.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.КартинкаЛевая)
	|				КОГДА СпецификацияСписокИзделийПоКаталогу.ВидИзделия = ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.ПравыйБоковойЭлемент)
	|					ТОГДА ФайлыКаталога.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.КартинкаПравая)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	СпецификацияСписокИзделийПоКаталогу.Ссылка В(&МассивДокументов)
	|ИТОГИ
	|	МАКСИМУМ(Подразделение),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Автор),
	|	МАКСИМУМ(ДатаИзготовления)
	|ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		Макет = Документы.Спецификация.ПолучитьМакет("ШкафПоКаталогу" + Выборка.КоличествоОтсеков);
		
		ОбластьОсновноеПоле = Макет.ПолучитьОбласть("ОсновноеПоле");
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ОбластьОсновноеПоле.Параметры.Заполнить(Выборка);
		
		ОбластьОсновноеПоле.Параметры.НомерСпецификации = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер);
		ОбластьОсновноеПоле.Параметры.ДатаИзготовления = Формат(Выборка.ДатаИзготовления,"ДФ=dd.MM.yyyy");
		
		КоличествоДверей = "Нет";
		ВысотаПроема = 0;
		ШиринаПроема = 0;
		
		Для Каждого ЭлементДвери Из Выборка.Ссылка.СписокДверей Цикл
			Если ЭлементДвери.ПоКаталогу Тогда
				КоличествоДверей = ЭлементДвери.Двери.Количество;
				ВысотаПроема = ЭлементДвери.Двери.ВысотаПроема;
				ШиринаПроема = ЭлементДвери.Двери.ШиринаПроема;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьОсновноеПоле.Параметры.КоличествоДверей = КоличествоДверей;
		ОбластьОсновноеПоле.Параметры.ВысотаПроема = ВысотаПроема;
		ОбластьОсновноеПоле.Параметры.ШиринаПроема = ШиринаПроема;
		
		Комментарий = "";
		ШиринаИзделия = 0;
		ВысотаИзделия = 0;
		ГлубинаИзделия = 0;
		
		ВыборкаПоКоробам = Выборка.Выбрать();
		
		Пока ВыборкаПоКоробам.Следующий() Цикл
			
			Комментарий = СокрЛП(Комментарий) + Символы.ПС + ВыборкаПоКоробам.Комментарий;
			ГлубинаИзделия = Макс(ГлубинаИзделия, ВыборкаПоКоробам.ГлубинаИзделия);
			
			Если ВыборкаПоКоробам.ВидИзделия = Справочники.ВидыИзделийПоКаталогу.Потолок Тогда
				
				Рисунок = ОбластьОсновноеПоле.Области.Крыша;
				ВысотаИзделия = ВысотаИзделия + ?(НЕ ВыборкаПоКоробам.НеВлияетНаОсновной, ВыборкаПоКоробам.ВысотаИзделия, 0);
				ОбластьОсновноеПоле.Параметры.ЗавалПотолок = ВыборкаПоКоробам.Завал;
				ОбластьОсновноеПоле.Параметры.ИзделиеПотолок = ВыборкаПоКоробам.Изделие;
				ОбластьОсновноеПоле.Параметры.СтенаПотолок = ВыборкаПоКоробам.ВидСтены;
				
				// +++ { [22.05.2015]
				// Жульдиков
				
				Если (ВыборкаПоКоробам.ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.КрышаКороб)
					ИЛИ(ВыборкаПоКоробам.ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.КрышаЧерезОпорнуюПланку) Тогда
					
					ОбластьОсновноеПоле.Параметры.КоробПотолок = ВыборкаПоКоробам.ВысотаИзделия;
				Иначе
					ОбластьОсновноеПоле.Параметры.КоробПотолок = 0;
				КонецЕсли;
				
				// +++ { [22.05.2015]
				
			ИначеЕсли ВыборкаПоКоробам.ВидИзделия = Справочники.ВидыИзделийПоКаталогу.ОсновнойЭлемент Тогда
				
				Отсек = ВыборкаПоКоробам.НомерОтсека;
				
				Если Отсек = 1 Тогда
					ВысотаИзделия = ВысотаИзделия + ВыборкаПоКоробам.ВысотаИзделия;
				КонецЕсли;
					
				ШиринаИзделия = ШиринаИзделия + ВыборкаПоКоробам.ШиринаИзделия;

				Рисунок = ОбластьОсновноеПоле.Области["Основной" + Отсек];
				
				ОбластьОсновноеПоле.Параметры.ЛДСП = ВыборкаПоКоробам.НоменклатураЛДСП;
				ОбластьОсновноеПоле.Параметры.Торцовка = ВыборкаПоКоробам.КромкаЛДСП;
				ОбластьОсновноеПоле.Параметры.Ручки = ВыборкаПоКоробам.Ручка;				
				
				ОбластьОсновноеПоле.Параметры["ЗавалСтенка" + Отсек] = ВыборкаПоКоробам.Завал;
				ОбластьОсновноеПоле.Параметры["ИзделиеСтенка" + Отсек] = ВыборкаПоКоробам.Изделие;
				ОбластьОсновноеПоле.Параметры["СтенаСтенка" + Отсек] = ВыборкаПоКоробам.ВидСтены;
				
			ИначеЕсли ВыборкаПоКоробам.ВидИзделия = Справочники.ВидыИзделийПоКаталогу.ЛевыйБоковойЭлемент Тогда
				
				Рисунок = ОбластьОсновноеПоле.Области.Левый;
				ОбластьОсновноеПоле.Параметры.Ручки = ?(ЗначениеЗаполнено(ОбластьОсновноеПоле.Параметры.Ручки), ОбластьОсновноеПоле.Параметры.Ручки, ВыборкаПоКоробам.Ручка);
				ШиринаИзделия = ШиринаИзделия + ?(НЕ ВыборкаПоКоробам.НеВлияетНаОсновной, ВыборкаПоКоробам.ШиринаИзделия, 0);
				ОбластьОсновноеПоле.Параметры.ЗавалЛевый = ВыборкаПоКоробам.Завал;
				ОбластьОсновноеПоле.Параметры.ИзделиеЛевый = ВыборкаПоКоробам.Изделие;
				ОбластьОсновноеПоле.Параметры.СтенаЛевый = ВыборкаПоКоробам.ВидСтены;
				
				// +++ { [22.05.2015]
				// Жульдиков
				
				Если (ВыборкаПоКоробам.ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.КоробБоковойСлева) 
					ИЛИ (ВыборкаПоКоробам.ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.БоковаяПанельЧерезОтбойнуюПланкуСлева)
					ИЛИ (ВыборкаПоКоробам.ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.ОтбойнаяПланкаСлева) Тогда
					
					Значение = ВыборкаПоКоробам.ШиринаИзделия;;
				Иначе
					Значение = 0;
				КонецЕсли;
				
				ОбластьОсновноеПоле.Параметры.КоробЛевый =Значение;
				
				// +++ { [22.05.2015]
				
			ИначеЕсли ВыборкаПоКоробам.ВидИзделия = Справочники.ВидыИзделийПоКаталогу.ПравыйБоковойЭлемент Тогда
				
				Рисунок = ОбластьОсновноеПоле.Области.Правый;
				ОбластьОсновноеПоле.Параметры.Ручки = ?(ЗначениеЗаполнено(ОбластьОсновноеПоле.Параметры.Ручки), ОбластьОсновноеПоле.Параметры.Ручки, ВыборкаПоКоробам.Ручка);
				ШиринаИзделия = ШиринаИзделия + ?(НЕ ВыборкаПоКоробам.НеВлияетНаОсновной, ВыборкаПоКоробам.ШиринаИзделия, 0);
				ОбластьОсновноеПоле.Параметры.ЗавалПравый = ВыборкаПоКоробам.Завал;
				ОбластьОсновноеПоле.Параметры.ИзделиеПравый = ВыборкаПоКоробам.Изделие;
				ОбластьОсновноеПоле.Параметры.СтенаПравый = ВыборкаПоКоробам.ВидСтены;
				
				// +++ { [22.05.2015]
				// Жульдиков
				
				Если (ВыборкаПоКоробам.ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.КоробБоковойСлева)
					ИЛИ (ВыборкаПоКоробам.ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.БоковаяПанельЧерезОтбойнуюПланкуСлева)
					ИЛИ (ВыборкаПоКоробам.ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.ОтбойнаяПланкаСлева) Тогда
					
					Значение = ВыборкаПоКоробам.ШиринаИзделия;
					
				Иначе
					
					Значение = 0;
					
				КонецЕсли;
				
				ОбластьОсновноеПоле.Параметры.КоробПравый = Значение;
				
				// Жульдиков
				
			ИначеЕсли ВыборкаПоКоробам.ВидИзделия = Справочники.ВидыИзделийПоКаталогу.Пол Тогда
				
				Рисунок = ОбластьОсновноеПоле.Области.Пол;
				ВысотаИзделия = ВысотаИзделия + ?(НЕ ВыборкаПоКоробам.НеВлияетНаОсновной, ВыборкаПоКоробам.ВысотаИзделия, 0);
				ОбластьОсновноеПоле.Параметры.ЗавалПол = ВыборкаПоКоробам.Завал;
				ОбластьОсновноеПоле.Параметры.ИзделиеПол = ВыборкаПоКоробам.Изделие;
				ОбластьОсновноеПоле.Параметры.СтенаПол = ВыборкаПоКоробам.ВидСтены;
				
				// +++ { [22.05.2015]
				// Жульдиков
				
				Если(ВыборкаПоКоробам.ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.ПолКороб)
					ИЛИ (ВыборкаПоКоробам.ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.ПолПодиум) Тогда
					
					Значение = ВыборкаПоКоробам.ВысотаИзделия;
					
				Иначе
					
					Значение = 0;
					
				КонецЕсли;
				
				ОбластьОсновноеПоле.Параметры.КоробПол = Значение;
				
				// } +++ [22.05.2015]
				
			ИначеЕсли ВыборкаПоКоробам.ВидИзделия = Справочники.ВидыИзделийПоКаталогу.ЗадняяСтенка Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если Рисунок <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(ВыборкаПоКоробам.Изображение) Тогда
					Рисунок.Картинка = Новый Картинка(ВыборкаПоКоробам.Изображение.Получить());
				Иначе
					Рисунок.Картинка = Новый Картинка;
				КонецЕсли;
				Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбластьОсновноеПоле.Параметры.ШиринаИзделия = ШиринаИзделия;
		ОбластьОсновноеПоле.Параметры.ВысотаИзделия = ВысотаИзделия;
		ОбластьОсновноеПоле.Параметры.ГлубинаИзделия = ГлубинаИзделия;
		ОбластьОсновноеПоле.Параметры.Комментарий = Комментарий;
		ТабДок.Вывести(ОбластьОсновноеПоле);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьКриволинейныеДеталиФРС(МассивДокументов, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДок.ТочностьПечати=ТочностьПечати.Точная;
	
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу = 2;
	ТабДок.ПолеСлева = 5;
	ТабДок.ПолеСправа = 2;
	
	ТабДок.РазмерКолонтитулаСверху = 0;
	ТабДок.РазмерКолонтитулаСнизу = 0;
	
	Макет = Документы.Спецификация.ПолучитьМакет("Раскрой");
	ОбластьКартинка = Макет.ПолучитьОбласть("Картинка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", МассивДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаскройДеталей.Объект КАК Ссылка,
	|	РаскройДеталей.РисунокКривогоПилаФРС
	|ИЗ
	|	РегистрСведений.РаскройДеталей КАК РаскройДеталей
	|ГДЕ
	|	РаскройДеталей.Объект В(&Объект)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьРисунки = Ложь; 
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		МассивПараметровКривогоПила = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Выборка.РисунокКривогоПилаФРС,"save☻", ""), "☺");
		
		Для Каждого Строка Из МассивПараметровКривогоПила Цикл
			
			ДанныеКривогоПила = Base64Значение(Строка);
			
			ОбластьКартинка.Рисунки.D1.Картинка = Новый Картинка(ДанныеКривогоПила);
			ТабДок.Вывести(ОбластьКартинка);
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			ЕстьРисунки = Истина;
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Если НЕ ЕстьРисунки Тогда
		ТабДок.Очистить();	
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьКриволинейныеДеталиСтеколка(МассивДокументов, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДок.ТочностьПечати=ТочностьПечати.Точная;
	
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу = 2;
	ТабДок.ПолеСлева = 5;
	ТабДок.ПолеСправа = 2;
	
	ТабДок.РазмерКолонтитулаСверху = 0;
	ТабДок.РазмерКолонтитулаСнизу = 0;
	
	Макет = Документы.Спецификация.ПолучитьМакет("Раскрой");
	ОбластьКартинка = Макет.ПолучитьОбласть("Картинка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", МассивДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаскройДеталей.Объект КАК Ссылка,
	|	РаскройДеталей.РисунокКривогоПилаСтеколка
	|ИЗ
	|	РегистрСведений.РаскройДеталей КАК РаскройДеталей
	|ГДЕ
	|	РаскройДеталей.Объект В(&Объект)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьРисунки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		МассивПараметровКривогоПила = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Выборка.РисунокКривогоПилаСтеколка,"save☻", ""), "☺");
		
		Для Каждого Строка Из МассивПараметровКривогоПила Цикл
			
			ДанныеКривогоПила = Base64Значение(Строка);
			
			ОбластьКартинка.Рисунки.D1.Картинка = Новый Картинка(ДанныеКривогоПила);
			ТабДок.Вывести(ОбластьКартинка);
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			ЕстьРисунки = Истина;
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Если НЕ ЕстьРисунки Тогда
		ТабДок.Очистить();	
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьКриволинейныеДеталиИзРедактора(МассивДокументов, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДок.ТочностьПечати=ТочностьПечати.Точная;
	
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу = 2;
	ТабДок.ПолеСлева = 5;
	ТабДок.ПолеСправа = 2;
	
	ТабДок.РазмерКолонтитулаСверху = 0;
	ТабДок.РазмерКолонтитулаСнизу = 0;
	
	Макет = Документы.Спецификация.ПолучитьМакет("Раскрой");
	ОбластьКартинка = Макет.ПолучитьОбласть("Картинка");
	
	НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
	ДанныеКривогоПила = Base64Значение(СтрЗаменить(МассивДокументов.СтрокаКартинка,"save☻", ""));
	
	ОбластьКартинка.Рисунки.D1.Картинка = Новый Картинка(ДанныеКривогоПила);
	ТабДок.Вывести(ОбластьКартинка);
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Неопределено);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьРаскройСпецификации(МассивДокументов, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДок.ТочностьПечати=ТочностьПечати.Точная;
	
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу = 2;
	ТабДок.ПолеСлева = 5;
	ТабДок.ПолеСправа = 2;
	
	ТабДок.РазмерКолонтитулаСверху = 0;
	ТабДок.РазмерКолонтитулаСнизу = 0;
	
	Макет = Документы.Спецификация.ПолучитьМакет("Раскрой");
	ОбластьКартинка = Макет.ПолучитьОбласть("Картинка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", МассивДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаскройДеталей.РисунокРаскроя,
	|	РаскройДеталей.Объект КАК Ссылка
	|ИЗ
	|	РегистрСведений.РаскройДеталей КАК РаскройДеталей
	|ГДЕ
	|	РаскройДеталей.Объект В(&Объект)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьРисунки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Выборка.РисунокРаскроя,"save☻", ""), "☺");
		
		Для Каждого Элемент Из МассивПараметров Цикл
			
			Данные = Base64Значение(Элемент);
			
			ОбластьКартинка.Рисунки.D1.Картинка = Новый Картинка(Данные);
			ТабДок.Вывести(ОбластьКартинка);
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			ЕстьРисунки = Истина;
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Если НЕ ЕстьРисунки Тогда
		ТабДок.Очистить();
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

Функция СформироватьЗаголовок(Префикс, Длина, Постфикс)
	
	ДлинаДобавления = Длина - СтрДлина(Префикс);
	Результат = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Префикс, ДлинаДобавления, " ", "Справа");
	
	Возврат Результат + Постфикс;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ДлинаЗаголовка = 30;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СпецификацияЯщики") Тогда
		
		ПодготовитьПечатнуюФорму("СпецификацияЯщики",
		СформироватьЗаголовок("Ящики:", ДлинаЗаголовка, "Cпецификация"),
		"Документ.Спецификация.Спецификация",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СпецификацияСтекольная") Тогда
		
		ПодготовитьПечатнуюФорму("СпецификацияСтекольная",
		СформироватьЗаголовок("Стекольная:", ДлинаЗаголовка, "Cпецификация"),
		"Документ.Спецификация.Спецификация",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СпецификацияСборка") Тогда
		
		ПодготовитьПечатнуюФорму("СпецификацияСборка",
		СформироватьЗаголовок("Сборка:", ДлинаЗаголовка, "Спецификация"),
		"Документ.Спецификация.Спецификация",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СпецификацияОТК") Тогда
		
		ПодготовитьПечатнуюФорму("СпецификацияОТК",
		СформироватьЗаголовок("", ДлинаЗаголовка, "Спецификация"),
		"Документ.Спецификация.Спецификация",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МатериалЗаказчика") Тогда
		
		ПодготовитьПечатнуюФорму("МатериалЗаказчика",
		"Материал заказчика",
		"Документ.Спецификация.ПечатьМатериалЗаказчика",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктГотовности") Тогда
		
		ПодготовитьПечатнуюФорму("АктГотовности",
		СформироватьЗаголовок("ОТК:", ДлинаЗаголовка, "Акт готовности"),
		"Документ.Спецификация.АктГотовности",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИзделиеПоКаталогу") Тогда
		
		ПодготовитьПечатнуюФорму("ИзделиеПоКаталогу",
		СформироватьЗаголовок("", ДлинаЗаголовка, "По каталогу"),
		"Документ.Спецификация.ИзделиеПоКаталогу",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПрисадкиПоКаталогу") Тогда
		
		ПодготовитьПечатнуюФорму("ПрисадкиПоКаталогу",
		СформироватьЗаголовок("", ДлинаЗаголовка, "Присадки"),
		"Документ.Спецификация.ПрисадкиПоКаталогу",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоординатыПрисадокПоКаталогу") Тогда
		
		ПодготовитьПечатнуюФорму("КоординатыПрисадокПоКаталогу",
		СформироватьЗаголовок("", ДлинаЗаголовка, "Координаты присадок по каталогу"),
		"Документ.Спецификация.КоординатыПрисадок",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ШкафПоКаталогу") Тогда
		
		ПодготовитьПечатнуюФорму("ШкафПоКаталогу",
		СформироватьЗаголовок("", ДлинаЗаголовка, "По каталогу"),
		"Документ.Спецификация.ШкафПоКаталогу",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Заказ") Тогда
		
		ПодготовитьПечатнуюФорму("Заказ",
		СформироватьЗаголовок("", ДлинаЗаголовка, "Заказ"),
		"Документ.Спецификация.Заказ",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УпаковочныйЛист") Тогда
		
		ПодготовитьПечатнуюФорму("УпаковочныйЛист",
		СформироватьЗаголовок("", ДлинаЗаголовка, "Упаковочный лист"),
		"Документ.Спецификация.УпаковочныйЛист",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьТорг12") Тогда
		                 
		ПодготовитьПечатнуюФорму("ПечатьТорг12",
		СформироватьЗаголовок("", ДлинаЗаголовка, "ТОРГ12"),
		"Документ.РеализацияМатериалов.ПечатьТорг12",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Раскрой") Тогда
		
		ПодготовитьПечатнуюФорму("Раскрой",
		СформироватьЗаголовок("", ДлинаЗаголовка, "Раскрой"),
		"Документ.Спецификация.Раскрой",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КриволинейныеДеталиФРС") Тогда
		
		ПодготовитьПечатнуюФорму("КриволинейныеДеталиФРС",
		СформироватьЗаголовок("", ДлинаЗаголовка, "Криволинейные детали"),
		"Документ.Спецификация.Раскрой",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КриволинейныеДеталиСтеколка") Тогда
		
		ПодготовитьПечатнуюФорму("КриволинейныеДеталиСтеколка",
		СформироватьЗаголовок("", ДлинаЗаголовка, "Криволинейные детали"),
		"Документ.Спецификация.Раскрой",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КриволинейныеДеталиИзРедактора") Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("СтрокаКартинка",ПараметрыПечати.СтрокаКартинка);
		Параметры.Вставить("МассивОбъектов",МассивОбъектов);
		
		ПодготовитьПечатнуюФорму("КриволинейныеДеталиИзРедактора",
		"Криволинейные детали из редактора",
		"Документ.Спецификация.Раскрой",
		Параметры,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Эскиз") Тогда
		
		ПодготовитьПечатнуюФорму("Эскиз",
		СформироватьЗаголовок("", ДлинаЗаголовка, "Эскиз"),
		"Документ.Договор.Эскиз",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗамерныйЛист") Тогда
		
		ПодготовитьПечатнуюФорму("ЗамерныйЛист",
		"Замерный лист",
		"Документ.Спецификация.ПечатьКартинки",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МонтажнаяСхема") Тогда
		
		ПодготовитьПечатнуюФорму("МонтажнаяСхема",
		СформироватьЗаголовок("", ДлинаЗаголовка, "Монтажная схема"),
		"Документ.Спецификация.ПечатьКартинки",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЦеховаяСхема") Тогда
		
		ПодготовитьПечатнуюФорму("ЦеховаяСхема",
		СформироватьЗаголовок("", ДлинаЗаголовка, "Цеховая схема"),
		"Документ.Спецификация.ПечатьКартинки",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Комплектация") Тогда
		
		ПодготовитьПечатнуюФорму("Комплектация",
		"Комплектация",
		"Документ.Спецификация.Спецификация",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЧертежДвери") Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("КартинкиДвери", ПараметрыПечати.КартинкиДвери);
		Параметры.Вставить("МассивОбъектов", МассивОбъектов);
		
		ПодготовитьПечатнуюФорму("ЧертежДвери",
		СформироватьЗаголовок("", ДлинаЗаголовка, "Чертеж двери"),
		"",
		Параметры,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплатуПокупателю") Тогда
		
		ПодготовитьПечатнуюФорму("СчетНаОплатуПокупателю",
		"Счет на оплату покупателю",
		"Документ.Спецификация.СчетНаОплатуПокупателю",
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
КонецПроцедуры

Функция ПечатьМатериалЗаказчика(МассивДокументов, ОбъектыПечати) Экспорт
	
	Макет = Документы.Спецификация.ПолучитьМакет("МатериалЗаказчика");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСписокНоменклатурыШапка = Макет.ПолучитьОбласть("ШапкаНоменклатуры");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификацияСписокНоменклатуры.Ссылка КАК Ссылка,
	|	СпецификацияСписокНоменклатуры.Ссылка.ДатаИзготовления КАК ДатаИзготовления,
	|	СпецификацияСписокНоменклатуры.Ссылка.Номер КАК Номер,
	|	СпецификацияСписокНоменклатуры.Ссылка.Контрагент КАК Контрагент,
	|	СпецификацияСписокНоменклатуры.Номенклатура,
	|	СУММА(СпецификацияСписокНоменклатуры.Количество) КАК Количество,
	|	СпецификацияСписокНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МатЗаказчика.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.Спецификация.СписокНоменклатуры КАК СпецификацияСписокНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокМатериаловЗаказчика КАК МатЗаказчика
	|		ПО СпецификацияСписокНоменклатуры.Номенклатура = МатЗаказчика.Номенклатура
	|			И СпецификацияСписокНоменклатуры.Ссылка = МатЗаказчика.Ссылка
	|ГДЕ
	|	СпецификацияСписокНоменклатуры.ПредоставитЗаказчик
	|	И СпецификацияСписокНоменклатуры.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацияСписокНоменклатуры.Номенклатура,
	|	СпецификацияСписокНоменклатуры.Ссылка.ДатаИзготовления,
	|	СпецификацияСписокНоменклатуры.Ссылка.Номер,
	|	СпецификацияСписокНоменклатуры.Ссылка.Контрагент,
	|	СпецификацияСписокНоменклатуры.Номенклатура.ЕдиницаИзмерения,
	|	МатЗаказчика.Комментарий,
	|	СпецификацияСписокНоменклатуры.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаИзготовления),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Контрагент)
	|ПО
	|	Ссылка";
	
	Запрос.Параметры.Вставить("МассивДокументов", МассивДокументов);
	ВставлятьРазделительСтраниц = Ложь;
	ВыборкаПоДокументу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтроки = 0;
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументу);
		ОбластьШапка.Параметры.СпецификацияНомер = Формат(Число(ВыборкаПоДокументу.Номер), "ЧГ=");
		ОбластьШапка.Параметры.ДатаИзготовления = Формат(ВыборкаПоДокументу.ДатаИзготовления, "ДЛФ=DD");
		ТабДок.Вывести(ОбластьШапка, ВыборкаПоДокументу.Уровень());
		ТабДок.Вывести(ОбластьСписокНоменклатурыШапка);
		
		ВыборкаСтроки = ВыборкаПоДокументу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтроки.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтрока.Параметры.Заполнить(ВыборкаСтроки);
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
			ТабДок.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
		ОбластьПодвал.Параметры.Заполнить(ВыборкаПоДокументу);
		ТабДок.Вывести(ОбластьПодвал);
		ВставлятьРазделительСтраниц = Истина;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументу.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Процедура ПодготовитьПечатнуюФорму(Знач ИмяМакета, ПредставлениеМакета, ПолныйПутьКМакету = "", МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	
	Если ИмяМакета = "СпецификацияЯщики" Тогда
		
		ТабДок = ПечатьСпецификации(МассивОбъектов, ОбъектыПечати, "Зона Ящики");
		
	ИначеЕсли ИмяМакета = "СпецификацияСтекольная" Тогда
		
		ТабДок = ПечатьСпецификации(МассивОбъектов, ОбъектыПечати, "Стекольная зона");
		
	ИначеЕсли ИмяМакета = "СпецификацияСборка" Тогда
		
		ТабДок = ПечатьСпецификации(МассивОбъектов, ОбъектыПечати, "Зона сборки");
		
	ИначеЕсли ИмяМакета = "СпецификацияОТК" Тогда
		
		ТабДок = ПечатьСпецификации(МассивОбъектов, ОбъектыПечати, "Зона ОТК");
		
	ИначеЕсли ИмяМакета = "АктГотовности" Тогда
		
		ТабДок = ПечатьАктГотовности(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "МатериалЗаказчика" Тогда
		
		ТабДок = ПечатьМатериалЗаказчика(МассивОбъектов, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, 
		ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
		
	ИначеЕсли ИмяМакета = "ИзделиеПоКаталогу" Тогда
		
		ТабДок = ПечатьИзделиеПоКаталогу(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "ПрисадкиПоКаталогу" Тогда
		
		ТабДок = ПечатьПрисадкиПоКаталогу(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "КоординатыПрисадокПоКаталогу" Тогда
		
		ТабДок = ПечатьКоординатыПрисадокПоКаталогу(МассивОбъектов, ОбъектыПечати);
			
	ИначеЕсли ИмяМакета = "ШкафПоКаталогу" Тогда
		
		ТабДок = ПечатьШкафПоКаталогу(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "Заказ" Тогда
		
		ТабДок = ПечатьЗаказ(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "УпаковочныйЛист" Тогда
		
		ТабДок = ПечатьУпаковочныйЛист(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "АктГотовности" Тогда
		
		ТабДок = ПечатьАктГотовности(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "ПечатьТорг12" Тогда
		
		ТабДок = ЛексСервер.ПечататьТорг12(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "Раскрой" Тогда
		
		ТабДок = ПечатьРаскройСпецификации(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "КриволинейныеДеталиФРС" Тогда
		
		ТабДок = ПечатьКриволинейныеДеталиФРС(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "КриволинейныеДеталиСтеколка" Тогда
		
		ТабДок = ПечатьКриволинейныеДеталиСтеколка(МассивОбъектов, ОбъектыПечати);	
		
	ИначеЕсли ИмяМакета = "КриволинейныеДеталиИзРедактора" Тогда
		
		ТабДок = ПечатьКриволинейныеДеталиИзРедактора(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "ЧертежДвери" Тогда
		
		ТабДок = ПечатьЧертежДвери(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "Эскиз" Тогда
		
		ТабДок = ПечатьЭскиз(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "ЗамерныйЛист" Тогда
		
		ТабДок = ПечатьЗамерныйЛист(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "МонтажнаяСхема" Тогда
		
		ТабДок = ПечатьМонтажнаяСхема(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "ЦеховаяСхема" Тогда
		
		ТабДок = ПечатьЦеховаяСхема(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "Комплектация" Тогда
		
		ТабДок = ПечатьКомплектации(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "СчетНаОплатуПокупателю" Тогда
		
		ТабДок = ПечатьСчетНаОплатуПокупателю(МассивОбъектов, ОбъектыПечати);
		
	КонецЕсли;
	
	ПФорма = КоллекцияПечатныхФорм.Найти(ИмяМакета, "ИмяМакета");
	Если ЗначениеЗаполнено(ПФорма) И ТабДок.КоличествоЭкземпляров > 1 Тогда
		ПФорма.Экземпляров = ТабДок.КоличествоЭкземпляров;
	КонецЕсли;
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, ПредставлениеМакета, ТабДок, , ПолныйПутьКМакету);
	
КонецПроцедуры

Функция ПолучитьОсновныеИзСписокНоменклатуры(Спецификация, НомГруппа)
	
	Мас=Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("НомГруппа", НомГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписНом.Номенклатура КАК Номенклатура,
	|	СписНом.Номенклатура.НоменклатурнаяГруппа КАК НомГруппа,
	|	СписНом.Номенклатура.НоменклатурнаяГруппа.Родитель КАК НомГруппаРод,
	|	СУММА(СписНом.Количество) КАК Сум
	|ИЗ
	|	Документ.Спецификация.СписокНоменклатуры КАК СписНом
	|ГДЕ
	|	СписНом.Ссылка = &Спецификация
	|	И СписНом.Номенклатура.НоменклатурнаяГруппа В ИЕРАРХИИ (&НомГруппа)
	|СГРУППИРОВАТЬ ПО
	|	СписНом.Номенклатура
	|УПОРЯДОЧИТЬ ПО
	|	НомГруппа";
	
	ВыборкаМат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаМат.Следующий() Цикл
		
		СТ=Новый Структура;
		СТ.Вставить("Номенклатура", ВыборкаМат.Номенклатура);
		СТ.Вставить("НомГруппа", ВыборкаМат.НомГруппа);
		СТ.Вставить("НомГруппаРод", ВыборкаМат.НомГруппаРод);
		СТ.Вставить("Количество", ВыборкаМат.Сум);
		Мас.Добавить(СТ);
		
	КонецЦикла;
	
	Возврат Мас;
	
КонецФункции

Процедура ЗаполнитьПараметрМакетаЭскиз(Мас, ПарамМакета)
	
	Если Мас.Количество()>0 Тогда
		
		Инд2=0;
		Инд=0;
		Кол=0;
		
		Для каждого Элем Из Мас Цикл
			Если Элем[1]>Кол Тогда
				Кол=Элем[1];
				Инд=Инд2;
			КонецЕсли;
			Инд2=Инд2+1;
		КонецЦикла;
		
		ПарамМакета=Мас[Инд][0];
		
		Мас.Удалить(Инд);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьЭскиз(Выборка, ОбъектыПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_Эскиз";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ТабДок.ТочностьПечати=ТочностьПечати.Точная;
	
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу = 5;
	ТабДок.ПолеСлева = 5;
	ТабДок.ПолеСправа = 5;
	
	ТабДок.РазмерКолонтитулаСверху = 1;
	ТабДок.РазмерКолонтитулаСнизу = 1;
	
	Спецификация=Выборка[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	Если Спецификация.Дилерский Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорДилера.Ссылка
		|ИЗ
		|	Документ.ДоговорДилера КАК ДоговорДилера
		|ГДЕ
		|	ДоговорДилера.Спецификация = &Спецификация";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Договор.Ссылка
		|ИЗ
		|	Документ.Договор КАК Договор
		|ГДЕ
		|	Договор.Спецификация = &Спецификация";
		
	КонецЕсли;
	
	ВыборкаДоговор = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДоговор.Количество() > 0 Тогда
		
		ВыборкаДоговор.Следующий();
		Договор = ВыборкаДоговор.Ссылка;
		
	КонецЕсли;
	
	Контрагент=Спецификация.Контрагент;
	СписокДверей=Спецификация.СписокДверей;
	
	ПараметрыМакета=Новый Структура;
	
	ПараметрыМакета.Вставить("НомерСпецификации",Спецификация);
	Если ЗначениеЗаполнено(Договор) Тогда
		ПараметрыМакета.Вставить("НомерДоговора",Договор);
	Иначе
		ПараметрыМакета.Вставить("НомерДоговора","");
	КонецЕсли;
	
	Если Спецификация.Дилерский Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ПараметрыМакета.Вставить("АдресМонтажа",Спецификация.АдресМонтажа);
	ПараметрыМакета.Вставить("Телефон",Контрагент.Телефон);
	ПараметрыМакета.Вставить("ДатаМонтажа",Формат(Спецификация.ДатаМонтажа,"ДФ=dd.MM.yy"));
	ПараметрыМакета.Вставить("ОсновнойЛДСП","----");
	ПараметрыМакета.Вставить("ДополнительныйЛДСП","----");
	ПараметрыМакета.Вставить("ОсновнойДВП","----");
	ПараметрыМакета.Вставить("ОсновнойМДФ","----");
	ПараметрыМакета.Вставить("ДополнительныйМДФ","----");
	ПараметрыМакета.Вставить("Кромка","----");
	ПараметрыМакета.Вставить("ДополнительнаяКромка","----");
	ПараметрыМакета.Вставить("АлПрофиль","----");
	ПараметрыМакета.Вставить("Ручка","----");
	ПараметрыМакета.Вставить("КромкаМДФ","----");
	ПараметрыМакета.Вставить("АГТ","----");
	ПараметрыМакета.Вставить("Мойка","----");
	ПараметрыМакета.Вставить("Пристенок","----");
	ПараметрыМакета.Вставить("Столешница","----");
	ПараметрыМакета.Вставить("Цоколь","----");
	ПараметрыМакета.Вставить("Примечание",Спецификация.Комментарий);
	ПараметрыМакета.Вставить("Проемы","");
	
	НомГруппы=Справочники.НоменклатурныеГруппы;
	
	МассивНомГрупп=Новый Массив;
	МассивНомГрупп.Добавить(НомГруппы.ЛДСП);
	МассивНомГрупп.Добавить(НомГруппы.ДВП);
	МассивНомГрупп.Добавить(НомГруппы.МДФ);
	МассивНомГрупп.Добавить(НомГруппы.Мойка);
	МассивНомГрупп.Добавить(НомГруппы.Ручка);
	МассивНомГрупп.Добавить(НомГруппы.Столешница);
	МассивНомГрупп.Добавить(НомГруппы.ВертикальныйПрофильСимметричный);
	МассивНомГрупп.Добавить(НомГруппы.ВертикальныйПрофильАсимметричный);
	МассивНомГрупп.Добавить(НомГруппы.Цоколь);
	МассивНомГрупп.Добавить(НомГруппы.АГТПрофиль);
	МассивНомГрупп.Добавить(НомГруппы.Кромка);
	МассивНомГрупп.Добавить(НомГруппы.Кант);
	МассивНомГрупп.Добавить(НомГруппы.КромкаМДФ);
	МассивНомГрупп.Добавить(НомГруппы.Пристенок);
	
	НомВыборка = ПолучитьОсновныеИзСписокНоменклатуры(Спецификация,МассивНомГрупп);
	
	МасЛДСП=Новый Массив;
	МасДВП=Новый Массив;
	МасМДФ=Новый Массив;
	МасМойка=Новый Массив;
	МасРучка=Новый Массив;
	МасСтолешница=Новый Массив;
	МасАлюминиевыйПрофиль=Новый Массив;
	МасЦоколь=Новый Массив;
	МасАГТ=Новый Массив;
	МасКромка=Новый Массив;
	МасКромкаМДФ=Новый Массив;
	МасПристенок=Новый Массив;
	
	Для каждого Элемент Из НомВыборка Цикл
		
		Мас=Новый Массив;
		Мас.Добавить(Элемент.Номенклатура);
		Мас.Добавить(Элемент.Количество);
		
		Если Элемент.НомГруппаРод = НомГруппы.ЛДСП Тогда
			МасЛДСП.Добавить(Мас);
			Продолжить;
		КонецЕсли;
		
		Если Элемент.НомГруппа = НомГруппы.ДВП Тогда 
			МасДВП.Добавить(Мас);
			Продолжить;
		КонецЕсли;
		
		Если Элемент.НомГруппаРод = НомГруппы.МДФ Тогда 
			МасМДФ.Добавить(Мас);
			Продолжить;
		КонецЕсли;
		
		Если Элемент.НомГруппа = НомГруппы.Мойка Тогда 
			МасМойка.Добавить(Мас);
			Продолжить;
		КонецЕсли;
		
		Если Элемент.НомГруппа=НомГруппы.Ручка Тогда 
			МасРучка.Добавить(Мас);
			Продолжить;
		КонецЕсли;
		
		Если Элемент.НомГруппа=НомГруппы.Столешница Тогда 
			МасСтолешница.Добавить(Мас);
			Продолжить;
		КонецЕсли;
		
		Если Элемент.НомГруппа=НомГруппы.ВертикальныйПрофильСимметричный
			ИЛИ Элемент.НомГруппа=НомГруппы.ВертикальныйПрофильАсимметричный Тогда 
			МасАлюминиевыйПрофиль.Добавить(Мас);
			Продолжить;
		КонецЕсли;
		
		Если Элемент.НомГруппа=НомГруппы.Цоколь Тогда 
			МасЦоколь.Добавить(Мас);
			Продолжить;
		КонецЕсли;
		
		Если Элемент.НомГруппа=НомГруппы.АГТПрофиль Тогда 
			МасАГТ.Добавить(Мас);
			Продолжить;
		КонецЕсли;
		
		Если Элемент.НомГруппа=НомГруппы.Пристенок Тогда 
			МасПристенок.Добавить(Мас);
			Продолжить;
		КонецЕсли;
		
		Если ((Элемент.НомГруппаРод=НомГруппы.Кромка) ИЛИ (Элемент.НомГруппаРод=НомГруппы.Кант)) И НЕ(Элемент.НомГруппа=НомГруппы.КромкаМДФ)  Тогда 
			МасКромка.Добавить(Мас);
			Продолжить;
		КонецЕсли;
		
		Если Элемент.НомГруппа=НомГруппы.КромкаМДФ  Тогда 
			МасКромкаМДФ.Добавить(Мас);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьПараметрМакетаЭскиз(МасЛДСП,ПараметрыМакета.ОсновнойЛДСП);
	ЗаполнитьПараметрМакетаЭскиз(МасЛДСП,ПараметрыМакета.ДополнительныйЛДСП);
	ЗаполнитьПараметрМакетаЭскиз(МасДВП,ПараметрыМакета.ОсновнойДВП);
	ЗаполнитьПараметрМакетаЭскиз(МасМДФ,ПараметрыМакета.ОсновнойМДФ);
	ЗаполнитьПараметрМакетаЭскиз(МасМДФ,ПараметрыМакета.ДополнительныйМДФ);
	ЗаполнитьПараметрМакетаЭскиз(МасМойка,ПараметрыМакета.Мойка);
	ЗаполнитьПараметрМакетаЭскиз(МасРучка,ПараметрыМакета.Ручка);
	ЗаполнитьПараметрМакетаЭскиз(МасСтолешница,ПараметрыМакета.Столешница);
	ЗаполнитьПараметрМакетаЭскиз(МасАлюминиевыйПрофиль,ПараметрыМакета.АлПрофиль);
	ЗаполнитьПараметрМакетаЭскиз(МасЦоколь,ПараметрыМакета.Цоколь);
	ЗаполнитьПараметрМакетаЭскиз(МасАГТ,ПараметрыМакета.АГТ);
	ЗаполнитьПараметрМакетаЭскиз(МасКромка,ПараметрыМакета.Кромка);
	ЗаполнитьПараметрМакетаЭскиз(МасКромка,ПараметрыМакета.ДополнительнаяКромка);
	ЗаполнитьПараметрМакетаЭскиз(МасКромкаМДФ,ПараметрыМакета.КромкаМДФ);
	ЗаполнитьПараметрМакетаЭскиз(МасПристенок,ПараметрыМакета.Пристенок);
	
	Если СписокДверей.Количество()>0 Тогда
		
		ПрСтр="Размеры проемов: ";
		Для каждого Дв Из СписокДверей Цикл
			
			ПрСтр=ПрСтр+Формат(Дв.Двери.ВысотаПроема, "ЧГ=0")+"x"+Формат(Дв.Двери.ШиринаПроема, "ЧГ=0")+"   ";
			
		КонецЦикла;
		
		ПараметрыМакета.Проемы = ПрСтр;
		
	КонецЕсли;
	
	Макет = Документы.Спецификация.ПолучитьМакет("Эскиз");
	
	ОбластьТело = Макет.ПолучитьОбласть("Тело");
	ОбластьТело.Параметры.Заполнить(ПараметрыМакета);
	
	НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("ВидФайла", Перечисления.ВидыПрисоединенныхФайлов.Эскиз);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Данные КАК Данные,
	|	Файлы.Расширение КАК Расширение
	|ИЗ
	|	Справочник.ФайлыЛекс КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Спецификация
	|	И НЕ Файлы.ПометкаУдаления
	|	И Файлы.Вид = &ВидФайла";
	
	ВыборкаФайлов = Запрос.Выполнить().Выбрать();
	МассивФайлов = Новый Массив;
	
	Пока ВыборкаФайлов.Следующий() Цикл
		
		ОбластьТело.Параметры.Примечание = ПараметрыМакета.Примечание;
		
		Рисунок = ОбластьТело.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
		Рисунок.Верх = 16;
		Рисунок.Лево = 98;
		Рисунок.Высота = 164;
		Рисунок.Ширина = 155;
		
		Файл = ВыборкаФайлов.Данные;
		Картинка = Файл.Получить();
		
		Если РасширениеКартинки(ВыборкаФайлов.Расширение) Тогда
			
			Рисунок.Картинка = Новый Картинка(Картинка);
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДок.Вывести(ОбластьТело);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Спецификация);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьЗамерныйЛист(Выборка, ОбъектыПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ЗамерныйЛист";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ТабДок.ТочностьПечати=ТочностьПечати.Точная;
	
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу = 5;
	ТабДок.ПолеСлева = 5;
	ТабДок.ПолеСправа = 5;
	
	ТабДок.РазмерКолонтитулаСверху = 1;
	ТабДок.РазмерКолонтитулаСнизу = 1;
	
	Спецификация=Выборка[0];
	
	Макет = Документы.Спецификация.ПолучитьМакет("ЗамерныйЛист");
	ОбластьКартинка = Макет.ПолучитьОбласть("Картинка");
	
	НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Замер", Спецификация.ДокументОснование);
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("ВидФайла", Перечисления.ВидыПрисоединенныхФайлов.ЗамерныйЛист);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Данные КАК Данные,
	|	Файлы.Расширение КАК Расширение
	|ИЗ
	|	Справочник.ФайлыЛекс КАК Файлы
	|ГДЕ
	|	(Файлы.ВладелецФайла = &Замер
	|			ИЛИ Файлы.ВладелецФайла = &Спецификация)
	|	И НЕ Файлы.ПометкаУдаления
	|	И Файлы.Вид = &ВидФайла";
	
	ВыборкаФайлов = Запрос.Выполнить().Выбрать();
	МассивФайлов = Новый Массив;
	
	Пока ВыборкаФайлов.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Замер", Спецификация.ДокументОснование);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Вид КАК ВидФайла
		|ИЗ
		|	Справочник.ФайлыЛекс КАК Файлы
		|ГДЕ
		|	(ВЫРАЗИТЬ(Файлы.ВладелецФайла КАК Документ.Замер)) = &Замер
		|	И (Файлы.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.ФотоЗамера)
		|			ИЛИ Файлы.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.БытоваяТехника))
		|	И Файлы.ПометкаУдаления = ЛОЖЬ";
		
		ВыборкаТех = Запрос.Выполнить().Выгрузить();
		ЕстьБытТехника = ВыборкаТех.Количество() > 0; 
		
		Файл = ВыборкаФайлов.Данные;
		Картинка = Файл.Получить();
		
		Если РасширениеКартинки(ВыборкаФайлов.Расширение) Тогда
			
			ОбластьКартинка.Рисунки.К1.Картинка = Новый Картинка(Картинка);
			ОбластьКартинка.Рисунки.К1.РазмерКартинки = РазмерКартинки.Пропорционально;
			ОбластьКартинка.Рисунки.К1.ВыводитьНаПечать = Истина;
			
			ОбластьКартинка.Параметры.Спец = Спецификация;
			ОбластьКартинка.Параметры.Замер = Спецификация.ДокументОснование;
			
			Если ЕстьБытТехника Тогда
				
				ОбластьКартинка.Параметры.ЕстьФото = "Имеется фото замера или бытовой техники. ";
				
			КонецЕсли;
			
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДок.Вывести(ОбластьКартинка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Спецификация);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьМонтажнаяСхема(Выборка, ОбъектыПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_МонтажнаяСхема";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ТабДок.ТочностьПечати=ТочностьПечати.Точная;
	
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу = 0;
	ТабДок.ПолеСлева = 5;
	ТабДок.ПолеСправа = 0;
	
	ТабДок.РазмерКолонтитулаСверху = 1;
	ТабДок.РазмерКолонтитулаСнизу = 1;
	
	Спецификация=Выборка[0];
	
	
	Макет = Документы.Спецификация.ПолучитьМакет("МонтажнаяСхема");
	ОбластьКартинка = Макет.ПолучитьОбласть("Картинка");
	
	НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("ВидФайла", Перечисления.ВидыПрисоединенныхФайлов.МонтажнаяСхема);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Данные КАК Данные,
	|	Файлы.Расширение КАК Расширение
	|ИЗ
	|	Справочник.ФайлыЛекс КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Спецификация
	|	И НЕ Файлы.ПометкаУдаления
	|	И Файлы.Вид = &ВидФайла";
	
	ВыборкаФайлов = Запрос.Выполнить().Выбрать();
	МассивФайлов = Новый Массив;
	
	Пока ВыборкаФайлов.Следующий() Цикл
		
		Файл = ВыборкаФайлов.Данные;
		Картинка = Файл.Получить();
		
		Если РасширениеКартинки(ВыборкаФайлов.Расширение) Тогда
			
			ОбластьКартинка.Рисунки.К1.Картинка = Новый Картинка(Картинка);
			ОбластьКартинка.Рисунки.К1.РазмерКартинки = РазмерКартинки.Пропорционально;
			ОбластьКартинка.Рисунки.К1.Верх = 3;
			ОбластьКартинка.Рисунки.К1.Лево = 3;
			ОбластьКартинка.Рисунки.К1.ВыводитьНаПечать = Истина;
			
			ОбластьКартинка.Параметры.Спец = Строка(Спецификация);
			
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДок.Вывести(ОбластьКартинка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Спецификация);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьЦеховаяСхема(Выборка, ОбъектыПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ЦеховаяСхема";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ТабДок.ТочностьПечати=ТочностьПечати.Точная;
	
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу = 0;
	ТабДок.ПолеСлева = 5;
	ТабДок.ПолеСправа = 0;
	
	ТабДок.РазмерКолонтитулаСверху = 1;
	ТабДок.РазмерКолонтитулаСнизу = 1;
	
	Спецификация=Выборка[0];
	
	Макет = Документы.Спецификация.ПолучитьМакет("ЦеховаяСхема");
	ОбластьКартинка = Макет.ПолучитьОбласть("Картинка");
	
	НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("ВидФайла", Перечисления.ВидыПрисоединенныхФайлов.ЦеховаяСхема);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Данные КАК Данные,
	|	Файлы.Расширение КАК Расширение
	|ИЗ
	|	Справочник.ФайлыЛекс КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Спецификация
	|	И НЕ Файлы.ПометкаУдаления
	|	И Файлы.Вид = &ВидФайла";
	
	ВыборкаФайлов = Запрос.Выполнить().Выбрать();
	МассивФайлов = Новый Массив;
	
	Пока ВыборкаФайлов.Следующий() Цикл
		
		Файл = ВыборкаФайлов.Данные;
		Картинка = Файл.Получить();
		
		Если РасширениеКартинки(ВыборкаФайлов.Расширение) Тогда
			
			ОбластьКартинка.Рисунки.К1.Картинка = Новый Картинка(Картинка);
			ОбластьКартинка.Рисунки.К1.Верх = 3;
			ОбластьКартинка.Рисунки.К1.Лево = 3;
			ОбластьКартинка.Рисунки.К1.ВыводитьНаПечать = Истина;
			
			ОбластьКартинка.Параметры.Спец = Строка(Спецификация);
			
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДок.Вывести(ОбластьКартинка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Спецификация);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьКомплектации(МассивДокументов, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_РасходныйКассовыйОрдер";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.КоличествоЭкземпляров = 2;
	ТабДок.Защита = Истина;
	Макет = Документы.Комплектация.ПолучитьМакет("ПечатьКомплектации");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("Подразделение", МассивДокументов[0].Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(Остатки.Субконто2 КАК Справочник.Номенклатура).Базовый
	|			ТОГДА Остатки.Субконто2
	|		ИНАЧЕ ВЫРАЗИТЬ(Остатки.Субконто2 КАК Справочник.Номенклатура).БазоваяНоменклатура
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(Остатки.Субконто2 КАК Справочник.Номенклатура).Базовый
	|				ТОГДА Остатки.КоличествоОстаток
	|			ИНАЧЕ ВЫРАЗИТЬ(Остатки.Субконто2 КАК Справочник.Номенклатура).КоэффициентБазовых * Остатки.КоличествоОстаток
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.Остатки(
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.МатериалыНаСкладе),
	|			,
	|			Субконто1.ОсновнойСклад = ИСТИНА
	|				И Подразделение = &Подразделение) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(Остатки.Субконто2 КАК Справочник.Номенклатура).Базовый
	|			ТОГДА Остатки.Субконто2
	|		ИНАЧЕ ВЫРАЗИТЬ(Остатки.Субконто2 КАК Справочник.Номенклатура).БазоваяНоменклатура
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Комплектация.Ссылка КАК Ссылка,
	|	Комплектация.Ссылка.Дата КАК Дата,
	|	Комплектация.Ссылка.Номер КАК Номер,
	|	Комплектация.Ссылка.Спецификация КАК Спецификация,
	|	Комплектация.НомерСтроки КАК НомерСтроки,
	|	Комплектация.КоличествоСклад КАК КоличествоСклад,
	|	Комплектация.ЗатребованоСклад КАК ЗатребованоСклад,
	|	Комплектация.КоличествоЦех КАК КоличествоЦех,
	|	Комплектация.ЗатребованоЦех КАК ЗатребованоЦех,
	|	Комплектация.Номенклатура КАК Номенклатура,
	|	Комплектация.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Комплектация.Комментарий КАК Комментарий,
	|	Комплектация.Ссылка.Спецификация.Контрагент КАК Контрагент,
	|	Комплектация.Ссылка.Спецификация.Подразделение КАК ПодразделениеСпецификации,
	|	Комплектация.Ссылка.Спецификация.ЦветЛДСПОсновной КАК ЦветЛДСПОсновной,
	|	Комплектация.Ссылка.Спецификация.ПлощадьСборкиИзделия КАК ПлощадьСборкиИзделия,
	|	ВЫБОР
	|		КОГДА Комплектация.Номенклатура.Базовый
	|			ТОГДА Остатки.Количество
	|		ИНАЧЕ Остатки.Количество / Комплектация.Номенклатура.КоэффициентБазовых
	|	КОНЕЦ КАК ОстатокНаСкладе,
	|	Настройки.АдресХранения КАК АдресХранения
	|ИЗ
	|	Документ.Комплектация.СписокНоменклатуры КАК Комплектация
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Остатки
	|		ПО (Комплектация.Номенклатура = Остатки.Номенклатура
	|				ИЛИ Комплектация.Номенклатура.БазоваяНоменклатура = Остатки.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиНоменклатуры.СрезПоследних(, Подразделение = &Подразделение) КАК Настройки
	|		ПО (Комплектация.Номенклатура = Настройки.Номенклатура
	|				ИЛИ Комплектация.Номенклатура.БазоваяНоменклатура = Настройки.Номенклатура)
	|ГДЕ
	|	НЕ Комплектация.Ссылка.ПометкаУдаления
	|	И Комплектация.Ссылка.Спецификация В(&МассивДокументов)
	|ИТОГИ
	|	Дата КАК Дата,
	|	Номер КАК Номер,
	|	Спецификация КАК Спецификация,
	|	Контрагент КАК Контрагент,
	|	ПодразделениеСпецификации КАК ПодразделениеСпецификации,
	|	ЦветЛДСПОсновной КАК ЦветЛДСПОсновной,
	|	ПлощадьСборкиИзделия КАК ПлощадьСборкиИзделия
	|ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСписокНоменклатурыШапка = Макет.ПолучитьОбласть("СписокНоменклатурыШапка");
	ОбластьСписокНоменклатуры = Макет.ПолучитьОбласть("СписокНоменклатуры");
	ОбластьОтклоненияШапка = Макет.ПолучитьОбласть("СписокНоменклатурыШапкаОтклонения");
	ОбластьОтклоненияСтрока = Макет.ПолучитьОбласть("СписокНоменклатурыОтклонения");
	Подвал = Макет.ПолучитьОбласть("Подвал");
	ТабДок.Очистить();
	
	ВставлятьРазделительСтраниц = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		Спец = Выборка.Спецификация;
		
		Если ВставлятьРазделительСтраниц Тогда
			
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		Логотип = ЛексСервер.ПолучитьЛоготипСервер(Спец, Истина);
		
		Если ТипЗнч(Логотип) = Тип("ДвоичныеДанные") Тогда
			ОбластьЗаголовок.Рисунки.D1.Картинка = Новый Картинка(Логотип);
			ОбластьЗаголовок.Рисунки.D1.ВыводитьНаПечать = Истина;
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер);
		ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата, "ДЛФ=D");
		ТабДок.Вывести(ОбластьЗаголовок);
		
		Шапка.Параметры.Заполнить(Выборка);
		
		СтатусСпец = Документы.Спецификация.ПолучитьСтатусСпецификации(Выборка.Спецификация);
		Шапка.Параметры.Статус = СтатусСпец;
		
		Результат = СформироватьКомментарииДвери(Выборка.Спецификация);
		Шапка.Параметры.Проем = Результат.Проем;
		
		Шапка.Параметры.ОсновнойЦветЛДСП = Выборка.ЦветЛДСПОсновной;
		
		Шапка.Параметры.ВремяДокумента = Выборка.Дата;
		
		ТабДок.Вывести(Шапка);
		
		ТабДок.Вывести(ОбластьСписокНоменклатурыШапка);
		
		ВыборкаСписокНоменклатуры = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСписокНоменклатуры.Следующий() Цикл
			
			ОбластьСписокНоменклатуры.Параметры.Заполнить(ВыборкаСписокНоменклатуры);
			ТабДок.Вывести(ОбластьСписокНоменклатуры);
			
		КонецЦикла;
		
		ВыборкаСписокНоменклатуры.Сбросить();
		ВыводитьШапку = Истина;
		
		Пока ВыборкаСписокНоменклатуры.Следующий() Цикл
			
			Если ВыборкаСписокНоменклатуры.КоличествоСклад <> ВыборкаСписокНоменклатуры.ЗатребованоСклад
				ИЛИ ВыборкаСписокНоменклатуры.КоличествоЦех <> ВыборкаСписокНоменклатуры.ЗатребованоЦех Тогда
				
				Если ВыводитьШапку Тогда
					
					ВыводитьШапку = Ложь;
					ТабДок.Вывести(ОбластьОтклоненияШапка);
					
				КонецЕсли;
				
				ОбластьОтклоненияСтрока.Параметры.Заполнить(ВыборкаСписокНоменклатуры);
				ОбластьОтклоненияСтрока.Параметры.НеВыданоСклад = (ВыборкаСписокНоменклатуры.ЗатребованоСклад - ВыборкаСписокНоменклатуры.КоличествоСклад);
				ОбластьОтклоненияСтрока.Параметры.НеВыданоЦех = (ВыборкаСписокНоменклатуры.ЗатребованоЦех - ВыборкаСписокНоменклатуры.КоличествоЦех);
				
				ТабДок.Вывести(ОбластьОтклоненияСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗапросФ = Новый Запрос;
		ЗапросФ.УстановитьПараметр("Документ", Спец);
		ЗапросФ.УстановитьПараметр("ДокументОснование", Спец.ДокументОснование);
		ЗапросФ.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Вид КАК ВидФайла
		|ИЗ
		|	Справочник.ФайлыЛекс КАК Файлы
		|ГДЕ
		|	((ВЫРАЗИТЬ(Файлы.ВладелецФайла КАК Документ.Спецификация)) = &Документ
		|			ИЛИ (ВЫРАЗИТЬ(Файлы.ВладелецФайла КАК Документ.Замер)) = &ДокументОснование)
		|	И Файлы.ПометкаУдаления = ЛОЖЬ
		|	И (Файлы.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.МонтажнаяСхема)
		|			ИЛИ Файлы.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.Эскиз)
		|			ИЛИ Файлы.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.ЗамерныйЛист))";
		
		КоличествоПрикрепленныхФайлов = ЗапросФ.Выполнить().Выбрать().Количество();
		
		Если КоличествоПрикрепленныхФайлов > 0 Тогда
			
			ОбластьПрикрепленныеФайлы = Макет.ПолучитьОбласть("ПрикрепленныеФайлы");
			ОбластьПрикрепленныеФайлы.Параметры.Количество = КоличествоПрикрепленныхФайлов;
			ТабДок.Вывести(ОбластьПрикрепленныеФайлы);
			
		КонецЕсли;
		
		ТабДок.Вывести(Подвал);
		
		ВставлятьРазделительСтраниц = Истина;
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Функция СформироватьКомментарииДвери(СпецификацияСсылка)
	
	СтруктураРезультатов = Новый Структура;
	Результат = "";
	Проем = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СпецификацияСсылка", СпецификацияСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификацияСписокДверей.Двери.Код КАК Код,
	|	СпецификацияСписокДверей.Двери.Комментарий КАК Комментарий,
	|	СпецификацияСписокДверей.Двери.ШиринаПроема КАК ШиринаПроема,
	|	СпецификацияСписокДверей.Двери.ВысотаПроема Как ВысотаПроема
	|ИЗ
	|	Документ.Спецификация.СписокДверей КАК СпецификацияСписокДверей
	|ГДЕ
	|	СпецификацияСписокДверей.Ссылка = &СпецификацияСсылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат = Результат + Выборка.Код + " - " + Выборка.Комментарий + " ";
		Проем = Проем + "Высота: " + Выборка.ВысотаПроема + " " + "Ширина: " + Выборка.ШиринаПроема + "; ";
	КонецЦикла;
	СтруктураРезультатов.Вставить("Комментарий", Результат);
	СтруктураРезультатов.Вставить("Проем", Проем);
	
	Возврат СтруктураРезультатов;
	
КонецФункции

Функция РасширениеКартинки(Знач Расширение)
	
	Расширение = НРег(Расширение);
	ЭтоКартинка = Ложь;
	
	Если Расширение = ".jpg" 
		ИЛИ Расширение = ".jpeg" 
		ИЛИ Расширение = ".jp2" 
		ИЛИ Расширение = ".jpe" 
		ИЛИ Расширение = ".bmp" 
		ИЛИ Расширение = ".gif" 
		ИЛИ Расширение = ".png"
		ИЛИ Расширение = ".tiff"
		ИЛИ Расширение = ".tif" Тогда
		
		ЭтоКартинка = Истина;
		
	КонецЕсли;
	
	Возврат ЭтоКартинка;
	
КонецФункции

Функция ПолучитьДанныеДетали(ТипДетали)
	
	Стр = Новый Структура;
	
	Стр.Вставить("Клееная", ТипДетали.Клееная);
	Стр.Вставить("Пластик", ТипДетали.Пластик);
	Стр.Вставить("ОбтачиватьПоУмолчанию", ТипДетали.ОбтачиватьПоУмолчанию);
	Стр.Вставить("ИспользоватьСоответствиеНоменклатуры", ТипДетали.ИспользоватьСоответствиеНоменклатуры);
	Стр.Вставить("МатериалСтрока", ТипДетали.МатериалСтрока);
	Стр.Вставить("ПрипускСклейка", ТипДетали.ПрипускСклейка);
	Стр.Вставить("ПрипускПостформинг", ТипДетали.ПрипускПостформинг);
	Стр.Вставить("ЭтоФасад", ТипДетали.ЭтоФасад);
	Стр.Вставить("ЭтоСтолешница", ТипДетали.ЭтоСтолешница);
	Стр.Вставить("ЭтоСтекло", ТипДетали.ЭтоСтекло);
	Стр.Вставить("ЭтоПуфик", ТипДетали.ЭтоПуфик);
	Стр.Вставить("ЭтоКаретнаяСтяжка", ТипДетали.ЭтоКаретнаяСтяжка);
	Стр.Вставить("МинимальнаяШирина", ТипДетали.МинимальнаяШирина);
	Стр.Вставить("МинимальнаяВысота", ТипДетали.МинимальнаяВысота);
	Стр.Вставить("СчитатьПлощадь", ТипДетали.СчитатьПлощадь);
	Стр.Вставить("РазмерТекстура", ТипДетали.РазмерТекстура);
	Стр.Вставить("РазмерДопНоменклатура", ТипДетали.РазмерДопНоменклатура);
	Стр.Вставить("УчитыватьКратность", ТипДетали.УчитыватьКратность);
	Стр.Вставить("СпецФасад", ТипДетали.СпецФасад);
	Стр.Вставить("ШиринаТекстура", ТипДетали.ШиринаТекстура);
	Стр.Вставить("ВысотаТекстура", ТипДетали.ВысотаТекстура);
	Стр.Вставить("ШиринаДопНоменклатура", ТипДетали.ШиринаДопНоменклатура);
	Стр.Вставить("ВысотаДопНоменклатура", ТипДетали.ВысотаДопНоменклатура);
	Стр.Вставить("ЦеховаяЗона", ТипДетали.ЦеховаяЗона);
	
	НомГруппы = Новый СписокЗначений;
	
	Для Каждого Эл Из ТипДетали.НоменклатурныеГруппы Цикл
		
		Стр2 = Новый Структура;
		Стр2.Вставить("ПолеВыбора", Эл.ПолеВыбора);
		Стр2.Вставить("Группа", Эл.Группа);
		
		НомГруппы.Добавить(Стр2);
		
	КонецЦикла;
	
	Стр.Вставить("НомГруппы", НомГруппы);
	
	Услуги = Новый СписокЗначений;
	
	Для Каждого Эл Из ТипДетали.Услуги Цикл
		
		Стр2 = Новый Структура;
		Стр2.Вставить("Услуга", Эл.Услуга);
		Стр2.Вставить("Количество", Эл.Количество);
		
		Услуги.Добавить(Стр2);
		
	КонецЦикла;
	
	Стр.Вставить("Услуги", Услуги);
	
	Комплектация = Новый СписокЗначений;
	
	Для Каждого Эл Из ТипДетали.Комплектация Цикл
		
		Стр2 = Новый Структура;
		Стр2.Вставить("Номенклатура", Эл.Номенклатура);
		Стр2.Вставить("Количество", Эл.Количество);
		
		Комплектация.Добавить(Стр2);
		
	КонецЦикла;
	
	Стр.Вставить("Комплектация", Комплектация);
	
	Возврат Стр;
	
КонецФункции

Функция ПолучитьНадпись(Деталь) Экспорт
	
	ДанныеДетали = Деталь.ВидДетали;
	
	СтрокаИдентификатор = Строка(Деталь.НомерДеталиИзделия) 
	+ ?(ЗначениеЗаполнено(Деталь.НомерИзделия), "/" + Деталь.НомерИзделия, "");
	
	Надпись = "";
	
	Если Деталь.Постформинг И ДанныеДетали.ЭтоСтолешница Тогда
		
		Надпись = Надпись + "Ст (Скр)";
		
	ИначеЕсли Деталь.Обтачивать И ДанныеДетали.ЭтоСтекло Тогда
		
		Надпись = Надпись + "Обтачивать";
		
	ИначеЕсли НЕ Деталь.Обтачивать И ДанныеДетали.ЭтоСтекло Тогда
		
		Надпись = Надпись + "Без обточки";
		
	ИначеЕсли ДанныеДетали.ЭтоСтекло И ДанныеДетали.ЭтоФасад И Деталь.РадиусФасада <> "" Тогда
		
		Надпись = Надпись + СтрокаИдентификатор + "Скр. " + Деталь.РадиусФасада;
		
	Иначе
		
		Надпись = Надпись + СтрокаИдентификатор;
		
	КонецЕсли;
	
	Надпись = ?(ДанныеДетали.Клееная, Надпись + " скл ", Надпись);
	
	Если Деталь.НеТорцевать Тогда
		Надпись = Надпись + ", НЕ ТОРЦЕВАТЬ ПО ДЛИНЕ";
	КонецЕсли;
	
	Если ДанныеДетали.ЭтоПуфик Тогда
		Надпись = Надпись + " пуф";
	КонецЕсли;
	
	Если ДанныеДетали.ЭтоКаретнаяСтяжка Тогда
		Надпись = Надпись + " кар.стяж.";
	КонецЕсли;
	      
	Возврат Надпись;
	
КонецФункции

Функция ПечатьСчетНаОплатуПокупателю(МассивДокументов, ОбъектыПечати) Экспорт
	
	Ошибки = Неопределено;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_СчетНаОплатуПокупателю";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ПолеСправа = 0;
	ТабДок.ПолеСверху = 2;
	
	НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
	Макет = Документы.Спецификация.ПолучитьМакет("СчетНаОплатуПокупателю");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спецификация.Ссылка  КАК Ссылка
	|ПОМЕСТИТЬ СписокДокументовОкончательный
	|ИЗ
	|	Документ.Спецификация КАК Спецификация
	|ГДЕ
	|	Спецификация.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(МассивДокументов.Ссылка) КАК ПредставлениеДокумента,
	|	МассивДокументов.Ссылка КАК Ссылка,
	|	МассивДокументов.ССылка.Подразделение.ОрганизацияДляЮрЛиц.ПолноеНаименование КАК ПредставлениеПолучателяПлатежа,
	|	МассивДокументов.ССылка.Подразделение.ОрганизацияДляЮрЛиц.ИНН КАК ИННПолучателяПлатежа,
	|	МассивДокументов.ССылка.Подразделение.ОрганизацияДляЮрЛиц.КПП КАК КПППолучателяПлатежа,
	|	МассивДокументов.ССылка.Подразделение.ОрганизацияДляЮрЛиц.Банк КАК БанкПолучателяПлатежа,
	|	МассивДокументов.ССылка.Подразделение.ОрганизацияДляЮрЛиц.БИК КАК БИКБанкаПолучателяПлатежа,
	|	МассивДокументов.ССылка.Подразделение.ОрганизацияДляЮрЛиц.КорреспондирующийСчет КАК СчетБанкаПолучателяПлатежа,
	|	МассивДокументов.ССылка.Подразделение.ОрганизацияДляЮрЛиц.РасчетныйСчет КАК СчетПолучателяПлатежа,
	|	МассивДокументов.ССылка.Дата КАК Дата,
	|	МассивДокументов.ССылка.Номер КАК Номер,
	|	МассивДокументов.ССылка.СуммаДокумента КАК СуммаДокумента,
	|	МассивДокументов.ССылка.Подразделение.ОрганизацияДляЮрЛиц.ПолноеНаименование КАК ПоставщикПолноеНаименование,
	|	МассивДокументов.ССылка.Подразделение.ОрганизацияДляЮрЛиц.ИНН КАК ИННПоставщика,
	|	МассивДокументов.ССылка.Подразделение.ОрганизацияДляЮрЛиц.КПП КАК КПППоставщика,
	|	МассивДокументов.ССылка.Подразделение.ОрганизацияДляЮрЛиц.ЮридическийАдрес КАК ЮридическийАдресПоставщика,
	|	МассивДокументов.ССылка.Контрагент.ПолноеНаименование КАК КонтрагентПолноеНаименование,
	|	МассивДокументов.ССылка.Контрагент.ИНН КАК ИННКонтрагента,
	|	МассивДокументов.ССылка.Контрагент.КПП КАК КППКонтрагента,
	|	МассивДокументов.ССылка.Контрагент.ЮридическийАдрес КАК ЮридическийАдресКонтрагента,
	|	МассивДокументов.ССылка.Подразделение.ОрганизацияДляЮрЛиц.ФИОДолжностногоЛица КАК ФИОРуководителя
	|ИЗ
	|	СписокДокументовОкончательный КАК МассивДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товар (по спецификации №"" КАК Товар,
	|	1 КАК НомерСтроки,
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Ссылка.СуммаДокумента КАК Сумма,
	|	Товары.Ссылка.СуммаДокумента КАК Цена,
	|	1 КАК Количество,
	|	""шт"" КАК ЕдиницаИзмерения
	|ИЗ
	|	СписокДокументовОкончательный КАК Товары";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументов = РезультатЗапроса[1].Выбрать();
	
	РезультатТовары =  РезультатЗапроса[2].Выгрузить();
	
	ПервыйЛист = Истина;
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если НЕ ПервыйЛист Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		ОбластьИтогоНДС = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьИтогоКОплате = Макет.ПолучитьОбласть("ИтогоКОплате");
		
		//выводим шапку
		ОбластьЗаголовокСчета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьЗаголовокСчета.Параметры.Заполнить(ВыборкаДокументов);
		ОбластьЗаголовокСчета.Параметры.БанкПолучателяПлатежаПредставление = ВыборкаДокументов.БанкПолучателяПлатежа;
		
		ТабДок.Вывести(ОбластьЗаголовокСчета);
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		НомерДокумента = ВыборкаДокументов.Номер;
		ДатаДокумента =  Формат(ВыборкаДокументов.Дата, "ДФ='дд ММММ гггг'") + " г.";
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = "Счет на оплату №" + НомерДокумента + "от " + ДатаДокумента;
		ТабДок.Вывести(ОбластьЗаголовок);
		
		ОбластьПоставщик = Макет.ПолучитьОбласть("Поставщик");
		ЮридическийАдресПоставщика = ВыборкаДокументов.ЮридическийАдресПоставщика;
		ПредставлениеПоставщика =  ВыборкаДокументов.ПоставщикПолноеНаименование + 
		", ИНН " + ВыборкаДокументов.ИННПоставщика +
		", КПП " + ВыборкаДокументов.КПППоставщика +
		?(ЗначениеЗаполнено(ЮридическийАдресПоставщика),"," + ЮридическийАдресПоставщика ,"");
		
		
		ОбластьПокупатель = Макет.ПолучитьОбласть("Покупатель");
		ЮридическийАдресПокупателя = 	ВыборкаДокументов.ЮридическийАдресКонтрагента;	
		ИННПокупателя =  ВыборкаДокументов.ИННКонтрагента;
		КПППокупателя =  ВыборкаДокументов.КППКонтрагента;
		ПредставлениеПокупателя =  ВыборкаДокументов.КонтрагентПолноеНаименование + 
		?(ЗначениеЗаполнено(ИННПокупателя), ", ИНН " + ИННПокупателя, "") +
		?(ЗначениеЗаполнено(КПППокупателя), ", КПП " + КПППокупателя, "") +
		?(ЗначениеЗаполнено(ЮридическийАдресПокупателя),"," + ЮридическийАдресПокупателя ,"");
		
		ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьПокупатель.Параметры.ПредставлениеПокупателя = ПредставлениеПокупателя;
		
		ТабДок.Вывести(ОбластьПокупатель);
		ТабДок.Вывести(ОбластьПоставщик);
		
		//выводим товары
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2";
		Всего = 0;
		Сумма = 0;
		ВсегоНаименований = 0;
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Ссылка",ВыборкаДокументов.Ссылка);
		
		Товары = РезультатТовары.Скопировать(СтруктураОтбора);
		
		Для каждого СтрокаТовар Из Товары Цикл
			
			ОбластьСтрока.Параметры.Заполнить(СтрокаТовар);
			ОбластьСтрока.Параметры.Товар = СтрокаТовар.Товар  +  НомерДокумента + " от " + ДатаДокумента +")";
			Сумма = СтрокаТовар.Сумма;
			ОбластьСтрока.Параметры.Сумма = СокрЛП(Формат(Сумма, ФорматнаяСтрока));
			
			ТабДок.Вывести(ОбластьСтрока);
			
			ВсегоНаименований = ВсегоНаименований + 1;
			Всего = Всего + Сумма; 
			
		КонецЦикла;
		
		СуммаДокумента = ВыборкаДокументов.СуммаДокумента;
		ОбластьИтого.Параметры.Всего = СокрЛП(Формат(СуммаДокумента, ФорматнаяСтрока));
		ТабДок.Вывести(ОбластьИтого);
		
		ТабДок.Вывести(ОбластьИтогоНДС);
		
		ОбластьИтогоКОплате.Параметры.ИтогоКОплате = СокрЛП(Формат(СуммаДокумента, ФорматнаяСтрока));
		ТабДок.Вывести(ОбластьИтогоКОплате);
		
		//вывод сумма прописью
		ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = СуммаДокумента;
		ОбластьСуммаПрописью.Параметры.СуммаПрописью = ЧислоПрописью(СуммаКПрописи,"Л=ru_RU; ДП=Ложь","рубль, рубля, рублей, м, копейка, копейки, копеек, ж");
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = "Всего наименований "+  ВсегоНаименований + ", на сумму " + СокрЛП(Формат(СуммаКПрописи,ФорматнаяСтрока)) + " руб.";
		ТабДок.Вывести(ОбластьСуммаПрописью); 
		
		//подвал
		ОбластьПодвалСчета = Макет.ПолучитьОбласть("ПодвалСчета");
		ОбластьПодвалСчета.Параметры.ФИОРуководителя = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(ВыборкаДокументов.ФИОРуководителя);
		ТабДок.Вывести(ОбластьПодвалСчета);
		
		ПервыйЛист = Ложь;
		
	КонецЦикла;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, МассивДокументов);
	
	Возврат ТабДок;
	
КонецФункции // ПечатьСчетНаОплатуПокупателю()

Функция ПолучитьВидОтображенияФлэш(Спецификация) Экспорт
	
	ВидОтображения = "2";
	
	Проведен = Спецификация.Проведен;
	Статус = Документы.Спецификация.ПолучитьСтатусСпецификации(Спецификация);
	
	Если Спецификация.Дилерский И НЕ (Проведен И (Статус <> Перечисления.СтатусыСпецификации.Сохранен)) Тогда	
		ВидОтображения = "3";
	КонецЕсли;
	
	Возврат ВидОтображения;
	
КонецФункции

Функция ПолучитьВидОтображенияРаскрой(Спецификация) Экспорт
	
	ВидОтображения = "1";
	
	Проведен = Спецификация.Проведен;
	Статус = Документы.Спецификация.ПолучитьСтатусСпецификации(Спецификация);
	
	Если Спецификация.Дилерский И НЕ (Проведен И (Статус <> Перечисления.СтатусыСпецификации.Сохранен)) Тогда	
		ВидОтображения = "3";
	КонецЕсли;
	
	Возврат ВидОтображения;
	
КонецФункции

Процедура ЗаписатьРаскрой(Элемент) Экспорт
	
	НаборЗаписей = РегистрыСведений.РаскройДеталей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Элемент.Спецификация);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 1 Тогда
		Запись = НаборЗаписей[0];
	Иначе
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = Элемент.Спецификация;
	КонецЕсли;
	
	Запись.СтрокаРаскрой = Элемент.СтрокаРаскрой;
	Запись.ТекущаяСтрокаРаскроя = Элемент.ТекущаяСтрокаРаскроя;
	Запись.РисунокРаскроя = Элемент.РисунокРаскроя;
	
	Запись.РисунокКривогоПилаФРС = Элемент.РисунокКривогоПилаФРС;
	Запись.РисунокКривогоПилаСтеколка = Элемент.РисунокКривогоПилаСтеколка;
	
	Запись.СтрокаКривогоПилаФРС = Элемент.СтрокаКривогоПилаФРС;
	Запись.СтрокаКривогоПилаСтеколка = Элемент.СтрокаКривогоПилаСтеколка;
	
	Попытка
		Запись.ИдеальныйПроцентОтхода = Элемент.ЛучшийПроцентОтхода;
		Запись.ВремяФормирования = Элемент.ВремяФормирования;
	Исключение
		
	КонецПопытки;
	
	Запись.ТаблицаДеталей = Элемент.ТаблицаДеталей;
	Запись.АлгоритмРаскроя = Элемент.АлгоритмРаскроя;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Функция ОбновитьРаскройНаСервере(Элемент) Экспорт
	
	Структура = РегистрыСведений.РаскройДеталей.СформироватьРаскрой(Элемент);
	
	СтруктураПередачи = Новый Структура;
	СтруктураПередачи.Вставить("СтрокаКривогоПилаФРС", Структура.СтрокаКривогоПилаФРС);
	СтруктураПередачи.Вставить("СтрокаКривогоПилаСтеколка", Структура.СтрокаКривогоПилаСтеколка);
	СтруктураПередачи.Вставить("ТекущаяСтрокаРаскроя", Структура.ДанныеДляРаскроя);
	СтруктураПередачи.Вставить("СтрокаРаскрой", Структура.ДанныеДляРаскроя);
	СтруктураПередачи.Вставить("ТаблицаДеталей", Структура.ТаблицаДеталей);
	
	Попытка
		СтруктураПередачи.Вставить("ЛучшийПроцентОтхода", Структура.ЛучшийПроцентОтхода);
		СтруктураПередачи.Вставить("ВремяФормирования", Структура.ВремяФормирования);
	Исключение
		
	КонецПопытки;
	
	СтруктураПередачи.Вставить("АлгоритмРаскроя", Структура.АлгоритмРаскроя);
	СтруктураПередачи.Вставить("Спецификация", Элемент);
	СтруктураПередачи.Вставить("РисунокКривогоПилаФРС", "");
	СтруктураПередачи.Вставить("РисунокКривогоПилаСтеколка", "");
	СтруктураПередачи.Вставить("РисунокРаскроя", "");
	
	Возврат СтруктураПередачи;
	
КонецФункции

#КонецОбласти

#Область События

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) Экспорт
	
	ЛексСервер.ПолучитьПредставлениеДокумента(Данные, Представление, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
