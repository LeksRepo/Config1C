
#Область Проверки

&НаКлиенте
Функция ПроверитьОбточку()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	ТолстаяКромка = ПроверитьНоменклатурнуюГруппуКромки(ТекущиеДанные.ВыборМебельнойКромкиСВерху, ТекущиеДанные.ВыборМебельнойКромкиСнизу);
	
	Если (ТекущиеДанные.РадиусПравоНиз > 0 ИЛИ ТекущиеДанные.РадиусПравоВерх > 0) И ТолстаяКромка Тогда
		
		ТекущиеДанные.Обтачивать = Ложь;
		
	КонецЕсли;
	
	Если ТекущиеДанные.Обтачивать Тогда
		
		Элементы.ВыборМебельнойКромкиСправа.Доступность = Ложь;
		ТекущиеДанные.ВыборМебельнойКромкиСправа = Неопределено;
		Элементы.ПереключательКромкаСправа.Доступность = Ложь;
		ТекущиеДанные.ПереключательКромкаСправа = "Нет";
		
	Иначе
		
		Элементы.ВыборМебельнойКромкиСправа.Доступность = Истина;
		Элементы.ПереключательКромкаСправа.Доступность = Истина;
		
	КонецЕсли;
	
КонецФункции // ПроверитьОбточку()

&НаКлиенте
Функция ПроверитьРадиусы(РадиусЛевоВерх, РадиусПравоВерх, РадиусПравоНиз, РадиусЛевоНиз, Идентификатор, КантСлева, КантСправа, КантСверху, КантСнизу, Срез, Ошибки)
	
	СтруктураОшибок = Новый Структура;
	СтруктураОшибок.Вставить("Результат", Истина);
	
	Если РадиусЛевоВерх > 0 И КантСлева <> КантСверху Тогда 
		
		Элементы.Детали.ТекущаяСтрока = Идентификатор;
		Текст = "Кромка слева и сверху не совпадют";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСверху", Текст);
		СтруктураОшибок.Вставить("Результат", Ложь);
		
	КонецЕсли;
	
	Если РадиусПравоВерх > 0 И КантСверху <> КантСправа Тогда 
		
		Элементы.Детали.ТекущаяСтрока = Идентификатор;
		Текст = "Кромка справа и сверху не совпадют";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСверху", Текст);
		СтруктураОшибок.Вставить("Результат", Ложь);
		
	КонецЕсли;
	
	Если НЕ Элементы.Детали.ТекущиеДанные.Срез И РадиусПравоНиз > 0 И КантСправа <> КантСнизу Тогда 
		
		Элементы.Детали.ТекущаяСтрока = Идентификатор;
		Текст = "Кромка справа и снизу не совпадют";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСнизу", Текст);
		СтруктураОшибок.Вставить("Результат", Ложь);
		
	КонецЕсли;
	
	Если РадиусЛевоНиз > 0 И КантСнизу <> КантСлева Тогда 
		
		Элементы.Детали.ТекущаяСтрока = Идентификатор;
		Текст = "Кромка слева и снизу не совпадют";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСнизу", Текст);
		СтруктураОшибок.Вставить("Результат", Ложь);
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Ошибки", Ошибки);
	
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция ПроверитьПередСохранением()
	
	Результат = Истина;
	Ошибки = Неопределено;
	
	Для каждого Строка ИЗ Детали Цикл
		
		Материал = Строка.Материал;
		Клееная = Материал = "10 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+16 ЛДСП";
		РадиусЛевоВерх = Строка.РадиусЛевоВерх;
		РадиусПравоВерх = Строка.РадиусПравоВерх;
		РадиусПравоНиз = Строка.РадиусПравоНиз;
		РадиусЛевоНиз = Строка.РадиусЛевоНиз;
		Идентификатор = Строка.ПолучитьИдентификатор();
		КантСлева = Строка.ВыборМебельнойКромкиСлева;
		КантСправа = Строка.ВыборМебельнойКромкиСправа;
		КантСверху = Строка.ВыборМебельнойКромкиСверху;
		КантСнизу = Строка.ВыборМебельнойКромкиСнизу;
		Срез = Строка.Срез;
		Фасад = Материал = "ФасадАГТ" ИЛИ Материал = "ФасадМДФ" ИЛИ Материал = "ФасадЛДСП" ИЛИ Материал = "ФасадАлюминиевый" ИЛИ Материал = "ФасадСтеклянныйЗакругленный" ИЛИ Материал = "ФасадСтеклянный";
		ПрофильныйФасад = Материал = "ФасадАГТ" ИЛИ Материал = "ФасадМДФ" ИЛИ Материал = "ФасадАлюминиевый";
		ГнутыйФасад = Строка.Материал = "ФасадСтеклянныйЗакругленный";
		Пуфик = Строка.Материал = "Пуфик";
		
		// { Васильев Александр Леонидович [08.02.2014]
		Если Строка.Количество = 0 Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Укажите количество деталей";
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.Количество");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Количество", Текст,);
			Результат = Ложь;
			
		КонецЕсли;
		// } Васильев Александр Леонидович [08.02.2014]
		
		Если Материал = "" Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбран материал";
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.Материал");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Материал", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Строка.ВысотаДетали < 30 Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Слишком маленькая деталь. Введите полный размер детали (вместе с обрамлением)";
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "ВысотаСКромкой");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ВысотаСКромкой", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Строка.ШиринаДетали < 30 Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Слишком маленькая деталь. Введите полный размер детали (вместе с обрамлением)";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ШиринаСКромкой", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не заполнена текстура детали";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Номенклатура", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Клееная И НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не заполнена текстура детали";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Номенклатура", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Клееная И НЕ ЗначениеЗаполнено(Строка.НоменклатураДляСклеивания) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не заполнена текстура детали";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.НоменклатураДляСклеивания", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если ПрофильныйФасад И НЕ ЗначениеЗаполнено(Строка.УниверсальнаяКромка) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбран профиль/кромка фасада";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.УниверсальнаяКромка", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если ПрофильныйФасад И НЕ ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСверху) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбран профиль/кромка фасада";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСверху", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если ПрофильныйФасад  И НЕ ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСлева) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбран профиль/кромка фасада";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСлева", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если ПрофильныйФасад И НЕ ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСнизу) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбран профиль/кромка фасада";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСнизу", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если ПрофильныйФасад И НЕ ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСправа) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбран профиль/кромка фасада";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСправа", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Фасад И (ЗначениеЗаполнено(Строка.Петли) ИЛИ Строка.КоличествоПетель > 0) И НЕ ЗначениеЗаполнено(Строка.РасположениеПазов) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбрано расположение петель";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.РасположениеПазов", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Фасад И ЗначениеЗаполнено(Строка.НоменклатураДляСклеивания) И НЕ ЗначениеЗаполнено(Строка.ПоложениеРучки) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбрано расположение ручки";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ПоложениеРучки", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Петли) И Строка.КоличествоПетель = 0 Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбрано количество петель";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.КоличествоПетель", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если ГнутыйФасад И Строка.РадиусФасада = "" Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбран радиус фасада";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.РадиусФасада", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если НЕ Материал = "Столешница" Тогда
			
			СтруктураОшибкок = ПроверитьРадиусы(РадиусЛевоВерх,РадиусПравоВерх,РадиусПравоНиз,РадиусЛевоНиз, Идентификатор, КантСлева, КантСправа, КантСверху, КантСнизу, Срез, Ошибки);
			Ошибки = СтруктураОшибкок.Ошибки;
			
			Если НЕ СтруктураОшибкок.Результат Тогда
				
				Результат = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоНеЗаполненныхКромок = 0;
		
		СтруктураОшибок = ПроверитьЗаполненностьКромки(Строка.ПереключательКромкаСверху, Строка.ВыборМебельнойКромкиСверху, Идентификатор, КоличествоНеЗаполненныхКромок, Ошибки, "ВыборМебельнойКромкиСверху");
		СтруктураОшибок = ПроверитьЗаполненностьКромки(Строка.ПереключательКромкаСнизу, Строка.ВыборМебельнойКромкиСнизу, Идентификатор, СтруктураОшибок.КоличествоНеЗаполненныхКромок, СтруктураОшибок.Ошибки, "ВыборМебельнойКромкиСнизу");
		СтруктураОшибок = ПроверитьЗаполненностьКромки(Строка.ПереключательКромкаСлева, Строка.ВыборМебельнойКромкиСлева, Идентификатор, СтруктураОшибок.КоличествоНеЗаполненныхКромок, СтруктураОшибок.Ошибки, "ВыборМебельнойКромкиСлева");
		СтруктураОшибок = ПроверитьЗаполненностьКромки(Строка.ПереключательКромкаСправа, Строка.ВыборМебельнойКромкиСправа, Идентификатор, СтруктураОшибок.КоличествоНеЗаполненныхКромок, СтруктураОшибок.Ошибки, "ВыборМебельнойКромкиСправа");
		
		Результат = ?(СтруктураОшибок.КоличествоНеЗаполненныхКромок > 0, Ложь, Результат);
		Ошибки = СтруктураОшибок.Ошибки;
		
		
	КонецЦикла;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьПередСохранением()

&НаКлиенте
Функция ПроверитьЗаполненностьКромки(Переключатель, Кромка, Идентификатор, КоличествоНеЗаполненныхКромок, Ошибки, ПоложениеПереключателя)
	
	СтруктураОшибок = Новый Структура;
	
	Если НЕ Переключатель = "Нет" и НЕ Переключатель = "" и НЕ ЗначениеЗаполнено(Кромка) Тогда
		
		Элементы.Детали.ТекущаяСтрока = Идентификатор;
		Текст = "Выберите кромку либо нажмите ""нет"" на переключателе";
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСверху");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные." + ПоложениеПереключателя, Текст);
		КоличествоНеЗаполненныхКромок = КоличествоНеЗаполненныхКромок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("КоличествоНеЗаполненныхКромок", КоличествоНеЗаполненныхКромок);
	СтруктураОшибок.Вставить("Ошибки", Ошибки);
	
	Возврат СтруктураОшибок;
	
КонецФункции // ПроверитьЗаполненностьКромки()

&НаКлиенте
Функция ПроверкаКоличестваИТолщины()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если Элементы.Детали.ТекущиеДанные <> Неопределено Тогда
		
		Материал = Элементы.Детали.ТекущиеДанные.Материал;
		
		Если НЕ ЗначениеЗаполнено(Материал) Тогда
			
			Элементы.Детали.ТекущиеДанные.Материал = "16 ЛДСП";
			Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП16);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПроверкаКоличество()

&НаКлиенте
Функция ПроверитьНаМинимальныйРазмер(СтарыйРазмер, НовыйРазмер)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	СтруктураПодсчета = Новый Структура;
	Размер = НовыйРазмер;
	
	МеньшеДопустимого = Ложь;//НовыйРазмер < 80;
	
	Если МеньшеДопустимого Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Деталь со стороной менее 80 мм не кромится. Все кромки будут очищены" + Символы.ПС +"Продолжить?", Режим);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ТекущиеДанные.ВыборМебельнойКромкиСверху = Неопределено;
			ТекущиеДанные.ВыборМебельнойКромкиСнизу = Неопределено;
			ТекущиеДанные.ВыборМебельнойКромкиСлева = Неопределено;
			ТекущиеДанные.ВыборМебельнойКромкиСправа = Неопределено;
			
		Иначе
			
			Размер = СтарыйРазмер;
			МеньшеДопустимого = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Размер;
	
КонецФункции // ПроверитьНаМинимальныйРазмер()

&НаКлиенте
Процедура ПроверитьРазмерыСтолешницы()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ПосчитатьЧистыйРазмер();
	Столешница = ТекущиеДанные.Материал = "Столешница";
	НеОбтачивать = НЕ ТекущиеДанные.Обтачивать;
	НужнаяШирина = ТекущиеДанные.ШиринаДетали > 585;
	КромкаВыбрана = НЕ ТекущиеДанные.ПереключательКромкаСправа = "Нет";
	
	Если Столешница Тогда
		
		ШапкаОсновныхНастроек.Скруглять = ТекущиеДанные.Обтачивать;
		
	КонецЕсли;
	
	Если Столешница И НеОбтачивать И НужнаяШирина ИЛИ Столешница И КромкаВыбрана И НужнаяШирина Тогда
		
		ТекущиеДанные.ШиринаДетали = 585;
		ОбновитьФлэш();
		ШиринаСКромкой = ТекущиеДанные.ШиринаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
		ВысотаСКромкой = ТекущиеДанные.ВысотаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСтороныСРадиусом(ЗначениеРадиуса, Радиус)
	
	ВысотаДетали 		= Элементы.Детали.ТекущиеДанные.ВысотаДетали;
	ШиринаДетали 		= Элементы.Детали.ТекущиеДанные.ШиринаДетали;
	ЧислоСравнения 	= ?(ВысотаДетали <= ШиринаДетали, ВысотаДетали, ШиринаДетали);
	
	Если ЗначениеРадиуса > ЧислоСравнения Тогда
		
		Кратность 	= Окр(ЧислоСравнения / 50, 0);
		Радиус 		= 50 * Кратность;
		ПоказатьОповещениеПользователя("Радиусы были изменены");
		
	Иначе
		
		Радиус = ЗначениеРадиуса;
		
	КонецЕсли;
	
КонецПроцедуры // СравнитьСтороныСРадиусом()

&НаСервере
Функция ПроверитьНоменклатурнуюГруппуКромки(ВерхняяКромка, НижняяКромка)
	
	НоменклатурнаяГруппаТолстойКромки = Справочники.НоменклатурныеГруппы.Кромка2_45;
	ТолстаяКромкаЕсть = ВерхняяКромка.НоменклатурнаяГруппа = НоменклатурнаяГруппаТолстойКромки
	ИЛИ НижняяКромка = НоменклатурнаяГруппаТолстойКромки;
	
	Возврат ТолстаяКромкаЕсть;
	
КонецФункции // ()

#КонецОбласти

#Область Общего_назначения

&НаКлиенте
Функция ПосчитатьКоличествоПазов()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Материал = ТекущиеДанные.Материал;
	РасположениеПазов = Строка(ТекущиеДанные.РасположениеПазов);
	ВысотаДетали = ТекущиеДанные.ВысотаДетали;
	ШиринаДетали = ТекущиеДанные.ШиринаДетали;
	
	Если Материал = "ФасадАГТ" И РасположениеПазов = "Слева" ИЛИ Материал = "ФасадАГТ" И РасположениеПазов = "Справа" Тогда
		
		Если ВысотаДетали > 500 Тогда
			
			ТекущиеДанные.КоличествоПетель = Цел(ВысотаДетали / 500) + 1;
			
		КонецЕсли;
		
	ИначеЕсли Материал = "ФасадАГТ" И РасположениеПазов = "Сверху" ИЛИ Материал = "ФасадАГТ" И РасположениеПазов = "Снизу" Тогда
		
		Если ШиринаДетали > 500 Тогда
			
			Элементы.Детали.ТекущиеДанные.КоличествоПетель =  Цел(ШиринаДетали / 500) + 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПосчитатьКоличествоПазов()

&НаКлиенте
Функция ПосчитатьЧистыйРазмер()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если НЕ ШиринаСКромкой = 0 И НЕ ВысотаСКромкой = 0 Тогда
		
		ТекущиеДанные.ШиринаДетали = ШиринаСКромкой - МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
		ТекущиеДанные.ВысотаДетали = ВысотаСКромкой - МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
		
	КонецЕсли;
	
КонецФункции // ПосчитатьЧистыйРазмер()

&НаСервереБезКонтекста
Функция ПроверитьСоблюдениеТекстуры(Номенклатура)
	
	Возврат Номенклатура.НаличиеТекстуры;
	
КонецФункции // ПроверитьСоблюдениеТекстуры(Номенклатура)()

&НаСервере
Функция ПолучитьАдресТаблицы()
	
	Возврат ПоместитьВоВременноеХранИЛИще(ЭтаФорма.Детали.Выгрузить());
	
КонецФункции // ПолучитьАдресТаблицы()

&НаКлиенте
Процедура ЗаполнитьОтверстия(Команда)
	
	Данные = Элементы.Детали.ТекущиеДанные;
	
	Структура = Новый Структура;
	Структура.Вставить("ТаблицаОтверстий", Данные.СтруктураОтверстий);
	
	Если ЗначениеЗаполнено(Данные.ВысотаДетали) И ЗначениеЗаполнено(Данные.ШиринаДетали) Тогда
		СтруктурыОтверстий = ОткрытьФормуМодально("ОбщаяФорма.ФормаРедактораОтверстий", Структура, ЭтаФорма);
		Если СтруктурыОтверстий <> Неопределено Тогда
			Данные.СтруктураОтверстий = СтруктурыОтверстий;
			ОбновитьФлэш();
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Данные.ВысотаДетали) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните высоту детали", , "Элементы.Детали.ТекущиеДанные.ВысотаДетали");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Данные.ШиринаДетали) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните ширину детали", , "Элементы.Детали.ТекущиеДанные.ШиринаДетали");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазмерыПолотна()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Материал = ТекущиеДанные.Материал;
	Номенклатура = ТекущиеДанные.Номенклатура;
	ТорцеваяЛента = Новый Структура;
	
	Если Материал = "ФасадАГТ" ИЛИ Материал = "ФасадМДФ" ИЛИ Материал = "ФасадАлюминиевый" Тогда
		
		Профиль = ТекущиеДанные.УниверсальнаяКромка;
		
		ТорцеваяЛента.Вставить("ТорцеваяЛентаСверху", Профиль);
		ТорцеваяЛента.Вставить("ТорцеваяЛентаСнизу", Профиль);
		ТорцеваяЛента.Вставить("ТорцеваяЛентаСлева", Профиль);
		ТорцеваяЛента.Вставить("ТорцеваяЛентаСправа", Профиль);
		
	ИначеЕсли Материал = "МДФ" ИЛИ Найти(Материал, "ЛДСП") <> 0 Тогда
		
		ТорцеваяЛента.Вставить("ТорцеваяЛентаСверху", ТекущиеДанные.ВыборМебельнойКромкиСверху);
		ТорцеваяЛента.Вставить("ТорцеваяЛентаСнизу", ТекущиеДанные.ВыборМебельнойКромкиСнизу);
		ТорцеваяЛента.Вставить("ТорцеваяЛентаСлева", ТекущиеДанные.ВыборМебельнойКромкиСлева);
		ТорцеваяЛента.Вставить("ТорцеваяЛентаСправа", ТекущиеДанные.ВыборМебельнойКромкиСправа);
		
	КонецЕсли;
	
	Размеры = ПолучитьРазмерыПолотна(Номенклатура, ТорцеваяЛента);
	
	Если Материал = "10 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+16 ЛДСП" Тогда
		
		МассивыНоменклатурныхГрупп.Вставить("ДлинаПолотна", Размеры.ДлинаПолотна - 20);
		МассивыНоменклатурныхГрупп.Вставить("ШиринаПолотна", Размеры.ШиринаПолотна - 20);
		
	Иначе
		
		МассивыНоменклатурныхГрупп.Вставить("ДлинаПолотна", Размеры.ДлинаПолотна);
		МассивыНоменклатурныхГрупп.Вставить("ШиринаПолотна", Размеры.ШиринаПолотна);
		
	КонецЕсли;
	
	МассивыНоменклатурныхГрупп.Вставить("ВычитаемоеДляШирины", Размеры.ВычитаемоеДляШирины);
	МассивыНоменклатурныхГрупп.Вставить("ВычитаемоеДляВысоты", Размеры.ВычитаемоеДляВысоты);
	
КонецПроцедуры

&НаКлиенте
Функция ПосчитатьКривойПилИПериметр()
	
	ТекущиеДанные								= Элементы.Детали.ТекущиеДанные;
	ВысотаДетали  								= ТекущиеДанные.ВысотаДетали;
	ШиринаДетали 								= ТекущиеДанные.ШиринаДетали;
	R1 												= ТекущиеДанные.РадиусЛевоВерх;
	R2 												= ТекущиеДанные.РадиусПравоВерх;
	R3 												= ТекущиеДанные.РадиусПравоНиз;
	R4 												= ТекущиеДанные.РадиусЛевоНиз;
	ТекущиеДанные.Периметр 				= 2 * (ВысотаДетали + ШиринаДетали - R1 - R2 - R3 - R4) + Окр(3.14159 * (R1 + R2 + R3 + R4) / 2);
	ТекущиеДанные.ДлинаКривогоПила 	= Окр(3.14159 * (R1 + R2 + R3 + R4) / 2);
	
КонецФункции

&НаКлиенте
Процедура ПосчитатьРадиус(ЗначениеРадиуса, МестоФормы, Радиус)
	
	Если Цел(ЗначениеРадиуса/50)*50 - (ЗначениеРадиуса/50)*50 <> 0 И ЗначениеРадиуса <> 10 Тогда 
		
		Текст = "Радиус не кратен 50!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , МестоФормы);
		Радиус = 0;
		Возврат;
		
	КонецЕсли;
	
	//СравнитьСтороныСРадиусом(ЗначениеРадиуса, Радиус);
	
КонецПроцедуры // ПосчитатьРадиус()

&НаКлиенте
Процедура ОбнулитьКромкуИРадиусы()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	ТекущиеДанные.ВыборМебельнойКромкиСверху 	= Неопределено;
	ТекущиеДанные.ПереключательКромкаСверху 		= "Нет";
	ТекущиеДанные.ВыборМебельнойКромкиСнизу 		= Неопределено;
	ТекущиеДанные.ПереключательКромкаСнизу 		= "Нет";
	ТекущиеДанные.ВыборМебельнойКромкиСлева 		= Неопределено;
	ТекущиеДанные.ПереключательКромкаСлева 		= "Нет";
	ТекущиеДанные.ВыборМебельнойКромкиСправа 	= Неопределено;
	ТекущиеДанные.ПереключательКромкаСправа 		= "Нет";
	ТекущиеДанные.РадиусЛевоВерх							= 0;
	ТекущиеДанные.РадиусЛевоНиз							= 0;
	ТекущиеДанные.РадиусПравоВерх						= 0;
	ТекущиеДанные.РадиусПравоНиз							= 0;
	
КонецПроцедуры // ОбнулитьКромку()

&НаКлиенте
Функция ФасаднаяОкантовка(ПропуститьОбновление = Ложь)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	ТекущиеДанные.ПереключательКромкаСверху = "УниверсальнаяКромка";
	ТекущиеДанные.ВыборМебельнойКромкиСверху = ТекущиеДанные.УниверсальнаяКромка;
	ТекущиеДанные.ПереключательКромкаСнизу = "УниверсальнаяКромка";
	ТекущиеДанные.ВыборМебельнойКромкиСнизу = ТекущиеДанные.УниверсальнаяКромка;
	ТекущиеДанные.ПереключательКромкаСлева = "УниверсальнаяКромка";
	ТекущиеДанные.ВыборМебельнойКромкиСлева = ТекущиеДанные.УниверсальнаяКромка;
	ТекущиеДанные.ПереключательКромкаСправа = "УниверсальнаяКромка";
	ТекущиеДанные.ВыборМебельнойКромкиСправа = ТекущиеДанные.УниверсальнаяКромка;
	
	Если ПропуститьОбновление Тогда
		ОбновитьФлэш();
		УстановитьРазмерыПолотна();
		ПосчитатьЧистыйРазмер();
	КонецЕсли;
	
КонецФункции // ФасаднаяОкантовка()

&НаСервереБезКонтекста
Функция ПолучитьЦвета(Деталь)
	
	Структура = Новый Структура;
	Структура.Вставить("Цвет", "0x" + Деталь.Номенклатура.Цвет.КодЦвета);
	Структура.Вставить("ЦветКромкиСверху", "0x" +  Деталь.ВыборМебельнойКромкиСверху.Цвет.КодЦвета);
	Структура.Вставить("ЦветКромкиСнизу", "0x" +  Деталь.ВыборМебельнойКромкиСнизу.Цвет.КодЦвета);
	Структура.Вставить("ЦветКромкиСлева", "0x" +  Деталь.ВыборМебельнойКромкиСлева.Цвет.КодЦвета);
	Структура.Вставить("ЦветКромкиСправа", "0x" +  Деталь.ВыборМебельнойКромкиСправа.Цвет.КодЦвета);
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьНазванияКромок(СтруктураКромок)
	
	СтруктураКромок.ВыборМебельнойКромкиСверху = ?(ЗначениеЗаполнено(СтруктураКромок.ВыборМебельнойКромкиСверху),
	КраткоеНаименование(СтруктураКромок.ВыборМебельнойКромкиСверху), СтруктураКромок.ВыборМебельнойКромкиСверху);
	СтруктураКромок.ВыборМебельнойКромкиСлева = ?(ЗначениеЗаполнено(СтруктураКромок.ВыборМебельнойКромкиСлева),
	КраткоеНаименование(СтруктураКромок.ВыборМебельнойКромкиСлева), СтруктураКромок.ВыборМебельнойКромкиСлева);
	СтруктураКромок.ВыборМебельнойКромкиСнизу = ?(ЗначениеЗаполнено(СтруктураКромок.ВыборМебельнойКромкиСнизу),
	КраткоеНаименование(СтруктураКромок.ВыборМебельнойКромкиСнизу), СтруктураКромок.ВыборМебельнойКромкиСнизу);
	СтруктураКромок.ВыборМебельнойКромкиСправа = ?(ЗначениеЗаполнено(СтруктураКромок.ВыборМебельнойКромкиСправа),
	КраткоеНаименование(СтруктураКромок.ВыборМебельнойКромкиСправа), СтруктураКромок.ВыборМебельнойКромкиСправа);
	
	Возврат СтруктураКромок; //Кромка.КраткоеНаименование;
	
КонецФункции 

&НаСервереБезКонтекста
Функция КраткоеНаименование(Кромка)
	
	Возврат Кромка.КраткоеНаименование;
	
КонецФункции // КраткоеНаименование()

&НаСервере
Функция ПолучитьАдресХранИЛИща()
	
	//Детали.Сортировать("Материал, ВысотаДетали");
	Возврат ПоместитьВоВременноеХранИЛИще(Детали.Выгрузить());
	
КонецФункции

&НаКлиенте
Функция ПронумероватьСтроки()
	
	Счетчик = 0;
	
	Для каждого Строка ИЗ Детали Цикл
		
		Счетчик = Счетчик + 1;
		Строка.НомерСтроки = Счетчик;
		
	КонецЦикла;
	
КонецФункции // ПронумероватьСтроки()

&НаСервереБезКонтекста
Функция КантыВСтроку(СтрокаКантов)
	
	ДлинаСтроки	= СтрДлина(СтрокаКантов);
	СтрокаКантов = Лев(СтрокаКантов, ДлинаСтроки - 1);
	Значение 	 	= ЗначениеВСтрокуВнутр(СтрокаКантов);
	
	Возврат Значение;
	
КонецФункции // КантыВСтроку()

// Вызывается при изменении вида детали, и при активации строки
&НаКлиенте
Функция ЗагрузитьСписокВыбораНоменклатуры(Материал)
	
	Фасад = Найти(Материал, "Фасад") <> 0;
	Кромка2 = Новый Массив;
	КромкаДляСтолешниц = Новый Массив;
	Стекло_И_Зеркало = Новый Массив;
	КромкаМДФ = Новый Массив;
	ФасаднаяВставкаАГТ = Новый Массив;
	ВставкаАлюминиевыйФасад = Новый Массив;
	Петли = Новый Массив;
	ПетлиДляСтекол = Новый Массив;
	ПустойМассив = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Кромка2, МассивыНоменклатурныхГрупп.Кромка2_19);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КромкаДляСтолешниц, МассивыНоменклатурныхГрупп.Кромка2_42);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КромкаДляСтолешниц, МассивыНоменклатурныхГрупп.Кромка2_45);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Стекло_И_Зеркало, МассивыНоменклатурныхГрупп.Зеркало);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Стекло_И_Зеркало, МассивыНоменклатурныхГрупп.Стекло);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Стекло_И_Зеркало, МассивыНоменклатурныхГрупп.СтеклоДляСкругляемогоФасада);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КромкаМДФ, МассивыНоменклатурныхГрупп.КромкаМДФ);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КромкаМДФ, МассивыНоменклатурныхГрупп.КантАлюминиевый);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФасаднаяВставкаАГТ, МассивыНоменклатурныхГрупп.АгтПанель);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФасаднаяВставкаАГТ, МассивыНоменклатурныхГрупп.ЛДСП10);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФасаднаяВставкаАГТ, МассивыНоменклатурныхГрупп.МДФ8);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФасаднаяВставкаАГТ, МассивыНоменклатурныхГрупп.Стекло);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФасаднаяВставкаАГТ, МассивыНоменклатурныхГрупп.Зеркало);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФасаднаяВставкаАГТ, МассивыНоменклатурныхГрупп.СтеклоДляСкругляемогоФасада);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФасаднаяВставкаАГТ, МассивыНоменклатурныхГрупп.Кожа);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФасаднаяВставкаАГТ, МассивыНоменклатурныхГрупп.ЩитМебельный);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВставкаАлюминиевыйФасад, МассивыНоменклатурныхГрупп.Зеркало);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВставкаАлюминиевыйФасад, МассивыНоменклатурныхГрупп.Стекло);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВставкаАлюминиевыйФасад, МассивыНоменклатурныхГрупп.Кожа);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВставкаАлюминиевыйФасад, МассивыНоменклатурныхГрупп.ЩитМебельный);
	// { Васильев Александр Леонидович [08.09.2014]
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВставкаАлюминиевыйФасад, МассивыНоменклатурныхГрупп.СтеклоДляСкругляемогоФасада);
	// Пуховой Максим захотел
	// } Васильев Александр Леонидович [08.09.2014]
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Петли, МассивыНоменклатурныхГрупп.ПетлиБезДоводчика);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Петли, МассивыНоменклатурныхГрупп.ПетлиСДоводчиком);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПетлиДляСтекол, МассивыНоменклатурныхГрупп.ПетлиДляСтеколБезДоводчика);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПетлиДляСтекол, МассивыНоменклатурныхГрупп.ПетлиДляСтеколСДоводчиком);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПетлиДляСтекол, МассивыНоменклатурныхГрупп.ПетлиПоворотные);
	
	МассивыНоменклатурныхГрупп.Вставить("ПустойМассив", ПустойМассив);
	МассивыНоменклатурныхГрупп.Вставить("Кромка2мм", Кромка2);
	МассивыНоменклатурныхГрупп.Вставить("КромкаДляСтолешниц", КромкаДляСтолешниц);
	МассивыНоменклатурныхГрупп.Вставить("Стекло_И_Зеркало", Стекло_И_Зеркало);
	МассивыНоменклатурныхГрупп.Вставить("КромкаМДФ", КромкаМДФ);
	МассивыНоменклатурныхГрупп.Вставить("ФасаднаяВставкаАГТ", ФасаднаяВставкаАГТ);
	МассивыНоменклатурныхГрупп.Вставить("ВставкаАлюминиевыйФасад", ВставкаАлюминиевыйФасад);
	МассивыНоменклатурныхГрупп.Вставить("Петли", Петли);
	МассивыНоменклатурныхГрупп.Вставить("ПетлиДляСтекол", ПетлиДляСтекол);
	
	Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2мм);
	Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка045_19);
	Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КантТ);
	
	//----------------------
	
	Если Материал = "10 ЛДСП" Тогда
		
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП10);
		Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка045_19);
		Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2мм);
		Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		
	ИначеЕсли Материал = "16 ЛДСП" Тогда
		
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП16);
		Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КантТ);
		Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка045_19);
		Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2мм);
		Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаМДФ);
		
	ИначеЕсли Материал = "10 ЛДСП+10 ЛДСП" Тогда
		
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП10);
		Элементы.НоменклатураДляСклеивания.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП10);
		Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_35);
		Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		
	ИначеЕсли Материал = "16 ЛДСП+10 ЛДСП" Тогда
		
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП16);
		Элементы.НоменклатураДляСклеивания.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП10);
		Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_35);
		Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		
	ИначеЕсли Материал = "16 ЛДСП+16 ЛДСП" Тогда
		
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП16);
		Элементы.НоменклатураДляСклеивания.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП16);
		Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_35);
		Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		
	ИначеЕсли Материал = "МДФ" Тогда
		
		Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.МДФ18);
		Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаМДФ);
		Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_35);
		
	ИначеЕсли Материал = "Пуфик" Тогда
		
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП16);
		Элементы.НоменклатураДляСклеивания.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кожа);
		Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		
	КонецЕсли;
	
	Если Материал = "ДВП" Тогда
		
		Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ДВП);
		// { Васильев Александр Леонидович [26.08.2014]
		// Для чего здесь обновление доступности?
		// } Васильев Александр Леонидович [26.08.2014]
		ОбновитьДоступность();
		
	ИначеЕсли Материал = "Столешница" Тогда
		
		Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Столешница);
		Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаДляСтолешниц);
		// { Васильев Александр Леонидович [26.08.2014]
		// Для чего здесь обновление доступности?
		// } Васильев Александр Леонидович [26.08.2014]
		ОбновитьДоступность();
		
	ИначеЕсли Материал = "Пристенок" Тогда
		
		Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Пристенок);
		// { Васильев Александр Леонидович [26.08.2014]
		// Для чего здесь обновление доступности?
		// } Васильев Александр Леонидович [26.08.2014]
		ОбновитьДоступность();
		
	ИначеЕсли Материал = "Стекло" Тогда
		
		Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Стекло_И_Зеркало);
		
	ИначеЕсли Материал = "АГТПанель" Тогда
		
		Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка045_19);
		Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.АгтПанель);
		Элементы.Петли.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
		
	ИначеЕсли Фасад Тогда
		
		Если Материал = "ФасадСтеклянный" Тогда
			
			Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Стекло_И_Зеркало);
			Элементы.Петли.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПетлиДляСтекол);
			
		ИначеЕсли Материал = "ФасадСтеклянныйЗакругленный" Тогда
			
			Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.СтеклоДляСкругляемогоФасада);
			Элементы.Петли.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПетлиПоворотные);
			
		ИначеЕсли Материал = "ФасадМДФ" Тогда 
			
			Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.МДФ18);
			Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаМДФ);
			Элементы.Петли.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Петли);
			
		ИначеЕсли Материал = "ФасадЛДСП" Тогда
			
			Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП16);
			Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2мм);
			Элементы.Петли.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Петли);
			
		ИначеЕсли Материал = "ФасадАГТ" Тогда
			
			Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.АГТПрофиль);
			Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ФасаднаяВставкаАГТ);
			Элементы.Петли.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Петли);
			
		ИначеЕсли Материал = "ФасадАлюминиевый" Тогда
			
			Элементы.Кант.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Кромка045мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.Кромка2мм.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ПустойМассив);
			Элементы.УниверсальнаяКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.РамочныйАлюминий);
			Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ВставкаАлюминиевыйФасад);
			Элементы.Петли.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Петли);
			
		КонецЕсли;
		
		Элементы.НоменклатураДляСклеивания.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Ручка);
		
	КонецЕсли; // Фасад
	
КонецФункции // ЗагрузитьСписокВыбораНоменклатуры()

&НаКлиенте
Процедура ПредупредитьНаКлиенте()
	
	Строка = Новый ФорматированнаяСтрока("Обновите справочник файлов!",,,,"e1cib/command/ОбщаяКоманда.СинхронизацияФайлов");
	Предупреждение(Строка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРазмерыПолотна(Номенклатура, ТорцеваяЛента)
	
	СтруктураРазмеров = Документы.Спецификация.ПолучитьРазмерыМатериалов(Номенклатура, ТорцеваяЛента);
	
	Возврат СтруктураРазмеров;
	
КонецФункции // ПолучитьРазмерыПолотна()

#КонецОбласти

#Область Управление_внешним_видом

// <Устанавливает доступность переданным элементам формы.>
//
// Параметры
//  <Значение>  - <Булево> - <включить или выключить элементы>
//                 <продолжение описания параметра>
//  <МассивЭлементов>  - <Массив> - <Массив элементов для обработки>
//                 <продолжение описания параметра>
&НаКлиенте
Функция УстановитьДоступностьЭлементов(Значение, МассивЭлементов)
	
	Для каждого Элемент ИЗ МассивЭлементов Цикл
		
		Элементы[Элемент].Доступность = Значение;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ИспользованиеПереключателяКромки(Переключатель, МебельнаяКромка, ЭлементМебельнаяКромка)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Материал = ТекущиеДанные.Материал;
	Клееная = Материал = "10 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+16 ЛДСП";
	СпецФасады = Материал = "ФасадАГТ" ИЛИ Материал = "ФасадАлюминиевый" ИЛИ Материал = "ФасадМДФ";
	Пристенок = Материал = "Пристенок";
	СписокВыбора = ЭлементМебельнаяКромка.СписокВыбора;
	
	Если Переключатель = "Кант" Тогда
		
		Если НЕ Клееная Тогда
			
			СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КантТ);
			МебельнаяКромка = ТекущиеДанные.Кант;
			
			Если НЕ Материал = "Столешница" И НЕ Материал = "МДФ" И НЕ СпецФасады И НЕ Пристенок Тогда
				
				ЭлементМебельнаяКромка.Доступность = Истина;
				
			ИначеЕсли Материал = "МДФ" Тогда
				
				Переключатель = "УниверсальнаяКромка";
				
				Если ТонкаяМДФ(ТекущиеДанные.Номенклатура) Тогда
					
					СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка045_19);
					
				Иначе
					
					СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаМДФ);
					
				КонецЕсли;
				
				МебельнаяКромка = ТекущиеДанные.УниверсальнаяКромка;
				
			ИначеЕсли СпецФасады Тогда
				
				ФасаднаяОкантовка(Истина);
				
			ИначеЕсли Материал = "Столешница" Тогда
				
				Переключатель = "УниверсальнаяКромка";
				СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаДляСтолешниц);
				МебельнаяКромка = ТекущиеДанные.УниверсальнаяКромка;
				
			ИначеЕсли Пристенок Тогда
				
				Переключатель = "2";
				СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_19);
				МебельнаяКромка = ТекущиеДанные.Кромка2мм;
				
			КонецЕсли;
			
		Иначе
			
			Переключатель = "2";
			СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_35);
			МебельнаяКромка = ТекущиеДанные.Кромка2мм;
			
		КонецЕсли;
		
	ИначеЕсли Переключатель = "0.45" Тогда
		
		Если НЕ Клееная Тогда
			
			СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка045_19);
			МебельнаяКромка = ТекущиеДанные.Кромка045мм;
			
			Если НЕ Материал = "Столешница" И НЕ Материал = "МДФ" И НЕ СпецФасады Тогда
				
				ЭлементМебельнаяКромка.Доступность = Истина;
				
			ИначеЕсли Материал = "МДФ" Тогда
				
				Переключатель = "УниверсальнаяКромка";
				СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаМДФ);
				МебельнаяКромка = ТекущиеДанные.УниверсальнаяКромка;
				
			ИначеЕсли СпецФасады Тогда
				
				ФасаднаяОкантовка(Истина);
				
			ИначеЕсли Материал = "Столешница" Тогда
				
				Переключатель = "УниверсальнаяКромка";
				СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаДляСтолешниц);
				МебельнаяКромка = ТекущиеДанные.УниверсальнаяКромка;
				
			КонецЕсли;
			
		Иначе
			
			Переключатель = "2";
			СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_35);
			МебельнаяКромка = ТекущиеДанные.Кромка2мм;
			
		КонецЕсли;
		
	ИначеЕсли Переключатель = "2" Тогда
		
		Если НЕ Клееная Тогда
			
			СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2мм);
			МебельнаяКромка = ТекущиеДанные.Кромка2мм;
			
			Если НЕ Материал = "Столешница" И НЕ Материал = "МДФ" И НЕ СпецФасады И НЕ Пристенок Тогда
				
				ЭлементМебельнаяКромка.Доступность = Истина;
				
			ИначеЕсли Материал = "МДФ" Тогда
				
				СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_35);
				ЭлементМебельнаяКромка.Доступность = Истина;
				
			ИначеЕсли СпецФасады Тогда
				
				ФасаднаяОкантовка(Истина);
				
			ИначеЕсли Материал = "Столешница" Тогда
				
				Переключатель = "УниверсальнаяКромка";
				СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаДляСтолешниц);
				МебельнаяКромка = ТекущиеДанные.УниверсальнаяКромка;
				
			ИначеЕсли Пристенок Тогда
				
				ЭлементМебельнаяКромка.Доступность = Истина;
				СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_19);
				
			КонецЕсли;
			
		Иначе
			
			СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_35);
			МебельнаяКромка = ТекущиеДанные.Кромка2мм;
			
		КонецЕсли;
		
	ИначеЕсли Переключатель = "УниверсальнаяКромка" Тогда 
		
		Если НЕ Клееная Тогда
			
			МебельнаяКромка = ТекущиеДанные.УниверсальнаяКромка;
			ЭлементМебельнаяКромка.Доступность = Истина;
			
			Если Материал = "МДФ" Тогда
				
				СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаМДФ);
				
			ИначеЕсли СпецФасады Тогда
				
				ФасаднаяОкантовка(Истина);
				
			ИначеЕсли Материал = "Столешница" Тогда
				
				СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаДляСтолешниц);
				
			ИначеЕсли Пристенок Тогда
				
				Переключатель = "2";
				СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_19);
				МебельнаяКромка = ТекущиеДанные.Кромка2мм;
				
			КонецЕсли;
			
		Иначе
			
			Переключатель = "2";
			СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_35);
			МебельнаяКромка = ТекущиеДанные.Кромка2мм;
			
		КонецЕсли;
		
	ИначеЕсли Переключатель = "Нет" Тогда 
		
		Если НЕ СпецФасады Тогда
			
			МебельнаяКромка = Неопределено;
			ЭлементМебельнаяКромка.Доступность = Ложь;
			
		Иначе
			
			ФасаднаяОкантовка(Истина);
			
		КонецЕсли;
		
	ИначеЕсли Переключатель = "По месту" Тогда
		
		Если НЕ Клееная Тогда
			
			Если НЕ Материал = "Столешница" И НЕ Материал = "МДФ" И НЕ СпецФасады И НЕ Пристенок Тогда
				
				СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КантТ);
				МебельнаяКромка = ТекущиеДанные.Кант;
				//Передаем комментарий для раскроя
			ИначеЕсли СпецФасады Тогда
				
				ФасаднаяОкантовка(Истина);
				
			ИначеЕсли Пристенок Тогда
				
				Переключатель = "2";
				СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_35);
				МебельнаяКромка = ТекущиеДанные.Кромка2мм;
				
			Иначе
				
				Переключатель = "УниверсальнаяКромка";
				СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаМДФ);
				
			КонецЕсли;
			
		Иначе
			
			Переключатель = "2";
			СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка2_35);
			МебельнаяКромка = ТекущиеДанные.Кромка2мм;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Переключатель = "По месту" Тогда
		
		Если Найти(ВРег(ТекущиеДанные.Комментарий), "МЕСТУ") = 0 Тогда
			ТекущиеДанные.Комментарий = "[Кант по месту] " + ТекущиеДанные.Комментарий;
		КонецЕсли;
		
	КонецЕсли;
	
	// а тут нужно проверить, есть ли у нас ещё где-нить кант по месту о_О
	СтрокаКанты = ТекущиеДанные.ПереключательКромкаСверху + ТекущиеДанные.ПереключательКромкаСлева + ТекущиеДанные.ПереключательКромкаСнизу + ТекущиеДанные.ПереключательКромкаСправа;
	Если Найти(СтрокаКанты, "По месту") = 0 Тогда
		
		ТекущиеДанные.Комментарий = СтрЗаменить(ТекущиеДанные.Комментарий, "[Кант по месту] ", "");
		
	КонецЕсли;
	
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	ОбновитьФлэш();
	
КонецФункции // ИспользованиеПереключателяКромки()

&НаСервереБезКонтекста
Функция ТонкаяМДФ(Номенклатура)
	
	Возврат Справочники.НоменклатурныеГруппы.МДФ8 = ЛексСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "НоменклатурнаяГруппа");
	
КонецФункции

&НаКлиенте
Функция ОбновитьДоступность()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Материал = ТекущиеДанные.Материал;
	СтеклоИлиДВП = Материал = "ДВП" ИЛИ Материал = "Стекло";
	Столешница = Материал = "Столешница" ИЛИ Материал = "Пристенок";
	Стекла = Материал = "Стекло";
	СтеклянныйФасад = Материал = "ФасадСтеклянный" ИЛИ Материал = "ФасадСтеклянныйЗакругленный";
	МДФ = Материал = "МДФ";
		УстановитьДоступностьЭлементов(Истина, СтруктураМатериала.СтеклоИлиДВП);
	ЛДСП = Материал = "10 ЛДСП" ИЛИ Материал = "16 ЛДСП" ИЛИ Материал = "10 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+16 ЛДСП" ИЛИ Материал = "" ИЛИ Материал = "МДФ";
	Клееная = Материал = "10 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+16 ЛДСП";
	ОбычныйФасад = Материал = "ФасадАГТ" ИЛИ Материал = "ФасадЛДСП" ИЛИ Материал = "ФасадМДФ" ИЛИ Материал = "ФасадАлюминиевый" ИЛИ Материал = "АГТПанель";
	ДетальРедактирована = ЗначениеЗаполнено(ТекущиеДанные.СтрокаДляФлэш);
	Пуфик = Материал = "Пуфик";
	
	Элементы.ЗаполнитьОтверстия.Доступность = НЕ Стекла И НЕ Столешница И НЕ ДетальРедактирована И НЕ Пуфик;
	
	УстановитьДоступностьЭлементов(Ложь, СтруктураМатериала.ВсеЭлементы);
	
	Если ЛДСП Тогда
		
		УстановитьДоступностьЭлементов(Истина, СтруктураМатериала.ЛДСП);
		
		Если Клееная Тогда
			
			Элементы.НоменклатураДляСклеивания.Доступность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли СтеклоИлиДВП Тогда
		
		УстановитьДоступностьЭлементов(Истина, СтруктураМатериала.СтеклоИлиДВП);
		
		Если Стекла Тогда
			
			Элементы.Обтачивать.Доступность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Столешница Тогда
		
		УстановитьДоступностьЭлементов(Истина, СтруктураМатериала.Столешница);
		ПроверитьОбточку();
		
	ИначеЕсли СтеклянныйФасад Тогда
		
		УстановитьДоступностьЭлементов(Истина, СтруктураМатериала.СтеклянныйФасад);
		
		Если Материал = "ФасадСтеклянный" Тогда
			
			Элементы.РадиусФасада.Доступность = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ОбычныйФасад Тогда
		
		УстановитьДоступностьЭлементов(Истина, СтруктураМатериала.ОбычныйФасад);
		
		Если Материал = "ФасадАГТ" ИЛИ Материал = "ФасадАлюминиевый" ИЛИ Материал = "АГТПанель" Тогда
			
			Элементы.РедактироватьДеталь.Доступность = Ложь;
			
		КонецЕсли;
		
		Если Материал = "АГТПанель" Тогда
			
			Элементы.ГруппаПетли.Доступность = Ложь;
			Элементы.ГруппаФасады.Доступность = Ложь;
			Элементы.Обтачивать.Доступность = Ложь;
			
		Иначе
			
			Элементы.ГруппаПетли.Доступность = Истина;
			Элементы.ГруппаФасады.Доступность = Истина;
			Элементы.Обтачивать.Доступность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Пуфик Тогда
		
		УстановитьДоступностьЭлементов(Истина, СтруктураМатериала.Пуфик);
		Элементы.Обтачивать.Доступность = Ложь;
		
	КонецЕсли;
	
	Если ДетальРедактирована Тогда
		
		УстановитьДоступностьЭлементов(Ложь, СтруктураМатериала.ВсеЭлементы);
		ОбнулитьКромкуИРадиусы();
		
	КонецЕсли;
	
	Если ТекущиеДанные.НеТорцевать Тогда
		Элементы.ВысотаДетали.Доступность = Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область События_формы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗагрузитьФлэш(ИмяHTML, Элементы.Флэш);
//	ЗагрузитьФлэш(ИмяHTML3D, Элементы.Флэш3D);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьФлэш(ИмяФайлаHTML, ПолеHTML)
	
	url = ЛексКлиент.ПутьHTML(ИмяФайлаHTML);
	
	Если url <> "" Тогда
		Попытка
			ПолеHTML.Документ.url = url;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	Иначе
		ПредупредитьНаКлиенте();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Свойство("ПовторнаяПроверка") Тогда
		
		Элементы.ПеренестиВДокумент.Заголовок = "Проверить детали";
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = "Повторная проверка"
		
	КонецЕсли;
	
	Если Параметры.Свойство("АдресТаблицы") Тогда
		Детали.Загрузить(ПолучитьИзВременногоХранИЛИща(Параметры.АдресТаблицы));
	КонецЕсли;
	
	Если Параметры.Свойство("Строка3DРедактор") Тогда
		Строка3DРедактор = Параметры.Строка3DРедактор;
	КонецЕсли;
	
	Если Параметры.Свойство("Подразделение") Тогда
		Подразделение = Параметры.Подразделение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Детали) Тогда
		
		Если Параметры.Свойство("Идентификатор") Тогда
			
			Элементы.Детали.ТекущаяСтрока = Параметры.Идентификатор;
			
		КонецЕсли;
		
	Иначе
		
		Стр = Детали.Добавить();
		Стр.СоблюдениеТекстуры = Истина;
		
	КонецЕсли;
	
	ИмяHTML = ЛексСервер.ПолучитьИмяХТМЛ(Справочники.Файлы.ЛДСПHtml);
	ИмяHTML3D = ЛексСервер.ПолучитьИмяХТМЛ(Справочники.Файлы.Редактор3DHtml);
	
	МассивыНоменклатурныхГрупп = ЛексСервер.ОтборФиксированныхНоменклатурныхГрупп(Подразделение);
	МассивыНоменклатурныхГрупп.Вставить("ВычитаемоеДляВысоты", 0);
	МассивыНоменклатурныхГрупп.Вставить("ВычитаемоеДляШирины", 0);
	
	ШапкаОсновныхНастроек = Новый Структура;
	
	ШапкаОсновныхНастроек.Вставить("Материал","16 ЛДСП");
	ШапкаОсновныхНастроек.Вставить("Номенклатура","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания","");
	ШапкаОсновныхНастроек.Вставить("Кант","");
	ШапкаОсновныхНастроек.Вставить("Кромка2мм","");
	ШапкаОсновныхНастроек.Вставить("Кромка045мм","");
	ШапкаОсновныхНастроек.Вставить("УниверсальнаяКромка","");
	ШапкаОсновныхНастроек.Вставить("Скруглять","");
	
	СтруктураМатериала = Новый Структура;
	МассивВсеЭлементы = Новый Массив;
	
	МассивВсеЭлементы.Добавить("Номенклатура");
	МассивВсеЭлементы.Добавить("НоменклатураДляСклеивания");
	МассивВсеЭлементы.Добавить("НеТорцевать");
	МассивВсеЭлементы.Добавить("ВысотаДетали");
	МассивВсеЭлементы.Добавить("ШиринаДетали");
	МассивВсеЭлементы.Добавить("РадиусФасада");
	МассивВсеЭлементы.Добавить("ПоложениеРучки");
	МассивВсеЭлементы.Добавить("Петли");
	МассивВсеЭлементы.Добавить("КоличествоПетель");
	МассивВсеЭлементы.Добавить("ДиаметрПазов");
	МассивВсеЭлементы.Добавить("РасположениеПазов");
	МассивВсеЭлементы.Добавить("РадиусЛевоВерх");
	МассивВсеЭлементы.Добавить("РадиусЛевоНиз");
	МассивВсеЭлементы.Добавить("РадиусПравоВерх");
	МассивВсеЭлементы.Добавить("РадиусПравоНиз");
	МассивВсеЭлементы.Добавить("Срез");
	МассивВсеЭлементы.Добавить("ПереключательКромкаСверху");
	МассивВсеЭлементы.Добавить("ПереключательКромкаСлева");
	МассивВсеЭлементы.Добавить("ПереключательКромкаСправа");
	МассивВсеЭлементы.Добавить("ПереключательКромкаСнизу");
	МассивВсеЭлементы.Добавить("ВыборМебельнойКромкиСверху");
	МассивВсеЭлементы.Добавить("ВыборМебельнойКромкиСлева");
	МассивВсеЭлементы.Добавить("ВыборМебельнойКромкиСнизу");
	МассивВсеЭлементы.Добавить("ВыборМебельнойКромкиСправа");
	
	СтруктураМатериала.Вставить("ВсеЭлементы", МассивВсеЭлементы);
	
	МассивЭлементовЛДСП = Новый Массив;
	
	МассивЭлементовЛДСП.Добавить("Номенклатура");
	МассивЭлементовЛДСП.Добавить("НеТорцевать");
	МассивЭлементовЛДСП.Добавить("РедактироватьДеталь");
	МассивЭлементовЛДСП.Добавить("ВысотаДетали");
	МассивЭлементовЛДСП.Добавить("ШиринаДетали");
	МассивЭлементовЛДСП.Добавить("РадиусЛевоВерх");
	МассивЭлементовЛДСП.Добавить("РадиусЛевоНиз");
	МассивЭлементовЛДСП.Добавить("РадиусПравоВерх");
	МассивЭлементовЛДСП.Добавить("РадиусПравоНиз");
	МассивЭлементовЛДСП.Добавить("Срез");
	МассивЭлементовЛДСП.Добавить("ПереключательКромкаСверху");
	МассивЭлементовЛДСП.Добавить("ПереключательКромкаСлева");
	МассивЭлементовЛДСП.Добавить("ПереключательКромкаСправа");
	МассивЭлементовЛДСП.Добавить("ПереключательКромкаСнизу");
	МассивЭлементовЛДСП.Добавить("ВыборМебельнойКромкиСверху");
	МассивЭлементовЛДСП.Добавить("ВыборМебельнойКромкиСлева");
	МассивЭлементовЛДСП.Добавить("ВыборМебельнойКромкиСнизу");
	МассивЭлементовЛДСП.Добавить("ВыборМебельнойКромкиСправа");
	
	СтруктураМатериала.Вставить("ЛДСП", МассивЭлементовЛДСП);
	
	МассивСтеклоИлиДВП = Новый Массив;
	
	МассивСтеклоИлиДВП.Добавить("Номенклатура");
	МассивСтеклоИлиДВП.Добавить("РедактироватьДеталь");
	МассивСтеклоИлиДВП.Добавить("ВысотаДетали");
	МассивСтеклоИлиДВП.Добавить("ШиринаДетали");
	МассивСтеклоИлиДВП.Добавить("РадиусЛевоВерх");
	МассивСтеклоИлиДВП.Добавить("РадиусЛевоНиз");
	МассивСтеклоИлиДВП.Добавить("РадиусПравоВерх");
	МассивСтеклоИлиДВП.Добавить("РадиусПравоНиз");
	МассивСтеклоИлиДВП.Добавить("Срез");
	
	СтруктураМатериала.Вставить("СтеклоИлиДВП", МассивСтеклоИлиДВП);
	
	МассивЭлементовФормыСтолешниц = Новый Массив;
	
	МассивЭлементовФормыСтолешниц.Добавить("Номенклатура");
	МассивЭлементовФормыСтолешниц.Добавить("РедактироватьДеталь");
	МассивЭлементовФормыСтолешниц.Добавить("Обтачивать");
	МассивЭлементовФормыСтолешниц.Добавить("ВысотаДетали");
	МассивЭлементовФормыСтолешниц.Добавить("ШиринаДетали");
	МассивЭлементовФормыСтолешниц.Добавить("РадиусЛевоВерх");
	МассивЭлементовФормыСтолешниц.Добавить("РадиусЛевоНиз");
	МассивЭлементовФормыСтолешниц.Добавить("РадиусПравоВерх");
	МассивЭлементовФормыСтолешниц.Добавить("РадиусПравоНиз");
	МассивЭлементовФормыСтолешниц.Добавить("Срез");
	МассивЭлементовФормыСтолешниц.Добавить("ПереключательКромкаСверху");
	МассивЭлементовФормыСтолешниц.Добавить("ПереключательКромкаСлева");
	МассивЭлементовФормыСтолешниц.Добавить("ПереключательКромкаСправа");
	МассивЭлементовФормыСтолешниц.Добавить("ПереключательКромкаСнизу");
	МассивЭлементовФормыСтолешниц.Добавить("ВыборМебельнойКромкиСверху");
	МассивЭлементовФормыСтолешниц.Добавить("ВыборМебельнойКромкиСлева");
	МассивЭлементовФормыСтолешниц.Добавить("ВыборМебельнойКромкиСнизу");
	МассивЭлементовФормыСтолешниц.Добавить("ВыборМебельнойКромкиСправа");
	
	СтруктураМатериала.Вставить("Столешница", МассивЭлементовФормыСтолешниц);	
	
	МассивЭлементовФормыСтеклянныйФасад = Новый Массив;
	
	МассивЭлементовФормыСтеклянныйФасад.Добавить("Номенклатура");
	МассивЭлементовФормыСтеклянныйФасад.Добавить("НоменклатураДляСклеивания");
	МассивЭлементовФормыСтеклянныйФасад.Добавить("Обтачивать");
	МассивЭлементовФормыСтеклянныйФасад.Добавить("ВысотаДетали");
	МассивЭлементовФормыСтеклянныйФасад.Добавить("ШиринаДетали");
	МассивЭлементовФормыСтеклянныйФасад.Добавить("РадиусФасада");
	МассивЭлементовФормыСтеклянныйФасад.Добавить("ПоложениеРучки");
	МассивЭлементовФормыСтеклянныйФасад.Добавить("Петли");
	МассивЭлементовФормыСтеклянныйФасад.Добавить("КоличествоПетель");
	МассивЭлементовФормыСтеклянныйФасад.Добавить("ДиаметрПазов");
	МассивЭлементовФормыСтеклянныйФасад.Добавить("РасположениеПазов");
	
	СтруктураМатериала.Вставить("СтеклянныйФасад", МассивЭлементовФормыСтеклянныйФасад);
	
	МассивЭлементовФормыОбычныйФасад = Новый Массив;
	
	МассивЭлементовФормыОбычныйФасад.Добавить("Номенклатура");
	МассивЭлементовФормыОбычныйФасад.Добавить("НоменклатураДляСклеивания");
	МассивЭлементовФормыОбычныйФасад.Добавить("РедактироватьДеталь");
	МассивЭлементовФормыОбычныйФасад.Добавить("ВысотаДетали");
	МассивЭлементовФормыОбычныйФасад.Добавить("ШиринаДетали");
	МассивЭлементовФормыОбычныйФасад.Добавить("ПереключательКромкаСверху");
	МассивЭлементовФормыОбычныйФасад.Добавить("ПереключательКромкаСлева");
	МассивЭлементовФормыОбычныйФасад.Добавить("ПереключательКромкаСправа");
	МассивЭлементовФормыОбычныйФасад.Добавить("ПереключательКромкаСнизу");
	МассивЭлементовФормыОбычныйФасад.Добавить("ВыборМебельнойКромкиСверху");
	МассивЭлементовФормыОбычныйФасад.Добавить("ВыборМебельнойКромкиСлева");
	МассивЭлементовФормыОбычныйФасад.Добавить("ВыборМебельнойКромкиСнизу");
	МассивЭлементовФормыОбычныйФасад.Добавить("ВыборМебельнойКромкиСправа");
	МассивЭлементовФормыОбычныйФасад.Добавить("ПоложениеРучки");
	МассивЭлементовФормыОбычныйФасад.Добавить("Петли");
	МассивЭлементовФормыОбычныйФасад.Добавить("КоличествоПетель");
	МассивЭлементовФормыОбычныйФасад.Добавить("ДиаметрПазов");
	МассивЭлементовФормыОбычныйФасад.Добавить("РасположениеПазов");
	
	СтруктураМатериала.Вставить("ОбычныйФасад", МассивЭлементовФормыОбычныйФасад);
	
	МассивЭлементовФормыПуфик = Новый Массив;
	
	МассивЭлементовФормыПуфик.Добавить("Номенклатура");
	МассивЭлементовФормыПуфик.Добавить("НоменклатураДляСклеивания");
	МассивЭлементовФормыПуфик.Добавить("ВысотаДетали");
	МассивЭлементовФормыПуфик.Добавить("ШиринаДетали");
	//МассивЭлементовФормыПуфик.Добавить("ПереключательКромкаСверху");
	//МассивЭлементовФормыПуфик.Добавить("ПереключательКромкаСлева");
	//МассивЭлементовФормыПуфик.Добавить("ПереключательКромкаСправа");
	//МассивЭлементовФормыПуфик.Добавить("ПереключательКромкаСнизу");
	//МассивЭлементовФормыПуфик.Добавить("ВыборМебельнойКромкиСверху");
	//МассивЭлементовФормыПуфик.Добавить("ВыборМебельнойКромкиСлева");
	//МассивЭлементовФормыПуфик.Добавить("ВыборМебельнойКромкиСнизу");
	//МассивЭлементовФормыПуфик.Добавить("ВыборМебельнойКромкиСправа");
	
	СтруктураМатериала.Вставить("Пуфик", МассивЭлементовФормыПуфик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Режим = РежимДиалогаВопрос.ДаНетОтмена;
		Ответ = Вопрос("Данные изменены. Сохранить изменения?",Режим);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Если НЕ ПроверитьПередСохранением() Тогда
				
				Отказ = Истина;
				
			Иначе
				
				Модифицированность = Ложь;
				ПередатьВладельцу();
				
			КонецЕсли;
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ДобавитьКДокументу(Команда)
	
	Если ПроверитьПередСохранением() Тогда
		Модифицированность = Ложь;
		ПередатьВладельцу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПередатьВладельцу()
	
	ОбновитьСтрокуФлэш3D();
	
	Структура = Новый Структура;
	Структура.Вставить("АдресХранИЛИща", ПолучитьАдресХранИЛИща());
	Структура.Вставить("Строка3DРедактор", Строка3DРедактор);
	
	ОповеститьОВыборе(Структура);
	
КонецФункции

&НаКлиенте
Процедура РедактироватьДеталь(Команда)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтрокаДляФлэш) Тогда
		
		ВысотаДетали = ТекущиеДанные.ВысотаДетали;
		ШиринаДетали = ТекущиеДанные.ШиринаДетали;
		СтрокаДляРедактирования = "new☻"+Строка(ВысотаДетали)+"☻"+Строка(ШиринаДетали);
		
	Иначе
		
		СтрокаДляРедактирования = "old☻"+ТекущиеДанные.СтрокаДляФлэш;
		
	КонецЕсли;
	
	АдресТаблицы = ПолучитьАдресТаблицы();
	
	Параметр = Новый Структура;
	
	Параметр.Вставить("СтрокаДляРедактирования", СтрокаДляРедактирования);
	Параметр.Вставить("Подразделение", Подразделение);
	Параметр.Вставить("Материал", ТекущиеДанные.Материал);
	Параметр.Вставить("АдресТаблицы", АдресТаблицы);
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаРедактированиеДеталей", Параметр, Элементы.Детали);
	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные.ВысотаДетали < МассивыНоменклатурныхГрупп.ШиринаПолотна
		И ТекущиеДанные.ШиринаДетали < МассивыНоменклатурныхГрупп.ДлинаПолотна Тогда
		
		Временная = ТекущиеДанные.ВысотаДетали;
		ТекущиеДанные.ВысотаДетали = ТекущиеДанные.ШиринаДетали;
		ТекущиеДанные.ШиринаДетали = Временная;
		ВысотаСКромкой = ТекущиеДанные.ВысотаДетали;
		ШиринаСКромкой = ТекущиеДанные.ШиринаДетали;
		
	Иначе
		
		Предупреждение("При развороте деталь не поместится на лист!", 0, "Проверьте корректность введеных размеров");
		
	КонецЕсли;
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьНоменклатуру(Команда)
	
	ВладелецПодобра = Элементы.Детали;
	СписокНоменклатуры = Новый Массив;
	
	Для каждого Строка ИЗ Детали Цикл
		
		МассивНоменклатур = Новый Массив;
		МассивНоменклатур.Добавить(Строка.Номенклатура);
		МассивНоменклатур.Добавить(Строка.ВыборМебельнойКромкиСверху);
		МассивНоменклатур.Добавить(Строка.ВыборМебельнойКромкиСнизу);
		МассивНоменклатур.Добавить(Строка.ВыборМебельнойКромкиСлева);
		МассивНоменклатур.Добавить(Строка.ВыборМебельнойКромкиСправа);
		
		Для Каждого ЭлементМассива ИЗ МассивНоменклатур Цикл
			
			ПроверитьНаличие = СписокНоменклатуры.Найти(ЭлементМассива);//СписокНоменклатуры.Найти(Строка.Номенклатура);
			
			Если ПроверитьНаличие = Неопределено И ЗначениеЗаполнено(ЭлементМассива) Тогда
				
				СписокНоменклатуры.Добавить(ЭлементМассива);//Строка.Номенклатура);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	ПараметрыПодбора.Вставить("Подразделение", Подразделение);
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаСменыНоменклатуры", ПараметрыПодбора, ВладелецПодобра);
	
КонецПроцедуры

#КонецОбласти

#Область Элементы_формы

&НаКлиенте
Процедура Кромка045ммПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("Кромка045мм", Элементы.Детали.ТекущиеДанные.Кромка045мм);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДляСклеиванияПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания", Элементы.Детали.ТекущиеДанные.НоменклатураДляСклеивания);
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные.Гравировка Тогда
		
		ПоложениеТекстуры = ТекущиеДанные.ПоложениеТекстурыГравировки;
		ТекстураГравировки = ТекущиеДанные.ТекстураГравировки;
		ДанныеДляФлэшПоГравировке = ТекущиеДанные.ДанныеДляФлэшПоГравировке;
		ТекущиеДанные.ДанныеДляФлэшПоГравировке = ДанныеДляФлэшПоГравировке + ПоложениеТекстуры + "*" + ТекстураГравировки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбтачиватьПриИзменении(Элемент)
	
	ПроверитьОбточку();
	ПроверитьРазмерыСтолешницы();
	
КонецПроцедуры

&НаКлиенте
Процедура НеТорцеватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	НеТорцевать = ТекущиеДанные.НеТорцевать;
	МассивОпределенияДоступности = Новый Массив;
	МассивОпределенияДоступности.Добавить("ВысотаДетали");
	МассивОпределенияДоступности.Добавить("ВыборМебельнойКромкиСверху");
	МассивОпределенияДоступности.Добавить("ПереключательКромкаСверху");
	МассивОпределенияДоступности.Добавить("ВыборМебельнойКромкиСнизу");
	МассивОпределенияДоступности.Добавить("ПереключательКромкаСнизу");
	
	Для каждого Элемент ИЗ МассивОпределенияДоступности Цикл
		
		Элементы[Элемент].Доступность = НЕ НеТорцевать;
		
	КонецЦикла;
	
	Если НеТорцевать Тогда
		
		ТекущиеДанные.ВыборМебельнойКромкиСверху = Неопределено;
		ТекущиеДанные.ВыборМебельнойКромкиСнизу = Неопределено;
		ТекущиеДанные.ПереключательКромкаСверху = "Нет";
		ТекущиеДанные.ПереключательКромкаСнизу = "Нет";
		
		ТолщинаКромок = ?(ЗначениеЗаполнено(МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты), МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты,0);
		
		Если МассивыНоменклатурныхГрупп.Свойство("ДлинаПолотна") Тогда
			
			ТекущиеДанные.ВысотаДетали = МассивыНоменклатурныхГрупп.ДлинаПолотна;// - ТолщинаКромок;
			
		КонецЕсли;
		
		ВысотаСКромкой = ТекущиеДанные.ВысотаДетали + ТолщинаКромок;
		
	КонецЕсли;
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеПазовПриИзменении(Элемент)
	
	ПосчитатьКоличествоПазов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВысотаПриИзменении(Элемент)
	
	УстановитьРазмерыПолотна();
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ВысотаСКромкой = ПроверитьНаМинимальныйРазмер(ТекущиеДанные.ВысотаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты, Число(Элемент.ТекстРедактирования));
	
	Если ВысотаСКромкой > МассивыНоменклатурныхГрупп.ДлинаПолотна Тогда
		
		СтрокаСообщения = "%1 превышает максимально допустимый размер %2 для %3";
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ВысотаСКромкой, МассивыНоменклатурныхГрупп.ДлинаПолотна, ТекущиеДанные.Номенклатура);
		ПоказатьОповещениеПользователя("Высота детали изменена",, СтрокаСообщения);
		
		ТекущиеДанные.ВысотаДетали = МассивыНоменклатурныхГрупп.ДлинаПолотна - МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
		ВысотаСКромкой = ТекущиеДанные.ВысотаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
		
	КонецЕсли;
	
	ПосчитатьЧистыйРазмер();
	ПосчитатьКривойПилИПериметр();
	
	ОбновитьФлэш();
	
	Материал = ТекущиеДанные.Материал;
	
	Если Материал = "ФасадАГТ" Тогда
		
		Если ВысотаСКромкой > 1500 Тогда
			
			Предупреждение("Высота фасада превышает регламентную. Гарантия на изделие может не предоставляться");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПосчитатьКоличествоПазов();
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Материал = ТекущиеДанные.Материал;
	Клееная = Материал = "10 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+16 ЛДСП";
	УстановитьРазмерыПолотна();
	
	ЭтоСтолешница = Элементы.Детали.ТекущиеДанные.Материал = "Столешница";
	Скругление = Элементы.Детали.ТекущиеДанные.Обтачивать = Истина;
	
	ШиринаСКромкой = ПроверитьНаМинимальныйРазмер(ТекущиеДанные.ШиринаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины, Число(Элемент.ТекстРедактирования));
	
	Если ШиринаСКромкой > МассивыНоменклатурныхГрупп.ШиринаПолотна Тогда
		
		СтрокаСообщения = "%1 превышает максимально допустимый размер %2 для %3";
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ВысотаСКромкой, МассивыНоменклатурныхГрупп.ДлинаПолотна, ТекущиеДанные.Номенклатура);
		ПоказатьОповещениеПользователя("Ширина детали изменена",, СтрокаСообщения);
		
		Если ЭтоСтолешница И НЕ Скругление Тогда
			
			ТекущиеДанные.ШиринаДетали = МассивыНоменклатурныхГрупп.ШиринаПолотна - 15 - МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
			
		ИначеЕсли Клееная Тогда
			
			ТекущиеДанные.ШиринаДетали = МассивыНоменклатурныхГрупп.ШиринаПолотна - МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины - 20;
			
		Иначе
			
			ТекущиеДанные.ШиринаДетали = МассивыНоменклатурныхГрупп.ШиринаПолотна - МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
			
		КонецЕсли;
		
		ШиринаСКромкой = ТекущиеДанные.ШиринаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
		
	КонецЕсли;
	
	ПосчитатьЧистыйРазмер();
	
	ПосчитатьКривойПилИПериметр();
	
	Материал = ТекущиеДанные.Материал;
	
	Если Материал = "ФасадАГТ" Тогда
		
		Если ШиринаСКромкой > 1500 Тогда 
			
			Предупреждение("Ширина фасада превышает регламентную. Гарантия на изделие может не предоставляться");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьРазмерыСтолешницы();
	
	ОбновитьФлэш();
	ПосчитатьКоличествоПазов();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	//ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	//НовоеКоличество = ТекущиеДанные.Количество;
	
	//ОбновитьФлэш();
	ПроверкаКоличестваИТолщины();
	
	//Если НовоеКоличество < КоличествоДеталей Тогда
	//	
	//	ЭлементФлэш3D = Элементы.Флэш3D.Документ.getElementById("input");
	//	Для ы = НовоеКоличество + 1 по КоличествоДеталей Цикл
	//		
	//		Строка = "del☺" + ТекущиеДанные.ИД + "_" + ы;
	//		ПередатьВоФлэш(ЭлементФлэш3D, Строка, Истина);
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//
	//КоличествоДеталей = НовоеКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалПриИзменении(Элемент)
	
	// { Васильев Александр Леонидович [03.09.2013]
	// имеется возможность удалять ненужные пункты из переключателя
	//Элементы.ПереключательКромкаСверху.СписокВыбора.Удалить(3);
	// } Васильев Александр Леонидович [03.09.2013]
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Материал = ТекущиеДанные.Материал;
	
	ШапкаОсновныхНастроек.Вставить("Материал", Материал);
	ЗагрузитьСписокВыбораНоменклатуры(Материал);
	
	ТекущиеДанные.Номенклатура = Неопределено;
	ТекущиеДанные.НеТорцевать = Ложь;
	ТекущиеДанные.НоменклатураДляСклеивания = Неопределено;
	ТекущиеДанные.Кант = Неопределено;
	ТекущиеДанные.УниверсальнаяКромка = Неопределено;
	ТекущиеДанные.Кромка2мм = Неопределено;
	ТекущиеДанные.Кромка045мм = Неопределено;
	ТекущиеДанные.ВыборМебельнойКромкиСверху = Неопределено;
	ТекущиеДанные.ВыборМебельнойКромкиСлева = Неопределено;
	ТекущиеДанные.ВыборМебельнойКромкиСправа = Неопределено;
	ТекущиеДанные.ВыборМебельнойКромкиСнизу = Неопределено;
	ТекущиеДанные.ПереключательКромкаСверху = "Нет";
	ТекущиеДанные.ПереключательКромкаСлева = "Нет";
	ТекущиеДанные.ПереключательКромкаСправа = "Нет";
	ТекущиеДанные.ПереключательКромкаСнизу = "Нет";
	ТекущиеДанные.ВысотаДетали = 0;
	ТекущиеДанные.ШиринаДетали = 0;
	ШиринаСКромкой = 0;
	ВысотаСКромкой = 0;
	ТекущиеДанные.РадиусФасада = Неопределено;
	ТекущиеДанные.ПоложениеРучки = Неопределено;
	ТекущиеДанные.Петли = Неопределено;
	ТекущиеДанные.КоличествоПетель = 0;
	ТекущиеДанные.ДиаметрПазов = 0;
	ТекущиеДанные.РасположениеПазов = Неопределено;
	ТекущиеДанные.РадиусЛевоВерх = 0;
	ТекущиеДанные.РадиусЛевоНиз = 0;
	ТекущиеДанные.РадиусПравоВерх = 0;
	ТекущиеДанные.РадиусПравоНиз = 0;
	ТекущиеДанные.Обтачивать = Ложь;
	ТекущиеДанные.СтруктураОтверстий = "";
	ТекущиеДанные.СтрокаДляФлэш = Неопределено;
	
	ОбновитьДоступность();
	ОбновитьФлэш();
	
	ТекущиеДанные.КоличествоПетель= ?(Материал = "ФасадАГТ",2, 0);
	
	ТекущиеДанные.Обтачивать = (Материал = "Стекло"
	ИЛИ Материал = "ФасадСтеклянный"
	ИЛИ Материал = "ФасадСтеклянныйЗакругленный"
	ИЛИ Материал = "Столешница");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКромкаСверхуПриИзменении(Элемент)
	
	ПроверитьОбточку();
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ЭлементМебельнаяКромка = Элементы.ВыборМебельнойКромкиСверху;
	
	ИспользованиеПереключателяКромки(ТекущиеДанные.ПереключательКромкаСверху, ТекущиеДанные.ВыборМебельнойКромкиСверху, ЭлементМебельнаяКромка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКромкаСлеваПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ЭлементМебельнаяКромка = Элементы.ВыборМебельнойКромкиСлева;
	
	ИспользованиеПереключателяКромки(ТекущиеДанные.ПереключательКромкаСлева, ТекущиеДанные.ВыборМебельнойКромкиСлева, ЭлементМебельнаяКромка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКромкаСправаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ЭлементМебельнаяКромка = Элементы.ВыборМебельнойКромкиСправа;
	
	ИспользованиеПереключателяКромки(ТекущиеДанные.ПереключательКромкаСправа, ТекущиеДанные.ВыборМебельнойКромкиСправа, ЭлементМебельнаяКромка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКромкаСнизуПриИзменении(Элемент)
	
	ПроверитьОбточку();
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ЭлементМебельнаяКромка = Элементы.ВыборМебельнойКромкиСнизу;
	
	ИспользованиеПереключателяКромки(ТекущиеДанные.ПереключательКромкаСнизу, ТекущиеДанные.ВыборМебельнойКромкиСнизу, ЭлементМебельнаяКромка);
	
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусПравоВерхПриИзменении(Элемент)
	
	ПосчитатьРадиус(Число(Элемент.ТекстРедактирования), "Элементы.Детали.ТекущиеДанные.РадиусПравоВерх", Элементы.Детали.ТекущиеДанные.РадиусПравоВерх);
	ПосчитатьКривойПилИПериметр();
	ПроверитьОбточку();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусПравоНизПриИзменении(Элемент)
	
	Если НЕ Элементы.Детали.ТекущиеДанные.Срез Тогда
		
		ПосчитатьРадиус(Число(Элемент.ТекстРедактирования), "Элементы.Детали.ТекущиеДанные.РадиусПравоНиз", Элементы.Детали.ТекущиеДанные.РадиусПравоНиз);
		
	Иначе
		
		СравнитьСтороныСРадиусом(Число(Элемент.ТекстРедактирования), Элементы.Детали.ТекущиеДанные.РадиусПравоНиз);
		
	КонецЕсли;
	
	ПосчитатьКривойПилИПериметр();
	ПроверитьОбточку();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусЛевоНизПриИзменении(Элемент)
	
	ПосчитатьРадиус(Число(Элемент.ТекстРедактирования), "Элементы.Детали.ТекущиеДанные.РадиусЛевоНиз", Элементы.Детали.ТекущиеДанные.РадиусЛевоНиз);
	ПосчитатьКривойПилИПериметр();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусЛевоВерхПриИзменении(Элемент)
	
	ПосчитатьРадиус(Число(Элемент.ТекстРедактирования), "Элементы.Детали.ТекущиеДанные.РадиусЛевоВерх", Элементы.Детали.ТекущиеДанные.РадиусЛевоВерх);
	ПосчитатьКривойПилИПериметр();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура СрезПриИзменении(Элемент)
	
	Если НЕ Элементы.Детали.ТекущиеДанные.Срез Тогда
		
		Радиус = Элементы.Детали.ТекущиеДанные.РадиусПравоНиз;
		Множитель = Окр(Радиус / 50);
		Элементы.Детали.ТекущиеДанные.РадиусПравоНиз = 50 * Множитель;
		
	КонецЕсли;
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМебельнойКромкиСлеваПриИзменении(Элемент)
	
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМебельнойКромкиСверхуПриИзменении(Элемент)
	
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	ПроверитьОбточку();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМебельнойКромкиСправаПриИзменении(Элемент)
	
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМебельнойКромкиСнизуПриИзменении(Элемент)
	
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	ПроверитьОбточку();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Номенклатура = ТекущиеДанные.Номенклатура;
	ТекущиеДанные.СоблюдениеТекстуры = ПроверитьСоблюдениеТекстуры(Номенклатура);
	
	ШапкаОсновныхНастроек.Вставить("Номенклатура", Номенклатура);
	Материал = ТекущиеДанные.Материал;
	
	Если Материал = "16 ЛДСП" Тогда
		
		СтруктураПодставляяемойНоменклатуры = ЛексСервер.ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(Номенклатура, Подразделение);
		ТекущиеДанные.Кант = СтруктураПодставляяемойНоменклатуры.Кант;
		ТекущиеДанные.Кромка2мм = СтруктураПодставляяемойНоменклатуры.Кромка2_19;
		ТекущиеДанные.Кромка045мм = СтруктураПодставляяемойНоменклатуры.Кромка045_19;
		ШапкаОсновныхНастроек.Вставить("Кант", ТекущиеДанные.Кант);
		ШапкаОсновныхНастроек.Вставить("Кромка045мм", ТекущиеДанные.Кромка045мм);
		ШапкаОсновныхНастроек.Вставить("Кромка2мм", ТекущиеДанные.Кромка2мм);
		
	КонецЕсли;
	
	Если Материал = "10 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+16 ЛДСП" Тогда
		
		ТекущиеДанные.НоменклатураДляСклеивания = Номенклатура;
		ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания", Номенклатура);
		
	КонецЕсли;
	
	УстановитьРазмерыПолотна();
	
КонецПроцедуры

&НаКлиенте
Процедура КантПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("Кант", Элементы.Детали.ТекущиеДанные.Кант);
	
КонецПроцедуры

&НаКлиенте
Процедура Кромка2ммПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("Кромка2мм", Элементы.Детали.ТекущиеДанные.Кромка2мм);
	
КонецПроцедуры

&НаКлиенте
Процедура УниверсальнаяКромкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Материал = ТекущиеДанные.Материал;
	
	СпецФасады = Материал = "ФасадАГТ" ИЛИ Материал = "ФасадМДФ" ИЛИ Материал = "ФасадАлюминиевый" ИЛИ Материал = "ФасадМДФ";
	
	Если СпецФасады Тогда
		
		ФасаднаяОкантовка(Ложь);
		
	КонецЕсли;
	
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	УниверсальнаяКромка = ТекущиеДанные.УниверсальнаяКромка;
	ШапкаОсновныхНастроек.Вставить("УниверсальнаяКромка", УниверсальнаяКромка);
	
КонецПроцедуры

#КонецОбласти

#Область Работа_с_флэш

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИДБезСуффикса(ИД)
	
	ПозицияРазделителя = Найти(ИД, "_");
	Результат = Лев(ИД, СтрДлина(ИД) - ПозицияРазделителя);
	
	Возврат Число(Результат);
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокуДляФлэш(Команда)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ТекущиеДанные.СтрокаДляФлэш = Неопределено;
	ТекущиеДанные.ДетальРедактированная = Ложь;
	ТекущиеДанные.КривойПилСверху = 0;
	ТекущиеДанные.КривойПилСнизу = 0;
	ТекущиеДанные.КривойПилСлева = 0;
	ТекущиеДанные.КривойПилСправа = 0;
	ТекущиеДанные.КантыИзРедактора = Неопределено;
	
	ОбновитьДоступность();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура Флэш3DПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Заглушка = Истина;
	
	//ЭлементФлэш3Doutput = Элементы.Флэш3D.Документ.getElementById("output");
	//ЭлементФлэш3Dinput = Элементы.Флэш3D.Документ.getElementById("input");
	//
	//Если ЭлементФлэш3Doutput = Неопределено ИЛИ ЭлементФлэш3Dinput = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//СтрокаОтФлэш = ЭлементФлэш3Doutput.tag;
	//ЭлементФлэш3Doutput.tag = "";
	//МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтФлэш, "☺");
	//
	//Если МассивПараметров.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Команда = МассивПараметров[0];
	//
	//Если Команда = "init" Тогда
	//	
	//	КомандаДляФлэш = "init";
	//	
	//	Если ЗначениеЗаполнено(Строка3DРедактор) Тогда
	//		КомандаДляФлэш = КомандаДляФлэш + "☺" + Строка3DРедактор;
	//	Иначе
	//		КомандаДляФлэш = КомандаДляФлэш + "☺new";
	//	КонецЕсли;
	//	
	//	ПередатьВоФлэш(ЭлементФлэш3Dinput, КомандаДляФлэш, Истина);
	//	
	//ИначеЕсли Команда = "save" Тогда
	//	
	//	Строка3DРедактор = МассивПараметров[1];
	//	
	//ИначеЕсли Команда = "slct" Тогда
	//	
	//	ВыделитьСтрокуПоИДДетали(МассивПараметров[1]);
	//	
	//ИначеЕсли Команда = "del" Тогда
	//	
	//	УдалитьСтрокуПоИДДетали(МассивПараметров[1]);
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлэшДокументСформирован(Элемент)
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьФлэш()
	
	Если Элементы.Детали.ТекущиеДанные <> Неопределено Тогда
		
		СтрокаДляФлэш = СформироватьСтрокуФлэш();
		Если ЗначениеЗаполнено(СтрокаДляФлэш) Тогда
			ЭлементФлэш = Элементы.Флэш.Документ.getElementById("back");
			ПередатьВоФлэш(ЭлементФлэш, СтрокаДляФлэш, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СформироватьСтрокуФлэш()
	
	Деталь = Элементы.Детали.ТекущиеДанные;
	
	ДанныеДляSWF = Новый Структура;
	УстановитьРазмерыПолотна();
	
	ДанныеДляSWF.Вставить("ВысотаДетали");
	ДанныеДляSWF.Вставить("ШиринаДетали");
	ДанныеДляSWF.Вставить("ВыборМебельнойКромкиСверху");
	ДанныеДляSWF.Вставить("ВыборМебельнойКромкиСнизу");
	ДанныеДляSWF.Вставить("ВыборМебельнойКромкиСлева");
	ДанныеДляSWF.Вставить("ВыборМебельнойКромкиСправа");
	ДанныеДляSWF.Вставить("КривойПилСверху");
	ДанныеДляSWF.Вставить("КривойПилСнизу");
	ДанныеДляSWF.Вставить("КривойПилСлева");
	ДанныеДляSWF.Вставить("КривойПилСправа");
	ДанныеДляSWF.Вставить("РадиусЛевоВерх");
	ДанныеДляSWF.Вставить("РадиусПравоВерх");
	ДанныеДляSWF.Вставить("РадиусПравоНиз");
	ДанныеДляSWF.Вставить("РадиусЛевоНиз");
	ДанныеДляSWF.Вставить("ЭксцентрикВерх", "0");
	ДанныеДляSWF.Вставить("ЭксцентрикНиз", "0");
	ДанныеДляSWF.Вставить("ЭксцентрикЛево", "0");
	ДанныеДляSWF.Вставить("ЭксцентрикПраво", "0");
	
	ДанныеДляSWF.Вставить("ПолотноДлина", МассивыНоменклатурныхГрупп.ДлинаПолотна);
	ДанныеДляSWF.Вставить("ПолотноШирина", МассивыНоменклатурныхГрупп.ШиринаПолотна);
	
	ДанныеДляSWF.Вставить("ЭксцВерх", "0");
	ДанныеДляSWF.Вставить("ЭксцНиз", "0");
	ДанныеДляSWF.Вставить("ЭксцЛево", "0");
	ДанныеДляSWF.Вставить("ЭксцПраво", "0");
	ДанныеДляSWF.Вставить("ЕвроПазВерх", "0");
	ДанныеДляSWF.Вставить("ЕвроПазНиз", "0");
	ДанныеДляSWF.Вставить("ЕвроПазЛево", "0");
	ДанныеДляSWF.Вставить("ЕвроПазПраво", "0");
	
	ЗаполнитьЗначенияСвойств(ДанныеДляSWF, Деталь);
	
	ПризнакСреза = Число(Деталь.Срез);
	ДанныеДляSWF.РадиусПравоНиз = "" + ДанныеДляSWF.РадиусПравоНиз + "_" + ПризнакСреза;
	
	Если ЗначениеЗаполнено(Деталь.СтруктураОтверстий) И ЗначениеЗаполнено(ДанныеДляSWF.ШиринаДетали) И ЗначениеЗаполнено(ДанныеДляSWF.ВысотаДетали) Тогда
		
		ДанныеДляSWF = ЛексСервер.ЗаполнитьРеквизитОтверстиями(ДанныеДляSWF, Деталь.СтруктураОтверстий, ДанныеДляSWF.ШиринаДетали, ДанныеДляSWF.ВысотаДетали);
		
	КонецЕсли;
	
	КромкаСверху = ДанныеДляSWF.ВыборМебельнойКромкиСверху;
	КромкаСлева = ДанныеДляSWF.ВыборМебельнойКромкиСлева;
	КромкаСнизу = ДанныеДляSWF.ВыборМебельнойКромкиСнизу;
	КромкаСправа = ДанныеДляSWF.ВыборМебельнойКромкиСправа;
	
	Если ЗначениеЗаполнено(КромкаСверху) ИЛИ ЗначениеЗаполнено(КромкаСлева) ИЛИ ЗначениеЗаполнено(КромкаСнизу) ИЛИ ЗначениеЗаполнено(КромкаСправа) Тогда
		
		СтркутураКромок = Новый Структура;
		СтркутураКромок.Вставить("ВыборМебельнойКромкиСверху", КромкаСверху);
		СтркутураКромок.Вставить("ВыборМебельнойКромкиСлева", КромкаСлева);
		СтркутураКромок.Вставить("ВыборМебельнойКромкиСнизу", КромкаСнизу);
		СтркутураКромок.Вставить("ВыборМебельнойКромкиСправа", КромкаСправа);
		
		СтркутураКромок = ВернутьНазванияКромок(СтркутураКромок);
		
		ДанныеДляSWF.ВыборМебельнойКромкиСверху = СтркутураКромок.ВыборМебельнойКромкиСверху;
		ДанныеДляSWF.ВыборМебельнойКромкиСлева = СтркутураКромок.ВыборМебельнойКромкиСлева;
		ДанныеДляSWF.ВыборМебельнойКромкиСнизу = СтркутураКромок.ВыборМебельнойКромкиСнизу;
		ДанныеДляSWF.ВыборМебельнойКромкиСправа = СтркутураКромок.ВыборМебельнойКромкиСправа;
		
	КонецЕсли;
	
	ДанныеДляФайла = "";
	
	Для Каждого Элемент ИЗ ДанныеДляSWF Цикл
		
		ДанныеДляФайла = ДанныеДляФайла + Элемент.Значение + "#";
		
	КонецЦикла;
	
	ДанныеДляФайла = ЛексКлиентСервер.ПеревестиСтрокуВКодыСимволов(ДанныеДляФайла);
	
	Возврат ДанныеДляФайла;
	
КонецФункции

&НаКлиенте
Функция ПередатьВоФлэш(ЭлементФлэш, Строка, Кликнуть)
	
	Если ЭлементФлэш <> Неопределено Тогда
		ЭлементФлэш.tag = Строка;
		
		Если Кликнуть Тогда
			ЭлементФлэш.Click();
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОбновитьСтрокуФлэш3D()
	
	//ЭлементФлэш3D = Элементы.Флэш3D.Документ.getElementById("input");
	//ПередатьВоФлэш(ЭлементФлэш3D, "get☺", Истина);
	
КонецФункции

#КонецОбласти

#Область Таблица_Детали

&НаКлиенте
Процедура ДеталиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность= Истина;
	ТекущиеДанные= Элементы.Детали.ТекущиеДанные;
	
	Если ВыбранноеЗначение = "error☻" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтараяНоменклатура = ВыбранноеЗначение.Стараяноменклатура;
		НоваяНоменклатура = ВыбранноеЗначение.НоваяНоменклатура;
		Счетчик= 0;
		
		Для каждого Строка ИЗ Детали Цикл
			
			Если Строка.Номенклатура = СтараяНоменклатура Тогда
				
				Строка.Номенклатура = НоваяНоменклатура;
				Счетчик = Счетчик +1;
				
			КонецЕсли;
			
			Если Строка.ВыборМебельнойКромкиСверху = СтараяНоменклатура Тогда
				
				Строка.ВыборМебельнойКромкиСверху = НоваяНоменклатура;
				Счетчик = Счетчик +1;
				
			КонецЕсли;
			
			Если Строка.ВыборМебельнойКромкиСнизу = СтараяНоменклатура Тогда
				
				Строка.ВыборМебельнойКромкиСнизу = НоваяНоменклатура;
				Счетчик = Счетчик +1;
				
			КонецЕсли;
			
			Если Строка.ВыборМебельнойКромкиСлева = СтараяНоменклатура Тогда
				
				Строка.ВыборМебельнойКромкиСлева = НоваяНоменклатура;
				Счетчик = Счетчик +1;
				
			КонецЕсли;
			
			Если Строка.ВыборМебельнойКромкиСправа = СтараяНоменклатура Тогда
				
				Строка.ВыборМебельнойКромкиСправа = НоваяНоменклатура;
				Счетчик = Счетчик +1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Сообщить("Изменено " + Счетчик + " значений.", СтатусСообщения.Важное);
		
	Иначе // закрыта форма криволинейной детали
		
		СтрокаОтФлэш = ВыбранноеЗначение;
		ТекущиеДанные.ДетальРедактированная = Истина;
		МассивСимволов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтФлэш, "☻");
		ТекущиеДанные.ДлинаКривогоПила = МассивСимволов[1];
		
		Если НЕ МассивСимволов[2] = "0" Тогда
			ТекущиеДанные.КривойПилСверху = 1;
		Иначе
			ТекущиеДанные.КривойПилСверху = 0;
		КонецЕсли;
		
		Если НЕ МассивСимволов[3] = "0" Тогда
			ТекущиеДанные.КривойПилСнизу = 1;
		Иначе
			ТекущиеДанные.КривойПилСнизу = 0;
		КонецЕсли;
		
		Если НЕ МассивСимволов[4] = "0" Тогда
			ТекущиеДанные.КривойПилСлева = 1;
		Иначе
			ТекущиеДанные.КривойПилСлева = 0;
		КонецЕсли;
		
		Если НЕ МассивСимволов[5] = "0" Тогда
			ТекущиеДанные.КривойПилСправа = 1;
		Иначе
			ТекущиеДанные.КривойПилСправа = 0;
		КонецЕсли;
		
		ФлэшДляРасчетов = МассивСимволов[8];
		ТекущиеДанные.СтрокаДляФлэш = ФлэшДляРасчетов;
		Канты = МассивСимволов[9];
		
		Если ЗначениеЗаполнено(Канты) Тогда
			ТекущиеДанные.КантыИзРедактора = КантыВСтроку(Канты);
		КонецЕсли;
		
		Если Найти(ВРег(ТекущиеДанные.Комментарий), "ЧЕРТЕЖ") = 0 Тогда
			ТекущиеДанные.Комментарий = "[По чертежу] " + ТекущиеДанные.Комментарий;
		КонецЕсли;
		
		ОбновитьДоступность();
		ОбновитьФлэш();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		УстановитьРазмерыПолотна();
		ВысотаСКромкой = ТекущиеДанные.ВысотаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
		ШиринаСКромкой = ТекущиеДанные.ШиринаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПриИзменении(Элемент)
	
	ПронумероватьСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		КоличествоДеталей = ТекущиеДанные.Количество;
		
		Если ТекущиеДанные.ВысотаДетали <> 0 Тогда
			
			УстановитьРазмерыПолотна();
			ВысотаСКромкой = ТекущиеДанные.ВысотаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
			ШиринаСКромкой = ТекущиеДанные.ШиринаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
			
		КонецЕсли;
		
		Материал = ТекущиеДанные.Материал;
		
		Если НЕ ЗначениеЗаполнено(Материал) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.Материал) Тогда
			
			ТекущиеДанные.Материал = ШапкаОсновныхНастроек.Материал;
			Материал = ТекущиеДанные.Материал;
			ЗагрузитьСписокВыбораНоменклатуры(Материал);
			
		ИначеЕсли ЗначениеЗаполнено(Материал) Тогда
			
			ШапкаОсновныхНастроек.Вставить("Материал", ТекущиеДанные.Материал);
			ЗагрузитьСписокВыбораНоменклатуры(Материал);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И Материал = "Стекло" Тогда
			
			ТекущиеДанные.Обтачивать = Истина;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И Материал = "Столешница" И ЗначениеЗаполнено(ШапкаОсновныхНастроек.Скруглять) Тогда
			
			ТекущиеДанные.Обтачивать = ШапкаОсновныхНастроек.Скруглять;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.Номенклатура) Тогда
			
			ТекущиеДанные.Номенклатура = ШапкаОсновныхНастроек.Номенклатура;
			ТекущиеДанные.СоблюдениеТекстуры = ПроверитьСоблюдениеТекстуры(ТекущиеДанные.Номенклатура);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			
			ШапкаОсновныхНастроек.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			
		КонецЕсли;
		
		Материал = ТекущиеДанные.Материал;
		ЛДСП = Найти(Материал, "ЛДСП") <> 0;
		Столешница = Материал = "Столешница";
		Клееная = Материал = "10 ЛДСП+10 ЛДСП" ИЛИ Материал = "16 ЛДСП+10 ЛДСП"ИЛИ Материал = "16 ЛДСП+16 ЛДСП";
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НоменклатураДляСклеивания) И Клееная
			И ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураДляСклеивания) Тогда
			
			ТекущиеДанные.НоменклатураДляСклеивания = ШапкаОсновныхНастроек.НоменклатураДляСклеивания;
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НоменклатураДляСклеивания) Тогда
			
			ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания", ТекущиеДанные.НоменклатураДляСклеивания);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Кант) И (ЛДСП И НЕ Столешница) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.Кант) Тогда
			
			ТекущиеДанные.Кант = ШапкаОсновныхНастроек.Кант;
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Кант) Тогда
			
			ШапкаОсновныхНастроек.Вставить("Кант", ТекущиеДанные.Кант);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Кромка2мм) И (ЛДСП И НЕ Столешница) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.Кромка2мм) Тогда
			
			ТекущиеДанные.Кромка2мм = ШапкаОсновныхНастроек.Кромка2мм;
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Кромка2мм) Тогда
			
			ШапкаОсновныхНастроек.Вставить("Кромка2мм", ТекущиеДанные.Кромка2мм);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Кромка045мм) И (ЛДСП И НЕ Столешница) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.Кромка045мм) Тогда
			
			ТекущиеДанные.Кромка045мм = ШапкаОсновныхНастроек.Кромка045мм;
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Кромка045мм) Тогда
			
			ШапкаОсновныхНастроек.Вставить("Кромка045мм", ТекущиеДанные.Кромка045мм);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.УниверсальнаяКромка) И НЕ ЛДСП И ЗначениеЗаполнено(ШапкаОсновныхНастроек.УниверсальнаяКромка) Тогда
			
			ТекущиеДанные.УниверсальнаяКромка = ШапкаОсновныхНастроек.УниверсальнаяКромка;
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.УниверсальнаяКромка) Тогда
			
			ШапкаОсновныхНастроек.Вставить("УниверсальнаяКромка", ТекущиеДанные.УниверсальнаяКромка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДоступность();
	//ПроверкаКоличестваИТолщины();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		
		ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
		УстановитьРазмерыПолотна();
		ВысотаСКромкой = ТекущиеДанные.ВысотаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
		ШиринаСКромкой = ТекущиеДанные.ШиринаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти