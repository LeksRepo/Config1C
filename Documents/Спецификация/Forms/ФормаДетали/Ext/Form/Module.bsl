&НаКлиенте
Перем ДанныеДетали;

#Область Проверки

&НаКлиенте
Функция ПроверитьОбточку()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	ТолстаяКромка = ПроверитьНоменклатурнуюГруппуКромки(ТекущиеДанные.ВыборМебельнойКромкиСВерху, ТекущиеДанные.ВыборМебельнойКромкиСнизу);
	
	Если (ТекущиеДанные.РадиусПравоНиз > 0 ИЛИ ТекущиеДанные.РадиусПравоВерх > 0) И ТолстаяКромка Тогда
		
		ТекущиеДанные.Обтачивать = Ложь;
		
	КонецЕсли;
	
	Если ТекущиеДанные.Обтачивать Тогда
		
		ТекущиеДанные.ВыборМебельнойКромкиСправа = Неопределено;
		ТекущиеДанные.ПереключательКромкаСправа = "Нет";
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПроверитьРадиусы(РадиусЛевоВерх, РадиусПравоВерх, РадиусПравоНиз, РадиусЛевоНиз, Идентификатор, КантСлева, КантСправа, КантСверху, КантСнизу, Срез, Ошибки)
	
	СтруктураОшибок = Новый Структура;
	СтруктураОшибок.Вставить("Результат", Истина);
	
	Если РадиусЛевоВерх > 0 И КантСлева <> КантСверху Тогда 
		
		Элементы.Детали.ТекущаяСтрока = Идентификатор;
		Текст = "Кромка слева и сверху не совпадют";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСверху", Текст);
		СтруктураОшибок.Вставить("Результат", Ложь);
		
	КонецЕсли;
	
	Если РадиусПравоВерх > 0 И КантСверху <> КантСправа Тогда 
		
		Элементы.Детали.ТекущаяСтрока = Идентификатор;
		Текст = "Кромка справа и сверху не совпадют";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСверху", Текст);
		СтруктураОшибок.Вставить("Результат", Ложь);
		
	КонецЕсли;
	
	Если НЕ Элементы.Детали.ТекущиеДанные.Срез И РадиусПравоНиз > 0 И КантСправа <> КантСнизу Тогда 
		
		Элементы.Детали.ТекущаяСтрока = Идентификатор;
		Текст = "Кромка справа и снизу не совпадют";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСнизу", Текст);
		СтруктураОшибок.Вставить("Результат", Ложь);
		
	КонецЕсли;
	
	Если РадиусЛевоНиз > 0 И КантСнизу <> КантСлева Тогда 
		
		Элементы.Детали.ТекущаяСтрока = Идентификатор;
		Текст = "Кромка слева и снизу не совпадют";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСнизу", Текст);
		СтруктураОшибок.Вставить("Результат", Ложь);
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("Ошибки", Ошибки);
	
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция ПроверитьПередСохранением()
	
	Результат = Истина;
	Ошибки = Неопределено;
	
	Для каждого Строка ИЗ Детали Цикл
		
		ДанныеДеталиСтроки = ПолучитьДанныеДетали(Строка.ВидДетали);
		Идентификатор = Строка.ПолучитьИдентификатор();
		
		Обяз = ДанныеДеталиСтроки.ОбязательныеПоля;
		
		РадиусЛевоВерх = Строка.РадиусЛевоВерх;
		РадиусПравоВерх = Строка.РадиусПравоВерх;
		РадиусПравоНиз = Строка.РадиусПравоНиз;
		РадиусЛевоНиз = Строка.РадиусЛевоНиз;
		
		КантСлева = Строка.ВыборМебельнойКромкиСлева;
		КантСправа = Строка.ВыборМебельнойКромкиСправа;
		КантСверху = Строка.ВыборМебельнойКромкиСверху;
		КантСнизу = Строка.ВыборМебельнойКромкиСнизу;
		
		Срез = Строка.Срез;
				
		СтруктураКривогоПилаИПериметра = ЛексКлиентСервер.ПосчитатьПериметрИКривойПил(Строка.ВысотаДетали, Строка.ШиринаДетали, РадиусЛевоВерх + РадиусПравоВерх + РадиусПравоНиз + РадиусЛевоНиз);
		Строка.Периметр = СтруктураКривогоПилаИПериметра.Периметр;
		Строка.ДлинаКривогоПила = ?(ЗначениеЗаполнено(Строка.СтрокаДляФлэш), Строка.ДлинаКривогоПила, СтруктураКривогоПилаИПериметра.ДлинаКривогоПила);
		
		Если Строка.Количество = 0 Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Укажите количество деталей";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Количество", Текст,);
			Результат = Ложь;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Строка.ВидДетали) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбран материал";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Материал", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Строка.ВысотаДетали < ДанныеДеталиСтроки.МинимальнаяВысота Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Слишком маленькая деталь. Введите полный размер детали (вместе с обрамлением): "+ДанныеДеталиСтроки.МинимальнаяВысота+" или более мм.";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ВысотаСКромкой", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Строка.ШиринаДетали < ДанныеДеталиСтроки.МинимальнаяШирина Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Слишком маленькая деталь. Введите полный размер детали (вместе с обрамлением): "+ДанныеДеталиСтроки.МинимальнаяШирина+" или более мм.";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ШиринаСКромкой", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не заполнена текстура детали";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Номенклатура", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Обяз.ОбязательноеПолеДопНом И НЕ ЗначениеЗаполнено(Строка.НоменклатураДляСклеивания) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не заполнена доп. номенклатура детали";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.НоменклатураДляСклеивания", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		//Окантовка
		
		Если Обяз.ОбязательноеПолеУниверсальнаяКромка И НЕ ЗначениеЗаполнено(Строка.УниверсальнаяКромка) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбрана кромка";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.УниверсальнаяКромка", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Обяз.ОбязательноеПолеКант И НЕ ЗначениеЗаполнено(Строка.Кант) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Кант не выбран";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Кант", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Обяз.ОбязательноеПолеКромка45 И НЕ ЗначениеЗаполнено(Строка.Кромка045мм) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбрана кромка 0.45 мм";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Кромка045мм", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Обяз.ОбязательноеПолеКромка2 И НЕ ЗначениеЗаполнено(Строка.Кромка2мм) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбрана кромка 2 мм";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Кромка2мм", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		//Кромка по сторонам
		
		Если Обяз.ОбязательноеПолеКромкаВерх И НЕ ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСверху) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбран профиль/кромка";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСверху", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Обяз.ОбязательноеПолеКромкаНиз И НЕ ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСнизу) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбран профиль/кромка";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСнизу", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Обяз.ОбязательноеПолеКромкаЛево И НЕ ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСлева) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбран профиль/кромка";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСлева", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Обяз.ОбязательноеПолеКромкаПраво И НЕ ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСправа) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбран профиль/кромка";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.ВыборМебельнойКромкиСправа", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Обяз.ОбязательноеПолеПетли И НЕ ЗначениеЗаполнено(Строка.Петли) Тогда
				
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбраны петли";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Петли", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если Строка.КоличествоПетель > 0 И НЕ ЗначениеЗаполнено(Строка.Петли) Тогда
				
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбраны петли";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Петли", Текст);
			Результат = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Петли) И Строка.КоличествоПетель = 0 Тогда
			
			Элементы.Детали.ТекущаяСтрока = Идентификатор;
			Текст = "Не выбрано количество петель";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.КоличествоПетель", Текст);
			Результат = Ложь;
			
		КонецЕсли;

		Если ДанныеДеталиСтроки.ЭтоФасад Тогда
			
			Если ДанныеДеталиСтроки.СпецФасад Тогда
				
				КоличествоТорцевыхРучек = 0;
				СтруктураКромок = Новый Структура;
				СтруктураКромок.Вставить("Сверху", Строка.ВыборМебельнойКромкиСверху);
				СтруктураКромок.Вставить("Снизу", Строка.ВыборМебельнойКромкиСнизу);
				СтруктураКромок.Вставить("Слева", Строка.ВыборМебельнойКромкиСлева);
				СтруктураКромок.Вставить("Справа", Строка.ВыборМебельнойКромкиСправа);
				СтруктураКромок.Вставить("ШиринаДетали", Строка.ШиринаДетали);
				СтруктураКромок.Вставить("ВысотаДетали", Строка.ВысотаДетали);
				РезультатПоКромке = ПроверитьКромку(СтруктураКромок, КоличествоТорцевыхРучек);
				
				Если РезультатПоКромке.КоличествоТорцевыхРучек > 1 или РезультатПоКромке.НесовпадениеКромки Тогда
					
					Текст = ?(РезультатПоКромке.НесовпадениеКромки, "Обрамление фасада различается", "Нельзя использовать больше одной торцевой ручки");
					Элементы.Детали.ТекущаяСтрока = Идентификатор;
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , Текст);
					Результат = Ложь;
					
				КонецЕсли;
				
				Если РезультатПоКромке.ПревышениеВысоты или РезультатПоКромке.ПревышениеШирины Тогда
					
					Текст = "Использована слишком маленькая торцевая ручка";
					Элементы.Детали.ТекущаяСтрока = Идентификатор;
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , Текст);
					Результат = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) Тогда
				
				СтруктураПазовИРучек = ПолучитьЗначениеСтруктурыПазовИРучек(Строка.РасположениеПазовИРучкиНаФасадах);
				ПазыОтсутствуют = СтруктураПазовИРучек.ПазыОтсутствуют;
				БезРучки = СтруктураПазовИРучек.БезРучки;
				
			Иначе
				
				ПазыОтсутствуют = Ложь;
				БезРучки = Ложь;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.НоменклатураДляСклеивания) И ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) И НЕ БезРучки Тогда
				
				Элементы.Детали.ТекущаяСтрока = Идентификатор;
				Текст = "Не выбрана ручка";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.НоменклатураДляСклеивания", Текст);
				Результат = Ложь;
								
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.НоменклатураДляСклеивания) И НЕ ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) И НЕ БезРучки Тогда
				
				Элементы.Детали.ТекущаяСтрока = Идентификатор;
				Текст = "Не выбрано расположение ручки";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.РасположениеПазовИРучкиНаФасадах", Текст);
				Результат = Ложь;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Петли) и НЕ ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) Тогда
				
				Элементы.Детали.ТекущаяСтрока = Идентификатор;
				Текст = "Не выбрано расположение петель";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.РасположениеПазовИРучкиНаФасадах", Текст);
				Результат = Ложь;
				
			КонецЕсли;
			
			Если Обяз.ОбязательноеПолеРадиусФасада И Строка.РадиусФасада = "" Тогда
				
				Элементы.Детали.ТекущаяСтрока = Идентификатор;
				Текст = "Не выбран радиус фасада";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.РадиусФасада", Текст);
				Результат = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ДанныеДеталиСтроки.ЭтоСтолешница Тогда
			
			СтруктураОшибкок = ПроверитьРадиусы(РадиусЛевоВерх,РадиусПравоВерх,РадиусПравоНиз,РадиусЛевоНиз, Идентификатор, КантСлева, КантСправа, КантСверху, КантСнизу, Срез, Ошибки);
			Ошибки = СтруктураОшибкок.Ошибки;
			
			Если НЕ СтруктураОшибкок.Результат Тогда
				
				Результат = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоНеЗаполненныхКромок = 0;
		
		СтруктураОшибок = ПроверитьЗаполненностьКромки(Строка.ПереключательКромкаСверху, Строка.ВыборМебельнойКромкиСверху, Идентификатор, КоличествоНеЗаполненныхКромок, Ошибки, "ВыборМебельнойКромкиСверху");
		СтруктураОшибок = ПроверитьЗаполненностьКромки(Строка.ПереключательКромкаСнизу, Строка.ВыборМебельнойКромкиСнизу, Идентификатор, СтруктураОшибок.КоличествоНеЗаполненныхКромок, СтруктураОшибок.Ошибки, "ВыборМебельнойКромкиСнизу");
		СтруктураОшибок = ПроверитьЗаполненностьКромки(Строка.ПереключательКромкаСлева, Строка.ВыборМебельнойКромкиСлева, Идентификатор, СтруктураОшибок.КоличествоНеЗаполненныхКромок, СтруктураОшибок.Ошибки, "ВыборМебельнойКромкиСлева");
		СтруктураОшибок = ПроверитьЗаполненностьКромки(Строка.ПереключательКромкаСправа, Строка.ВыборМебельнойКромкиСправа, Идентификатор, СтруктураОшибок.КоличествоНеЗаполненныхКромок, СтруктураОшибок.Ошибки, "ВыборМебельнойКромкиСправа");
		
		Результат = ?(СтруктураОшибок.КоличествоНеЗаполненныхКромок > 0, Ложь, Результат);
		Ошибки = СтруктураОшибок.Ошибки;
		
		
	КонецЦикла;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьПередСохранением()

&НаСервере
Функция ПроверитьКромку(СтруктураКромок, КоличествоТорцевыхРучек)
	
	НесовпадениеКромки = Ложь;
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ПревышениеВысоты", Ложь);
	СтруктураОтвета.Вставить("ПревышениеШирины", Ложь);
	ТаблицаКромок = Новый ТаблицаЗначений;
	ТаблицаКромок.Колонки.Добавить("Кромка", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Для каждого Строка Из СтруктураКромок Цикл
		
		Кромка = Строка.Значение;
		
		Если ТипЗнч(Кромка) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			НоменклатурнаяГруппа = Кромка.НоменклатурнаяГруппа;
			
			Если НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ТорцеваяРучка16мм или НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ТорцеваяРучка18мм Тогда
				
				Если (Строка.Ключ = "Сверху" или Строка.Ключ = "Снизу") и Кромка.ДлинаДетали < СтруктураКромок.ШиринаДетали Тогда
					
					СтруктураОтвета.Вставить("ПревышениеШирины", Истина);
					
				ИначеЕсли (Строка.Ключ = "Слева" или Строка.Ключ = "Справа") и Кромка.ДлинаДетали < СтруктураКромок.ВысотаДетали Тогда
					
					СтруктураОтвета.Вставить("ПревышениеВысоты", Истина);
					
				КонецЕсли;
				
				КоличествоТорцевыхРучек = КоличествоТорцевыхРучек + 1;
				
			Иначе 
				
				НоваяСтрока = ТаблицаКромок.Добавить();
				НоваяСтрока.Кромка = Кромка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаКромок.Свернуть("Кромка");
	
	Если ТаблицаКромок.Количество() > 1 Тогда
		НесовпадениеКромки = Истина;
	КонецЕсли;
	
	СтруктураОтвета.Вставить("НесовпадениеКромки", НесовпадениеКромки);
	СтруктураОтвета.Вставить("КоличествоТорцевыхРучек", КоличествоТорцевыхРучек);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеСтруктурыПазовИРучек(РасположениеПазов)
	
	СтруктураПазовИРучек = Новый Структура;
	СтруктураПазовИРучек.Вставить("ПазыОтсутствуют", РасположениеПазов.ПоложениеПазов = Перечисления.Стороны.Отсутствует);
	СтруктураПазовИРучек.Вставить("БезРучки", РасположениеПазов.БезРучки);
	
	Возврат СтруктураПазовИРучек;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполненностьКромки(Переключатель, Кромка, Идентификатор, КоличествоНеЗаполненныхКромок, Ошибки, ПоложениеПереключателя)
	
	СтруктураОшибок = Новый Структура;
	
	Если НЕ Переключатель = "Нет" и НЕ Переключатель = "" и НЕ ЗначениеЗаполнено(Кромка) Тогда
		
		Элементы.Детали.ТекущаяСтрока = Идентификатор;
		Текст = "Выберите кромку либо нажмите ""нет"" на переключателе";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные." + ПоложениеПереключателя, Текст);
		КоличествоНеЗаполненныхКромок = КоличествоНеЗаполненныхКромок + 1;
		
	КонецЕсли;
	
	СтруктураОшибок.Вставить("КоличествоНеЗаполненныхКромок", КоличествоНеЗаполненныхКромок);
	СтруктураОшибок.Вставить("Ошибки", Ошибки);
	
	Возврат СтруктураОшибок;
	
КонецФункции // ПроверитьЗаполненностьКромки()

&НаКлиенте
Функция ПроверитьНаМинимальныйРазмер(СтарыйРазмер, НовыйРазмер)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	СтруктураПодсчета = Новый Структура;
	Размер = НовыйРазмер;
	
	МеньшеДопустимого = Ложь;//НовыйРазмер < 80;
	
	Если МеньшеДопустимого Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Деталь со стороной менее 80 мм не кромится. Все кромки будут очищены" + Символы.ПС +"Продолжить?", Режим);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ТекущиеДанные.ВыборМебельнойКромкиСверху = Неопределено;
			ТекущиеДанные.ВыборМебельнойКромкиСнизу = Неопределено;
			ТекущиеДанные.ВыборМебельнойКромкиСлева = Неопределено;
			ТекущиеДанные.ВыборМебельнойКромкиСправа = Неопределено;
			
		Иначе
			
			Размер = СтарыйРазмер;
			МеньшеДопустимого = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Размер;
	
КонецФункции // ПроверитьНаМинимальныйРазмер()

&НаКлиенте
Процедура ПроверитьРазмерыСтолешницы()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ПосчитатьЧистыйРазмер();
	НеОбтачивать = НЕ ТекущиеДанные.Обтачивать;
	КромкаВыбрана = НЕ ТекущиеДанные.ПереключательКромкаСправа = "Нет";
	ПревышаетШирину = (ТекущиеДанные.ШиринаДетали + ДанныеДетали.ПрипускПостформинг) > МассивыНоменклатурныхГрупп.ШиринаПолотна;
	
	Если ДанныеДетали.ЭтоСтолешница Тогда
		
		ШапкаОсновныхНастроек.Скруглять = ТекущиеДанные.Обтачивать;
		
	КонецЕсли;
	
	Если (ДанныеДетали.ЭтоСтолешница И НеОбтачивать И ПревышаетШирину) ИЛИ (ДанныеДетали.ЭтоСтолешница И КромкаВыбрана И ПревышаетШирину) Тогда
		
		ТекущиеДанные.ШиринаДетали = МассивыНоменклатурныхГрупп.ШиринаПолотна - ДанныеДетали.ПрипускПостформинг;
		
		ШиринаСКромкой = ТекущиеДанные.ШиринаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
		ВысотаСКромкой = ТекущиеДанные.ВысотаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
		
		ОбновитьФлэш();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСтороныСРадиусом(ЗначениеРадиуса, Радиус)
	
	ВысотаДетали 		= Элементы.Детали.ТекущиеДанные.ВысотаДетали;
	ШиринаДетали 		= Элементы.Детали.ТекущиеДанные.ШиринаДетали;
	ЧислоСравнения 	= ?(ВысотаДетали <= ШиринаДетали, ВысотаДетали, ШиринаДетали);
	
	Если ЗначениеРадиуса > ЧислоСравнения Тогда
		
		Кратность 	= Окр(ЧислоСравнения / 50, 0);
		Радиус 		= 50 * Кратность;
		ПоказатьОповещениеПользователя("Радиусы были изменены");
		
	Иначе
		
		Радиус = ЗначениеРадиуса;
		
	КонецЕсли;
	
КонецПроцедуры // СравнитьСтороныСРадиусом()

&НаСервере
Функция ПроверитьНоменклатурнуюГруппуКромки(ВерхняяКромка, НижняяКромка)
	
	НоменклатурнаяГруппаТолстойКромки = Справочники.НоменклатурныеГруппы.Кромка2_45;
	ТолстаяКромкаЕсть = ВерхняяКромка.НоменклатурнаяГруппа = НоменклатурнаяГруппаТолстойКромки
	ИЛИ НижняяКромка = НоменклатурнаяГруппаТолстойКромки;
	
	Возврат ТолстаяКромкаЕсть;
	
КонецФункции // ()

#КонецОбласти

#Область Общего_назначения

&НаКлиенте
Функция ПосчитатьЧистыйРазмер()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если НЕ ШиринаСКромкой = 0 И НЕ ВысотаСКромкой = 0 Тогда
		
		ТекущиеДанные.ШиринаДетали = ШиринаСКромкой - МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
		ТекущиеДанные.ВысотаДетали = ВысотаСКромкой - МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
		
	КонецЕсли;
	
КонецФункции // ПосчитатьЧистыйРазмер()

&НаСервереБезКонтекста
Функция ПроверитьСоблюдениеТекстуры(Номенклатура)
	
	Возврат Номенклатура.НаличиеТекстуры;
	
КонецФункции // ПроверитьСоблюдениеТекстуры(Номенклатура)()

&НаСервере
Функция ПолучитьАдресТаблицы()
	
	Возврат ПоместитьВоВременноеХранИЛИще(ЭтаФорма.Детали.Выгрузить());
	
КонецФункции // ПолучитьАдресТаблицы()

&НаКлиенте
Процедура ЗаполнитьОтверстия(Команда)
	
	Данные = Элементы.Детали.ТекущиеДанные;
	
	Структура = Новый Структура;
	Структура.Вставить("ТаблицаОтверстий", Данные.СтруктураОтверстий);
	Структура.Вставить("Обновлять", Истина);
	
	Если ЗначениеЗаполнено(Данные.ВысотаДетали) И ЗначениеЗаполнено(Данные.ШиринаДетали) Тогда
		
		ОткрытьФорму("ОбщаяФорма.ФормаРедактораОтверстий", Структура, ЭтаФорма, Истина);
		
	Иначе
		Если НЕ ЗначениеЗаполнено(Данные.ВысотаДетали) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните высоту детали", , "Элементы.Детали.ТекущиеДанные.ВысотаДетали");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Данные.ШиринаДетали) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните ширину детали", , "Элементы.Детали.ТекущиеДанные.ШиринаДетали");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазмерыПолотна()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Номенклатура = ТекущиеДанные.Номенклатура;
	
	ТорцеваяЛента = Новый Структура;
	
	ТорцеваяЛента.Вставить("ТорцеваяЛентаСверху", ТекущиеДанные.ВыборМебельнойКромкиСверху);
	ТорцеваяЛента.Вставить("ТорцеваяЛентаСнизу", ТекущиеДанные.ВыборМебельнойКромкиСнизу);
	ТорцеваяЛента.Вставить("ТорцеваяЛентаСлева", ТекущиеДанные.ВыборМебельнойКромкиСлева);
	ТорцеваяЛента.Вставить("ТорцеваяЛентаСправа", ТекущиеДанные.ВыборМебельнойКромкиСправа);
	
	Размеры = ПолучитьРазмерыПолотна(Номенклатура, ТорцеваяЛента);
	
	Если ДанныеДетали.Клееная Тогда
		
		ДлинаПолотна = Размеры.ДлинаПолотна - ДанныеДетали.ПрипускСклейка;
		ШиринаПолотна = Размеры.ШиринаПолотна - ДанныеДетали.ПрипускСклейка;
		
		ДлинаПолотна = ?(ДлинаПолотна>0,ДлинаПолотна,0);
		ШиринаПолотна = ?(ШиринаПолотна>0,ШиринаПолотна,0);
		
		МассивыНоменклатурныхГрупп.Вставить("ДлинаПолотна", ДлинаПолотна);
		МассивыНоменклатурныхГрупп.Вставить("ШиринаПолотна", ШиринаПолотна);
		
	Иначе
		
		МассивыНоменклатурныхГрупп.Вставить("ДлинаПолотна", Размеры.ДлинаПолотна);
		МассивыНоменклатурныхГрупп.Вставить("ШиринаПолотна", Размеры.ШиринаПолотна);
		
	КонецЕсли;
	
	МассивыНоменклатурныхГрупп.Вставить("ВычитаемоеДляШирины", Размеры.ВычитаемоеДляШирины);
	МассивыНоменклатурныхГрупп.Вставить("ВычитаемоеДляВысоты", Размеры.ВычитаемоеДляВысоты);
	
КонецПроцедуры

&НаКлиенте
Функция ПосчитатьКривойПилИПериметр(Данные)
	
	ВысотаДетали = Данные.ВысотаДетали;
	ШиринаДетали = Данные.ШиринаДетали;
	R1 = Данные.РадиусЛевоВерх;
	R2 = Данные.РадиусПравоВерх;
	R3 = Данные.РадиусПравоНиз;
	R4 = Данные.РадиусЛевоНиз;
	Данные.Периметр = 2 * (ВысотаДетали + ШиринаДетали - R1 - R2 - R3 - R4) + Окр(3.14159 * (R1 + R2 + R3 + R4) / 2);
	Данные.ДлинаКривогоПила = Окр(3.14159 * (R1 + R2 + R3 + R4) / 2);
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Процедура ПосчитатьРадиус(ЗначениеРадиуса, МестоФормы, Радиус)
	
	Если ЗначениеРадиуса % 50 > 0
		И ЗначениеРадиуса <> 10 Тогда
		
		Текст = "Радиус должен быть кратен 50";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , МестоФормы);
		Радиус = 0;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ПосчитатьРадиус()

&НаКлиенте
Процедура ОбнулитьКромкуИРадиусы()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	ТекущиеДанные.ВыборМебельнойКромкиСверху 	= Неопределено;
	ТекущиеДанные.ПереключательКромкаСверху 		= "Нет";
	ТекущиеДанные.ВыборМебельнойКромкиСнизу 		= Неопределено;
	ТекущиеДанные.ПереключательКромкаСнизу 		= "Нет";
	ТекущиеДанные.ВыборМебельнойКромкиСлева 		= Неопределено;
	ТекущиеДанные.ПереключательКромкаСлева 		= "Нет";
	ТекущиеДанные.ВыборМебельнойКромкиСправа 	= Неопределено;
	ТекущиеДанные.ПереключательКромкаСправа 		= "Нет";
	ТекущиеДанные.РадиусЛевоВерх							= 0;
	ТекущиеДанные.РадиусЛевоНиз							= 0;
	ТекущиеДанные.РадиусПравоВерх						= 0;
	ТекущиеДанные.РадиусПравоНиз							= 0;
	
КонецПроцедуры // ОбнулитьКромку()

&НаКлиенте
Функция ФасаднаяОкантовка(ПропуститьОбновление = Ложь)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	ТекущиеДанные.ПереключательКромкаСверху = "УниверсальнаяКромка";
	ТекущиеДанные.ВыборМебельнойКромкиСверху = ТекущиеДанные.УниверсальнаяКромка;
	ТекущиеДанные.ПереключательКромкаСнизу = "УниверсальнаяКромка";
	ТекущиеДанные.ВыборМебельнойКромкиСнизу = ТекущиеДанные.УниверсальнаяКромка;
	ТекущиеДанные.ПереключательКромкаСлева = "УниверсальнаяКромка";
	ТекущиеДанные.ВыборМебельнойКромкиСлева = ТекущиеДанные.УниверсальнаяКромка;
	ТекущиеДанные.ПереключательКромкаСправа = "УниверсальнаяКромка";
	ТекущиеДанные.ВыборМебельнойКромкиСправа = ТекущиеДанные.УниверсальнаяКромка;
	
	Если ПропуститьОбновление Тогда
		ОбновитьФлэш();
		УстановитьРазмерыПолотна();
		ПосчитатьЧистыйРазмер();
	КонецЕсли;
	
КонецФункции // ФасаднаяОкантовка()

&НаСервереБезКонтекста
Функция ПолучитьЦвета(Деталь)
	
	Структура = Новый Структура;
	Структура.Вставить("Цвет", "0x" + Деталь.Номенклатура.Цвет.КодЦвета);
	Структура.Вставить("ЦветКромкиСверху", "0x" +  Деталь.ВыборМебельнойКромкиСверху.Цвет.КодЦвета);
	Структура.Вставить("ЦветКромкиСнизу", "0x" +  Деталь.ВыборМебельнойКромкиСнизу.Цвет.КодЦвета);
	Структура.Вставить("ЦветКромкиСлева", "0x" +  Деталь.ВыборМебельнойКромкиСлева.Цвет.КодЦвета);
	Структура.Вставить("ЦветКромкиСправа", "0x" +  Деталь.ВыборМебельнойКромкиСправа.Цвет.КодЦвета);
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьНазванияКромок(СтруктураКромок)
	
	СтруктураКромок.ВыборМебельнойКромкиСверху = ?(ЗначениеЗаполнено(СтруктураКромок.ВыборМебельнойКромкиСверху),
	КраткоеНаименование(СтруктураКромок.ВыборМебельнойКромкиСверху), СтруктураКромок.ВыборМебельнойКромкиСверху);
	СтруктураКромок.ВыборМебельнойКромкиСлева = ?(ЗначениеЗаполнено(СтруктураКромок.ВыборМебельнойКромкиСлева),
	КраткоеНаименование(СтруктураКромок.ВыборМебельнойКромкиСлева), СтруктураКромок.ВыборМебельнойКромкиСлева);
	СтруктураКромок.ВыборМебельнойКромкиСнизу = ?(ЗначениеЗаполнено(СтруктураКромок.ВыборМебельнойКромкиСнизу),
	КраткоеНаименование(СтруктураКромок.ВыборМебельнойКромкиСнизу), СтруктураКромок.ВыборМебельнойКромкиСнизу);
	СтруктураКромок.ВыборМебельнойКромкиСправа = ?(ЗначениеЗаполнено(СтруктураКромок.ВыборМебельнойКромкиСправа),
	КраткоеНаименование(СтруктураКромок.ВыборМебельнойКромкиСправа), СтруктураКромок.ВыборМебельнойКромкиСправа);
	
	Возврат СтруктураКромок; //Кромка.КраткоеНаименование;
	
КонецФункции 

&НаСервереБезКонтекста
Функция КраткоеНаименование(Кромка)
	
	Возврат Кромка.КраткоеНаименование;
	
КонецФункции // КраткоеНаименование()

&НаСервере
Функция ПолучитьАдресХранилища()
	
	Возврат ПоместитьВоВременноеХранИЛИще(Детали.Выгрузить());
	
КонецФункции

&НаКлиенте
Функция ПронумероватьСтроки()
	
	Счетчик = 0;
	
	Для каждого Строка ИЗ Детали Цикл
		
		Счетчик = Счетчик + 1;
		Строка.НомерСтроки = Счетчик;
		
	КонецЦикла;
	
КонецФункции // ПронумероватьСтроки()

&НаСервереБезКонтекста
Функция КантыВСтроку(СтрокаКантов)
	
	ДлинаСтроки	= СтрДлина(СтрокаКантов);
	Если ДлинаСтроки > 0 Тогда
		СтрокаКантов = Лев(СтрокаКантов, ДлинаСтроки - 1);
		Значение 	 	= ЗначениеВСтрокуВнутр(СтрокаКантов);
	Иначе
		Значение = ЗначениеВСтрокуВнутр("");
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // КантыВСтроку()

&НаКлиенте
Процедура ПредупредитьНаКлиенте()
	
	Строка = Новый ФорматированнаяСтрока("Обновите справочник файлов!",,,,"e1cib/command/ОбщаяКоманда.СинхронизацияФайлов");
	Предупреждение(Строка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРазмерыПолотна(Номенклатура, ТорцеваяЛента)
	
	СтруктураРазмеров = Документы.Спецификация.ПолучитьРазмерыМатериалов(Номенклатура, ТорцеваяЛента);
	
	Возврат СтруктураРазмеров;
	
КонецФункции // ПолучитьРазмерыПолотна()

#КонецОбласти

#Область Управление_внешним_видом

// <Устанавливает доступность переданным элементам формы.>
//
// Параметры
//  <Значение>  - <Булево> - <включить или выключить элементы>
//                 <продолжение описания параметра>
//  <МассивЭлементов>  - <Массив> - <Массив элементов для обработки>
//                 <продолжение описания параметра>
&НаКлиенте
Функция УстановитьДоступностьЭлементов(Значение, МассивЭлементов)
	
	Для каждого Элемент ИЗ МассивЭлементов Цикл
		
		Элементы[Элемент].Доступность = Значение;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ИспользованиеПереключателяКромки(Переключатель, Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если Переключатель = "Кант" или Переключатель = "По месту" Тогда
		
		Элемент = ТекущиеДанные.Кант;
		
	ИначеЕсли Переключатель = "0.45" Тогда
		
		Элемент = ТекущиеДанные.Кромка045мм;
		
	ИначеЕсли Переключатель = "2" Тогда
		
		Элемент = ТекущиеДанные.Кромка2мм;
		
	ИначеЕсли Переключатель = "УниверсальнаяКромка" Тогда
		
		Элемент = ТекущиеДанные.УниверсальнаяКромка;
		
	Иначе
		
		Элемент = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		
	КонецЕсли;
	
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	ОбновитьФлэш();
	ОбновитьДоступность();
	
КонецФункции

&НаСервереБезКонтекста
Функция ТонкаяМДФ(Номенклатура)
	
	Возврат Справочники.НоменклатурныеГруппы.МДФ8 = ЛексСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "НоменклатурнаяГруппа");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступность()
	
	УстановитьДоступностьЭлементов(Ложь, ЭлементыФормы.ВсеЭлементы);
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидДетали = ТекущиеДанные.ВидДетали;
	
	Если НЕ ЗначениеЗаполнено(ВидДетали) Тогда
		Возврат;
	КонецЕсли;
	
	Дос = ДанныеДетали.ДоступностьПолей;
	
	Элементы.Номенклатура.Доступность = Истина;
	Элементы.НоменклатураДляСклеивания.Доступность = Дос.ДоступностьПоляДопНом;
	
	Элементы.Кант.Видимость = Дос.ДоступностьПоляКант;
	Элементы.Кромка045мм.Видимость = Дос.ДоступностьПоляКромка045;
	Элементы.Кромка2мм.Видимость = Дос.ДоступностьПоляКромка2;
	Элементы.УниверсальнаяКромка.Видимость = Дос.ДоступностьПоляУниверсальнаяКромка;
		
	Элементы.ВыборМебельнойКромкиСверху.ПодсказкаВвода = ?(Дос.ДоступностьПоляКромкаВерх,"","Не доступно для данного материала");
	Элементы.ВыборМебельнойКромкиСнизу.ПодсказкаВвода = ?(Дос.ДоступностьПоляКромкаНиз,"","Не доступно для данного материала");
	Элементы.ВыборМебельнойКромкиСлева.ПодсказкаВвода = ?(Дос.ДоступностьПоляКромкаЛево,"","Не доступно для данного материала");
	Элементы.ВыборМебельнойКромкиСправа.ПодсказкаВвода = ?(Дос.ДоступностьПоляКромкаПраво,"","Не доступно для данного материала");
	
	Элементы.ВыборМебельнойКромкиСверху.Видимость = Дос.ДоступностьПоляКромкаВерх;
	Элементы.ВыборМебельнойКромкиСнизу.Видимость = Дос.ДоступностьПоляКромкаНиз;
	Элементы.ВыборМебельнойКромкиСлева.Видимость = Дос.ДоступностьПоляКромкаЛево;
	Элементы.ВыборМебельнойКромкиСправа.Видимость = Дос.ДоступностьПоляКромкаПраво;
	
	Элементы.ДекорацияКромкаСверху.Видимость = Дос.ДоступностьПоляКромкаВерх;
	Элементы.ДекорацияКромкаСнизу.Видимость = Дос.ДоступностьПоляКромкаНиз;
	Элементы.ДекорацияКромкаСлева.Видимость = Дос.ДоступностьПоляКромкаЛево;
	Элементы.ДекорацияКромкаСправа.Видимость = Дос.ДоступностьПоляКромкаПраво;
	
	Элементы.НоменклатураДляСклеивания.Видимость = Дос.ДоступностьПоляДопНом;
	
	Элементы.РадиусЛевоВерх.Видимость = Дос.ДоступностьПоляR1;
	Элементы.РадиусПравоВерх.Видимость = Дос.ДоступностьПоляR2;
	Элементы.РадиусПравоНиз.Видимость = Дос.ДоступностьПоляR3;
	Элементы.РадиусЛевоНиз.Видимость = Дос.ДоступностьПоляR4;
	Элементы.Срез.Видимость = Дос.ДоступностьПоляСрез;
	
	Элементы.ДекорацияR1.Видимость = Дос.ДоступностьПоляR1;
	Элементы.ДекорацияR2.Видимость = Дос.ДоступностьПоляR2;
	Элементы.ДекорацияR3.Видимость = Дос.ДоступностьПоляR3;
	Элементы.ДекорацияS3.Видимость = Дос.ДоступностьПоляСрез;
	Элементы.ДекорацияR4.Видимость = Дос.ДоступностьПоляR4;
	
	Если НЕ (Дос.ДоступностьПоляR1 И Дос.ДоступностьПоляR2 И Дос.ДоступностьПоляR3 И Дос.ДоступностьПоляR4 И Дос.ДоступностьПоляСрез) Тогда
		Элементы.ГруппаРадиусы.Видимость = Ложь;
	Иначе
		Элементы.ГруппаРадиусы.Видимость = Истина;
	КонецЕсли;
	
	Элементы.Петли.Видимость = Дос.ДоступностьПоляПетли;
	Элементы.КоличествоПетель.Видимость = Дос.ДоступностьПоляКоличествоПетель;
	Элементы.ДиаметрПазов.Видимость = Дос.ДоступностьПоляДиаметрПазов;
	
	Элементы.РадиусФасада.Видимость = Дос.ДоступностьПоляРадиусФасада;
	Элементы.ДеталиРасположениеПазовИРучкиНаФасадах.Видимость = Дос.ДоступностьПоляРасположениеПазов;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		
		Элементы.ВысотаДетали.Доступность = Истина;
		Элементы.ШиринаДетали.Доступность = Истина;
		Элементы.Количество.Доступность = Истина;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВысотаДетали = 0
	 ИЛИ ТекущиеДанные.ШиринаДетали = 0
	 ИЛИ ТекущиеДанные.Количество = 0 Тогда
	 
	 	Возврат;
	 
	КонецЕсли;

	Элементы.Обтачивать.Доступность = Дос.ДоступностьПоляОбтачивать;
	Элементы.НеТорцевать.Доступность = Дос.ДоступностьПоляНеТорцевать;
	
	Элементы.РадиусЛевоВерх.Доступность = Дос.ДоступностьПоляR1;
	Элементы.РадиусПравоВерх.Доступность = Дос.ДоступностьПоляR2;
	Элементы.РадиусПравоНиз.Доступность = Дос.ДоступностьПоляR3;
	Элементы.РадиусЛевоНиз.Доступность = Дос.ДоступностьПоляR4;
	Элементы.Срез.Доступность = Дос.ДоступностьПоляСрез;
	
	Элементы.ДекорацияR1.Доступность = Дос.ДоступностьПоляR1;
	Элементы.ДекорацияR2.Доступность = Дос.ДоступностьПоляR2;
	Элементы.ДекорацияR3.Доступность = Дос.ДоступностьПоляR3;
	Элементы.ДекорацияS3.Доступность = Дос.ДоступностьПоляСрез;
	Элементы.ДекорацияR4.Доступность = Дос.ДоступностьПоляR4;
	
	Элементы.Петли.Доступность = Дос.ДоступностьПоляПетли;
	Элементы.КоличествоПетель.Доступность = Дос.ДоступностьПоляКоличествоПетель;
	Элементы.ДиаметрПазов.Доступность = Дос.ДоступностьПоляДиаметрПазов;
	
	Элементы.РадиусФасада.Доступность = Дос.ДоступностьПоляРадиусФасада;
	Элементы.ДеталиРасположениеПазовИРучкиНаФасадах.Доступность = Дос.ДоступностьПоляРасположениеПазов;
	
	Элементы.Кант.Доступность = Дос.ДоступностьПоляКант;
	Элементы.Кромка045мм.Доступность = Дос.ДоступностьПоляКромка045;
	Элементы.Кромка2мм.Доступность = Дос.ДоступностьПоляКромка2;
	Элементы.УниверсальнаяКромка.Доступность = Дос.ДоступностьПоляУниверсальнаяКромка;
	
	Если ДанныеДетали.СпецФасад Тогда
		
		Элементы.ПереключательКромкаСверху.Доступность = Ложь;
		Элементы.ПереключательКромкаСнизу.Доступность = Ложь;
		Элементы.ПереключательКромкаСлева.Доступность = Ложь;
		Элементы.ПереключательКромкаСправа.Доступность = Ложь;
		
	Иначе
		
		Элементы.ПереключательКромкаСверху.Доступность = Дос.ДоступностьПоляКромкаВерх;
		Элементы.ПереключательКромкаСнизу.Доступность = Дос.ДоступностьПоляКромкаНиз;
		Элементы.ПереключательКромкаСлева.Доступность = Дос.ДоступностьПоляКромкаЛево;
		Элементы.ПереключательКромкаСправа.Доступность = Дос.ДоступностьПоляКромкаПраво;
		
	КонецЕсли;

	Элементы.ВыборМебельнойКромкиСверху.Доступность = Дос.ДоступностьПоляКромкаВерх;
	Элементы.ВыборМебельнойКромкиСнизу.Доступность = Дос.ДоступностьПоляКромкаНиз;
	Элементы.ВыборМебельнойКромкиСлева.Доступность = Дос.ДоступностьПоляКромкаЛево;
	Элементы.ВыборМебельнойКромкиСправа.Доступность = Дос.ДоступностьПоляКромкаПраво;
	
	Если ТекущиеДанные.ПереключательКромкаСверху = "Нет" ИЛИ ТекущиеДанные.ПереключательКромкаСверху = "" Тогда
		 Элементы.ВыборМебельнойКромкиСверху.Доступность = Ложь;
	КонецЕсли;
	 
	Если ТекущиеДанные.ПереключательКромкаСнизу = "Нет" ИЛИ ТекущиеДанные.ПереключательКромкаСнизу = ""  Тогда
		 Элементы.ВыборМебельнойКромкиСнизу.Доступность = Ложь;
	КонецЕсли;
	 
	Если ТекущиеДанные.ПереключательКромкаСлева = "Нет" ИЛИ ТекущиеДанные.ПереключательКромкаСлева = ""   Тогда
		 Элементы.ВыборМебельнойКромкиСлева.Доступность = Ложь;
	КонецЕсли;
	
	Если ТекущиеДанные.ПереключательКромкаСправа = "Нет"  ИЛИ ТекущиеДанные.ПереключательКромкаСправа = ""  Тогда
		 Элементы.ВыборМебельнойКромкиСправа.Доступность = Ложь;
	КонецЕсли;
	
	Если ТекущиеДанные.Обтачивать Тогда
		
		Элементы.ВыборМебельнойКромкиСправа.Доступность = Ложь;
		Элементы.ПереключательКромкаСправа.Доступность = Ложь;
		
	КонецЕсли;
	
	Элементы.ЗаполнитьОтверстия.Доступность = Дос.ДоступностьПоляЗаполнитьОтверстия;
	Элементы.РедактироватьДеталь.Доступность = Дос.ДоступностьПоляРедактироватьДеталь;
	Элементы.УдалитьСтрокуДляФлэш.Доступность = Дос.ДоступностьПоляРедактироватьДеталь;
	Элементы.Развернуть.Доступность = Дос.ДоступностьПоляРазвернуть;
	Элементы.ДеталиЗаменитьНоменклатуру.Доступность = Дос.ДоступностьПоляЗаменитьНоменклатуру;

	ПроверитьОбточку();
	
	ДетальРедактирована = ЗначениеЗаполнено(ТекущиеДанные.СтрокаДляФлэш);

	Если ДетальРедактирована Тогда
		
		УстановитьДоступностьЭлементов(Ложь, ЭлементыФормы.ВсеЭлементы);
		ОбнулитьКромкуИРадиусы();
		Элементы.УдалитьСтрокуДляФлэш.Доступность = Истина;

	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область События_формы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗагрузитьФлэш(ИмяHTML, Элементы.Флэш);
	//	ЗагрузитьФлэш(ИмяHTML3D, Элементы.Флэш3D);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьФлэш(ИмяФайлаHTML, ПолеHTML)
	
	url = ЛексКлиент.ПутьHTML(ИмяФайлаHTML);
	
	Если url <> "" Тогда
		Попытка
			ПолеHTML.Документ.url = url;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	Иначе
		ПредупредитьНаКлиенте();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	//Если Параметры.Свойство("ПовторнаяПроверка") Тогда
	//	
	//	Элементы.ПеренестиВДокумент.Заголовок = "Проверить детали";
	//	ЭтаФорма.АвтоЗаголовок = Ложь;
	//	ЭтаФорма.Заголовок = "Повторная проверка"
	//	
	//КонецЕсли;
	
	Если Параметры.Свойство("Спецификация") Тогда
		Спецификация = Параметры.Спецификация;	
	КонецЕсли;
	
	Если Параметры.Свойство("АдресТаблицы") Тогда
		Детали.Загрузить(ПолучитьИзВременногоХранИЛИща(Параметры.АдресТаблицы));
	КонецЕсли;
	
	Если Параметры.Свойство("Строка3DРедактор") Тогда
		Строка3DРедактор = Параметры.Строка3DРедактор;
	КонецЕсли;
	
	Если Параметры.Свойство("Подразделение") Тогда
		Подразделение = Параметры.Подразделение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Детали) Тогда
		
		Если Параметры.Свойство("Идентификатор") Тогда
			
			Элементы.Детали.ТекущаяСтрока = Параметры.Идентификатор;
			
		КонецЕсли;
		
	Иначе
		
		Стр = Детали.Добавить();
		Стр.СоблюдениеТекстуры = Истина;
		
	КонецЕсли;
	
	ИмяHTML = ЛексСервер.ПолучитьИмяХТМЛ(Справочники.Файлы.ЛДСПHtml);
	ИмяHTML3D = ЛексСервер.ПолучитьИмяХТМЛ(Справочники.Файлы.Редактор3DHtml);
	
	МассивыНоменклатурныхГрупп = ЛексСервер.ОтборФиксированныхНоменклатурныхГрупп(Подразделение);
	МассивыНоменклатурныхГрупп.Вставить("ВычитаемоеДляВысоты", 0);
	МассивыНоменклатурныхГрупп.Вставить("ВычитаемоеДляШирины", 0);
	
	ШапкаОсновныхНастроек = Новый Структура;
	
	ШапкаОсновныхНастроек.Вставить("ВидДетали",Справочники.ВидыДеталей.НайтиПоНаименованию("16 ЛДСП"));
	ШапкаОсновныхНастроек.Вставить("Материал","16 ЛДСП");
	ШапкаОсновныхНастроек.Вставить("Номенклатура","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания","");
	ШапкаОсновныхНастроек.Вставить("Кант","");
	ШапкаОсновныхНастроек.Вставить("Кромка2мм","");
	ШапкаОсновныхНастроек.Вставить("Кромка045мм","");
	ШапкаОсновныхНастроек.Вставить("УниверсальнаяКромка","");
	ШапкаОсновныхНастроек.Вставить("Скруглять","");
	
	ЭлементыФормы = Новый Структура;
	МассивВсеЭлементы = Новый Массив;
	
	МассивВсеЭлементы.Добавить("Номенклатура");
	МассивВсеЭлементы.Добавить("НоменклатураДляСклеивания");
	МассивВсеЭлементы.Добавить("Обтачивать");
	МассивВсеЭлементы.Добавить("НеТорцевать");
	МассивВсеЭлементы.Добавить("ВысотаДетали");
	МассивВсеЭлементы.Добавить("ШиринаДетали");
	МассивВсеЭлементы.Добавить("Количество");
	
	МассивВсеЭлементы.Добавить("РадиусЛевоВерх");
	МассивВсеЭлементы.Добавить("РадиусЛевоНиз");
	МассивВсеЭлементы.Добавить("РадиусПравоВерх");
	МассивВсеЭлементы.Добавить("РадиусПравоНиз");
	МассивВсеЭлементы.Добавить("Срез");
	
	МассивВсеЭлементы.Добавить("ДекорацияR1");
	МассивВсеЭлементы.Добавить("ДекорацияR2");
	МассивВсеЭлементы.Добавить("ДекорацияR3");
	МассивВсеЭлементы.Добавить("ДекорацияS3");
	МассивВсеЭлементы.Добавить("ДекорацияR4");

	МассивВсеЭлементы.Добавить("Петли");
	МассивВсеЭлементы.Добавить("КоличествоПетель");
	МассивВсеЭлементы.Добавить("ДиаметрПазов");
	
	МассивВсеЭлементы.Добавить("РадиусФасада");
	МассивВсеЭлементы.Добавить("ДеталиРасположениеПазовИРучкиНаФасадах");
	
	МассивВсеЭлементы.Добавить("Кант");
	МассивВсеЭлементы.Добавить("Кромка045мм");
	МассивВсеЭлементы.Добавить("Кромка2мм");
	МассивВсеЭлементы.Добавить("УниверсальнаяКромка");
	
	МассивВсеЭлементы.Добавить("ПереключательКромкаСверху");
	МассивВсеЭлементы.Добавить("ПереключательКромкаСлева");
	МассивВсеЭлементы.Добавить("ПереключательКромкаСправа");
	МассивВсеЭлементы.Добавить("ПереключательКромкаСнизу");
	
	МассивВсеЭлементы.Добавить("ВыборМебельнойКромкиСверху");
	МассивВсеЭлементы.Добавить("ВыборМебельнойКромкиСлева");
	МассивВсеЭлементы.Добавить("ВыборМебельнойКромкиСнизу");
	МассивВсеЭлементы.Добавить("ВыборМебельнойКромкиСправа");
	
	МассивВсеЭлементы.Добавить("ЗаполнитьОтверстия");
	МассивВсеЭлементы.Добавить("РедактироватьДеталь");
	МассивВсеЭлементы.Добавить("УдалитьСтрокуДляФлэш");
	МассивВсеЭлементы.Добавить("Развернуть");
	МассивВсеЭлементы.Добавить("ДеталиЗаменитьНоменклатуру");
	
	ЭлементыФормы.Вставить("ВсеЭлементы", МассивВсеЭлементы);
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийВнешнийПользователь();	
	Иначе
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	ОтображатьОповещениеОРазмере = ЛексСервер.НастройкаПользователя(Пользователь,"Не отображать оповещение о размере детали");
	
	Если ЗначениеЗаполнено(ОтображатьОповещениеОРазмере) И ОтображатьОповещениеОРазмере Тогда
		Элементы.ГруппаНадписьРазмеры.Видимость = Ложь;	
	КонецЕсли;
	
	Обновлять = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Режим = РежимДиалогаВопрос.ДаНетОтмена;
		Ответ = Вопрос("Данные изменены. Сохранить изменения?",Режим);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Если НЕ ПроверитьПередСохранением() Тогда
				
				Отказ = Истина;
				
			Иначе
				
				Модифицированность = Ложь;
				ПередатьВладельцу();
				
			КонецЕсли;
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ДобавитьКДокументу(Команда)
	
	Если ПроверитьПередСохранением() Тогда
		Модифицированность = Ложь;
		ПередатьВладельцу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПередатьВладельцу()
	
	ОбновитьСтрокуФлэш3D();
	
	Структура = Новый Структура;
	Структура.Вставить("АдресХранИЛИща", ПолучитьАдресХранилища());
	Структура.Вставить("Строка3DРедактор", Строка3DРедактор);
	
	ОповеститьОВыборе(Структура);
	
КонецФункции

&НаКлиенте
Процедура РедактироватьДеталь(Команда)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтрокаДляФлэш) Тогда
		
		ВысотаДетали = ТекущиеДанные.ВысотаДетали;
		ШиринаДетали = ТекущиеДанные.ШиринаДетали;
			
		ВидМатериала = 3;
		
		Если ДанныеДетали.ЭтоСтолешница И ТекущиеДанные.Обтачивать Тогда
			ВидМатериала = 1;	
		ИначеЕсли ДанныеДетали.ЭтоСтекло Тогда
			ВидМатериала = 2;		  
		КонецЕсли;
		
		СтрокаДляРедактирования = "new☻"+Строка(ВысотаДетали)+"☻"+Строка(ШиринаДетали)+"☻"+Строка(ТекущиеДанные.ВидДетали)+"☻"+Строка(ТекущиеДанные.Номенклатура)+"☻"+ВидМатериала;
		
	Иначе
		
		СтрокаДляРедактирования = "old☻"+ТекущиеДанные.СтрокаДляФлэш;
		
	КонецЕсли;
	
	АдресТаблицы = ПолучитьАдресТаблицы();
	
	Параметр = Новый Структура;
	
	Параметр.Вставить("СтрокаДляРедактирования", СтрокаДляРедактирования);
	Параметр.Вставить("Подразделение", Подразделение);
	Параметр.Вставить("ВидДетали", ТекущиеДанные.ВидДетали);
	Параметр.Вставить("АдресТаблицы", АдресТаблицы);
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаРедактированиеДеталей", Параметр, Элементы.Детали);
	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные.ВысотаДетали < МассивыНоменклатурныхГрупп.ШиринаПолотна
		И ТекущиеДанные.ШиринаДетали < МассивыНоменклатурныхГрупп.ДлинаПолотна Тогда
		
		Временная = ТекущиеДанные.ВысотаДетали;
		ТекущиеДанные.ВысотаДетали = ТекущиеДанные.ШиринаДетали;
		ТекущиеДанные.ШиринаДетали = Временная;
		ВысотаСКромкой = ТекущиеДанные.ВысотаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
		ШиринаСКромкой = ТекущиеДанные.ШиринаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
		
	Иначе
		
		Предупреждение("При развороте деталь не поместится на лист!", 0, "Проверьте корректность введеных размеров");
		
	КонецЕсли;
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьНоменклатуру(Команда)
	
	ВладелецПодобра = Элементы.Детали;
	СписокНоменклатуры = Новый Массив;
	
	Для каждого Строка ИЗ Детали Цикл
		
		МассивНоменклатур = Новый Массив;
		МассивНоменклатур.Добавить(Строка.Номенклатура);
		МассивНоменклатур.Добавить(Строка.ВыборМебельнойКромкиСверху);
		МассивНоменклатур.Добавить(Строка.ВыборМебельнойКромкиСнизу);
		МассивНоменклатур.Добавить(Строка.ВыборМебельнойКромкиСлева);
		МассивНоменклатур.Добавить(Строка.ВыборМебельнойКромкиСправа);
		
		Для Каждого ЭлементМассива ИЗ МассивНоменклатур Цикл
			
			ПроверитьНаличие = СписокНоменклатуры.Найти(ЭлементМассива);//СписокНоменклатуры.Найти(Строка.Номенклатура);
			
			Если ПроверитьНаличие = Неопределено И ЗначениеЗаполнено(ЭлементМассива) Тогда
				
				СписокНоменклатуры.Добавить(ЭлементМассива);//Строка.Номенклатура);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	ПараметрыПодбора.Вставить("Подразделение", Подразделение);
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаСменыНоменклатуры", ПараметрыПодбора, ВладелецПодобра);
	
КонецПроцедуры

#КонецОбласти

#Область Элементы_формы

&НаКлиенте
Процедура Кромка045ммПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("Кромка045мм", Элементы.Детали.ТекущиеДанные.Кромка045мм);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДляСклеиванияПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания", Элементы.Детали.ТекущиеДанные.НоменклатураДляСклеивания);
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные.Гравировка Тогда
		
		ПоложениеТекстуры = ТекущиеДанные.ПоложениеТекстурыГравировки;
		ТекстураГравировки = ТекущиеДанные.ТекстураГравировки;
		ДанныеДляФлэшПоГравировке = ТекущиеДанные.ДанныеДляФлэшПоГравировке;
		ТекущиеДанные.ДанныеДляФлэшПоГравировке = ДанныеДляФлэшПоГравировке + ПоложениеТекстуры + "*" + ТекстураГравировки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбтачиватьПриИзменении(Элемент)
	
	ПроверитьОбточку();
	ПроверитьРазмерыСтолешницы();
	ОбновитьФлэш();
	ОбновитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура НеТорцеватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	НеТорцевать = ТекущиеДанные.НеТорцевать;
	МассивОпределенияДоступности = Новый Массив;
	МассивОпределенияДоступности.Добавить("ВысотаДетали");
	МассивОпределенияДоступности.Добавить("ВыборМебельнойКромкиСверху");
	МассивОпределенияДоступности.Добавить("ПереключательКромкаСверху");
	МассивОпределенияДоступности.Добавить("ВыборМебельнойКромкиСнизу");
	МассивОпределенияДоступности.Добавить("ПереключательКромкаСнизу");
	
	Для каждого Элемент ИЗ МассивОпределенияДоступности Цикл
		
		Элементы[Элемент].Доступность = НЕ НеТорцевать;
		
	КонецЦикла;
	
	Если НеТорцевать Тогда
		
		ТекущиеДанные.ВыборМебельнойКромкиСверху = Неопределено;
		ТекущиеДанные.ВыборМебельнойКромкиСнизу = Неопределено;
		ТекущиеДанные.ПереключательКромкаСверху = "Нет";
		ТекущиеДанные.ПереключательКромкаСнизу = "Нет";
		
		ТолщинаКромок = ?(ЗначениеЗаполнено(МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты), МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты,0);
		
		Если МассивыНоменклатурныхГрупп.Свойство("ДлинаПолотна") Тогда
			
			ТекущиеДанные.ВысотаДетали = МассивыНоменклатурныхГрупп.ДлинаПолотна;// - ТолщинаКромок;
			
		КонецЕсли;
		
		ВысотаСКромкой = ТекущиеДанные.ВысотаДетали + ТолщинаКромок;
		
	КонецЕсли;
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ВысотаПриИзменении(Элемент)
	
	УстановитьРазмерыПолотна();
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ВысотаСКромкой = ПроверитьНаМинимальныйРазмер(ТекущиеДанные.ВысотаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты, Число(Элемент.ТекстРедактирования));
	
	Если ВысотаСКромкой > МассивыНоменклатурныхГрупп.ДлинаПолотна Тогда
		
		СтрокаСообщения = "%1 превышает максимально допустимый размер %2 для %3";
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ВысотаСКромкой, МассивыНоменклатурныхГрупп.ДлинаПолотна, ТекущиеДанные.Номенклатура);
		ПоказатьОповещениеПользователя("Высота детали изменена",, СтрокаСообщения);
		
		ТекущиеДанные.ВысотаДетали = МассивыНоменклатурныхГрупп.ДлинаПолотна - МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
		ВысотаСКромкой = ТекущиеДанные.ВысотаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
		
	КонецЕсли;
	
	ПосчитатьЧистыйРазмер();
	
	ОбновитьФлэш();
	
	Если ДанныеДетали.ЭтоФасад Тогда
		
		Если ВысотаСКромкой > 1500 Тогда
			
			Предупреждение("Высота фасада превышает регламентную. Гарантия на изделие может не предоставляться");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДоступность();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ШиринаДетали;
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	УстановитьРазмерыПолотна();
	
	ЭтоСтолешница = ДанныеДетали.ЭтоСтолешница;
	Скругление = Элементы.Детали.ТекущиеДанные.Обтачивать = Истина;
	
	ШиринаСКромкой = ПроверитьНаМинимальныйРазмер(ТекущиеДанные.ШиринаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины, Число(Элемент.ТекстРедактирования));
	
	Если ШиринаСКромкой > МассивыНоменклатурныхГрупп.ШиринаПолотна Тогда
		
		СтрокаСообщения = "%1 превышает максимально допустимый размер %2 для %3";
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ВысотаСКромкой, МассивыНоменклатурныхГрупп.ДлинаПолотна, ТекущиеДанные.Номенклатура);
		ПоказатьОповещениеПользователя("Ширина детали изменена",, СтрокаСообщения);
		
		Если ЭтоСтолешница И НЕ Скругление Тогда
			
			ТекущиеДанные.ШиринаДетали = МассивыНоменклатурныхГрупп.ШиринаПолотна - 15 - МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
			
		ИначеЕсли ДанныеДетали.Клееная Тогда
			
			ТекущиеДанные.ШиринаДетали = МассивыНоменклатурныхГрупп.ШиринаПолотна - МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины - ДанныеДетали.ПрипускСклейка;
			
		Иначе
			
			ТекущиеДанные.ШиринаДетали = МассивыНоменклатурныхГрупп.ШиринаПолотна - МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
			
		КонецЕсли;
		
		ШиринаСКромкой = ТекущиеДанные.ШиринаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
		
	КонецЕсли;
	
	ПосчитатьЧистыйРазмер();

	Если ДанныеДетали.ЭтоФасад Тогда
		
		Если ШиринаСКромкой > 1500 Тогда 
			
			Предупреждение("Ширина фасада превышает регламентную. Гарантия на изделие может не предоставляться");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьРазмерыСтолешницы();
	
	ОбновитьФлэш();
	
	ОбновитьДоступность();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	//ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	//НовоеКоличество = ТекущиеДанные.Количество;
	
	//ОбновитьФлэш();
	
	//Если НовоеКоличество < КоличествоДеталей Тогда
	//	
	//	ЭлементФлэш3D = Элементы.Флэш3D.Документ.getElementById("input");
	//	Для ы = НовоеКоличество + 1 по КоличествоДеталей Цикл
	//		
	//		Строка = "del☺" + ТекущиеДанные.ИД + "_" + ы;
	//		ПередатьВоФлэш(ЭлементФлэш3D, Строка, Истина);
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//
	//КоличествоДеталей = НовоеКоличество;
	
	ОбновитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ВидДетали = ТекущиеДанные.ВидДетали;
	
	ДанныеДетали = ПолучитьДанныеДетали(ВидДетали);
	ТекущиеДанные.Материал = ДанныеДетали.МатериалСтрока;
	
	СброситьШапкуОсновныхНастроек();
	
	ШапкаОсновныхНастроек.Вставить("ВидДетали", ВидДетали);
	
	ТекущиеДанные.Номенклатура = Неопределено;
	ТекущиеДанные.НеТорцевать = Ложь;
	ТекущиеДанные.НоменклатураДляСклеивания = Неопределено;
	ТекущиеДанные.Кант = Неопределено;
	ТекущиеДанные.УниверсальнаяКромка = Неопределено;
	ТекущиеДанные.Кромка2мм = Неопределено;
	ТекущиеДанные.Кромка045мм = Неопределено;
	ТекущиеДанные.ВыборМебельнойКромкиСверху = Неопределено;
	ТекущиеДанные.ВыборМебельнойКромкиСлева = Неопределено;
	ТекущиеДанные.ВыборМебельнойКромкиСправа = Неопределено;
	ТекущиеДанные.ВыборМебельнойКромкиСнизу = Неопределено;
	ТекущиеДанные.ПереключательКромкаСверху = "Нет";
	ТекущиеДанные.ПереключательКромкаСлева = "Нет";
	ТекущиеДанные.ПереключательКромкаСправа = "Нет";
	ТекущиеДанные.ПереключательКромкаСнизу = "Нет";
	ТекущиеДанные.ВысотаДетали = 0;
	ТекущиеДанные.ШиринаДетали = 0;
	ТекущиеДанные.РадиусФасада = Неопределено;
	ТекущиеДанные.Петли = Неопределено;
	ТекущиеДанные.КоличествоПетель = 0;
	ТекущиеДанные.ДиаметрПазов = 0;
	ТекущиеДанные.РасположениеПазовИРучкиНаФасадах = Неопределено;
	ТекущиеДанные.РадиусЛевоВерх = 0;
	ТекущиеДанные.РадиусЛевоНиз = 0;
	ТекущиеДанные.РадиусПравоВерх = 0;
	ТекущиеДанные.РадиусПравоНиз = 0;
	ТекущиеДанные.Обтачивать = Ложь;
	ТекущиеДанные.СтруктураОтверстий = "";
	ТекущиеДанные.СтрокаДляФлэш = Неопределено;
	
	ОчиститьСтрокуДляФлэш();
	
	ШиринаСКромкой = 0;
	ВысотаСКромкой = 0;
	
	Если ДанныеДетали.ОбтачиватьПоУмолчанию Тогда		
		ТекущиеДанные.Обтачивать = Истина;
	КонецЕсли;
	
	ОбновитьДоступность();
	ОбновитьФлэш();
	
	ЗаполнитьДоступностьПереключателей();
	Обновлять = Ложь;
			
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКромкаСверхуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ИспользованиеПереключателяКромки(ТекущиеДанные.ПереключательКромкаСверху, ТекущиеДанные.ВыборМебельнойКромкиСверху);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКромкаСлеваПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ИспользованиеПереключателяКромки(ТекущиеДанные.ПереключательКромкаСлева, ТекущиеДанные.ВыборМебельнойКромкиСлева);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКромкаСправаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ИспользованиеПереключателяКромки(ТекущиеДанные.ПереключательКромкаСправа, ТекущиеДанные.ВыборМебельнойКромкиСправа);
	
	ПроверитьОбточку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКромкаСнизуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ИспользованиеПереключателяКромки(ТекущиеДанные.ПереключательКромкаСнизу, ТекущиеДанные.ВыборМебельнойКромкиСнизу);
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусПравоВерхПриИзменении(Элемент)
	
	ПосчитатьРадиус(Число(Элемент.ТекстРедактирования), "Элементы.Детали.ТекущиеДанные.РадиусПравоВерх", Элементы.Детали.ТекущиеДанные.РадиусПравоВерх);
	ПроверитьОбточку();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусПравоНизПриИзменении(Элемент)
	
	Если НЕ Элементы.Детали.ТекущиеДанные.Срез Тогда
		
		ПосчитатьРадиус(Число(Элемент.ТекстРедактирования), "Элементы.Детали.ТекущиеДанные.РадиусПравоНиз", Элементы.Детали.ТекущиеДанные.РадиусПравоНиз);
		
	Иначе
		
		СравнитьСтороныСРадиусом(Число(Элемент.ТекстРедактирования), Элементы.Детали.ТекущиеДанные.РадиусПравоНиз);
		
	КонецЕсли;
	
	ПроверитьОбточку();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусЛевоНизПриИзменении(Элемент)
	
	ПосчитатьРадиус(Число(Элемент.ТекстРедактирования), "Элементы.Детали.ТекущиеДанные.РадиусЛевоНиз", Элементы.Детали.ТекущиеДанные.РадиусЛевоНиз);
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусЛевоВерхПриИзменении(Элемент)
	
	ПосчитатьРадиус(Число(Элемент.ТекстРедактирования), "Элементы.Детали.ТекущиеДанные.РадиусЛевоВерх", Элементы.Детали.ТекущиеДанные.РадиусЛевоВерх);
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура СрезПриИзменении(Элемент)
	
	Если НЕ Элементы.Детали.ТекущиеДанные.Срез Тогда
		
		Радиус = Элементы.Детали.ТекущиеДанные.РадиусПравоНиз;
		Множитель = Окр(Радиус / 50);
		Элементы.Детали.ТекущиеДанные.РадиусПравоНиз = 50 * Множитель;
		
	КонецЕсли;
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМебельнойКромкиСлеваПриИзменении(Элемент)
	
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМебельнойКромкиСверхуПриИзменении(Элемент)
	
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	ПроверитьОбточку();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМебельнойКромкиСправаПриИзменении(Элемент)
	
	ПроверитьОбточку();
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМебельнойКромкиСнизуПриИзменении(Элемент)
	
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	ПроверитьОбточку();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Номенклатура = ТекущиеДанные.Номенклатура;
	ТекущиеДанные.СоблюдениеТекстуры = ПроверитьСоблюдениеТекстуры(Номенклатура);
	
	ШапкаОсновныхНастроек.Вставить("Номенклатура", Номенклатура);
	
	Если ДанныеДетали.ИспользоватьСоответствиеНоменклатуры Тогда
		
		СтруктураПодставляяемойНоменклатуры = ЛексСервер.ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(Номенклатура, Подразделение);
		
		Дос = ДанныеДетали.ДоступностьПолей;
		
		Если Дос.ДоступностьПоляКант Тогда
			
			ТекущиеДанные.Кант = СтруктураПодставляяемойНоменклатуры.Кант;
			ШапкаОсновныхНастроек.Вставить("Кант", ТекущиеДанные.Кант);
			
		КонецЕсли;
		
		Если Дос.ДоступностьПоляКромка2 Тогда
			
			ТекущиеДанные.Кромка2мм = СтруктураПодставляяемойНоменклатуры.Кромка2_19;
			ШапкаОсновныхНастроек.Вставить("Кромка2мм", ТекущиеДанные.Кромка2мм);
			
		КонецЕсли;
		
		Если Дос.ДоступностьПоляКромка045 Тогда
			
			ТекущиеДанные.Кромка045мм = СтруктураПодставляяемойНоменклатуры.Кромка045_19;
			ШапкаОсновныхНастроек.Вставить("Кромка045мм", ТекущиеДанные.Кромка045мм);
			
		КонецЕсли;
			
	КонецЕсли;
		
	УстановитьРазмерыПолотна();
	ОбновитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура КантПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("Кант", Элементы.Детали.ТекущиеДанные.Кант);
	
КонецПроцедуры

&НаКлиенте
Процедура Кромка2ммПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("Кромка2мм", Элементы.Детали.ТекущиеДанные.Кромка2мм);
	
КонецПроцедуры

&НаКлиенте
Процедура УниверсальнаяКромкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;

	Если ДанныеДетали.СпецФасад Тогда
		
		ФасаднаяОкантовка(Ложь);
		
	КонецЕсли;
	
	УстановитьРазмерыПолотна();
	ПосчитатьЧистыйРазмер();
	УниверсальнаяКромка = ТекущиеДанные.УниверсальнаяКромка;
	ШапкаОсновныхНастроек.Вставить("УниверсальнаяКромка", УниверсальнаяКромка);
	
КонецПроцедуры

#КонецОбласти

#Область Работа_с_флэш

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИДБезСуффикса(ИД)
	
	ПозицияРазделителя = Найти(ИД, "_");
	Результат = Лев(ИД, СтрДлина(ИД) - ПозицияРазделителя);
	
	Возврат Число(Результат);
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокуДляФлэш(Команда)
	
	ОчиститьСтрокуДляФлэш();
	ОбновитьДоступность();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтрокуДляФлэш()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ТекущиеДанные.СтрокаДляФлэш = Неопределено;
	ТекущиеДанные.ДетальРедактированная = Ложь;
	ТекущиеДанные.КривойПилСверху = 0;
	ТекущиеДанные.КривойПилСнизу = 0;
	ТекущиеДанные.КривойПилСлева = 0;
	ТекущиеДанные.КривойПилСправа = 0;
	ТекущиеДанные.КантыИзРедактора = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура Флэш3DПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Заглушка = Истина;
	
	//ЭлементФлэш3Doutput = Элементы.Флэш3D.Документ.getElementById("output");
	//ЭлементФлэш3Dinput = Элементы.Флэш3D.Документ.getElementById("input");
	//
	//Если ЭлементФлэш3Doutput = Неопределено ИЛИ ЭлементФлэш3Dinput = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//СтрокаОтФлэш = ЭлементФлэш3Doutput.tag;
	//ЭлементФлэш3Doutput.tag = "";
	//МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтФлэш, "☺");
	//
	//Если МассивПараметров.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Команда = МассивПараметров[0];
	//
	//Если Команда = "init" Тогда
	//	
	//	КомандаДляФлэш = "init";
	//	
	//	Если ЗначениеЗаполнено(Строка3DРедактор) Тогда
	//		КомандаДляФлэш = КомандаДляФлэш + "☺" + Строка3DРедактор;
	//	Иначе
	//		КомандаДляФлэш = КомандаДляФлэш + "☺new";
	//	КонецЕсли;
	//	
	//	ПередатьВоФлэш(ЭлементФлэш3Dinput, КомандаДляФлэш, Истина);
	//	
	//ИначеЕсли Команда = "save" Тогда
	//	
	//	Строка3DРедактор = МассивПараметров[1];
	//	
	//ИначеЕсли Команда = "slct" Тогда
	//	
	//	ВыделитьСтрокуПоИДДетали(МассивПараметров[1]);
	//	
	//ИначеЕсли Команда = "del" Тогда
	//	
	//	УдалитьСтрокуПоИДДетали(МассивПараметров[1]);
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлэшДокументСформирован(Элемент)
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьФлэш()
	
	Если Элементы.Детали.ТекущиеДанные <> Неопределено Тогда
		
		СтрокаДляФлэш = СформироватьСтрокуФлэш();
		Если ЗначениеЗаполнено(СтрокаДляФлэш) Тогда
			ЭлементФлэш = Элементы.Флэш.Документ.getElementById("back");
			ПередатьВоФлэш(ЭлементФлэш, СтрокаДляФлэш, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СформироватьСтрокуФлэш()
	
	Деталь = Элементы.Детали.ТекущиеДанные;
	
	ДанныеДляSWF = Новый Структура;
	УстановитьРазмерыПолотна();
	
	ДанныеДляSWF.Вставить("ВысотаДетали");
	ДанныеДляSWF.Вставить("ШиринаДетали");
	ДанныеДляSWF.Вставить("ВыборМебельнойКромкиСверху");
	ДанныеДляSWF.Вставить("ВыборМебельнойКромкиСнизу");
	ДанныеДляSWF.Вставить("ВыборМебельнойКромкиСлева");
	ДанныеДляSWF.Вставить("ВыборМебельнойКромкиСправа");
	ДанныеДляSWF.Вставить("КривойПилСверху");
	ДанныеДляSWF.Вставить("КривойПилСнизу");
	ДанныеДляSWF.Вставить("КривойПилСлева");
	ДанныеДляSWF.Вставить("КривойПилСправа");
	ДанныеДляSWF.Вставить("РадиусЛевоВерх");
	ДанныеДляSWF.Вставить("РадиусПравоВерх");
	ДанныеДляSWF.Вставить("РадиусПравоНиз");
	ДанныеДляSWF.Вставить("РадиусЛевоНиз");
	ДанныеДляSWF.Вставить("ЭксцентрикВерх", "0");
	ДанныеДляSWF.Вставить("ЭксцентрикНиз", "0");
	ДанныеДляSWF.Вставить("ЭксцентрикЛево", "0");
	ДанныеДляSWF.Вставить("ЭксцентрикПраво", "0");
	
	ДанныеДляSWF.Вставить("ПолотноДлина", МассивыНоменклатурныхГрупп.ДлинаПолотна);
	ДанныеДляSWF.Вставить("ПолотноШирина", МассивыНоменклатурныхГрупп.ШиринаПолотна);
	
	ДанныеДляSWF.Вставить("ЭксцВерх", "0");
	ДанныеДляSWF.Вставить("ЭксцНиз", "0");
	ДанныеДляSWF.Вставить("ЭксцЛево", "0");
	ДанныеДляSWF.Вставить("ЭксцПраво", "0");
	ДанныеДляSWF.Вставить("ЕвроПазВерх", "0");
	ДанныеДляSWF.Вставить("ЕвроПазНиз", "0");
	ДанныеДляSWF.Вставить("ЕвроПазЛево", "0");
	ДанныеДляSWF.Вставить("ЕвроПазПраво", "0");
	
	ДанныеДляSWF.Вставить("ЕстьПостформинг","0");
	
	Если ДанныеДетали.ЭтоСтолешница И Деталь.Обтачивать Тогда
		
		ДанныеДляSWF.ЕстьПостформинг = "1";
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеДляSWF, Деталь);
	
	ПризнакСреза = Число(Деталь.Срез);
	ДанныеДляSWF.РадиусПравоНиз = "" + ДанныеДляSWF.РадиусПравоНиз + "_" + ПризнакСреза;
	
	Если ЗначениеЗаполнено(Деталь.СтруктураОтверстий) И ЗначениеЗаполнено(ДанныеДляSWF.ШиринаДетали) И ЗначениеЗаполнено(ДанныеДляSWF.ВысотаДетали) Тогда
		
		ДанныеДляSWF = ЛексСервер.ЗаполнитьРеквизитОтверстиями(ДанныеДляSWF, Деталь.СтруктураОтверстий, ДанныеДляSWF.ШиринаДетали, ДанныеДляSWF.ВысотаДетали);
		
	КонецЕсли;
	
	КромкаСверху = ДанныеДляSWF.ВыборМебельнойКромкиСверху;
	КромкаСлева = ДанныеДляSWF.ВыборМебельнойКромкиСлева;
	КромкаСнизу = ДанныеДляSWF.ВыборМебельнойКромкиСнизу;
	КромкаСправа = ДанныеДляSWF.ВыборМебельнойКромкиСправа;
	
	Если ЗначениеЗаполнено(КромкаСверху) ИЛИ ЗначениеЗаполнено(КромкаСлева) ИЛИ ЗначениеЗаполнено(КромкаСнизу) ИЛИ ЗначениеЗаполнено(КромкаСправа) Тогда
		
		СтркутураКромок = Новый Структура;
		СтркутураКромок.Вставить("ВыборМебельнойКромкиСверху", КромкаСверху);
		СтркутураКромок.Вставить("ВыборМебельнойКромкиСлева", КромкаСлева);
		СтркутураКромок.Вставить("ВыборМебельнойКромкиСнизу", КромкаСнизу);
		СтркутураКромок.Вставить("ВыборМебельнойКромкиСправа", КромкаСправа);
		
		СтркутураКромок = ВернутьНазванияКромок(СтркутураКромок);
		
		ДанныеДляSWF.ВыборМебельнойКромкиСверху = СтркутураКромок.ВыборМебельнойКромкиСверху;
		ДанныеДляSWF.ВыборМебельнойКромкиСлева = СтркутураКромок.ВыборМебельнойКромкиСлева;
		ДанныеДляSWF.ВыборМебельнойКромкиСнизу = СтркутураКромок.ВыборМебельнойКромкиСнизу;
		ДанныеДляSWF.ВыборМебельнойКромкиСправа = СтркутураКромок.ВыборМебельнойКромкиСправа;
		
	КонецЕсли;
	
	ДанныеДляФайла = "";
	
	Для Каждого Элемент ИЗ ДанныеДляSWF Цикл
		
		ДанныеДляФайла = ДанныеДляФайла + Элемент.Значение + "#";
		
	КонецЦикла;
	
	ДанныеДляФайла = ЛексКлиентСервер.ПеревестиСтрокуВКодыСимволов(ДанныеДляФайла);
	
	Возврат ДанныеДляФайла;
	
КонецФункции

&НаКлиенте
Функция ПередатьВоФлэш(ЭлементФлэш, Строка, Кликнуть)
	
	Если ЭлементФлэш <> Неопределено Тогда
		ЭлементФлэш.tag = Строка;
		
		Если Кликнуть Тогда
			ЭлементФлэш.Click();
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОбновитьСтрокуФлэш3D()
	
	//ЭлементФлэш3D = Элементы.Флэш3D.Документ.getElementById("input");
	//ПередатьВоФлэш(ЭлементФлэш3D, "get☺", Истина);
	
КонецФункции

#КонецОбласти

#Область Таблица_Детали

&НаКлиенте
Процедура ДеталиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность= Истина;
	ТекущиеДанные= Элементы.Детали.ТекущиеДанные;
	
	Если ВыбранноеЗначение = "error☻" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтараяНоменклатура = ВыбранноеЗначение.Стараяноменклатура;
		НоваяНоменклатура = ВыбранноеЗначение.НоваяНоменклатура;
		Счетчик= 0;
		
		Для каждого Строка ИЗ Детали Цикл
			
			Если Строка.Номенклатура = СтараяНоменклатура Тогда
				
				Строка.Номенклатура = НоваяНоменклатура;
				Счетчик = Счетчик +1;
				
			КонецЕсли;
			
			Если Строка.ВыборМебельнойКромкиСверху = СтараяНоменклатура Тогда
				
				Строка.ВыборМебельнойКромкиСверху = НоваяНоменклатура;
				Счетчик = Счетчик +1;
				
			КонецЕсли;
			
			Если Строка.ВыборМебельнойКромкиСнизу = СтараяНоменклатура Тогда
				
				Строка.ВыборМебельнойКромкиСнизу = НоваяНоменклатура;
				Счетчик = Счетчик +1;
				
			КонецЕсли;
			
			Если Строка.ВыборМебельнойКромкиСлева = СтараяНоменклатура Тогда
				
				Строка.ВыборМебельнойКромкиСлева = НоваяНоменклатура;
				Счетчик = Счетчик +1;
				
			КонецЕсли;
			
			Если Строка.ВыборМебельнойКромкиСправа = СтараяНоменклатура Тогда
				
				Строка.ВыборМебельнойКромкиСправа = НоваяНоменклатура;
				Счетчик = Счетчик +1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Сообщить("Изменено " + Счетчик + " значений.", СтатусСообщения.Важное);
		
	Иначе // закрыта форма криволинейной детали
		
		Команда = Лев(ВыбранноеЗначение,5);
		
		Если Команда = "prin☻" Тогда
			
			СтрокаОтФлэш = СтрЗаменить(ВыбранноеЗначение,"prin☻","");
			ВременнаяСтрокаКривойПил = СтрокаОтФлэш;
			
			ПодключитьОбработчикОжидания("ПечатьИзРедактора", 1/10, Истина);
			
		Иначе
			
			СтрокаОтФлэш = ВыбранноеЗначение;
			
			ТекущиеДанные.ДетальРедактированная = Истина;
			ТекущиеДанные.СтруктураОтверстий = "";
			МассивСимволов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтФлэш, "☻");
			ТекущиеДанные.ДлинаКривогоПила = МассивСимволов[1];
			
			Если НЕ МассивСимволов[2] = "0" Тогда
				ТекущиеДанные.КривойПилСверху = 1;
			Иначе
				ТекущиеДанные.КривойПилСверху = 0;
			КонецЕсли;
			
			Если НЕ МассивСимволов[3] = "0" Тогда
				ТекущиеДанные.КривойПилСнизу = 1;
			Иначе
				ТекущиеДанные.КривойПилСнизу = 0;
			КонецЕсли;
			
			Если НЕ МассивСимволов[4] = "0" Тогда
				ТекущиеДанные.КривойПилСлева = 1;
			Иначе
				ТекущиеДанные.КривойПилСлева = 0;
			КонецЕсли;
			
			Если НЕ МассивСимволов[5] = "0" Тогда
				ТекущиеДанные.КривойПилСправа = 1;
			Иначе
				ТекущиеДанные.КривойПилСправа = 0;
			КонецЕсли;
			
			ФлэшДляРасчетов = МассивСимволов[8];
			ТекущиеДанные.СтрокаДляФлэш = ФлэшДляРасчетов;
			Канты = МассивСимволов[9];
			
			Если МассивСимволов.Количество() > 10 И НЕ(МассивСимволов[10]="0") Тогда
				ТекущиеДанные.КосойПил = МассивСимволов[10];	
			КонецЕсли;
			
			ТекущиеДанные.КантыИзРедактора = КантыВСтроку(Канты);
			
			Если Найти(ВРег(ТекущиеДанные.Комментарий), "ЧЕРТЕЖ") = 0 Тогда
				ТекущиеДанные.Комментарий = "[По чертежу] " + ТекущиеДанные.Комментарий;
			КонецЕсли;
			
			ОбновитьДоступность();
			ОбновитьФлэш();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьИзРедактора()
	
	Данные = ВременнаяСтрокаКривойПил;
	
	ТекущаяДеталь = Элементы.Детали.ТекущиеДанные;	
	
	СтрокаКривогоПила = "%ЛОГОТИП%☻"
	+ ТекущаяДеталь.Номенклатура + "☺"
	+ "" + "☺"
	+ "" + "☺"
	+ "" + "☺"
	+ "" + "☺"
	+ Спецификация + "☺"
	+ ТекущаяДеталь.Количество + "☺"
	+ "№ детали " + ТекущаяДеталь.НомерСтроки + " Комментарий: " + ТекущаяДеталь.Комментарий + "☺"
	+ "" + "☺"	
	+ ТекущаяДеталь.НомерСтроки + "☺"
	+ Данные + "☺☻";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Спецификация", Спецификация);
	ПараметрыФормы.Вставить("ХранимыйФайл", "КривойПил");
	ПараметрыФормы.Вставить("СтрокаКривогоПила", СтрокаКривогоПила);
	
	РисунокКривогоПила = ОткрытьФормуМодально("Документ.Спецификация.Форма.ФормаФлэш", ПараметрыФормы);
	
	ПараметрыПечати = Новый Структура();
	ПараметрыПечати.Вставить("СтрокаКартинка",РисунокКривогоПила);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.Спецификация", "КриволинейныеДеталиИзРедактора", Неопределено, Неопределено, ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		УстановитьРазмерыПолотна();
		ВысотаСКромкой = ТекущиеДанные.ВысотаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
		ШиринаСКромкой = ТекущиеДанные.ШиринаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПриИзменении(Элемент)
	
	ПронумероватьСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПриАктивизацииСтроки(Элемент)
	
	Если Обновлять Тогда
	
		ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			КоличествоДеталей = ТекущиеДанные.Количество;
			ВидДетали = ТекущиеДанные.ВидДетали;
			
			Если ЗначениеЗаполнено(ВидДетали) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.ВидДетали) И НЕ (ВидДетали = ШапкаОсновныхНастроек.ВидДетали)  Тогда
				 СброситьШапкуОсновныхНастроек();
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВидДетали) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.ВидДетали) Тогда
				
				ТекущиеДанные.ВидДетали = ШапкаОсновныхНастроек.ВидДетали;
				ВидДетали = ТекущиеДанные.ВидДетали;
			
			ИначеЕсли ЗначениеЗаполнено(ВидДетали) Тогда
				
				ШапкаОсновныхНастроек.Вставить("ВидДетали", ТекущиеДанные.ВидДетали);
				
			КонецЕсли;
			
			ДанныеДетали = ПолучитьДанныеДетали(ВидДетали);
			ТекущиеДанные.Материал = ДанныеДетали.МатериалСтрока;
			Дос = ДанныеДетали.ДоступностьПолей;
			
			УстановитьРазмерыПолотна();
			ВысотаСКромкой = ТекущиеДанные.ВысотаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
			ШиринаСКромкой = ТекущиеДанные.ШиринаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И ДанныеДетали.ОбтачиватьПоУмолчанию Тогда
				
				ТекущиеДанные.Обтачивать = Истина;
				
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.Номенклатура) Тогда
				
				ТекущиеДанные.Номенклатура = ШапкаОсновныхНастроек.Номенклатура;
				ТекущиеДанные.СоблюдениеТекстуры = ПроверитьСоблюдениеТекстуры(ТекущиеДанные.Номенклатура);
				
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
				
				ШапкаОсновныхНастроек.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
				
			КонецЕсли;

			Если Дос.ДоступностьПоляДопНом 
				 И НЕ ЗначениеЗаполнено(ТекущиеДанные.НоменклатураДляСклеивания) 
				 И ДанныеДетали.Клееная
				 И ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураДляСклеивания) Тогда
				
				ТекущиеДанные.НоменклатураДляСклеивания = ШапкаОсновныхНастроек.НоменклатураДляСклеивания;
				
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НоменклатураДляСклеивания) Тогда
				
				ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания", ТекущиеДанные.НоменклатураДляСклеивания);
				
			КонецЕсли;
			
			Если Дос.ДоступностьПоляКант 
				 И ДанныеДетали.ИспользоватьСоответствиеНоменклатуры 
				 И НЕ ЗначениеЗаполнено(ТекущиеДанные.Кант) 
				 И ЗначениеЗаполнено(ШапкаОсновныхНастроек.Кант) Тогда
				
				ТекущиеДанные.Кант = ШапкаОсновныхНастроек.Кант;
				
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Кант) Тогда
				
				ШапкаОсновныхНастроек.Вставить("Кант", ТекущиеДанные.Кант);
				
			КонецЕсли;
			
			Если Дос.ДоступностьПоляКромка2 
				 И ДанныеДетали.ИспользоватьСоответствиеНоменклатуры 
				 И НЕ ЗначениеЗаполнено(ТекущиеДанные.Кромка2мм) 
				 И ЗначениеЗаполнено(ШапкаОсновныхНастроек.Кромка2мм) Тогда
				
				ТекущиеДанные.Кромка2мм = ШапкаОсновныхНастроек.Кромка2мм;
				
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Кромка2мм) Тогда
				
				ШапкаОсновныхНастроек.Вставить("Кромка2мм", ТекущиеДанные.Кромка2мм);
				
			КонецЕсли;
			
			Если Дос.ДоступностьПоляКромка045 
				 И ДанныеДетали.ИспользоватьСоответствиеНоменклатуры 
				 И НЕ ЗначениеЗаполнено(ТекущиеДанные.Кромка045мм) 
				 И ЗначениеЗаполнено(ШапкаОсновныхНастроек.Кромка045мм) Тогда
				
				ТекущиеДанные.Кромка045мм = ШапкаОсновныхНастроек.Кромка045мм;
				
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Кромка045мм) Тогда
				
				ШапкаОсновныхНастроек.Вставить("Кромка045мм", ТекущиеДанные.Кромка045мм);
				
			КонецЕсли;
			
			Если Дос.ДоступностьПоляУниверсальнаяКромка 
				 И ДанныеДетали.ИспользоватьСоответствиеНоменклатуры 
				 И НЕ ЗначениеЗаполнено(ТекущиеДанные.УниверсальнаяКромка) 
				 И ЗначениеЗаполнено(ШапкаОсновныхНастроек.УниверсальнаяКромка) Тогда
				
				ТекущиеДанные.УниверсальнаяКромка = ШапкаОсновныхНастроек.УниверсальнаяКромка;
				
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.УниверсальнаяКромка) Тогда
				
				ШапкаОсновныхНастроек.Вставить("УниверсальнаяКромка", ТекущиеДанные.УниверсальнаяКромка);
				
			КонецЕсли;

		КонецЕсли;
	
		ОбновитьДоступность();
		ОбновитьФлэш();
		
		ЗаполнитьДоступностьПереключателей();
		Обновлять = Ложь;
		Возврат;
		
	КонецЕсли;	
	
	Обновлять = Истина; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если Копирование Тогда
		
		УстановитьРазмерыПолотна();
		ВысотаСКромкой = ТекущиеДанные.ВысотаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляВысоты;
		ШиринаСКромкой = ТекущиеДанные.ШиринаДетали + МассивыНоменклатурныхГрупп.ВычитаемоеДляШирины;
		
		
		
	Иначе
		
		ВысотаСКромкой = 0;
		ШиринаСКромкой = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиРасположениеПазовИРучкиНаФасадахОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураРасположенияПазовИРучки = ДеталиРасположениеПазовОбработкаВыбораНаСервере(ВыбранноеЗначение);
	ТекущиеДанные= Элементы.Детали.ТекущиеДанные;
	ТекущиеДанные.РасположениеПазовИРучкиНаФасадах = СтруктураРасположенияПазовИРучки.ЭлементСправочника;
	ПоложениеРучки = СтруктураРасположенияПазовИРучки.ПоложениеРучки;
	ПоложениеПазов = СтруктураРасположенияПазовИРучки.ПоложениеПазов;
	
КонецПроцедуры

&НаСервере
Функция ДеталиРасположениеПазовОбработкаВыбораНаСервере(ЗначениеСправочника)
	
	СтруктураРасположенияПазовИРучки = Новый Структура;
	ЭлементСправочника = Справочники.РасположениеПазовИРучкиНаФасадах.НайтиПоРеквизиту("ИмяКартинки", ЗначениеСправочника);
	СтруктураРасположенияПазовИРучки.Вставить("ПоложениеРучки", ЭлементСправочника.ПоложениеРучки);
	СтруктураРасположенияПазовИРучки.Вставить("ПоложениеПазов", ЭлементСправочника.ПоложениеПазов);
	СтруктураРасположенияПазовИРучки.Вставить("ЭлементСправочника", ЭлементСправочника);
	Возврат СтруктураРасположенияПазовИРучки;
	
КонецФункции

&НаКлиенте
Процедура ДеталиРасположениеПазовИРучкиНаФасадахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("СтеклянныеФасады", Истина);
	ОткрытьФорму("Справочник.РасположениеПазовИРучкиНаФасадах.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные.ДетальРедактированная Тогда		
		Элементы.ВысотаДетали.Доступность = Ложь;
		Элементы.ШиринаДетали.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СтруктураОтверстий" Тогда
		
		СтруктурыОтверстий = Параметр;
		Если СтруктурыОтверстий <> Неопределено Тогда
			Данные = Элементы.Детали.ТекущиеДанные;
			Данные.СтруктураОтверстий = СтруктурыОтверстий;
			ОбновитьФлэш();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьРазмерыСКромкойНажатие(Элемент)
	
	Ответ = Вопрос("Больше не показывать это оповещение?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;	
	КонецЕсли;
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийВнешнийПользователь();	
	Иначе
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	ЛексСервер.УстановитьНастройкуПользователя(Пользователь, "Не отображать оповещение о размере детали", Истина);
	
	Элементы.ГруппаНадписьРазмеры.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ВыборНоменклатуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборНоменклатуры("Текстура",СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДляСклеиванияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборНоменклатуры("ДопНом",СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПетлиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборНоменклатуры("Петли",СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КантНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборНоменклатуры("КантК",СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Кромка045ммНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборНоменклатуры("Кромка045",СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Кромка2ммНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборНоменклатуры("Кромка2",СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УниверсальнаяКромкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборНоменклатуры("Окантовка",СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМебельнойКромкиСверхуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПодборКромкиВЗависимостиОтВыключателя(Элементы.Детали.ТекущиеДанные.ПереключательКромкаСверху, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМебельнойКромкиСнизуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПодборКромкиВЗависимостиОтВыключателя(Элементы.Детали.ТекущиеДанные.ПереключательКромкаСнизу, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМебельнойКромкиСлеваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПодборКромкиВЗависимостиОтВыключателя(Элементы.Детали.ТекущиеДанные.ПереключательКромкаСлева, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМебельнойКромкиСправаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПодборКромкиВЗависимостиОтВыключателя(Элементы.Детали.ТекущиеДанные.ПереключательКромкаСправа, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКромкиВЗависимостиОтВыключателя(Переключатель, Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Переключатель = "Кант" или Переключатель = "По месту" Тогда
		
		ОбработатьВыборНоменклатуры("КантК", Ложь, Элемент);
		
	ИначеЕсли Переключатель = "0.45" Тогда
		
		ОбработатьВыборНоменклатуры("Кромка045", Ложь, Элемент);
		
	ИначеЕсли Переключатель = "2" Тогда
		
		ОбработатьВыборНоменклатуры("Кромка2", Ложь, Элемент);
		
	ИначеЕсли Переключатель = "УниверсальнаяКромка" Тогда
		
		ОбработатьВыборНоменклатуры("Окантовка", Ложь, Элемент);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборНоменклатуры(ПолеВыбора, СтандартнаяОбработка, Элемент)
	
	СтандартнаяОбработка = Ложь;
	НомГруппы = ПолучитьНомГруппы(ПолеВыбора);
	
	Если ЗначениеЗаполнено(НомГруппы) Тогда	
		ОткрытьФормуПодбора(НомГруппы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеВидаДетали

&НаСервереБезКонтекста
Функция ПолучитьДанныеДетали(ТипДетали)
	
	Стр = Новый Структура;
	
	НомГруппы = Новый СписокЗначений;
	
	Для Каждого Эл Из ТипДетали.НоменклатурныеГруппы Цикл
		
		Стр2 = Новый Структура;
		Стр2.Вставить("ПолеВыбора", Эл.ПолеВыбора);
		Стр2.Вставить("Группа", Эл.Группа);

		НомГруппы.Добавить(Стр2);	
		
	КонецЦикла;
	
	Стр.Вставить("НомГруппы", НомГруппы);
	
	СтрДоступность = Новый Структура;
	
	Для Каждого Рек Из Метаданные.Справочники.ВидыДеталей.Реквизиты Цикл

		Если Лев(Рек.Имя,15) = "ДоступностьПоля" Тогда
			
			СтрДоступность.Вставить(Рек.Имя,ТипДетали[Рек.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;

	Стр.Вставить("ДоступностьПолей", СтрДоступность);
	
	СтрОбязательныеПоля = Новый Структура;
	
	Для Каждого Рек Из Метаданные.Справочники.ВидыДеталей.Реквизиты Цикл

		Если Лев(Рек.Имя,16) = "ОбязательноеПоле" Тогда
			
			СтрОбязательныеПоля.Вставить(Рек.Имя,ТипДетали[Рек.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;

	Стр.Вставить("ОбязательныеПоля", СтрОбязательныеПоля);
	
	Стр.Вставить("Клееная", ТипДетали.Клееная);
	Стр.Вставить("ОбтачиватьПоУмолчанию", ТипДетали.ОбтачиватьПоУмолчанию);
	Стр.Вставить("ИспользоватьСоответствиеНоменклатуры", ТипДетали.ИспользоватьСоответствиеНоменклатуры);
	Стр.Вставить("СпецФасад", ТипДетали.СпецФасад);
	Стр.Вставить("МатериалСтрока", ТипДетали.МатериалСтрока);
	Стр.Вставить("ПрипускСклейка", ТипДетали.ПрипускСклейка);
	Стр.Вставить("ПрипускПостформинг", ТипДетали.ПрипускПостформинг);
	Стр.Вставить("ЭтоФасад", ТипДетали.ЭтоФасад);
	Стр.Вставить("ЭтоСтолешница", ТипДетали.ЭтоСтолешница);
	Стр.Вставить("ЭтоСтекло", ТипДетали.ЭтоСтекло);
	Стр.Вставить("МинимальнаяШирина", ТипДетали.МинимальнаяШирина);
	Стр.Вставить("МинимальнаяВысота", ТипДетали.МинимальнаяВысота);

	
	Возврат Стр;
	
КонецФункции

&НаКлиенте
Функция ПолучитьНомГруппы(ПолеВыбора)
	
	НомГруппы = Новый СписокЗначений;
	
	Для Каждого Эл Из ДанныеДетали.НомГруппы Цикл
		
		Если Эл.Значение.ПолеВыбора = ПолеВыбора Тогда
			НомГруппы.Добавить(Эл.Значение.Группа);	
		КонецЕсли
		
	КонецЦикла;
		
	Возврат НомГруппы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПодбора(НомГруппы, ЭлементФормы)
	
	Пар = Новый Структура();
	Пар.Вставить("НомГруппы", НомГруппы);
	Пар.Вставить("Подразделение", Подразделение);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", Пар, ЭлементФормы);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьДоступностьПереключателей()

	СписокПереключателей = Новый Массив;
	СписокПереключателей.Добавить(Элементы.ПереключательКромкаСверху);
	СписокПереключателей.Добавить(Элементы.ПереключательКромкаСнизу);
	СписокПереключателей.Добавить(Элементы.ПереключательКромкаСлева);
	СписокПереключателей.Добавить(Элементы.ПереключательКромкаСправа);
	
	Дос = ДанныеДетали.ДоступностьПолей;
	
	ДоступностьПереключателей = Новый Массив;
	ДоступностьПереключателей.Добавить(Дос.ДоступностьПоляКромкаВерх);
	ДоступностьПереключателей.Добавить(Дос.ДоступностьПоляКромкаНиз);
	ДоступностьПереключателей.Добавить(Дос.ДоступностьПоляКромкаЛево);
	ДоступностьПереключателей.Добавить(Дос.ДоступностьПоляКромкаПраво);
	
	ДоступныеВарианты = Новый Массив;
	
	Если Дос.ДоступностьПоляКант Тогда
		
		Стр = Новый Структура;
		Стр.Вставить("Значение","По месту");
		Стр.Вставить("Представление","По месту");
		
		ДоступныеВарианты.Добавить(Стр);
		
		Стр = Новый Структура;
		Стр.Вставить("Значение","Кант");
		Стр.Вставить("Представление","Кант");
		
		ДоступныеВарианты.Добавить(Стр);
		
	КонецЕсли;
	
	Если Дос.ДоступностьПоляКромка045 Тогда
		
		Стр = Новый Структура;
		Стр.Вставить("Значение","0.45");
		Стр.Вставить("Представление","0.45");
		
		ДоступныеВарианты.Добавить(Стр);
		
	КонецЕсли;
	
	Если Дос.ДоступностьПоляКромка2 Тогда
		
		Стр = Новый Структура;
		Стр.Вставить("Значение","2");
		Стр.Вставить("Представление","2");
		
		ДоступныеВарианты.Добавить(Стр);
		
	КонецЕсли;
	
	Если Дос.ДоступностьПоляУниверсальнаяКромка Тогда
		
		Стр = Новый Структура;
		Стр.Вставить("Значение","УниверсальнаяКромка");
		Стр.Вставить("Представление","Ок");
		
		ДоступныеВарианты.Добавить(Стр);
		
	КонецЕсли;
	
	Если НЕ ДанныеДетали.СпецФасад Тогда
	
		Стр = Новый Структура;
		Стр.Вставить("Значение","Нет");
		Стр.Вставить("Представление","Нет");
		
		ДоступныеВарианты.Добавить(Стр);
		
	КонецЕсли;
	
	Инд = 0;
	
	Пока Инд < СписокПереключателей.Количество() Цикл
		
		СписокПереключателей[Инд].СписокВыбора.Очистить();
		
		Если ДоступностьПереключателей[Инд] Тогда
			
			Для Каждого Вар Из ДоступныеВарианты Цикл
				
				СписокПереключателей[Инд].СписокВыбора.Добавить(Вар.Значение, Вар.Представление);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Инд = Инд + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьШапкуОсновныхНастроек()
	
	ШапкаОсновныхНастроек = Новый Структура;
	
	ШапкаОсновныхНастроек.Вставить("ВидДетали","");
	ШапкаОсновныхНастроек.Вставить("Материал","");
	ШапкаОсновныхНастроек.Вставить("Номенклатура","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания","");
	ШапкаОсновныхНастроек.Вставить("Кант","");
	ШапкаОсновныхНастроек.Вставить("Кромка2мм","");
	ШапкаОсновныхНастроек.Вставить("Кромка045мм","");
	ШапкаОсновныхНастроек.Вставить("УниверсальнаяКромка","");
	ШапкаОсновныхНастроек.Вставить("Скруглять","");
	
КонецПроцедуры