////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Функция СформироватьСтрокуФлэш()
	
	Деталь = Элементы.Детали.ТекущиеДанные;
	
	ДанныеДляSWF = Новый Структура;
	ДанныеДляSWF.Вставить("ШиринаДетали");
	ДанныеДляSWF.Вставить("ДлинаДетали");
	ДанныеДляSWF.Вставить("КромкаСверху");
	ДанныеДляSWF.Вставить("КромкаСнизу");
	ДанныеДляSWF.Вставить("КромкаСлева");
	ДанныеДляSWF.Вставить("КромкаСправа");
	ДанныеДляSWF.Вставить("КривойПилСверху");
	ДанныеДляSWF.Вставить("КривойПилСнизу");
	ДанныеДляSWF.Вставить("КривойПилСлева");
	ДанныеДляSWF.Вставить("КривойПилСправа");
	ДанныеДляSWF.Вставить("РадиусСлеваСверху");
	ДанныеДляSWF.Вставить("РадиусСправаСверху");
	ДанныеДляSWF.Вставить("РадиусСправаСнизу");
	ДанныеДляSWF.Вставить("РадиусСлеваСнизу");
	ДанныеДляSWF.Вставить("ЭксцентрикВерх",Строка(0));
	ДанныеДляSWF.Вставить("ЭксцентрикНиз",Строка(0));
	ДанныеДляSWF.Вставить("ЭксцентрикЛево",Строка(0));
	ДанныеДляSWF.Вставить("ЭксцентрикПраво",Строка(0));
	ДанныеДляSWF.Вставить("ПолотноШирина", 600);
	ДанныеДляSWF.Вставить("ПолотноДлина", 3000);
	
	ЗаполнитьЗначенияСвойств(ДанныеДляSWF, Деталь);
	Кромка = Элементы.Детали.ТекущиеДанные.Кромка;
	
	Если ДанныеДляSWF.КромкаСверху Тогда
		ДанныеДляSWF.Вставить("КромкаСверху", Кромка);
	КонецЕсли;
	
	Если ДанныеДляSWF.КромкаСнизу Тогда
		ДанныеДляSWF.Вставить("КромкаСнизу", Кромка);
	КонецЕсли;	
	
	Если ДанныеДляSWF.КромкаСлева Тогда
		ДанныеДляSWF.Вставить("КромкаСлева", Кромка);
	КонецЕсли;	
	
	Если ДанныеДляSWF.КромкаСправа Тогда
		ДанныеДляSWF.Вставить("КромкаСправа", Кромка);
	КонецЕсли;
	
	ДанныеДляФайла = "";
	
	Для Каждого Элемент Из ДанныеДляSWF Цикл
		
		ДанныеДляФайла = ДанныеДляФайла + Элемент.Значение + "#";	
		
	КонецЦикла;
	
	ДанныеДляФайла = ЛексКлиентСервер.ПеревестиСтрокуВКодыСимволов(ДанныеДляФайла);
	
	Возврат ДанныеДляФайла;
	
КонецФункции

&НаКлиенте
Функция ОбновитьФлэш()
	
	ЭлементФлэш = Элементы.флэш.Документ.getElementById("back");
	
	Если ЭлементФлэш <> Неопределено И Элементы.Детали.ТекущиеДанные <> Неопределено Тогда
		ЭлементФлэш.tag = СформироватьСтрокуФлэш();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Функция ОбновитьДоступность()
	
	Если Элементы.Детали.ТекущиеДанные <> Неопределено Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ДлинаДетали");
		МассивЭлементов.Добавить("ШиринаДетали");
		МассивЭлементов.Добавить("КромкаСверху");
		МассивЭлементов.Добавить("КромкаСлева");
		МассивЭлементов.Добавить("КромкаСправа");
		МассивЭлементов.Добавить("КромкаСнизу");
		МассивЭлементов.Добавить("РадиусСлеваСверху");
		МассивЭлементов.Добавить("РадиусСправаСверху");
		МассивЭлементов.Добавить("РадиусСправаСнизу");
		МассивЭлементов.Добавить("РадиусСлеваСнизу");
		
		ДетальРедактирована = ЗначениеЗаполнено(Элементы.Детали.ТекущиеДанные.СтрокаДляФлэшСтолешницы);
		
		Для каждого Элемент Из МассивЭлементов Цикл
			
			Элементы[Элемент].Доступность = НЕ ДетальРедактирована;
			
		КонецЦикла;
				
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	Детали.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицы));
	
	Если ЗначениеЗаполнено(Детали) Тогда
		
		Если Параметры.Свойство("Идентификатор")  Тогда
			Элементы.Детали.ТекущаяСтрока = Параметры.Идентификатор;
		КонецЕсли;
		
	Иначе
		
		НоваяДеталь = Детали.Добавить();
		
	КонецЕсли;	
	
	ХранимыйФайлСтолешницы = ПредопределенноеЗначение("Справочник.ХранимыеФайлы.Столешницы");
	ХранимыйФайлHTML = ПредопределенноеЗначение("Справочник.ХранимыеФайлы.СтолешницыHTML");
	
	СписокНоменклатурныхГрупп = Новый СписокЗначений;
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Столешница);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КромкаСтолешница);
	
	МассивыНоменклатурныхГрупп = ЛексСервер.ОтборНоменклатурныхГрупп(СписокНоменклатурныхГрупп);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Попытка
		Элементы.Флэш.Документ.url = "file://" + ЛексКлиент.ПолучитьПутьHTML(ХранимыйФайлСтолешницы, ХранимыйФайлHTML);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПолучитьАдресХранилища()
	
	Возврат ПоместитьВоВременноеХранилище(Детали.Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Режим = РежимДиалогаВопрос.ДаНетОтмена;
		Ответ = Вопрос("Данные изменены. Сохранить изменения?",Режим);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Если НЕ ПроверитьПередСохранением() Тогда
				Отказ = Истина;
			Иначе
				
				Модифицированность = Ложь;
				ОповеститьОВыборе(ПолучитьАдресХранилища());
				
			КонецЕсли;
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДобавитьКДокументу(Команда)

	Если ПроверитьПередСохранением() Тогда
		
		Модифицированность = Ложь;
		ОповеститьОВыборе(ПолучитьАдресХранилища());
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

&НаКлиенте
Функция ПроверкаКоличество()
	
	//Количество всегда должно быть > 0
	Если Элементы.Детали.ТекущиеДанные.Количество = 0 Тогда
		
		Элементы.Детали.ТекущиеДанные.Количество = 1;
		
	КонецЕсли;
	
КонецФункции // ПроверкаКоличество()

&НаКлиенте
Функция ПроверитьПередСохранением()
	
	Результат = Истина;
	
	Для каждого Строка Из Детали Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Полотно) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Не выбрано полотно детали";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.Номенклатура";
			Сообщение.Сообщить();			
			Результат = Ложь;
			
		ИначеЕсли Строка.ДлинаДетали = 0 Тогда
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Длина детали не может быть равна 0";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.ДлинаДетали";
			Сообщение.Сообщить();
			Результат = Ложь;;
			
		ИначеЕсли Строка.ШиринаДетали = 0 Тогда 
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Ширина детали не может быть равна 0";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.ШиринаДетали";
			Сообщение.Сообщить();
			Результат = Ложь
						
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции // Сохранить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ

&НаКлиенте
Процедура ДлинаДеталиПриИзменении(Элемент)
	
	Если  Элементы.Детали.ТекущиеДанные.ДлинаДетали > 2980 Тогда
		
		Элементы.Детали.ТекущиеДанные.ДлинаДетали = 2980
		
	КонецЕсли;
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаДеталиПриИзменении(Элемент)
	
	Если  Элементы.Детали.ТекущиеДанные.ШиринаДетали > 600 Тогда
		
		Элементы.Детали.ТекущиеДанные.ШиринаДетали = 600
		
	КонецЕсли;
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусСлеваСверхуПриИзменении(Элемент)
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусСправаСверхуПриИзменении(Элемент)
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусСправаСнизуПриИзменении(Элемент)
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусСлеваСнизуПриИзменении(Элемент)
	
	ОбновитьФлэш();
	
КонецПроцедуры
	
&НаКлиенте
Процедура РедактироватьДеталь(Команда)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтрокаДляФлэшСтолешницы) Тогда
		
		//Для коректного отражения во флэш, приходится менять длину и 
		//ширину местами :(
		ДлинаДетали = ТекущиеДанные.ШиринаДетали;
		ШиринаДетали = ТекущиеДанные.ДлинаДетали;
		СтрокаДляРедактирования = "new☻"+Строка(ДлинаДетали)+"☻"+Строка(ШиринаДетали);
		
	Иначе
		
		СтрокаДляРедактирования = "old☻"+ТекущиеДанные.СтрокаДляФлэшСтолешницы;
		
	КонецЕсли;
	
	Параметр = Новый Структура;
	Параметр.Вставить("СтрокаДляРедактирования", СтрокаДляРедактирования);
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаРедактированиеДеталей", Параметр, Элементы.Детали);	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуДляФлэш(Команда)
	
	Элементы.Детали.ТекущиеДанные.СтрокаДляФлэшСтолешницы = Неопределено;
	Элементы.Детали.ТекущиеДанные.КривойПилСверху = 0;
	Элементы.Детали.ТекущиеДанные.КривойПилСнизу = 0;
	Элементы.Детали.ТекущиеДанные.КривойПилСлева = 0;
	Элементы.Детали.ТекущиеДанные.КривойПилСправа = 0;
	
	ОбновитьДоступность();
	ОбновитьФлэш();

КонецПроцедуры

&НаКлиенте
Процедура ДеталиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	СтрокаОтФлэш = ВыбранноеЗначение;
	МассивСимволов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтФлэш, "☻");
		
	Если НЕ МассивСимволов[2] = "0" Тогда 
		ТекущиеДанные.КривойПилСверху = 1;
	Иначе
		ТекущиеДанные.КривойПилСверху = 0;
	КонецЕсли;
	
	Если НЕ МассивСимволов[3] = "0" Тогда
		ТекущиеДанные.КривойПилСнизу = 1;
	Иначе
		ТекущиеДанные.КривойПилСнизу = 0;
	КонецЕсли;
	
	Если НЕ МассивСимволов[4] = "0" Тогда
		ТекущиеДанные.КривойПилСлева = 1;
	Иначе
		ТекущиеДанные.КривойПилСлева = 0;
	КонецЕсли;
	
	Если НЕ МассивСимволов[5] = "0" Тогда
		ТекущиеДанные.КривойПилСправа = 1;
	Иначе
		ТекущиеДанные.КривойПилСправа = 0;
	КонецЕсли;
	
	ТекущиеДанные.СтрокаДляФлэшСтолешницы = МассивСимволов[8];
		
	ОбновитьДоступность();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	 ПроверкаКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура ФлэшДокументСформирован(Элемент)
	
	ОбновитьФлэш();
	
	Элементы.Полотно.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Столешница);
	Элементы.Кромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаСтолешница);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Детали.ТекущиеДанные <> Неопределено Тогда
		
		ПроверкаКоличество();
		
	КонецЕсли;
	
	ОбновитьДоступность();
	ОбновитьФлэш();	
	
КонецПроцедуры

&НаКлиенте
Процедура КромкаСверхуПриИзменении(Элемент)
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура КромкаСлеваПриИзменении(Элемент)
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура КромкаСправаПриИзменении(Элемент)
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура КромкаСнизуПриИзменении(Элемент)
	
	ОбновитьФлэш();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ


