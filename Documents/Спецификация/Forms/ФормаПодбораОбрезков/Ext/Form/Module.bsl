
&НаКлиенте
Процедура Перенести(Команда)
	
	Структура = Новый Структура;
	Структура.Вставить("АдресХранилища", ПолучитьАдресХранилища());
	
	ОповеститьОВыборе(Структура);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТаблицуОбрезков(Параметры.СписокНоменклатуры, Параметры.Подразделение);
	ЗаполнитьТаблицуВыбранных(ПолучитьИзВременногоХранилища(Параметры.ТаблицаОбрезков));
	УдалитьИспользованные();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИспользованные()
	
	Индекс = 0;
	
	Пока Индекс < ТаблицаВыбранных.Количество() Цикл
		
		Строка = ТаблицаВыбранных[Индекс];
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Номенклатура", Строка.Номенклатура);
		ПараметрыОтбора.Вставить("ВысотаОстатка", Строка.ВысотаОстатка);
		ПараметрыОтбора.Вставить("ШиринаОстатка", Строка.ШиринаОстатка);
		
		Строки = ТаблицаОбрезков.НайтиСтроки(ПараметрыОтбора);
		
		Если Строки.Количество() > 0 Тогда
			
			СтрокаОбрезки = Строки[0];
			
			Если СтрокаОбрезки.Количество > 0 Тогда
				СтрокаОбрезки.Количество = СтрокаОбрезки.Количество - 1;
				Индекс = Индекс + 1;
			Иначе
				ТаблицаВыбранных.Удалить(Строка);
			КонецЕсли;
			
		Иначе
			ТаблицаВыбранных.Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВыбранных(Таблица)
	
	Для Каждого Строка Из Таблица Цикл
		
		НоваяСтрока = ТаблицаВыбранных.Добавить();
		НоваяСтрока.Номенклатура = Строка.Номенклатура;
		НоваяСтрока.ВысотаОстатка = Строка.ВысотаОстатка;
		НоваяСтрока.ШиринаОстатка = Строка.ШиринаОстатка;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОбрезков(СписокНоменклатуры, Подразделение)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокНоменклатуры",СписокНоменклатуры);
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбрезкиМатериаловОстатки.Номенклатура КАК Номенклатура,
	|	ОбрезкиМатериаловОстатки.Высота КАК ВысотаОстатка,
	|	ОбрезкиМатериаловОстатки.Ширина КАК ШиринаОстатка,
	|	ОбрезкиМатериаловОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ОбрезкиМатериалов.Остатки(
	|			,
	|			Подразделение = &Подразделение
	|				И Номенклатура В (&СписокНоменклатуры)) КАК ОбрезкиМатериаловОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ВысотаОстатка";
	
	ТаблицаОбрезков.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбрезковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Данные = Элементы.ТаблицаОбрезков.ТекущиеДанные;
	
	Если Данные.Количество > 0 Тогда
		
		НоваяСтрока = ТаблицаВыбранных.Добавить();
		НоваяСтрока.Номенклатура = Данные.Номенклатура;
		НоваяСтрока.ВысотаОстатка = Данные.ВысотаОстатка;
		НоваяСтрока.ШиринаОстатка = Данные.ШиринаОстатка;
		
		Данные.Количество = Данные.Количество - 1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Данные = Элементы.ТаблицаВыбранных.ТекущиеДанные;
	ВернутьСтроку(Данные);
	ТаблицаВыбранных.Удалить(Данные);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресХранилища()
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаВыбранных.Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура ТаблицаВыбранныхПередУдалением(Элемент, Отказ)
	
	ВернутьСтроку(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьСтроку(Данные)
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Номенклатура", Данные.Номенклатура);
	ПараметрыОтбора.Вставить("ВысотаОстатка", Данные.ВысотаОстатка);
	ПараметрыОтбора.Вставить("ШиринаОстатка", Данные.ШиринаОстатка);
	
	Строка = ТаблицаОбрезков.НайтиСтроки(ПараметрыОтбора);
	Строка = Строка[0];
	
	Строка.Количество = Строка.Количество + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры
