&НаКлиенте
Перем МассивДанныхДетали,
МассивДанныхСхемы;

&НаСервере
Процедура ПроверитьКромкиЛДСП(Ошибки, ЛДСП)
	
	Структура = ЛексСервер.ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(ЛДСП, Подразделение);
	
	Если НЕ ЗначениеЗаполнено(Структура.Кромка045_19) Тогда
		Текст = "Не задана кромка 0.45мм по умолчанию для " + ЛДСП + ". Обратитесь в ИРЦ";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , Текст);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Структура.Кромка2_19) Тогда
		Текст = "Не задана кромка 2мм по умолчанию для " + ЛДСП + ". Обратитесь в ИРЦ";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , Текст);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Структура.Кромка2_35) Тогда
		Текст = "Не задана кромка 2мм по умолчанию для " + ЛДСП + ". Обратитесь в ИРЦ";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруИзделия(Изделие, Подразделение, Серийное, Изменение = Ложь, ОбщаяНоменклатура) 
	
	Структура = Новый Структура;
	
	ВидИзделияПоКаталогу = Изделие.ВидИзделияПоКаталогу;
	СписокДеталей = Изделие.СписокДеталей;
	СписокНоменклатуры = Изделие.СписокНоменклатуры;
	СписокДопЭлементов = Изделие.СписокДопЭлементов;
	СписокЯщики = Изделие.СписокЯщики;
	ЯщикиКоличество = Изделие.СписокЯщики.Количество();
	КухонныеНожки = Справочники.НоменклатурныеГруппы.КухонныеНожки;	
	
	ЕстьКлееная = Ложь;
	ЕстьЛДСП = ЯщикиКоличество > 0;
	ЕстьДВП = ЯщикиКоличество > 0;
	ЕстьЛДСПДоп = Ложь;
	ЕстьНожки = ЗначениеЗаполнено(СписокНоменклатуры.Найти(КухонныеНожки, "Номенклатура"));
	ЕстьСтекло = Ложь;
	ЕстьМДФ = Ложь;
	ЕстьСтолешница = Ложь;
	ЕстьКромкаСтолешница = Ложь;
	
	Для Каждого Деталь Из СписокДеталей Цикл
		
		ДанныеДетали = ПолучитьДанныеДеталиСервер(Деталь.ВидДетали);
		
		Если НЕ ЕстьСтолешница И ДанныеДетали.ЭтоСтолешница Тогда
			ЕстьСтолешница = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьКромкаСтолешница И ДанныеДетали.ЭтоСтолешница Тогда
			ЕстьКромкаСтолешница = Деталь.КромкаСверху ИЛИ Деталь.КромкаСнизу ИЛИ Деталь.КромкаСлева ИЛИ Деталь.КромкаСправа;
		КонецЕсли;
		
		Если НЕ ЕстьКлееная И ДанныеДетали.Клееная Тогда
			ЕстьКлееная = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьСтекло И ДанныеДетали.ЭтоСтекло Тогда
			ЕстьСтекло = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьЛДСПДоп Тогда
			Если Серийное И Деталь.ВторойЦветСерийное Тогда
				ЕстьЛДСПДоп = Истина;
			КонецЕсли;
			Если НЕ Серийное И Деталь.ВторойЦвет Тогда
				ЕстьЛДСПДоп = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДанныеДетали.ЭтоФасад Тогда
		
			Для Каждого Стр Из ДанныеДетали.НомГруппы Цикл
				
				Если Стр.Значение.ПолеВыбора = "Текстура" ИЛИ Стр.Значение.ПолеВыбора = "ДопНом" Тогда
				
					НомГруппа = Стр.Значение.Группа;
					
					Если НЕ ЕстьЛДСП И (НомГруппа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.ЛДСП) ИЛИ НомГруппа = Справочники.НоменклатурныеГруппы.ЛДСП) Тогда
						ЕстьЛДСП = Истина;
					КонецЕсли;
					
					Если НЕ ЕстьДВП И (НомГруппа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.ДВП) ИЛИ НомГруппа = Справочники.НоменклатурныеГруппы.ДВП) Тогда
						ЕстьДВП = Истина;
					КонецЕсли;
					
					Если НЕ ЕстьМДФ И (НомГруппа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.МДФ) ИЛИ НомГруппа = Справочники.НоменклатурныеГруппы.МДФ) Тогда
						ЕстьМДФ = Истина;
					КонецЕсли;
					
				КонецЕсли;
						
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	Структура.Вставить("КодИзделия", Изделие.Код);
	Структура.Вставить("Расположение", Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая);
	Структура.Вставить("ГлубинаИзделия", Изделие.ГлубинаИзделия);
	Структура.Вставить("ШиринаИзделия", Изделие.ШиринаИзделия);
	Структура.Вставить("ВысотаИзделия", Изделие.ВысотаИзделия);
	Структура.Вставить("ВысотаИзделия2", Изделие.ВысотаИзделия2);
	Структура.Вставить("ВысотаИзделия3", Изделие.ВысотаИзделия3);
	Структура.Вставить("ЕвропазДоступен", Изделие.ЕвропазДоступен);
	Структура.Вставить("ЭтоПенал", Изделие.ЭтоПенал);
	Структура.Вставить("ГлубинаИзделияМин", Изделие.ГлубинаИзделияМин);
	Структура.Вставить("ШиринаИзделияМин", Изделие.ШиринаИзделияМин);
	Структура.Вставить("ВысотаИзделияМин", Изделие.ВысотаИзделияМин);
	Структура.Вставить("ВысотаИзделияМин2", Изделие.ВысотаИзделияМин2);
	Структура.Вставить("ВысотаИзделияМин3", Изделие.ВысотаИзделияМин3);
	Структура.Вставить("ГлубинаИзделияМакс", Изделие.ГлубинаИзделияМакс);
	Структура.Вставить("ШиринаИзделияМакс", Изделие.ШиринаИзделияМакс);
	Структура.Вставить("ВысотаИзделияМакс", Изделие.ВысотаИзделияМакс);
	Структура.Вставить("ВысотаИзделияМакс2", Изделие.ВысотаИзделияМакс2);
	Структура.Вставить("ВысотаИзделияМакс3", Изделие.ВысотаИзделияМакс3);
	Структура.Вставить("Шаг", Изделие.Шаг);
	Структура.Вставить("ЕстьЛДСП", ЕстьЛДСП);
	Структура.Вставить("ЕстьЛДСПДоп", ЕстьЛДСПДоп);
	Структура.Вставить("ЕстьКлееная", ЕстьКлееная);
	Структура.Вставить("ЕстьДВП", ЕстьДВП);
	Структура.Вставить("ЕстьСтекло", ЕстьСтекло);
	Структура.Вставить("ЕстьМДФ", ЕстьМДФ);
	Структура.Вставить("ЕстьСтолешница", ЕстьСтолешница);
	Структура.Вставить("ЕстьКромкаСтолешница", ЕстьКромкаСтолешница);
	Структура.Вставить("ЕстьМойка", Ложь);
	Структура.Вставить("ЕстьСушка", Ложь);
	Структура.Вставить("НоменклатураСушка", Неопределено);
	Структура.Вставить("НоменклатурнаяГруппаСушка", Неопределено);
	Структура.Вставить("НоменклатураМойка", Неопределено);
	Структура.Вставить("ЕстьНожки", ЕстьНожки);
	Структура.Вставить("Ножки", ?(ЕстьНожки, КухонныеНожки.ОсновнаяНоменклатура, Неопределено));
	
	Если ЗначениеЗаполнено(Структура.Ножки) Тогда
		Структура.Ножки = ЛексСервер.ПолучитьНоменклатуру(ОбщаяНоменклатура, Структура.Ножки); 	
	КонецЕсли;
		
	Структура.Вставить("ЕстьУслугаСборки", ЗначениеЗаполнено(Изделие.УслугаСборки));
	
	Структура.Вставить("УгловоеИзделие", Изделие.УгловоеИзделие);
	
	Структура.Вставить("ШиринаДоп", Изделие.ШиринаДоп);
	Структура.Вставить("ШиринаДопМин", Изделие.ШиринаДопМин);
	Структура.Вставить("ШиринаДопМакс", Изделие.ШиринаДопМакс);

	Структура.Вставить("ГлубинаДоп", Изделие.ГлубинаДоп);
	Структура.Вставить("ГлубинаДопМин", Изделие.ГлубинаДопМин);
	Структура.Вставить("ГлубинаДопМакс", Изделие.ГлубинаДопМакс);

	
	Для Каждого Элемент Из СписокДопЭлементов Цикл	
		НоменклатураДопЭлемента = ПолучитьДопЭлемент(Элемент.ДопЭлемент, Изделие.ШиринаИзделия, Подразделение);
		Если Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.Сушка 
			ИЛИ Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.СушкаДляКоробаБезДна
			ИЛИ Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.СушкаДляКоробаСДном Тогда
			Структура.Вставить("ЕстьСушка", Истина);
			Структура.Вставить("НоменклатураСушка", НоменклатураДопЭлемента);
			Структура.Вставить("НоменклатурнаяГруппаСушка", Элемент.ДопЭлемент);
		ИначеЕсли Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.Мойка Тогда
			Структура.Вставить("ЕстьМойка", Истина);
			Структура.Вставить("НоменклатураМойка", НоменклатураДопЭлемента);
		ИначеЕсли Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.Бутылочница
			ИЛИ Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком Тогда
			Структура.Вставить("Бутылочница", НоменклатураДопЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	Если Изменение Тогда
		
		НомерЯщика = 0;
		
		Для Каждого Элемент Из СписокЯщики Цикл
			
			НомерЯщика = Элемент.НомерСтроки;
			
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "Имя", Элемент.ИмяЯщика);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "ВидФасада", Элемент.ВидФасада);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "ВидДеталиФасад", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "НомерДетали", Элемент.НомерСтроки);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика, "Ящик");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "КоличествоДемпфер", 0);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "КоличествоМеханизмФасада", 0);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "МеханизмФасада", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "Демпфер", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "РасположениеПазовИРучкиНаФасадах", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "Петли", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "КоличествоПетель", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "ЕстьРучка", Истина);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "СхемаЯщика", Элемент.СхемаЯщика);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "ДноНоменклатура", Элемент.ДноНоменклатура);
			
		КонецЦикла;
		
		КоличествоФасадов = 0;
		
		Для Каждого Строка Из СписокДеталей Цикл
			
			ДанныеДетали = ПолучитьДанныеДеталиСервер(Строка.ВидДетали);
			
			Если ДанныеДетали.ЭтоФасад Тогда
			
				КоличествоФасадов = КоличествоФасадов + 1;
				НомерФасада = НомерЯщика + КоличествоФасадов;
				
				Структура.Вставить("ТаблицаФасадов" + НомерФасада, "Фасад");
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "ВидФасада", Строка.ВидДетали.Наименование);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "ВидДеталиФасад", Строка.ВидДетали);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "НомерДетали", Строка.НомерСтроки);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "Имя", Строка.ИмяДетали);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "КоличествоДемпфер", Строка.КоличествоДемпфер);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "КоличествоМеханизмФасада", Строка.КоличествоМеханизмФасада);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "МеханизмФасада", Строка.МеханизмФасада);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "Демпфер", Строка.Демпфер);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "РасположениеПазовИРучкиНаФасадах", Строка.РасположениеПазовИРучкиНаФасадах);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "Петли", Строка.Петли);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "КоличествоПетель", Строка.КоличествоПетель);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "ЕстьРучка", НЕ Строка.РасположениеПазовИРучкиНаФасадах.БезРучки);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "СхемаЯщика", "");
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "ДноНоменклатура", "");
				
			КонецЕсли;

		КонецЦикла;
		
		КоличествоТаблицаФасадов = НомерЯщика + КоличествоФасадов;
		Структура.Вставить("КоличествоТаблицаФасадов", КоличествоТаблицаФасадов);
		
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ВыгрузитьНужнуюТаблицуВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Детали.Выгрузить(, "Изделие, ГлубинаИзделия, ШиринаИзделия, ВысотаИзделия, ВысотаИзделия2, ВысотаИзделия3, КодИзделия, Расположение"));
	
КонецФункции

&НаСервере
Процедура ЗагрузитьТабличнуюЧасть(АдресТаблицы)
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
		
		Для Каждого Строка Из Детали Цикл
			
			Строка.НовыйИндекс = ТЗ.Получить(Детали.Индекс(Строка)).Порядок + 1;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДопЭлемент(ДопЭлемент, ШиринаИзделия, Подразделение)
	
	НоменклатурнаяГруппа = ДопЭлемент;
	
	Если ДопЭлемент = Справочники.НоменклатурныеГруппы.Мойка Тогда
		
		Возврат ЛексСерверПовтИсп.ПолучитьОбщуюНоменклатуру(Справочники.ОбщаяНоменклатура.МойкаКухоннаяМатовая731, Подразделение);
		
	Иначе

		Если ДопЭлемент = Справочники.НоменклатурныеГруппы.ГазовыйЛифт Тогда
			Знак = ">";
		ИначеЕсли ДопЭлемент = Справочники.НоменклатурныеГруппы.СушкаДляКоробаБезДна
			ИЛИ ДопЭлемент = Справочники.НоменклатурныеГруппы.СушкаДляКоробаСДном
			ИЛИ ДопЭлемент = Справочники.НоменклатурныеГруппы.Сушка Тогда
			Знак = "";
		Иначе
			Знак = "<";
		КонецЕсли;
		
		Порядок = ?(ДопЭлемент = Справочники.НоменклатурныеГруппы.ГазовыйЛифт, "", "УБЫВ");
		Ширина = ?(ДопЭлемент = Справочники.НоменклатурныеГруппы.ГазовыйЛифт, 50, ШиринаИзделия);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
		Запрос.УстановитьПараметр("ШиринаДетали", Ширина);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	спрНом.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК спрНом
		|ГДЕ
		|	спрНом.ШиринаДетали " + Знак + "= &ШиринаДетали
		|	И спрНом.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
		|	И спрНом.Подразделение = &Подразделение
		|
		|УПОРЯДОЧИТЬ ПО
		|	спрНом.ШиринаДетали " + Порядок;
		
		Выборка = Запрос.Выполнить().Выгрузить();
		
		Если Выборка.Количество() > 0 Тогда
			Возврат Выборка[0].Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрФасада(Параметр, ТипПараметра)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	ОбщийФасад = ТекущиеДанные.ВидДеталиФасад;
	
	СтрокиФасадов = ТаблицаФасадов.НайтиСтроки(Новый Структура("sUID", ТекущиеДанные.UID));
	
	Для Каждого Строка Из СтрокиФасадов Цикл
		
		Если Строка.ВидЭлемента = "Фасад" И 
		   ((ТипПараметра = "НоменклатураЭлемента" 
		 ИЛИ ТипПараметра = "ТорцовкаЭлемента" 
		 ИЛИ (НЕ Строка.ЕстьРучка И ТипПараметра = "НоменклатураРучки"))) Тогда
			
			Строка[ТипПараметра] = Неопределено;
			
		ИначеЕсли Строка.ВидЭлемента = "Фасад" И ОбщийФасад <> Строка.ВидДеталиФасад И ТипПараметра <> "ВидДеталиФасад" Тогда
			
			Строка[ТипПараметра] = Строка[ТипПараметра];
			
		Иначе
			
			Если (ТипПараметра <> "НоменклатураФасада" И ТипПараметра <> "ОбрамлениеФасада") 
			 ИЛИ (ТипПараметра = "НоменклатураФасада" И ОбщийФасад = Строка.ВидДеталиФасад)
			 ИЛИ (ТипПараметра = "ОбрамлениеФасада" И ТекущиеДанные.НоменклатураФасада = Строка.НоменклатураФасада) Тогда 
				
				Строка[ТипПараметра] = Параметр;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Процедура ОтобразитьКартинку()
	
	Данные = Элементы.Детали.ТекущиеДанные;
	АдресИзделия = "";
	
	Если Данные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Данные.КодИзделия) Тогда
			АдресИзделия = РабочийКаталог + Данные.Расположение + Данные.КодИзделия;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресИзделия) Тогда
			
			ИмяФайла = АдресИзделия;
			ФайлИзображения = Новый Файл(ИмяФайла);
			
			Если НЕ ФайлИзображения.Существует() Тогда

				ИмяФайла = РабочийКаталог + ОсновнаяКартинка + Данные.КодИзделия;
				ФайлИзображения = Новый Файл(ИмяФайла);
				
				Если НЕ ФайлИзображения.Существует() Тогда
					ИмяФайла = "";	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ИмяФайла = "";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда	
		АдресКартинки = ИмяФайла;
	Иначе		
		АдресКартинки = "";
	КонецЕсли;	
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервереБезКонтекста
Функция ПолучитьОбщуюНоменклатуру(Подразделение)
	Возврат ЛексСерверПовтИсп.ПолучитьОбщуюНоменклатуруПолностью(Подразделение);	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	Подразделение = Параметры.Подразделение;
	ВидИзделияСпецификации = Параметры.Изделие.ВидИзделия;
	
	ИзделиеСпец = Параметры.Изделие;
	Серийное = ИзделиеСпец.Серийное;
	Дилерский = Параметры.Спецификация.Дилерский;
	Контрагент = Параметры.Спецификация.Контрагент; 
	
	Если Параметры.Свойство("Офис") Тогда
		Офис = Параметры.ОФис;
	КонецЕсли;
	
	ОбщаяНоменклатура = ПолучитьОбщуюНоменклатуру(Подразделение);
	
	Детали.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицы));
	ТаблицаФасадов.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицаФасадов));
	
	ПерезаполнитьСтруктуруИзделийКаталога(Детали);	
	ЗаполнитьМассивНомГрупп();
	ЗаполнитьШапкуОсновныхНастроек();
	УстановитьОтборТиповДеталейДляФасада();
	УстановитьОтборСхемЯщиков();
	
	ОсновнаяКартинка = Перечисления.ВидыПрисоединенныхФайлов.ОсновнаяКартинка;
	
	Элементы.ДеталиНоменклатураСтолешница.Видимость = Ложь;
	Элементы.ДеталиСушка.Видимость = Ложь;
	Элементы.ДеталиМойка.Видимость = Ложь;
	Элементы.ДеталиНожки.Видимость = Ложь;
	Элементы.ДеталиНоменклатураСтекло.Видимость = Ложь;
	Элементы.ДеталиНоменклатураДляСклеивания.Видимость = Ложь;
	Элементы.ДеталиНоменклатураМДФ.Видимость = Ложь;
	Элементы.ДеталиКромкаМДФ.Видимость = Ложь;
	Элементы.ШиринаИзделияДоп.Видимость = Ложь;
	Элементы.ГлубинаИзделияДоп.Видимость = Ложь;
	Элементы.ДеталиКромкаСтолешница.Видимость = Ложь;
	Элементы.ГруппаДопВысота.Видимость = Ложь;
	
	ЗаполнитьФасадыСМежцентровымРасстоянием();
	
	УстановитьПараметрыВыбораИзделия();
	
КонецПроцедуры

&НаСервере
Функция УстановитьПараметрыВыбораИзделия()
	
	ПараметрыВыбора = Новый Массив;
	
	Если Дилерский Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.АктивныйДляДилера", Истина));	
	Иначе
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Активный", Истина));
	КонецЕсли;
	
	ДоступныеВидыИзделий = Новый ФиксированныйМассив(ПолучитьДоступныеВидыИзделий(ИзделиеСпец));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ВидИзделияПоКаталогу", ДоступныеВидыИзделий));
	
	ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Элементы.ДеталиИзделие.ПараметрыВыбора = ПараметрыВыбора;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьФасадыСМежцентровымРасстоянием()
	
	Запрос = Новый Запрос();
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВидыДеталей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыДеталей КАК ВидыДеталей
	|ГДЕ
	|	ВидыДеталей.ЗапрашиватьМежцентровоеРасстояние
	|	И ВидыДеталей.ЭтоФасад";
	
	Мас = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");		
	ФасадыСМежцентровымРасстоянием.ЗагрузитьЗначения(Мас);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСтруктуруИзделийКаталога(Детали)
	
	Если ЗначениеЗаполнено(Детали) Тогда
		
		Если Параметры.Свойство("Идентификатор") Тогда
			Элементы.Детали.ТекущаяСтрока = Параметры.Идентификатор;
		КонецЕсли;
		
		Для каждого Элемент Из Детали Цикл
			
			Структура = ПолучитьСтруктуруИзделия(Элемент.Изделие, Подразделение, Серийное, Ложь, ОбщаяНоменклатура);
			
			Элемент.НовыйИндекс = Детали.Индекс(Элемент) + 1;
			Элемент.КодИзделия = Структура.КодИзделия;
			Элемент.ГлубинаИзделияМин = Структура.ГлубинаИзделияМин;
			Элемент.ШиринаИзделияМин = Структура.ШиринаИзделияМин;
			Элемент.ВысотаИзделияМин = Структура.ВысотаИзделияМин;
			Элемент.ВысотаИзделияМин2 = Структура.ВысотаИзделияМин2;
			Элемент.ВысотаИзделияМин3 = Структура.ВысотаИзделияМин3;
			Элемент.ГлубинаИзделияМакс = Структура.ГлубинаИзделияМакс;
			Элемент.ШиринаИзделияМакс = Структура.ШиринаИзделияМакс;
			Элемент.ВысотаИзделияМакс = Структура.ВысотаИзделияМакс;
			Элемент.ВысотаИзделияМакс2 = Структура.ВысотаИзделияМакс2;
			Элемент.ВысотаИзделияМакс3 = Структура.ВысотаИзделияМакс3;
			Элемент.Шаг = Структура.Шаг;
			Элемент.ЕстьЛДСП = Структура.ЕстьЛДСП;
			Элемент.ЕстьЛДСПДоп = Структура.ЕстьЛДСПДоп;
			Элемент.ЕстьКлееная = Структура.ЕстьКлееная;
			Элемент.ЕстьМДФ = Структура.ЕстьМДФ;
			Элемент.ЕстьСтекло = Структура.ЕстьСтекло;
			Элемент.ЕстьДВП = Структура.ЕстьДВП;
			Элемент.ЕстьМойка = Структура.ЕстьМойка;
			Элемент.ЕстьСушка = Структура.ЕстьСушка;
			Элемент.ЕстьСтолешница = Структура.ЕстьСтолешница;
			Элемент.ЕстьКромкаСтолешница = Структура.ЕстьКромкаСтолешница;
			Элемент.ЕстьНожки = Структура.ЕстьНожки;
			Элемент.НоменклатурнаяГруппаСушка = Структура.НоменклатурнаяГруппаСушка;
			Элемент.Расположение = ?(ЗначениеЗаполнено(Элемент.Расположение), Элемент.Расположение, Структура.Расположение);
			
			Элемент.УгловоеИзделие = Структура.УгловоеИзделие;
			
			Элемент.ШиринаДоп = Структура.ШиринаДоп;
			Элемент.ШиринаДопМин = Структура.ШиринаДопМин;
			Элемент.ШиринаДопМакс = Структура.ШиринаДопМакс;

			Элемент.ГлубинаДоп = Структура.ГлубинаДоп;
			Элемент.ГлубинаДопМин = Структура.ГлубинаДопМин;
			Элемент.ГлубинаДопМакс = Структура.ГлубинаДопМакс;

			Если Элемент.Европаз = 0 Тогда
				Элемент.Европаз = 8;
			КонецЕсли;
			
			Если Элемент.Столешница = 0 Тогда
				Элемент.Столешница = 38;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Стр = Детали.Добавить();
		Стр.Расположение = Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая;
		Стр.UID = Новый УникальныйИдентификатор;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТиповДеталейДляФасада()
	
	ВидыФасадов = ПолучитьВидыФасадов();
	
	Элементы.ДеталиВидФасада.СписокВыбора.ЗагрузитьЗначения(ВидыФасадов);
	Элементы.ТаблицаФасадовВидФасада.СписокВыбора.ЗагрузитьЗначения(ВидыФасадов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСхемЯщиков()
	
	СхемыЯщиков = ПолучитьСхемыЯщиков();	
	Элементы.ТаблицаФасадовВыдвижнойЭлемент.СписокВыбора.ЗагрузитьЗначения(СхемыЯщиков);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШапкуОсновныхНастроек()
	
	ШапкаОсновныхНастроек = Новый Структура;
	
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСП","");
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСП","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСПДоп","");
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСПДоп","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураДВП","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания","");
	ШапкаОсновныхНастроек.Вставить("Ручка","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураСтекло", "");
	ШапкаОсновныхНастроек.Вставить("НоменклатураМДФ","");
	ШапкаОсновныхНастроек.Вставить("ВидДеталиФасад", "");
	ШапкаОсновныхНастроек.Вставить("НоменклатураФасада","");
	ШапкаОсновныхНастроек.Вставить("ДопНоменклатураФасада","");
	ШапкаОсновныхНастроек.Вставить("ДопСклейкаФасада","");
	ШапкаОсновныхНастроек.Вставить("КромкаФасада","");
	ШапкаОсновныхНастроек.Вставить("КромкаМДФ","");
	ШапкаОсновныхНастроек.Вставить("КромкаСтолешница","");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивНомГрупп()
	
	МассивНомГрупп = Новый Структура();

	МассивНомГрупп.Вставить("ЛДСП", Справочники.НоменклатурныеГруппы.ЛДСП);
	МассивНомГрупп.Вставить("ЛДСП16", Справочники.НоменклатурныеГруппы.ЛДСП16);
	МассивНомГрупп.Вставить("МДФ18", Справочники.НоменклатурныеГруппы.МДФ18);
	МассивНомГрупп.Вставить("ДВП", Справочники.НоменклатурныеГруппы.ДВП);
	МассивНомГрупп.Вставить("Пластик", Справочники.НоменклатурныеГруппы.Пластик);
	
	МассивНомГрупп.Вставить("Кромка", Справочники.НоменклатурныеГруппы.Кромка);
	МассивНомГрупп.Вставить("Кромка045_19", Справочники.НоменклатурныеГруппы.Кромка045_19);
	МассивНомГрупп.Вставить("Кромка2_19", Справочники.НоменклатурныеГруппы.Кромка2_19);
	МассивНомГрупп.Вставить("Кромка2_35", Справочники.НоменклатурныеГруппы.Кромка2_35);
	МассивНомГрупп.Вставить("Кромка2_42", Справочники.НоменклатурныеГруппы.Кромка2_42);
	МассивНомГрупп.Вставить("Кромка2_45", Справочники.НоменклатурныеГруппы.Кромка2_45);
	МассивНомГрупп.Вставить("КантТ", Справочники.НоменклатурныеГруппы.КантТ);
	МассивНомГрупп.Вставить("КромкаМДФ", Справочники.НоменклатурныеГруппы.КромкаМДФ);
	МассивНомГрупп.Вставить("КантАлюминиевый", Справочники.НоменклатурныеГруппы.КантАлюминиевый);
	
	МассивНомГрупп.Вставить("Бутылочница", Справочники.НоменклатурныеГруппы.Бутылочница);
	МассивНомГрупп.Вставить("БутылочницаСДоводчиком", Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком);
	
	МассивНомГрупп.Вставить("Стекло", Справочники.НоменклатурныеГруппы.Стекло);
	МассивНомГрупп.Вставить("СтеклоДляСкругляемогоФасада", Справочники.НоменклатурныеГруппы.СтеклоДляСкругляемогоФасада);
	МассивНомГрупп.Вставить("Зеркало", Справочники.НоменклатурныеГруппы.Зеркало);
	
	МассивНомГрупп.Вставить("Сушка", Справочники.НоменклатурныеГруппы.Сушка);
	МассивНомГрупп.Вставить("СушкаДляКоробаСДном", Справочники.НоменклатурныеГруппы.СушкаДляКоробаСДном);
	МассивНомГрупп.Вставить("СушкаДляКоробаБезДна", Справочники.НоменклатурныеГруппы.СушкаДляКоробаБезДна);
	
	МассивНомГрупп.Вставить("Ручка", Справочники.НоменклатурныеГруппы.Ручка);
	МассивНомГрупп.Вставить("КухонныеНожки", Справочники.НоменклатурныеГруппы.КухонныеНожки);
	МассивНомГрупп.Вставить("Мойка", Справочники.НоменклатурныеГруппы.Мойка);
	МассивНомГрупп.Вставить("ГазовыйЛифт", Справочники.НоменклатурныеГруппы.ГазовыйЛифт);
	МассивНомГрупп.Вставить("Кронштейн", Справочники.НоменклатурныеГруппы.Кронштейн);
	МассивНомГрупп.Вставить("Демпфер", Справочники.НоменклатурныеГруппы.Демпфер);
	
	МассивНомГрупп.Вставить("Столешница", Справочники.НоменклатурныеГруппы.Столешница);

КонецПроцедуры

&НаСервере
Функция ПолучитьСхемыЯщиков()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СхемыЯщиков.Ссылка
	|ИЗ
	|	Справочник.СхемыЯщиков КАК СхемыЯщиков
	|ГДЕ
	|	СхемыЯщиков.Активность
	|	И СхемыЯщиков.Подразделение = &Подразделение";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Мас = Новый Массив;
	
	Для Каждого Стр Из Результат Цикл
		
		Мас.Добавить(Стр.Ссылка);
		
	КонецЦикла;
	
	Возврат Мас;
	
КонецФункции

&НаСервере
Функция ПолучитьВидыФасадов()
	
	Запрос = Новый Запрос();
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВидыДеталей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыДеталей КАК ВидыДеталей
	|ГДЕ
	|	ВидыДеталей.ФасадКаталога
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыДеталей.Наименование";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Мас = Новый Массив;
	
	Для Каждого Стр Из Результат Цикл
		
		Мас.Добавить(Стр.Ссылка);
		
	КонецЦикла;
	
	Возврат Мас;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РабочийКаталог = ЛексКлиент.ПолучитьПутьКаталогаФайлов();
	
	ОтобразитьКартинку();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДобавитьКДокументу(Команда)
	
	ОчиститьСообщения();
	
	Таблицы = ПроверитьПередСохранением();
		
	Если Таблицы <> Неопределено Тогда 
		
		Модифицированность = Ложь;
		ОповеститьОВыборе(Таблицы);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрИзделия(Команда)
	
	ПараметрыДляФормы = Новый Структура;
	ПараметрыДляФормы.Вставить("АдресТаблицы", ВыгрузитьНужнуюТаблицуВХранилище());
	ПараметрыДляФормы.Вставить("РабочийКаталог", РабочийКаталог);
	
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаИзображениеИзделий", ПараметрыДляФормы, Элементы.Детали);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

&НаСервере
Функция ПроверитьПередСохранением()

	Ошибки = Неопределено;
	
	НомерСтроки = 0;
	
	Для каждого Элемент Из Детали Цикл
		
		ИндексЭлемента = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		ПолеОшибки = "Детали[" + ИндексЭлемента + "].Изделие";
		
		НомерИзделияСтрока = "" + НомерСтроки + " изделие: ";
		
		Изделие = Элемент.Изделие;
		
		//Размеры изделия
		
		ШиринаИзделия = Элемент.ШиринаИзделия;
		ВысотаИзделия = Элемент.ВысотаИзделия;
		ВысотаИзделия2 = Элемент.ВысотаИзделия2;
		ВысотаИзделия3 = Элемент.ВысотаИзделия3;
		ГлубинаИзделия = Элемент.ГлубинаИзделия;
		Европаз = Элемент.Европаз;
		Столешница = Элемент.Столешница;
		ГлубинаМатериала = Элемент.НоменклатураЛДСП.ГлубинаДетали;
		ГлубинаМатериалаДоп = Элемент.НоменклатураЛДСПДоп.ГлубинаДетали;
		ШиринаДоп = Элемент.ШиринаДоп;
		ГлубинаДоп = Элемент.ГлубинаДоп;
		
		Если ЗначениеЗаполнено(Изделие.ШиринаФактическая) Тогда	
			Попытка
				Выполнить("Элемент.ШиринаФактическая = " + Изделие.ШиринаФактическая);
			Исключение
				Текст = "Ошибка при формировании формул: ШиринаФактическая";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, Текст);	
			КонецПопытки;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Изделие.ГлубинаФактическая) Тогда
			Попытка
				Выполнить("Элемент.ГлубинаФактическая = " + Изделие.ГлубинаФактическая);
			Исключение
				Текст = "Ошибка при формировании формул: ГлубинаФактическая";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, Текст);
			КонецПопытки;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Изделие.ВысотаФактическая) Тогда
			Попытка
				Выполнить("Элемент.ВысотаФактическая = " + Изделие.ВысотаФактическая);
			Исключение
				Текст = "Ошибка при формировании формул: ВысотаФактическая";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, Текст);
			КонецПопытки;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Элемент.Изделие) Тогда
			ТекстСообщения = НомерИзделияСтрока + "Не выбрано изделие";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
		Иначе
			
			Если ШиринаИзделия > Элемент.ШиринаИзделияМакс ИЛИ ШиринаИзделия < Элемент.ШиринаИзделияМин Тогда
				ТекстСообщения = НомерИзделияСтрока + "Укажите ширину в диапазоне " + Элемент.ШиринаИзделияМин + "-" + Элемент.ШиринаИзделияМакс;
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если ВысотаИзделия > Элемент.ВысотаИзделияМакс ИЛИ ВысотаИзделия < Элемент.ВысотаИзделияМин Тогда
				ТекстСообщения = НомерИзделияСтрока + "Укажите высоту в диапазоне " + Элемент.ВысотаИзделияМин + "-" + Элемент.ВысотаИзделияМакс;
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			Если ВысотаИзделия2 > Элемент.ВысотаИзделияМакс2 ИЛИ ВысотаИзделия2 < Элемент.ВысотаИзделияМин2 Тогда
				ТекстСообщения = НомерИзделияСтрока + "Укажите высоту 2 в диапазоне " + Элемент.ВысотаИзделияМин2 + "-" + Элемент.ВысотаИзделияМакс2;
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			Если ВысотаИзделия3 > Элемент.ВысотаИзделияМакс3 ИЛИ ВысотаИзделия3 < Элемент.ВысотаИзделияМин3 Тогда
				ТекстСообщения = НомерИзделияСтрока + "Укажите высоту 3 в диапазоне " + Элемент.ВысотаИзделияМин3 + "-" + Элемент.ВысотаИзделияМакс3;
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если ГлубинаИзделия > Элемент.ГлубинаИзделияМакс ИЛИ ГлубинаИзделия < Элемент.ГлубинаИзделияМин Тогда
				ТекстСообщения = НомерИзделияСтрока + "Укажите глубину в диапазоне " + Элемент.ГлубинаИзделияМин + "-" + Элемент.ГлубинаИзделияМакс;
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если Изделие.Диагональный И НЕ (ГлубинаИзделия = ШиринаИзделия) Тогда
				
				ТекстСообщения = НомерИзделияСтрока + "Глубина и ширина изделия должный совпадать";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);	
				
			КонецЕсли;
			
			//Проверяем доступно ли использовать европаз на этих фасадах.
			
			Для Каждого Эл Из Элемент.Изделие.СписокДеталей Цикл
				
				Если Эл.ВидДетали.ЭтоФасад 
				  И (Эл.ЕвропазВерх ИЛИ Эл.ЕвропазНиз ИЛИ Эл.ЕвропазЛево ИЛИ Эл.ЕвропазПраво)
				  И НЕ Элемент.ВидДеталиФасад.ДоступностьПоляЕвропаз Тогда
				  
				  	ТекстСообщения = НомерИзделияСтрока + " " + Элемент.ВидДеталиФасад + " не доступен в данном коробе.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				  
				КонецЕсли;
				
			КонецЦикла;	
				
			
			НомерСтрокиФасады = 0;
			
			СтрокиФасадов = ТаблицаФасадов.НайтиСтроки(Новый Структура("sUID", Элемент.UID));
			
			Для Каждого Строка Из СтрокиФасадов Цикл
				
				ИндексЭлементаФасады = НомерСтрокиФасады;
				НомерСтрокиФасады = НомерСтрокиФасады + 1;
				
				ЭтоЯщик = (Строка.ВидЭлемента = "Ящик");
				БезФасада = Строка.БезФасада;
				БезРучки = Строка.БезРучки;
				ЕстьПластик = Строка.ВидДеталиФасад.Пластик;
				ЕстьДопСклейка = Строка.ВидДеталиФасад.ОбязательноеПолеДопСклейка;
				
				НомерФасадаСтрока = НомерИзделияСтрока + НомерСтрокиФасады + " фасад: ";
				
				ДанныеДеталиФасад = ПолучитьДанныеДеталиСервер(Строка.ВидДеталиФасад);
				ОбязПоля = ДанныеДеталиФасад.ОбязательныеПоля;
				ДоступныеПоля = ДанныеДеталиФасад.ДоступностьПолей; 
				
				Если НЕ БезФасада И ЕстьДопСклейка И НЕ ЗначениеЗаполнено(Строка.ДопСклейкаФасада) Тогда
					ТекстСообщения = НомерФасадаСтрока + "Не выбрана доп. склейка для фасада.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				
				Если НЕ БезФасада И ЕстьПластик И НЕ ЗначениеЗаполнено(Строка.ДопНоменклатураФасада) Тогда
					ТекстСообщения = НомерФасадаСтрока + "Не выбран пластик для фасада.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				
				Если НЕ БезФасада И НЕ ЗначениеЗаполнено(Строка.ВидДеталиФасад) Тогда
					ТекстСообщения = НомерФасадаСтрока + "Не выбран вид фасада.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;

				Если НЕ (ЭтоЯщик И ЕстьПластик) И НЕ БезФасада И НЕ ЗначениеЗаполнено(Строка.НоменклатураФасада) Тогда
					ТекстСообщения = НомерФасадаСтрока + "Не выбрана номенклатура фасада.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				
				НужнаКромка = (ОбязПоля.ОбязательноеПолеКромкаВерх
							ИЛИ ОбязПоля.ОбязательноеПолеКромкаНиз
							ИЛИ ОбязПоля.ОбязательноеПолеКромкаЛево
							ИЛИ ОбязПоля.ОбязательноеПолеКромкаПраво);
				
				Если НужнаКромка И НЕ БезФасада И НЕ ЗначениеЗаполнено(Строка.ОбрамлениеФасада) И НЕ (ДанныеДеталиФасад.ЭтоФасад И ДанныеДеталиФасад.ЭтоСтекло) Тогда
					ТекстСообщения = НомерФасадаСтрока + "Не выбрано обрамление.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				
				Ручка = Строка.НоменклатураРучки;
				Если НЕ БезФасада И НЕ ЗначениеЗаполнено(Ручка) И Строка.ЕстьРучка И НЕ БезРучки И НЕ Строка.КриволинейныйВыпилПодРучку Тогда
					ТекстСообщения = НомерФасадаСтрока + "Не выбрана ручка.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				  
				Если ЗначениеЗаполнено(Строка.ДопЭлемент) 
					И (Строка.ДопЭлемент.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Бутылочница
				   ИЛИ Строка.ДопЭлемент.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком)
					И (Строка.ДопЭлемент.ШиринаДетали > Элемент.ШиринаИзделия) Тогда
					ТекстСообщения = НомерФасадаСтрока + "Размер бутылочницы не подходит: ШиринаДетали > Элемент.ШиринаИзделия.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				
				Если Строка.ВидЭлемента = "Фасад" Тогда
					
					Если ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) Тогда
						
						ПазыОтсутствуют = Строка.РасположениеПазовИРучкиНаФасадах.ПоложениеПазов = Перечисления.Стороны.Отсутствует;
						БезРучки = Строка.РасположениеПазовИРучкиНаФасадах.БезРучки;
						
					Иначе
						
						ПазыОтсутствуют = Ложь;
						БезРучки = Ложь;
						
					КонецЕсли;
					
					Если НЕ БезФасада И ЗначениеЗаполнено(Ручка) И НЕ ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите расположение ручки.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если НЕ БезФасада И ЗначениеЗаполнено(Строка.МеханизмФасада) И НЕ ЗначениеЗаполнено(Строка.КоличествоМеханизмФасада) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите количество механизмов фасада.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если НЕ БезФасада И ЗначениеЗаполнено(Строка.Демпфер) И НЕ ЗначениеЗаполнено(Строка.КоличествоДемпфер) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите количество демпферов.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если НЕ БезФасада И НЕ ЗначениеЗаполнено(Строка.Петли) И ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) И НЕ ПазыОтсутствуют И НЕ Строка.БезПетель Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите петли.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если НЕ БезФасада И ЗначениеЗаполнено(Строка.Петли) И НЕ ЗначениеЗаполнено(Строка.КоличествоПетель) И НЕ Строка.БезПетель Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите количество петель.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если НЕ БезФасада И ЗначениеЗаполнено(Строка.Петли) И НЕ ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) И НЕ Строка.БезПетель Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите расположение петель.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
				Иначе

					Если НЕ ЗначениеЗаполнено(Строка.СхемаЯщика) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите вид ящика.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Строка.МеханизмЭлемента) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите механизм ящика.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Строка.НоменклатураЭлемента) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите номенклатуру ящика.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Строка.ТорцовкаЭлемента) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите торцовку ящика.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если (ДанныеДеталиФасад.ЭтоФасад И ДанныеДеталиФасад.ЭтоСтекло) Тогда
						ТекстСообщения = "Данный вид фасада недоступен для ящика.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Строка.ДноЯщика) Тогда
					
						ЕстьДно = Ложь;
						
						Для Каждого Стр ИЗ Строка.СхемаЯщика.Детали Цикл
							
							Если Стр.Тип = Перечисления.ВидыДеталейЯщиков.Дно Тогда
								ЕстьДно = Истина;
								Прервать;
							КонецЕсли;
							
						КонецЦикла;

						Если ЕстьДно Тогда
							ТекстСообщения = НомерФасадаСтрока + "Укажите дно ящика.";
							ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Элемент.Мойка) Тогда
				Если Элемент.Мойка.ШиринаДетали + 70 > Элемент.ШиринаИзделия Тогда
					ТекстСообщения = НомерИзделияСтрока + "Мойка не подходит по ширине. Выберите другую.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				Если Элемент.Мойка.ГлубинаДетали + 70 > Элемент.ГлубинаИзделия Тогда
					ТекстСообщения = НомерИзделияСтрока + "Мойка не подходит по глубине. Выберите другую.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если Элемент.ЕстьСтолешница И НЕ ЗначениеЗаполнено(Элемент.НоменклатураСтолешница) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не выбрана номенклатура Столешницы.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьКромкаСтолешница И НЕ ЗначениеЗаполнено(Элемент.КромкаСтолешница) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не выбрана кромка Столешницы.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьЛДСП Тогда
				Если НЕ ЗначениеЗаполнено(Элемент.НоменклатураЛДСП) Тогда
					ТекстСообщения = НомерИзделияСтрока + "Не выбрана номенклатура ЛДСП.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Элемент.КромкаЛДСП) Тогда
					ТекстСообщения = НомерИзделияСтрока + "Не выбрана кромка ЛДСП.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если Элемент.ЕстьЛДСПДоп Тогда
				Если НЕ ЗначениеЗаполнено(Элемент.НоменклатураЛДСПДоп) Тогда
					ТекстСообщения = НомерИзделияСтрока + "Не выбрана номенклатура ЛДСП Дополнительная.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Элемент.КромкаЛДСПДоп) Тогда
					ТекстСообщения = НомерИзделияСтрока + "Не выбрана кромка ЛДСП Дополнительная.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если Элемент.ЕстьКлееная И НЕ ЗначениеЗаполнено(Элемент.НоменклатураДляСклеивания) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не выбрана номенклатура для склейки.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьНожки И НЕ ЗначениеЗаполнено(Элемент.Ножки) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не выбраны ножки.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьСтекло И НЕ ЗначениеЗаполнено(Элемент.НоменклатураСтекло) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не выбрано стекло.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если (Элемент.ЕстьДВП ИЛИ Элемент.Изделие.СписокЯщики.Количество() > 0) И НЕ ЗначениеЗаполнено(Элемент.НоменклатураДВП) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не выбрана ДВП.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьМДФ И НЕ ЗначениеЗаполнено(Элемент.НоменклатураМДФ) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не выбрана МДФ.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьМДФ И НЕ ЗначениеЗаполнено(Элемент.КромкаМДФ) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не заполнена кромка для МДФ.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);

	Иначе
		
		Стр = Новый Структура;
		Стр.Вставить("Детали", ПоместитьВоВременноеХранилище(Детали.Выгрузить()));
		Стр.Вставить("Фасады", ПоместитьВоВременноеХранилище(ТаблицаФасадов.Выгрузить()));
		Стр.Вставить("Модифицированность", Модифицированность);
		
		Возврат Стр;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ 

&НаКлиенте
Процедура ДеталиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(МассивДанныхДетали) Тогда
			МассивДанныхДетали = Новый Массив;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(МассивДанныхСхемы) Тогда
			МассивДанныхСхемы = Новый Массив;	
		КонецЕсли;

		Если (ТекущиеДанные <> Неопределено) Тогда
			
			НастройкиИзделия(ТекущиеДанные);
			
			МассивОсновныхНастроек = Новый Массив;
			
			МассивОсновныхНастроек.Добавить("НоменклатураЛДСП");
			МассивОсновныхНастроек.Добавить("КромкаЛДСП");
			МассивОсновныхНастроек.Добавить("НоменклатураЛДСПДоп");
			МассивОсновныхНастроек.Добавить("КромкаЛДСПДоп");
			МассивОсновныхНастроек.Добавить("НоменклатураДВП");
			МассивОсновныхНастроек.Добавить("НоменклатураДляСклеивания");
			МассивОсновныхНастроек.Добавить("Ручка");
			МассивОсновныхНастроек.Добавить("НоменклатураСтекло");
			МассивОсновныхНастроек.Добавить("НоменклатураМДФ");
			МассивОсновныхНастроек.Добавить("КромкаМДФ");
			МассивОсновныхНастроек.Добавить("КромкаСтолешница");
			МассивОсновныхНастроек.Добавить("ВидДеталиФасад");
			МассивОсновныхНастроек.Добавить("НоменклатураФасада");
			МассивОсновныхНастроек.Добавить("ДопНоменклатураФасада");
			МассивОсновныхНастроек.Добавить("ДопСклейкаФасада");
			МассивОсновныхНастроек.Добавить("КромкаФасада");
			
			Для Каждого ЭлементМассива Из МассивОсновныхНастроек Цикл
				Если НЕ ЗначениеЗаполнено(ТекущиеДанные[ЭлементМассива]) И ЗначениеЗаполнено(ШапкаОсновныхНастроек[ЭлементМассива]) Тогда
					ТекущиеДанные[ЭлементМассива] = ШапкаОсновныхНастроек[ЭлементМассива];
				ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные[ЭлементМассива]) Тогда
					ШапкаОсновныхНастроек.Вставить(ЭлементМассива, ТекущиеДанные[ЭлементМассива]);
				КонецЕсли;
			КонецЦикла;
			
			УстановитьОтборТаблицаФасадов(ТекущиеДанные.UID);
		
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзделиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.UID) Тогда
		
		УдалитьСтрокиФасадов(ТекущиеДанные.UID);
		
	Иначе
		
		ТекущиеДанные.UID = Новый УникальныйИдентификатор;
		
	КонецЕсли;
	
	СтруктураИзделия = ПолучитьСтруктуруИзделия(ТекущиеДанные.Изделие, Подразделение, Серийное, Истина, ОбщаяНоменклатура);
	
	Если ЗначениеЗаполнено(СтруктураИзделия) Тогда
		
		ТекущиеДанные.КодИзделия = СтруктураИзделия.КодИзделия;
		ТекущиеДанные.Расположение = СтруктураИзделия.Расположение;
		ТекущиеДанные.ГлубинаИзделия = СтруктураИзделия.ГлубинаИзделия;
		ТекущиеДанные.ШиринаИзделия = СтруктураИзделия.ШиринаИзделия;
		ТекущиеДанные.ВысотаИзделия = СтруктураИзделия.ВысотаИзделия;
		ТекущиеДанные.ВысотаИзделия2 = СтруктураИзделия.ВысотаИзделия2;
		ТекущиеДанные.ВысотаИзделия3 = СтруктураИзделия.ВысотаИзделия3;
		ТекущиеДанные.ГлубинаИзделияМин = СтруктураИзделия.ГлубинаИзделияМин;
		ТекущиеДанные.ШиринаИзделияМин = СтруктураИзделия.ШиринаИзделияМин;
		ТекущиеДанные.ВысотаИзделияМин = СтруктураИзделия.ВысотаИзделияМин;
		ТекущиеДанные.ВысотаИзделияМин2 = СтруктураИзделия.ВысотаИзделияМин2;
		ТекущиеДанные.ВысотаИзделияМин3 = СтруктураИзделия.ВысотаИзделияМин3;
		ТекущиеДанные.ГлубинаИзделияМакс = СтруктураИзделия.ГлубинаИзделияМакс;
		ТекущиеДанные.ШиринаИзделияМакс = СтруктураИзделия.ШиринаИзделияМакс;
		ТекущиеДанные.ВысотаИзделияМакс = СтруктураИзделия.ВысотаИзделияМакс;
		ТекущиеДанные.ВысотаИзделияМакс2 = СтруктураИзделия.ВысотаИзделияМакс2;
		ТекущиеДанные.ВысотаИзделияМакс3 = СтруктураИзделия.ВысотаИзделияМакс3;
		ТекущиеДанные.Шаг = СтруктураИзделия.Шаг;
		ТекущиеДанные.ЕвропазДоступен = СтруктураИзделия.ЕвропазДоступен;
		ТекущиеДанные.ЭтоПенал = СтруктураИзделия.ЭтоПенал;
		ТекущиеДанные.ЕстьЛДСП = СтруктураИзделия.ЕстьЛДСП;
		ТекущиеДанные.ЕстьЛДСПДоп = СтруктураИзделия.ЕстьЛДСПДоп;
		ТекущиеДанные.ЕстьКлееная = СтруктураИзделия.ЕстьКлееная;
		ТекущиеДанные.ЕстьМДФ = СтруктураИзделия.ЕстьМДФ;
		ТекущиеДанные.ЕстьСтекло = СтруктураИзделия.ЕстьСтекло;
		ТекущиеДанные.ЕстьДВП = СтруктураИзделия.ЕстьДВП;
		ТекущиеДанные.ЕстьМойка = СтруктураИзделия.ЕстьМойка;
		ТекущиеДанные.ЕстьСушка = СтруктураИзделия.ЕстьСушка;
		ТекущиеДанные.ЕстьСтолешница = СтруктураИзделия.ЕстьСтолешница;
		ТекущиеДанные.ЕстьКромкаСтолешница = СтруктураИзделия.ЕстьКромкаСтолешница;
		ТекущиеДанные.ЕстьНожки = СтруктураИзделия.ЕстьНожки;
		ТекущиеДанные.Мойка = СтруктураИзделия.НоменклатураМойка;
		ТекущиеДанные.Сушка = СтруктураИзделия.НоменклатураСушка;
		ТекущиеДанные.Ножки = СтруктураИзделия.Ножки;
		ТекущиеДанные.НоменклатурнаяГруппаСушка = СтруктураИзделия.НоменклатурнаяГруппаСушка;
		ТекущиеДанные.Сборка = СтруктураИзделия.ЕстьУслугаСборки;
		ТекущиеДанные.Европаз = 8;
		ТекущиеДанные.Столешница = 38;
		
		ТекущиеДанные.УгловоеИзделие = СтруктураИзделия.УгловоеИзделие;
		
		ТекущиеДанные.ШиринаДоп = СтруктураИзделия.ШиринаДоп;
		ТекущиеДанные.ШиринаДопМин = СтруктураИзделия.ШиринаДопМин;
		ТекущиеДанные.ШиринаДопМакс = СтруктураИзделия.ШиринаДопМакс;

		ТекущиеДанные.ГлубинаДоп = СтруктураИзделия.ГлубинаДоп;
		ТекущиеДанные.ГлубинаДопМин = СтруктураИзделия.ГлубинаДопМин;
		ТекущиеДанные.ГлубинаДопМакс = СтруктураИзделия.ГлубинаДопМакс;
		
		Для Индекс = 1 По СтруктураИзделия.КоличествоТаблицаФасадов Цикл
			
			Строка = ТаблицаФасадов.Добавить();
			
			Строка.sUID = ТекущиеДанные.UID;
			Строка.НомерСтр = Индекс;
			Строка.ВидЭлемента = СтруктураИзделия["ТаблицаФасадов" + Индекс];
			Строка.ИмяФасада = СтруктураИзделия["ТаблицаФасадов" + Индекс + "Имя"];
			Строка.ВидДеталиФасад = СтруктураИзделия["ТаблицаФасадов" + Индекс + "ВидДеталиФасад"];
			Строка.ВидФасада = СтруктураИзделия["ТаблицаФасадов" + Индекс + "ВидФасада"];
			
			ДноНоменклатура = СтруктураИзделия["ТаблицаФасадов" + Индекс + "ДноНоменклатура"];
			Если ЗначениеЗаполнено(ДноНоменклатура) Тогда
				Строка.ДноЯщика = ЛексСервер.ПолучитьНоменклатуру(ОбщаяНоменклатура, ДноНоменклатура);	
			КонецЕсли;
			
			МеханизмФасада = СтруктураИзделия["ТаблицаФасадов" + Индекс + "МеханизмФасада"];
			Если ЗначениеЗаполнено(МеханизмФасада) Тогда
				Строка.МеханизмФасада = ЛексСервер.ПолучитьНоменклатуру(ОбщаяНоменклатура, МеханизмФасада);	
			КонецЕсли;

			Демпфер = СтруктураИзделия["ТаблицаФасадов" + Индекс + "Демпфер"];
			Если ЗначениеЗаполнено(Демпфер) Тогда
				Строка.Демпфер = ЛексСервер.ПолучитьНоменклатуру(ОбщаяНоменклатура, Демпфер); 
			КонецЕсли;
			
			Петли = СтруктураИзделия["ТаблицаФасадов" + Индекс + "Петли"];
			Если ЗначениеЗаполнено(Петли) Тогда
				Строка.Петли = ЛексСервер.ПолучитьНоменклатуру(ОбщаяНоменклатура, Петли); 
			КонецЕсли;
			
			Строка.КоличествоМеханизмФасада = СтруктураИзделия["ТаблицаФасадов" + Индекс + "КоличествоМеханизмФасада"];
			Строка.КоличествоДемпфер = СтруктураИзделия["ТаблицаФасадов" + Индекс + "КоличествоДемпфер"];
			Строка.РасположениеПазовИРучкиНаФасадах = СтруктураИзделия["ТаблицаФасадов" + Индекс + "РасположениеПазовИРучкиНаФасадах"];
			Строка.НомерДетали = СтруктураИзделия["ТаблицаФасадов" + Индекс + "НомерДетали"];
			Строка.КоличествоПетель = СтруктураИзделия["ТаблицаФасадов" + Индекс + "КоличествоПетель"];
			Строка.ЕстьРучка = СтруктураИзделия["ТаблицаФасадов" + Индекс + "ЕстьРучка"];
			
			Строка.ДопЭлемент = ?(СтруктураИзделия.Свойство("Бутылочница"), СтруктураИзделия.Бутылочница, Неопределено);
			
			стСхемаЯщика = СтруктураИзделия["ТаблицаФасадов" + Индекс + "СхемаЯщика"];
			ДанныеСхемы = Неопределено;
			
			Если ЗначениеЗаполнено(стСхемаЯщика) Тогда
				
				Строка.СхемаЯщика = стСхемаЯщика;
				
				ДанныеСхемы = ПолучитьДанныеСхемы(Строка.СхемаЯщика);		
				НомГруппы = ПолучитьНомГруппыЯщик("Направляющие", ДанныеСхемы);
				
				Если НомГруппы.Количество() > 0 Тогда
					Строка.МеханизмЭлемента = НомГруппы[0].Значение;
				Иначе
					Строка.МеханизмЭлемента = Неопределено;
				КонецЕсли;
				
			Иначе
				
				Строка.СхемаЯщика = Неопределено;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.ВидДеталиФасад) Тогда
				Строка.ВидДеталиФасад = ШапкаОсновныхНастроек.ВидДеталиФасад;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.ДопСклейкаФасада) Тогда
				Строка.ДопСклейкаФасада = ШапкаОсновныхНастроек.ДопСклейкаФасада;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.ДопНоменклатураФасада) Тогда
				Строка.ДопНоменклатураФасада = ШапкаОсновныхНастроек.ДопНоменклатураФасада;
			КонецЕсли;

			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураФасада) Тогда
				Строка.НоменклатураФасада = ШапкаОсновныхНастроек.НоменклатураФасада;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.КромкаФасада) Тогда
				Строка.ОбрамлениеФасада = ШапкаОсновныхНастроек.КромкаФасада;
			КонецЕсли;
			
			Если Строка.ВидЭлемента = "Ящик" Тогда
				
				Если ЗначениеЗаполнено(ДанныеСхемы) Тогда
					
					Подходит = Ложь;
					
					Для Каждого Стр ИЗ ДанныеСхемы.Фасады Цикл
						Если Стр.Значение.Группа = Строка.ВидДеталиФасад Тогда
							
							Подходит = Истина;
							Прервать;
							
						КонецЕсли;							
					КонецЦикла;
					
					Если НЕ Подходит Тогда

						Строка.ВидДеталиФасад = Неопределено;
						Строка.НоменклатураФасада = Неопределено;
						Строка.Обрамлениефасада = Неопределено;
						
					КонецЕсли;
				КонецЕсли;
				
				
				Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураЛДСП) Тогда
					Строка.НоменклатураЭлемента = ШапкаОсновныхНастроек.НоменклатураЛДСП;
				КонецЕсли;
				Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.КромкаЛДСП) Тогда
					Строка.ТорцовкаЭлемента = ШапкаОсновныхНастроек.КромкаЛДСП;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
		
		УстановитьОтборТаблицаФасадов(ТекущиеДанные.UID);
		
		НастройкиИзделия(ТекущиеДанные);
		
		Ручка = ТекущиеДанные.Ручка;
		УстановитьПараметрФасада(Ручка, "НоменклатураРучки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовНоменклатуры(Статус)
	
	ДоступностьГруппыФормы(Элементы.Размеры,Статус);
	ДоступностьГруппыФормы(Элементы.ГруппаНоменклатура,Статус);
	ДоступностьГруппыФормы(Элементы.Фасад,Статус);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьГруппыФормы(Группа, Доступность)
	
	ПЭлементы = Группа.ПодчиненныеЭлементы;
	
	Если ПЭлементы.Количество() > 0 Тогда
		
		Для Каждого Элемент ИЗ ПЭлементы Цикл
			
			Если Тип(Элемент) = Тип("ГруппаФормы") Тогда
				ДоступностьГруппыФормы(Элемент, Доступность)	
			Иначе
				Элемент.Доступность = Доступность;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИзделия(ДанныеИзделия)
	
	Если ДанныеИзделия <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИзделия.Изделие) Тогда
			
			ВидимостьЭлементовНоменклатуры(Истина);
			
			Элементы.ВысотаИзделия.Подсказка = Строка(ДанныеИзделия.ВысотаИзделияМин) + " - " + Строка(ДанныеИзделия.ВысотаИзделияМакс);
			Элементы.ВысотаИзделия.МаксимальноеЗначение = ДанныеИзделия.ВысотаИзделияМакс;
			Элементы.ВысотаИзделия.МинимальноеЗначение = ДанныеИзделия.ВысотаИзделияМин;
			
			Если ДанныеИзделия.ЭтоПенал Тогда
				
				Элементы.ВысотаИзделия2.Подсказка = Строка(ДанныеИзделия.ВысотаИзделияМин2) + " - " + Строка(ДанныеИзделия.ВысотаИзделияМакс2);
				Элементы.ВысотаИзделия2.МаксимальноеЗначение = ДанныеИзделия.ВысотаИзделияМакс2;
				Элементы.ВысотаИзделия2.МинимальноеЗначение = ДанныеИзделия.ВысотаИзделияМин2;
				
				Элементы.ВысотаИзделия3.Подсказка = Строка(ДанныеИзделия.ВысотаИзделияМин3) + " - " + Строка(ДанныеИзделия.ВысотаИзделияМакс3);
				Элементы.ВысотаИзделия3.МаксимальноеЗначение = ДанныеИзделия.ВысотаИзделияМакс3;
				Элементы.ВысотаИзделия3.МинимальноеЗначение = ДанныеИзделия.ВысотаИзделияМин3;
					
			КонецЕсли;
			
			Элементы.ГлубинаИзделия.Подсказка = Строка(ДанныеИзделия.ГлубинаИзделияМин) + " - " + Строка(ДанныеИзделия.ГлубинаИзделияМакс);
			Элементы.ГлубинаИзделия.МаксимальноеЗначение = ДанныеИзделия.ГлубинаИзделияМакс;
			Элементы.ГлубинаИзделия.МинимальноеЗначение = ДанныеИзделия.ГлубинаИзделияМин;
			
			Элементы.ШиринаИзделия.Подсказка = Строка(ДанныеИзделия.ШиринаИзделияМин) + " - " + Строка(ДанныеИзделия.ШиринаИзделияМакс);
			
			Если ДанныеИзделия.Шаг > 1 Тогда
				Элементы.ШиринаИзделия.Подсказка = Элементы.ШиринаИзделия.Подсказка + " (шаг: " + Строка(ДанныеИзделия.Шаг) + ")";
			КонецЕсли;
			
			Элементы.ШиринаИзделия.МаксимальноеЗначение = ДанныеИзделия.ШиринаИзделияМакс;
			Элементы.ШиринаИзделия.МинимальноеЗначение = ДанныеИзделия.ШиринаИзделияМин;
			
			Элементы.ДеталиЕвропаз.Доступность = ДанныеИзделия.ЕвропазДоступен;
			
			Если Серийное Тогда
				
				  Элементы.ШиринаИзделия.Доступность = Ложь;
				  Элементы.ВысотаИзделия.Доступность = Ложь;
				  Элементы.ГлубинаИзделия.Доступность = Ложь;
				
			КонецЕсли;
			
			Если ДанныеИзделия.УгловоеИзделие Тогда
			
				Элементы.ШиринаИзделияДоп.Подсказка = Строка(ДанныеИзделия.ШиринаДопМин) + " - " + Строка(ДанныеИзделия.ШиринаДопМакс);
				Элементы.ШиринаИзделияДоп.МаксимальноеЗначение = ДанныеИзделия.ШиринаДопМакс;
				Элементы.ШиринаИзделияДоп.МинимальноеЗначение = ДанныеИзделия.ШиринаДопМин;
				
				Элементы.ГлубинаИзделияДоп.Подсказка = Строка(ДанныеИзделия.ГлубинаДопМин) + " - " + Строка(ДанныеИзделия.ГлубинаДопМакс);
				Элементы.ГлубинаИзделияДоп.МаксимальноеЗначение = ДанныеИзделия.ГлубинаДопМакс;
				Элементы.ГлубинаИзделияДоп.МинимальноеЗначение = ДанныеИзделия.ГлубинаДопМин;
			
			КонецЕсли;
			
			УстановитьВидимостьЭлементовФормы();
		
		Иначе
			
			ВидимостьЭлементовНоменклатуры(Ложь);
			
		КонецЕсли;
		
		ОтобразитьКартинку();
		
	Иначе
		
		ВидимостьЭлементовНоменклатуры(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьДопСклейкаФасада(ВидДетали)
	 Возврат ВидДетали.ОбязательноеПолеДопСклейка;
КонецФункции

&НаСервере
Функция ЕстьПластик(ВидДетали)
	 Возврат ВидДетали.Пластик;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	
	ДанныеИзделия = Элементы.Детали.ТекущиеДанные;	
	
	ЕстьФасады = ТаблицаФасадов.НайтиСтроки(Новый Структура("sUID", ДанныеИзделия.UID)).Количество() > 0;
	
	Элементы.ДеталиДопНоменклатураФасада.Видимость = ЕстьПластик(ДанныеИзделия.ВидДеталиФасад);
	Элементы.ДеталиДопСклейкаФасада.Видимость = ЕстьДопСклейкаФасада(ДанныеИзделия.ВидДеталиФасад);
	
	Элементы.ДеталиРучка.Видимость = ЕстьФасады;
	Элементы.ДеталиВидФасада.Видимость = ЕстьФасады;
	Элементы.ДеталиНоменклатураФасада.Видимость = ЕстьФасады;
	Элементы.ДеталиКромкаФасада.Видимость = ЕстьФасады;
	
	Элементы.ДеталиНоменклатураЛДСП.Видимость = ДанныеИзделия.ЕстьЛДСП;
	Элементы.ДеталиКромкаЛДСП.Видимость = ДанныеИзделия.ЕстьЛДСП;
	Элементы.ДеталиНоменклатураЛДСПДоп.Видимость = ДанныеИзделия.ЕстьЛДСПДоп;
	Элементы.ДеталиКромкаЛДСПДоп.Видимость = ДанныеИзделия.ЕстьЛДСПДоп;
	Элементы.ДеталиНоменклатураДляСклеивания.Видимость = ДанныеИзделия.ЕстьКлееная;
	Элементы.ДеталиНоменклатураМДФ.Видимость = ДанныеИзделия.ЕстьМДФ;
	Элементы.ДеталиКромкаМДФ.Видимость = ДанныеИзделия.ЕстьМДФ;
	Элементы.ДеталиНоменклатураСтекло.Видимость = ДанныеИзделия.ЕстьСтекло;
	Элементы.ДеталиНоменклатураДВП.Видимость = ДанныеИзделия.ЕстьДВП;
	Элементы.ДеталиМойка.Видимость = ДанныеИзделия.ЕстьМойка;
	Элементы.ДеталиСушка.Видимость = ДанныеИзделия.ЕстьСушка;
	Элементы.ДеталиНоменклатураСтолешница.Видимость = ДанныеИзделия.ЕстьСтолешница;
	Элементы.ДеталиКромкаСтолешница.Видимость = ДанныеИзделия.ЕстьКромкаСтолешница;
	Элементы.ДеталиНожки.Видимость = ДанныеИзделия.ЕстьНожки;
	
	Элементы.ШиринаИзделияДоп.Видимость = ДанныеИзделия.УгловоеИзделие;
	Элементы.ГлубинаИзделияДоп.Видимость = ДанныеИзделия.УгловоеИзделие;
	
	Элементы.ГруппаДопВысота.Видимость = ДанныеИзделия.ЭтоПенал;
	Элементы.РазмерыДоп.Видимость = НЕ ДанныеИзделия.ЭтоПенал; 
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаИзделияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Шаг > 0 Тогда
			Если (ТекущиеДанные.ШиринаИзделия - ТекущиеДанные.ШиринаИзделияМин) % ТекущиеДанные.Шаг <> 0 Тогда
				//Установим минимальное значение ширины короба
				ТекущиеДанные.ШиринаИзделия = ТекущиеДанные.ШиринаИзделияМин;
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Соблюдайте шаг %1, минимальное значение - %2 ", ТекущиеДанные.Шаг, ТекущиеДанные.ШиринаИзделияМин);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.ШиринаИзделия");
			Иначе
				Если ТекущиеДанные.ЕстьСушка Тогда
					ТекущиеДанные.Сушка = ПолучитьДопЭлемент(ТекущиеДанные.НоменклатурнаяГруппаСушка, ТекущиеДанные.ШиринаИзделия, Подразделение);
				КонецЕсли;

				Для Каждого Элемент Из ТаблицаФасадов Цикл
					Если ЗначениеЗаполнено(Элемент.ДопЭлемент) Тогда
						Элемент.ДопЭлемент = УстановитьДопЭлемент(Элемент.ДопЭлемент, ТекущиеДанные.ШиринаИзделия, Подразделение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьДопЭлемент(НоменклатураЭлемента, Ширина, Подразделение)
	
	НовыйЭлемент = НоменклатураЭлемента;
	Если НоменклатураЭлемента.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Бутылочница 
		ИЛИ НоменклатураЭлемента.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком Тогда
		НовыйЭлемент = ПолучитьДопЭлемент(Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком, Ширина, Подразделение);
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

&НаКлиенте
Процедура ДеталиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ЗаменаНоменклатуры") Тогда
		
		СтараяНоменклатура = ВыбранноеЗначение.Стараяноменклатура;
		НоваяНоменклатура = ВыбранноеЗначение.НоваяНоменклатура;
		Счетчик= 0;
		
		МассивПолей = Новый Массив;
		МассивПолей.Добавить("НоменклатураЛДСП");
		МассивПолей.Добавить("КромкаЛДСП");
		МассивПолей.Добавить("НоменклатураЛДСПДоп");
		МассивПолей.Добавить("КромкаЛДСПДоп");
		МассивПолей.Добавить("НоменклатураМДФ");
		МассивПолей.Добавить("КромкаМДФ");
		МассивПолей.Добавить("НоменклатураДляСклеивания");
		МассивПолей.Добавить("НоменклатураДВП");
		МассивПолей.Добавить("НоменклатураСтолешница");
		МассивПолей.Добавить("КромкаСтолешница");
		МассивПолей.Добавить("НоменклатураФасада");
		МассивПолей.Добавить("ДопНоменклатураФасада");
		МассивПолей.Добавить("ДопСклейкаФасада");
		МассивПолей.Добавить("КромкаФасада");
		МассивПолей.Добавить("Ручка");
			
		Для Каждого Строка ИЗ Детали Цикл
			Для Каждого Поле ИЗ МассивПолей Цикл
				Если Строка[Поле] = СтараяНоменклатура Тогда
					Строка[Поле] = НоваяНоменклатура;
					Счетчик = Счетчик +1;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		МассивПолей = Новый Массив;
		МассивПолей.Добавить("ДопНоменклатураФасада");
		МассивПолей.Добавить("ДопСклейкаФасада");
		МассивПолей.Добавить("НоменклатураФасада");
		МассивПолей.Добавить("ОбрамлениеФасада");
		МассивПолей.Добавить("НоменклатураРучки");
		МассивПолей.Добавить("Петли");
		МассивПолей.Добавить("НоменклатураЭлемента");
		МассивПолей.Добавить("ТорцовкаЭлемента");

		Для Каждого Строка ИЗ ТаблицаФасадов Цикл
			Для Каждого Поле ИЗ МассивПолей Цикл
				Если Строка[Поле] = СтараяНоменклатура Тогда
					Строка[Поле] = НоваяНоменклатура;
					Счетчик = Счетчик +1;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Сообщить("Изменено " + Счетчик + " значений.", СтатусСообщения.Важное);
		
		Для Каждого Свойство ИЗ ШапкаОсновныхНастроек Цикл
			Если ШапкаОсновныхНастроек[Свойство.Ключ] = СтараяНоменклатура Тогда
				ШапкаОсновныхНастроек[Свойство.Ключ] = НоваяНоменклатура;	
			КонецЕсли;
		КонецЦикла;
		
	Иначе
	
		ЗагрузитьТабличнуюЧасть(ВыбранноеЗначение);
		Детали.Сортировать("НовыйИндекс Возр");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураЛДСППриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	НоменклатураЛДСП = ТекущиеДанные.НоменклатураЛДСП;
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСП", НоменклатураЛДСП);
	
	Если ТекущиеДанные.ЕстьЛДСПДоп Тогда
		
		ТекущиеДанные.НоменклатураЛДСПДоп = НоменклатураЛДСП;
		ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСПДоп", ТекущиеДанные.НоменклатураЛДСПДоп);
		
	КонецЕсли;
	
	СтруктураПодставляяемойНоменклатуры = ЛексСервер.ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(НоменклатураЛДСП, Подразделение);
	ТекущиеДанные.КромкаЛДСП = СтруктураПодставляяемойНоменклатуры.Кромка045_19;
	УстановитьПараметрыКромки(ТекущиеДанные);
	
	УстановитьПараметрФасада(НоменклатураЛДСП, "НоменклатураЭлемента");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаЛДСППриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	УстановитьПараметрыКромки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыКромки(ТекущиеДанные)
	
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСП", ТекущиеДанные.КромкаЛДСП);
	
	УстановитьПараметрФасада(ТекущиеДанные.КромкаЛДСП, "ТорцовкаЭлемента");
	
	Если ТекущиеДанные.ЕстьЛДСПДоп Тогда
		
		ТекущиеДанные.КромкаЛДСПДоп = ТекущиеДанные.КромкаЛДСП;
		ШапкаОсновныхНастроек.Вставить("КромкаЛДСПДоп", ТекущиеДанные.КромкаЛДСПДоп);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураЛДСПДопПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	НоменклатураЛДСПДоп = ТекущиеДанные.НоменклатураЛДСПДоп;
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСПДоп", НоменклатураЛДСПДоп);
	
	СтруктураПодставляяемойНоменклатуры = ЛексСервер.ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(НоменклатураЛДСПДоп, Подразделение);
	ТекущиеДанные.КромкаЛДСПДоп = СтруктураПодставляяемойНоменклатуры.Кромка045_19;
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСПДоп", ТекущиеДанные.КромкаЛДСПДоп);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаЛДСПДопПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСПДоп", ТекущиеДанные.КромкаЛДСПДоп);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураСтеклоПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураСтекло", Элементы.Детали.ТекущиеДанные.НоменклатураСтекло);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураМДФПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураМДФ", Элементы.Детали.ТекущиеДанные.НоменклатураМДФ);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаМДФПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("КромкаМДФ", Элементы.Детали.ТекущиеДанные.КромкаМДФ);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураДВППриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("НоменклатураДВП", Элементы.Детали.ТекущиеДанные.НоменклатураДВП);

КонецПроцедуры

&НаКлиенте
Процедура ДеталиРучкаПриИзменении(Элемент)
	
	Ручка = Элементы.Детали.ТекущиеДанные.Ручка;
	ШапкаОсновныхНастроек.Вставить("Ручка", Ручка);
	
	УстановитьПараметрФасада(Ручка, "НоменклатураРучки");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураДляСклеиванияПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания", Элементы.Детали.ТекущиеДанные.НоменклатураДляСклеивания);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиВидФасадаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
		
	Элементы.ДеталиДопНоменклатураФасада.Видимость = ЕстьПластик(ТекущиеДанные.ВидДеталиФасад);
	Элементы.ДеталиДопСклейкаФасада.Видимость = ЕстьДопСклейкаФасада(ТекущиеДанные.ВидДеталиФасад);
	
	ВидДеталиФасад = ТекущиеДанные.ВидДеталиФасад;
	ШапкаОсновныхНастроек.Вставить("ВидДеталиФасад", ВидДеталиФасад);
	
	СтрокиФасадов = ТаблицаФасадов.НайтиСтроки(Новый Структура("sUID", ТекущиеДанные.UID));
	
	Для Каждого Строка Из СтрокиФасадов Цикл
		
		Если Строка.ВидЭлемента = "Ящик" Тогда
		
			Схема = ПолучитьДанныеСхемы(Строка.СхемаЯщика);
			Подходит = Ложь;
			
			Для Каждого Стр ИЗ Схема.Фасады Цикл
				
				Если Стр.Значение.Группа = ВидДеталиФасад Тогда
					
					Подходит = Истина;
					Прервать;
					
				КонецЕсли;	
				
			КонецЦикла;
			
			Если Подходит Тогда
				Строка.ВидДеталиФасад = ВидДеталиФасад;
			Иначе
				
				Строка.ВидДеталиФасад = Неопределено;
				Строка.НоменклатураФасада = Неопределено;
				Строка.Обрамлениефасада = Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			Строка.ВидДеталиФасад = ВидДеталиФасад;
			
		КонецЕсли;
	
	КонецЦикла;

	ТекущиеДанные.НоменклатураФасада = Неопределено;
	ТекущиеДанные.ДопНоменклатураФасада = Неопределено;
	ТекущиеДанные.ДопСклейкаФасада = Неопределено;
	ДеталиНоменклатураФасадаПриИзменении(Элемент);
	ТекущиеДанные.КромкаФасада = Неопределено;
	ДеталиКромкаФасадаПриИзменении(Элемент);
	
	ТаблицаФасадовПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураФасадаПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("НоменклатураФасада", Элементы.Детали.ТекущиеДанные.НоменклатураФасада);
	
	УстановитьПараметрФасада(Элементы.Детали.ТекущиеДанные.НоменклатураФасада, "НоменклатураФасада");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаФасадаПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("КромкаФасада", Элементы.Детали.ТекущиеДанные.КромкаФасада);
	
	УстановитьПараметрФасада(Элементы.Детали.ТекущиеДанные.КромкаФасада, "ОбрамлениеФасада");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиРасположениеПриИзменении(Элемент)
	
	ОтобразитьКартинку();
	
КонецПроцедуры

/////////////////////////////////////////////////НОВЫЕ ФАСАДЫ///////////////////////////////////////////////////////

&НаКлиенте
Процедура ТаблицаФасадовПриАктивизацииСтроки(Элемент = Неопределено)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда

		ДанныеТаблицаФасадов = Элементы.ТаблицаФасадов.ТекущиеДанные;
		
		Если ДанныеТаблицаФасадов <> Неопределено Тогда
			
			ЭтоЯщик = ДанныеТаблицаФасадов.ВидЭлемента = "Ящик";

			ДоступностьГруппыФормы(Элементы.ГруппаФасадыДоп1, (НЕ ЭтоЯщик) И (НЕ ДанныеТаблицаФасадов.БезФасада));
			ДоступностьГруппыФормы(Элементы.ГруппаФасадыДоп2, (НЕ ЭтоЯщик) И (НЕ ДанныеТаблицаФасадов.БезФасада));
			ДоступностьГруппыФормы(Элементы.ГруппаФасадыЯщик, ЭтоЯщик);
			ДоступностьГруппыФормы(Элементы.ГруппаФасадыМатериалЭлементы, НЕ ДанныеТаблицаФасадов.БезФасада);
			
			ЕстьПластик = ЕстьПластик(ДанныеТаблицаФасадов.ВидДеталиФасад);
			ЕстьДопСклейка = ЕстьДопСклейкаФасада(ДанныеТаблицаФасадов.ВидДеталиФасад);
			
			Элементы.ТаблицаФасадовДопСклейкаФасада.Доступность = ЕстьДопСклейка И НЕ ДанныеТаблицаФасадов.БезФасада;
			Элементы.ТаблицаФасадовДопНоменклатураФасада.Доступность = ЕстьПластик И НЕ ДанныеТаблицаФасадов.БезФасада;
			Элементы.ТаблицаФасадовНоменклатураФасада.Доступность = ?(ЭтоЯщик, НЕ ЕстьПластик, Истина);   
			
			Если ЭтоЯщик Тогда
				
				ДанныеСхемы = ПолучитьДанныеСхемы(ДанныеТаблицаФасадов.СхемаЯщика);
				Элементы.ТаблицаФасадовКриволинейныйВыпилПодРучку.Доступность = ДанныеСхемы.КриволинейныйВыпилПодРучку И (НЕ ДанныеТаблицаФасадов.БезФасада);
				
				НомГруппыДно = ПолучитьНомГруппыЯщик("Дно", ДанныеСхемы);
				Элементы.ТаблицаФасадовДноЯщика.Доступность = (НомГруппыДно.Количество() > 0);
				
			Иначе
				Элементы.ТаблицаФасадовКриволинейныйВыпилПодРучку.Доступность = Ложь;
			КонецЕсли;
			
			Элементы.ТаблицаФасадовПетли.Доступность = НЕ ЭтоЯщик И НЕ ДанныеТаблицаФасадов.БезПетель И НЕ ДанныеТаблицаФасадов.БезФасада;
			Элементы.ТаблицаФасадовКоличествоПетель.Доступность = НЕ ЭтоЯщик И НЕ ДанныеТаблицаФасадов.БезПетель И НЕ ДанныеТаблицаФасадов.БезФасада;
			
			Элементы.ТаблицаФасадовРасположениеПазовИРучкиНаФасадах.Доступность = НЕ ЭтоЯщик И НЕ ДанныеТаблицаФасадов.БезФасада;
			Элементы.ТаблицаФасадовБезПетель.Доступность = НЕ ЭтоЯщик И НЕ ДанныеТаблицаФасадов.БезФасада;
			Элементы.ТаблицаФасадовБезРучки.Доступность = НЕ ДанныеТаблицаФасадов.БезФасада;

			Элементы.ТаблицаФасадовНоменклатураРучки.Доступность = (НЕ ДанныеТаблицаФасадов.БезФасада И НЕ ДанныеТаблицаФасадов.БезРучки) И ?(ЭтоЯщик, НЕ ДанныеТаблицаФасадов.КриволинейныйВыпилПодРучку, Истина);	
			Элементы.ТаблицаФасадовМежцентровоеРасстояние.Доступность = (НЕ ДанныеТаблицаФасадов.БезФасада И ДанныеТаблицаФасадов.БезРучки); 
			
			ЭтоФасадСМежцентровымРасстоянием = ПроверитьФасадСМежцентровымРасстоянием(ДанныеТаблицаФасадов.ВидДеталиФасад);			
			Элементы.ТаблицаФасадовМежцентровоеРасстояние.Доступность = ЭтоФасадСМежцентровымРасстоянием И ДанныеТаблицаФасадов.БезРучки;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьФасадСМежцентровымРасстоянием(Вид)

	Найден = Ложь;
	
	Для Каждого Эл Из ФасадыСМежцентровымРасстоянием Цикл
		
		Если Эл.Значение = Вид Тогда
			Найден = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Найден;
	
Конецфункции	
	
&НаКлиенте
Процедура ТаблицаФасадовВидФасадаПриИзменении(Элемент)
	
	ДанныеТаблицаФасадов = Элементы.ТаблицаФасадов.ТекущиеДанные;
	ДанныеТаблицаФасадов.НоменклатураФасада = Неопределено;
	ДанныеТаблицаФасадов.ОбрамлениеФасада = Неопределено;
	ДанныеТаблицаФасадов.ДопНоменклатураФасада = Неопределено;
	ДанныеТаблицаФасадов.ДопСклейкаФасада = Неопределено;
	
	ТаблицаФасадовПриАктивизацииСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовВыдвижнойЭлементПриИзменении(Элемент)
	
	ДанныеТаблицаФасадов = Элементы.ТаблицаФасадов.ТекущиеДанные;
	
	Если ДанныеТаблицаФасадов <> Неопределено Тогда
		
		ДанныеТаблицаФасадов.КриволинейныйВыпилПодРучку = Ложь;
		ДанныеТаблицаФасадов.ДноЯщика = Неопределено;
		
		ДанныеСхемы = ПолучитьДанныеСхемы(ДанныеТаблицаФасадов.СхемаЯщика);		
		НомГруппы = ПолучитьНомГруппыЯщик("Направляющие", ДанныеСхемы);
		ВидДеталиФасад = ДанныеТаблицаФасадов.ВидДеталиФасад;
		
		Если НомГруппы.Количество() > 0 Тогда
			ДанныеТаблицаФасадов.МеханизмЭлемента = НомГруппы[0].Значение;
		Иначе
			ДанныеТаблицаФасадов.МеханизмЭлемента = Неопределено;
		КонецЕсли;
		
		Подходит = Ложь;
		
		Для Каждого Стр ИЗ ДанныеСхемы.Фасады Цикл
			
			Если Стр.Значение.Группа = ВидДеталиФасад Тогда
				
				Подходит = Истина;
				Прервать;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Если НЕ Подходит Тогда
			
			ДанныеТаблицаФасадов.ВидДеталиФасад = Неопределено;
			ДанныеТаблицаФасадов.НоменклатураФасада = Неопределено;
			ДанныеТаблицаФасадов.ОбрамлениеФасада = Неопределено;
			
		КонецЕсли;
		
		ТаблицаФасадовПриАктивизацииСтроки();
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомГруппыНаправляющие(СхемаЯщика)
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы = СхемаЯщика.Направляющие.ВыгрузитьКолонку("Группа");
	
	Возврат НомГруппы;
	
КонецФункции
 
&НаКлиенте
Процедура ДеталиПриИзменении(Элемент)
	
	Для Каждого Элемент Из Детали Цикл
		
		Элемент.НовыйИндекс = Детали.Индекс(Элемент) + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбора(НомГруппы, ЭлементФормы)
	
	Пар = Новый Структура();
	Пар.Вставить("НомГруппы", НомГруппы);
	Пар.Вставить("Подразделение", Подразделение);
	Пар.Вставить("Офис",Офис);
	
	Если Дилерский Тогда
		Пар.Вставить("Контрагент",Контрагент);
	КонецЕсли;

	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", Пар, ЭлементФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураЛДСПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.ЛДСП16);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаЛДСПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиКромкаЛДСП();
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомГруппыДеталиКромкаЛДСП()
	
	НомГруппы = Новый СписокЗначений;
	
	НомГруппы.Добавить(МассивНомГрупп.Кромка045_19);
	НомГруппы.Добавить(МассивНомГрупп.Кромка2_19);
	НомГруппы.Добавить(МассивНомГрупп.Кромка2_35);
	НомГруппы.Добавить(МассивНомГрупп.КантТ);
	НомГруппы.Добавить(МассивНомГрупп.КромкаМДФ);
	НомГруппы.Добавить(МассивНомГрупп.КантАлюминиевый);
	
	Возврат НомГруппы;
	
КонецФункции

&НаКлиенте
Процедура ДеталиНоменклатураЛДСПДопНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.ЛДСП16);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаЛДСПДопНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	НомГруппы = ПолучитьНомГруппыДеталиКромкаЛДСП();	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураСтеклоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиНоменклатураСтекло();
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомГруппыДеталиНоменклатураСтекло()
	
	НомГруппы = Новый СписокЗначений;
	
	НомГруппы.Добавить(МассивНомГрупп.Стекло);
	НомГруппы.Добавить(МассивНомГрупп.СтеклоДляСкругляемогоФасада);
	НомГруппы.Добавить(МассивНомГрупп.Зеркало);
	
	Возврат НомГруппы;
	
КонецФункции

&НаКлиенте
Процедура ДеталиНоменклатураДляСклеиванияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.ЛДСП16);
	НомГруппы.Добавить(МассивНомГрупп.Пластик);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураМДФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.МДФ18);
	НомГруппы.Добавить(МассивНомГрупп.Пластик);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаМДФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиКромкаМДФ();
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомГруппыДеталиКромкаМДФ()
	
	НомГруппы = Новый СписокЗначений;
	
	НомГруппы.Добавить(МассивНомГрупп.КромкаМДФ);
	НомГруппы.Добавить(МассивНомГрупп.КантАлюминиевый);
	
	Возврат НомГруппы;
	
КонецФункции

&НаКлиенте
Процедура ДеталиНоменклатураДВПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.ДВП);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидДеталиФасад = Элементы.Детали.ТекущиеДанные.ВидДеталиФасад;
	ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДеталиФасад,"Текстура",Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидДеталиФасад = Элементы.Детали.ТекущиеДанные.ВидДеталиФасад;
	ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДеталиФасад,"КантК,Кромка045,Кромка2,Окантовка",Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиРучкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.Ручка);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНожкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.КухонныеНожки);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиМойкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.Мойка);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиСушкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиСушка();
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомГруппыДеталиСушка()
	
	НомГруппы = Новый СписокЗначений;
	
	НомГруппы.Добавить(МассивНомГрупп.Сушка);
	НомГруппы.Добавить(МассивНомГрупп.СушкаДляКоробаСДном);
	НомГруппы.Добавить(МассивНомГрупп.СушкаДляКоробаБезДна);
	
	Возврат НомГруппы;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаФасадовРасположениеПазовИРучкиНаФасадахОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураРасположенияПазовИРучки = РасположениеПазовОбработкаВыбораНаСервере(ВыбранноеЗначение);
	ТекущиеДанные = Элементы.ТаблицаФасадов.ТекущиеДанные;
	ТекущиеДанные.РасположениеПазовИРучкиНаФасадах = СтруктураРасположенияПазовИРучки.ЭлементСправочника;
	ТекущиеДанные.ЕстьРучка = СтруктураРасположенияПазовИРучки.ЕстьРучка;
	
	НетПазов = ПроверитьПазы(СтруктураРасположенияПазовИРучки.ЭлементСправочника);
	
	Если НетПазов Тогда
		ТекущиеДанные.Петли = Неопределено;
		ТекущиеДанные.КоличествоПетель = 0;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьПазы(Расположение)
	
	Возврат Расположение.ПоложениеПазов = Перечисления.Стороны.Отсутствует; 
	
КонецФункции


&НаСервере
Функция РасположениеПазовОбработкаВыбораНаСервере(ЗначениеСправочника)
	
	СтруктураРасположенияПазовИРучки = Новый Структура;
	ЭлементСправочника = Справочники.РасположениеПазовИРучкиНаФасадах.НайтиПоРеквизиту("ИмяКартинки", ЗначениеСправочника);
	СтруктураРасположенияПазовИРучки.Вставить("ЕстьРучка", НЕ ЭлементСправочника.БезРучки);
	СтруктураРасположенияПазовИРучки.Вставить("ЭлементСправочника", ЭлементСправочника);
	Возврат СтруктураРасположенияПазовИРучки;
	
КонецФункции

&НаКлиенте
Процедура ДеталиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Копирование И НЕ Отказ Тогда
		ТекущиеДанные.Копирование = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступныеВидыИзделий(Изделие)
	
	Мас = Новый Массив();
	
	Для Каждого Стр ИЗ Изделие.ДоступныеВидыИзделий Цикл
		Мас.Добавить(Стр.Вид);
	КонецЦикла;
	
	Возврат Мас;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаФасадовМеханизмЭлементаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеТаблицаФасадов = Элементы.ТаблицаФасадов.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ДанныеТаблицаФасадов.СхемаЯщика) Тогда
		
		ДанныеСхемы = ПолучитьДанныеСхемы(ДанныеТаблицаФасадов.СхемаЯщика);		
		НомГруппы = ПолучитьНомГруппыЯщик("Направляющие", ДанныеСхемы);
		ДанныеВыбора = НомГруппы;

	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

&НаСервереБезКонтекста
Функция ПолучитьДанныеДеталиСервер(ТипДетали)
	
	Стр = Новый Структура;
	
	НомГруппы = Новый СписокЗначений;
	
	Для Каждого Эл Из ТипДетали.НоменклатурныеГруппы Цикл
		
		Стр2 = Новый Структура;
		Стр2.Вставить("ПолеВыбора", Эл.ПолеВыбора);
		Стр2.Вставить("Группа", Эл.Группа);

		НомГруппы.Добавить(Стр2);	
		
	КонецЦикла;
	
	Стр.Вставить("НомГруппы", НомГруппы);
	
	СтрДоступность = Новый Структура;
	
	Для Каждого Рек Из Метаданные.Справочники.ВидыДеталей.Реквизиты Цикл

		Если Лев(Рек.Имя,15) = "ДоступностьПоля" Тогда
			
			СтрДоступность.Вставить(Рек.Имя,ТипДетали[Рек.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;

	Стр.Вставить("ДоступностьПолей", СтрДоступность);
	
	СтрОбязательныеПоля = Новый Структура;
	
	Для Каждого Рек Из Метаданные.Справочники.ВидыДеталей.Реквизиты Цикл

		Если Лев(Рек.Имя,16) = "ОбязательноеПоле" Тогда
			
			СтрОбязательныеПоля.Вставить(Рек.Имя,ТипДетали[Рек.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;

	Стр.Вставить("ОбязательныеПоля", СтрОбязательныеПоля);
	
	Стр.Вставить("ВидДетали", ТипДетали);
	Стр.Вставить("Клееная", ТипДетали.Клееная);
	Стр.Вставить("ОбтачиватьПоУмолчанию", ТипДетали.ОбтачиватьПоУмолчанию);
	Стр.Вставить("ИспользоватьСоответствиеНоменклатуры", ТипДетали.ИспользоватьСоответствиеНоменклатуры);
	Стр.Вставить("СпецФасад", ТипДетали.СпецФасад);
	Стр.Вставить("ПрипускСклейка", ТипДетали.ПрипускСклейка);
	Стр.Вставить("ПрипускПостформинг", ТипДетали.ПрипускПостформинг);
	Стр.Вставить("ЭтоФасад", ТипДетали.ЭтоФасад);
	Стр.Вставить("ЭтоСтолешница", ТипДетали.ЭтоСтолешница);
	Стр.Вставить("ЭтоСтекло", ТипДетали.ЭтоСтекло);
	Стр.Вставить("МинимальнаяШирина", ТипДетали.МинимальнаяШирина);
	Стр.Вставить("МинимальнаяВысота", ТипДетали.МинимальнаяВысота);

	
	Возврат Стр;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеДетали(ТипДетали)
	
	ЕстьДанные = Ложь;
	Результат = Неопределено;
	
	Для Каждого Эл Из МассивДанныхДетали Цикл
		
		Если Эл.ТипДетали = ТипДетали Тогда
			
			Результат = Эл.ДанныеДетали;
			ЕстьДанные = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьДанные Тогда
		
		 Результат = ПолучитьДанныеДеталиСервер(ТипДетали);
		 
		 Стр = Новый Структура();
		 Стр.Вставить("ТипДетали", ТипДетали);
		 Стр.Вставить("ДанныеДетали", Результат);
		 
		 МассивДанныхДетали.Добавить(Стр);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеСхемы(СхемаДетали)
	
	ЕстьДанные = Ложь;
	Результат = Неопределено;
	
	Для Каждого Эл Из МассивДанныхСхемы Цикл
		
		Если Эл.СхемаДетали = СхемаДетали Тогда
			
			Результат = Эл.ДанныеСхемы;
			ЕстьДанные = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьДанные Тогда
		
		 Результат = ПолучитьДанныеСхемыСервер(СхемаДетали);
		 
		 Стр = Новый Структура();
		 Стр.Вставить("СхемаДетали", СхемаДетали);
		 Стр.Вставить("ДанныеСхемы", Результат);
		 
		 МассивДанныхСхемы.Добавить(Стр);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеСхемыСервер(Схема)
	
	Стр = Новый Структура;
	
	Стр.Вставить("Схема", Схема);
	Стр.Вставить("КриволинейныйВыпилПодРучку", Схема.КриволинейныйВыпилПодРучку);
	
	НомГруппы = Новый СписокЗначений;
	
	Для Каждого Эл Из Схема.НоменклатурныеГруппы Цикл
		
		Стр2 = Новый Структура;
		Стр2.Вставить("ПолеВыбора", Эл.ПолеВыбора);
		Стр2.Вставить("Группа", Эл.Группа);
		Стр2.Вставить("Материал", Эл.Материал);
		Стр2.Вставить("ИмяГруппы", Справочники.НоменклатурныеГруппы.ПолучитьИмяПредопределенного(Эл.Группа));
		
		НомГруппы.Добавить(Стр2);
		
	КонецЦикла;
	
	Стр.Вставить("НомГруппы", НомГруппы);
	
	Фасады = Новый СписокЗначений;
	
	Для Каждого Эл Из Схема.Фасады Цикл
		
		Стр2 = Новый Структура;
		Стр2.Вставить("Группа", Эл.Группа);
		
		Фасады.Добавить(Стр2);
		
	КонецЦикла;
	
	Стр.Вставить("Фасады", Фасады);
	
	Возврат Стр;
	
КонецФункции

&НаКлиенте
Функция ПолучитьНомГруппы(ПоляВыбора, ДанныеДетали)
	
	МасПоляВыбора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляВыбора, ",");
	
	НомГруппы = Новый СписокЗначений;
	
	Для Каждого Поле Из МасПоляВыбора Цикл
	
		Для Каждого Эл Из ДанныеДетали.НомГруппы Цикл
			
			Если Эл.Значение.ПолеВыбора = Поле Тогда
				НомГруппы.Добавить(Эл.Значение.Группа);	
			КонецЕсли
			
		КонецЦикла;
		
	КонецЦикла;
		
	Возврат НомГруппы;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаФасадовНоменклатураФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаФасадов.ТекущиеДанные;
	ВидЭлемента = ТекущиеДанные.ВидЭлемента;
	
	ВидДеталиФасад = ТекущиеДанные.ВидДеталиФасад;
	ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДеталиФасад,"Текстура",Элемент);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДетали,Поля,Элемент)

	Если ЗначениеЗаполнено(ВидДетали) Тогда

		ДанныеДетали = ПолучитьДанныеДетали(ВидДетали);
		НомГруппы = ПолучитьНомГруппы(Поля, ДанныеДетали);	
		
		Если НомГруппы.Количество() > 0 Тогда
			ОткрытьФормуПодбора(НомГруппы, Элемент);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовОбрамлениеФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.ТаблицаФасадов.ТекущиеДанные;
	ВидЭлемента = ТекущиеДанные.ВидЭлемента;
	
	ВидДеталиФасад = ТекущиеДанные.ВидДеталиФасад;
	ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДеталиФасад,"КантК,Кромка045,Кромка2,Окантовка",Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовНоменклатураРучкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаФасадов.ТекущиеДанные;
	ВидЭлемента = ТекущиеДанные.ВидЭлемента;
	
	Если ВидЭлемента = "Фасад" Тогда
	
		НомГруппы = Новый СписокЗначений;
		НомГруппы.Добавить(МассивНомГрупп.Ручка);
	
		ОткрытьФормуПодбора(НомГруппы, Элемент);
		
	ИначеЕсли ВидЭлемента = "Ящик" Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.СхемаЯщика) Тогда
		
			ДанныеСхемы = ПолучитьДанныеСхемы(ТекущиеДанные.СхемаЯщика);		
			НомГруппы = ПолучитьНомГруппыЯщик("Ручка", ДанныеСхемы);
			
			Если НомГруппы.Количество() > 0 Тогда
				ОткрытьФормуПодбора(НомГруппы, Элемент);
			КонецЕсли;
			
		Иначе
			
			Сообщить("Заполните вид ящика.");

		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовПетлиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидДеталиФасад = Элементы.ТаблицаФасадов.ТекущиеДанные.ВидДеталиФасад;
	ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДеталиФасад,"Петли",Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовМеханизмФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыМеханизм();
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);	
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомГруппыМеханизм()
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.ГазовыйЛифт);
	НомГруппы.Добавить(МассивНомГрупп.Кронштейн);
	
	Возврат НомГруппы;	
		
КонецФункции

&НаКлиенте
Процедура ТаблицаФасадовНоменклатураЭлементаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеТаблицаФасадов = Элементы.ТаблицаФасадов.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ДанныеТаблицаФасадов.СхемаЯщика) Тогда
		
		ДанныеСхемы = ПолучитьДанныеСхемы(ДанныеТаблицаФасадов.СхемаЯщика);		
		НомГруппы = ПолучитьНомГруппыЯщик("ЯщикМатериал", ДанныеСхемы);
		
		Если НомГруппы.Количество() > 0 Тогда
			ОткрытьФормуПодбора(НомГруппы, Элемент);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовТорцовкаЭлементаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеТаблицаФасадов = Элементы.ТаблицаФасадов.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ДанныеТаблицаФасадов.НоменклатураЭлемента) И ЗначениеЗаполнено(ДанныеТаблицаФасадов.СхемаЯщика) Тогда
		
		ДанныеСхемы = ПолучитьДанныеСхемы(ДанныеТаблицаФасадов.СхемаЯщика);		
		НомГруппаНоменклатураЭлемента = ПолучитьНоменклатурнуюГруппу(ДанныеТаблицаФасадов.НоменклатураЭлемента);
		НомГруппы = ПолучитьНомГруппыЯщик("ЯщикКромка", ДанныеСхемы, НомГруппаНоменклатураЭлемента);
		
		Если НомГруппы.Количество() > 0 Тогда
			ОткрытьФормуПодбора(НомГруппы, Элемент);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовДемпферНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.Демпфер);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураСтолешницаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.Столешница);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);

	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Функция УстановитьОтборТаблицаФасадов(UID)
	
	ОтборСтрок = Новый ФиксированнаяСтруктура("sUID", UID);
	Элементы.ТаблицаФасадов.ОтборСтрок = ОтборСтрок;
	
КонецФункции

&НаКлиенте
Функция СкопироватьСтрокиФасадов(Данные, nUID)
	
	СтрокиФасадов = ТаблицаФасадов.НайтиСтроки(Новый Структура("sUID", Данные.UID));
		
	Для каждого Строка Из СтрокиФасадов Цикл
		
		НоваяСтрока = ТаблицаФасадов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.sUID = nUID;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ДеталиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	УдалитьСтрокиФасадов(ТекущиеДанные.UID);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиФасадов(UID)
	
	СтрокиФасадов = ТаблицаФасадов.НайтиСтроки(Новый Структура("sUID", UID));
		
	Для каждого Строка Из СтрокиФасадов Цикл
	 	ТаблицаФасадов.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СборкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ЕстьУслугаСборки = ПроверитьУслугуСборки(ТекущиеДанные.Изделие);
	
	Если НЕ ЕстьУслугаСборки Тогда
		
		Сообщить("Для данного изделия не задана услуга сборки.");
		ТекущиеДанные.Сборка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьУслугуСборки(Изделие)
	
	Возврат ЗначениеЗаполнено(Изделие.УслугаСборки);
	
КонецФункции

&НаКлиенте
Функция ПолучитьНомГруппыЯщик(ПолеВыбора, ДанныеСхемы, МатериалНомГруппа = Неопределено, ПолучитьИмя = Ложь)
	
	НомГруппы = Новый СписокЗначений;
	
	Для Каждого Эл Из ДанныеСхемы.НомГруппы Цикл
		
		Подходит = Ложь;
		
		Если ЗначениеЗаполнено(МатериалНомГруппа) Тогда
			Если Эл.Значение.ПолеВыбора = ПолеВыбора И Эл.Значение.Материал = МатериалНомГруппа Тогда
				
				Подходит = Истина;
	
			КонецЕсли;
		Иначе
			Если Эл.Значение.ПолеВыбора = ПолеВыбора Тогда
				
				Подходит = Истина;
					
			КонецЕсли;
		КонецЕсли;
		
		Если Подходит Тогда
			
			Если ПолучитьИмя Тогда
				НомГруппы.Добавить(Эл.Значение.ИмяГруппы);
			Иначе
				НомГруппы.Добавить(Эл.Значение.Группа);
			КонецЕсли;
	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НомГруппы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНоменклатурнуюГруппу(ЗначениеНоменклатуры)
	
	Возврат ЗначениеНоменклатуры.НоменклатурнаяГруппа;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаФасадовВидФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеТаблицаФасадов = Элементы.ТаблицаФасадов.ТекущиеДанные;
	
	ВидыФасадов = Новый СписокЗначений;
	
	Если ДанныеТаблицаФасадов.ВидЭлемента = "Фасад" Тогда
		
		Фасады = ПолучитьВидыФасадов();
		
		Для Каждого ФФ ИЗ Фасады Цикл
			ВидыФасадов.Добавить(ФФ);	
		КонецЦикла;
		
	ИначеЕсли ДанныеТаблицаФасадов.ВидЭлемента = "Ящик" Тогда
	
		Если ЗначениеЗаполнено(ДанныеТаблицаФасадов.СхемаЯщика) Тогда
			
			ДанныеСхемы = ПолучитьДанныеСхемы(ДанныеТаблицаФасадов.СхемаЯщика);		
			Фасады = ДанныеСхемы.Фасады;
			
			Для Каждого ФФ ИЗ Фасады Цикл
				
				ВидыФасадов.Добавить(ФФ.Значение.Группа);
				
			КонецЦикла;
	
		Иначе
			
			Сообщить("Заполните вид ящика.");

		КонецЕсли;
			
	КонецЕсли;
	
	ДанныеВыбора = ВидыФасадов;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовБезПетельПриИзменении(Элемент)
	
	Данные = Элементы.ТаблицаФасадов.ТекущиеДанные;
	Данные.Петли = Неопределено;
	
	ТаблицаФасадовПриАктивизацииСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаИзделияДопПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Шаг > 0 Тогда
			Если (ТекущиеДанные.ШиринаДоп - ТекущиеДанные.ШиринаДопМин) % ТекущиеДанные.Шаг <> 0 Тогда
				ТекущиеДанные.ШиринаДоп = ТекущиеДанные.ШиринаДопМин;
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Соблюдайте шаг %1, минимальное значение - %2 ", ТекущиеДанные.Шаг, ТекущиеДанные.ШиринаДопМин);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.ШиринаИзделияДоп");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиИзделиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Пар = Новый Структура();
	Пар.Вставить("Изделие", ИзделиеСпец);
	
	Если Дилерский Тогда
		Пар.Вставить("АктивныйДляДилера", Истина);	
	Иначе
		Пар.Вставить("Активный", Истина);
	КонецЕсли;

	ОткрытьФормуМодально("Справочник.КаталогИзделий.ФормаВыбора", Пар, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовБезФасадаПриИзменении(Элемент)
	
	Данные = Элементы.ТаблицаФасадов.ТекущиеДанные;
	Данные.КриволинейныйВыпилПодРучку = Ложь;
	
	ТаблицаФасадовПриАктивизацииСтроки();
	
КонецПроцедуры


&НаКлиенте
Процедура ДеталиКромкаСтолешницаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиКромкаСтолешница();
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомГруппыДеталиКромкаСтолешница()
	
	НомГруппы = Новый СписокЗначений;
	
	НомГруппы.Добавить(МассивНомГрупп.Кромка2_42);
	
	Возврат НомГруппы;
	
КонецФункции


&НаКлиенте
Процедура ДеталиКромкаСтолешницаПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("КромкаСтолешница", Элементы.Детали.ТекущиеДанные.КромкаСтолешница);
КонецПроцедуры


&НаКлиенте
Процедура ЗаменитьНоменклатуру(Команда)
	
	ВладелецПодобра = Элементы.Детали;
	СписокНоменклатуры = Новый Массив;
	
	Для каждого Строка ИЗ Детали Цикл
		
		МассивНоменклатур = Новый Массив;
		МассивНоменклатур.Добавить(Строка.НоменклатураЛДСП);
		МассивНоменклатур.Добавить(Строка.КромкаЛДСП);
		МассивНоменклатур.Добавить(Строка.НоменклатураЛДСПДоп);
		МассивНоменклатур.Добавить(Строка.КромкаЛДСПДоп);
		МассивНоменклатур.Добавить(Строка.НоменклатураМДФ);
		МассивНоменклатур.Добавить(Строка.КромкаМДФ);
		МассивНоменклатур.Добавить(Строка.НоменклатураДляСклеивания);
		МассивНоменклатур.Добавить(Строка.НоменклатураДВП);
		МассивНоменклатур.Добавить(Строка.НоменклатураСтолешница);
		МассивНоменклатур.Добавить(Строка.КромкаСтолешница);
		МассивНоменклатур.Добавить(Строка.НоменклатураФасада);
		МассивНоменклатур.Добавить(Строка.КромкаФасада);
		МассивНоменклатур.Добавить(Строка.Ручка);
		
		Для Каждого ЭлементМассива ИЗ МассивНоменклатур Цикл
			
			ПроверитьНаличие = СписокНоменклатуры.Найти(ЭлементМассива);
			
			Если ПроверитьНаличие = Неопределено И ЗначениеЗаполнено(ЭлементМассива) Тогда
				
				СписокНоменклатуры.Добавить(ЭлементМассива);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого Строка ИЗ ТаблицаФасадов Цикл
		
		МассивНоменклатур = Новый Массив;
		МассивНоменклатур.Добавить(Строка.НоменклатураФасада);
		МассивНоменклатур.Добавить(Строка.ДопНоменклатураФасада);
		МассивНоменклатур.Добавить(Строка.ДопСклейкаФасада);
		МассивНоменклатур.Добавить(Строка.ОбрамлениеФасада);
		МассивНоменклатур.Добавить(Строка.НоменклатураРучки);
		МассивНоменклатур.Добавить(Строка.Петли);
		МассивНоменклатур.Добавить(Строка.НоменклатураЭлемента);
		МассивНоменклатур.Добавить(Строка.ТорцовкаЭлемента);
				
		Для Каждого ЭлементМассива ИЗ МассивНоменклатур Цикл
			
			ПроверитьНаличие = СписокНоменклатуры.Найти(ЭлементМассива);
			
			Если ПроверитьНаличие = Неопределено И ЗначениеЗаполнено(ЭлементМассива) Тогда
				
				СписокНоменклатуры.Добавить(ЭлементМассива);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	ПараметрыПодбора.Вставить("Подразделение", Подразделение);
	ПараметрыПодбора.Вставить("Каталог", Истина);
	ПараметрыПодбора.Вставить("Офис",Офис);
	
	Если Дилерский Тогда
		 ПараметрыПодбора.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаСменыНоменклатуры", ПараметрыПодбора, ВладелецПодобра,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаКлиенте
Процедура ДеталиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если ТекущиеДанные.Копирование Тогда
				
			nUID = Новый УникальныйИдентификатор();
			СкопироватьСтрокиФасадов(ТекущиеДанные,nUID);
			ТекущиеДанные.UID = nUID;
			
			Для Каждого Стр ИЗ Детали Цикл
				Стр.Копирование = Ложь;
			КонецЦикла;	
				
		КонецЕсли;
			
		УстановитьОтборТаблицаФасадов(ТекущиеДанные.UID);
		НастройкиИзделия(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаФасадовБезРучкиПриИзменении(Элемент)
	
	Данные = Элементы.ТаблицаФасадов.ТекущиеДанные;
	Данные.НоменклатураРучки = Неопределено;
	
	ТаблицаФасадовПриАктивизацииСтроки();
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаФасадовКриволинейныйВыпилПодРучкуПриИзменении(Элемент)
	
	Данные = Элементы.ТаблицаФасадов.ТекущиеДанные;
	Данные.НоменклатураРучки = Неопределено;
	
	ТаблицаФасадовПриАктивизацииСтроки();
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаФасадовДноЯщикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеТаблицаФасадов = Элементы.ТаблицаФасадов.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ДанныеТаблицаФасадов.СхемаЯщика) Тогда
		
		ДанныеСхемы = ПолучитьДанныеСхемы(ДанныеТаблицаФасадов.СхемаЯщика);		
		НомГруппы = ПолучитьНомГруппыЯщик("Дно", ДанныеСхемы);
		
		Если НомГруппы.Количество() > 0 Тогда
			ОткрытьФормуПодбора(НомГруппы, Элемент);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДеталиДопНоменклатураФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(ПолучитьНомГруппуПластик());
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомГруппуПластик()
	
	Возврат Справочники.НоменклатурныеГруппы.Пластик;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаФасадовДопНоменклатураФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(ПолучитьНомГруппуПластик());
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиДопНоменклатураФасадаПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("ДопНоменклатураФасада", Элементы.Детали.ТекущиеДанные.ДопНоменклатураФасада);
	УстановитьПараметрФасада(Элементы.Детали.ТекущиеДанные.ДопНоменклатураФасада, "ДопНоменклатураФасада");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиДопСклейкаФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидДеталиФасад = Элементы.Детали.ТекущиеДанные.ВидДеталиФасад;
	ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДеталиФасад,"ДопСклейка",Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиДопСклейкаФасадаПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("ДопСклейкаФасада", Элементы.Детали.ТекущиеДанные.ДопСклейкаФасада);
	УстановитьПараметрФасада(Элементы.Детали.ТекущиеДанные.ДопСклейкаФасада, "ДопСклейкаФасада");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовДопСклейкаФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидДеталиФасад = Элементы.Детали.ТекущиеДанные.ВидДеталиФасад;
	ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДеталиФасад,"ДопСклейка",Элемент);
	
КонецПроцедуры
