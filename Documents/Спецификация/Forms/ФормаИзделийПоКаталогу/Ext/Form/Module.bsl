////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруИзделия(Изделие, Подразделение, Изменение = Ложь) 
	
	Структура = Новый Структура;
	
	ВидИзделияПоКаталогу = Изделие.ВидИзделияПоКаталогу;	
	СписокМатериалы = Изделие.СписокМатериалы;
	СписокНоменклатуры = Изделие.СписокНоменклатуры;
	СписокДопЭлементов = Изделие.СписокДопЭлементов;
	СписокЯщики = Изделие.СписокЯщики;
	ЯщикиКоличество = Изделие.СписокЯщики.Количество();
	КухонныеНожки = Справочники.НоменклатурныеГруппы.КухонныеНожки;
	
	ЕстьКлееная = ЗначениеЗаполнено(СписокМатериалы.Найти("10 ЛДСП+10 ЛДСП", "Материал")) ИЛИ ЗначениеЗаполнено(СписокМатериалы.Найти("16 ЛДСП+10 ЛДСП", "Материал")) 
	ИЛИ ЗначениеЗаполнено(СписокМатериалы.Найти("16 ЛДСП+16 ЛДСП", "Материал"));
	ЕстьЛДСП = ЗначениеЗаполнено(СписокМатериалы.Найти("10 ЛДСП", "Материал")) ИЛИ ЗначениеЗаполнено(СписокМатериалы.Найти("16 ЛДСП", "Материал")) 
	ИЛИ ЕстьКлееная ИЛИ ЯщикиКоличество > 0;
	ЕстьДВП = ЗначениеЗаполнено(СписокМатериалы.Найти("ДВП", "Материал")) ИЛИ ЯщикиКоличество > 0;
	ЕстьЛДСПДоп = ЗначениеЗаполнено(СписокМатериалы.Найти(Истина, "ВторойЦвет"));
	ЕстьНожки = ЗначениеЗаполнено(СписокНоменклатуры.Найти(КухонныеНожки, "Номенклатура"));
	
	Структура.Вставить("КодИзделия", Изделие.Код);
	Структура.Вставить("Расположение", Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая);
	Структура.Вставить("ГлубинаИзделия", Изделие.ГлубинаИзделия);
	Структура.Вставить("ШиринаИзделия", Изделие.ШиринаИзделия);
	Структура.Вставить("ВысотаИзделия", Изделие.ВысотаИзделия);
	Структура.Вставить("ГлубинаИзделияМин", Изделие.ГлубинаИзделияМин);
	Структура.Вставить("ШиринаИзделияМин", Изделие.ШиринаИзделияМин);
	Структура.Вставить("ВысотаИзделияМин", Изделие.ВысотаИзделияМин);
	Структура.Вставить("ГлубинаИзделияМакс", Изделие.ГлубинаИзделияМакс);
	Структура.Вставить("ШиринаИзделияМакс", Изделие.ШиринаИзделияМакс);
	Структура.Вставить("ВысотаИзделияМакс", Изделие.ВысотаИзделияМакс);
	Структура.Вставить("Шаг", Изделие.Шаг);
	Структура.Вставить("ЕстьЛДСП", ЕстьЛДСП);
	Структура.Вставить("ЕстьЛДСПДоп", ЕстьЛДСПДоп);
	Структура.Вставить("ЕстьКлееная", ЕстьКлееная);
	Структура.Вставить("ЕстьДВП", ЕстьДВП);	
	Структура.Вставить("ЕстьСтекло", ЗначениеЗаполнено(СписокМатериалы.Найти("Стекло", "Материал")));
	Структура.Вставить("ЕстьМДФ", ЗначениеЗаполнено(СписокМатериалы.Найти("МДФ", "Материал")));
	//Структура.Вставить("ЕстьПристенок", ЗначениеЗаполнено(СписокМатериалы.Найти("Пристенок", "Материал")));
	Структура.Вставить("ЕстьМойка", Ложь);
	Структура.Вставить("ЕстьСушка", Ложь);	
	Структура.Вставить("НоменклатураСушка", Неопределено);
	Структура.Вставить("НоменклатурнаяГруппаСушка", Неопределено);
	Структура.Вставить("НоменклатураМойка", Неопределено);
	Структура.Вставить("СтандартныйЯщик", Перечисления.ВидыЯщика.Обычный);
	//Структура.Вставить("СтандартныеНаправляющие", ?(ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.Комод, Справочники.НоменклатурныеГруппы.НаправляющиеШариковые45, Справочники.НоменклатурныеГруппы.НаправляющиеШариковыеСДоводчиком));	
	Структура.Вставить("ЕстьНожки", ЕстьНожки);
	Структура.Вставить("Ножки", ?(ЕстьНожки, КухонныеНожки.ОсновнаяНоменклатура, Неопределено));
	
	Для Каждого Элемент Из СписокДопЭлементов Цикл	
		НоменклатураДопЭлемента = ПолучитьДопЭлемент(Элемент.ДопЭлемент, Изделие.ШиринаИзделия, Подразделение);
		Если Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.Сушка 
			ИЛИ Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.СушкаДляКоробаБезДна
			ИЛИ Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.СушкаДляКоробаСДном Тогда
			Структура.Вставить("ЕстьСушка", Истина);
			Структура.Вставить("НоменклатураСушка", НоменклатураДопЭлемента);
			Структура.Вставить("НоменклатурнаяГруппаСушка", Элемент.ДопЭлемент);
		ИначеЕсли Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.Мойка Тогда
			Структура.Вставить("ЕстьМойка", Истина);
			Структура.Вставить("НоменклатураМойка", НоменклатураДопЭлемента);
		ИначеЕсли Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.Бутылочница
			ИЛИ Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком Тогда
			Структура.Вставить("Бутылочница", НоменклатураДопЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	Если Изменение Тогда
		
		НомерЯщика = 0;	
		Для Каждого Элемент Из СписокЯщики Цикл	
			НомерЯщика = Элемент.НомерСтроки;
			
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "Имя", Элемент.ИмяЯщика);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "ВидФасада", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "НомерДетали", Элемент.НомерСтроки);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика, "Ящик");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "КоличествоДемпфер", 0);         
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "КоличествоМеханизмФасада", 0);              
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "МеханизмФасада", "");         
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "Демпфер", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "ПоложениеРучки", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "Петли", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "КоличествоПетель", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "РасположениеПазов", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "МеханизмЭлемента", ?(ЗначениеЗаполнено(Элемент.ВидНаправляющих), Элемент.ВидНаправляющих, Справочники.НоменклатурныеГруппы.НаправляющиеШариковыеСДоводчиком));
			
		КонецЦикла;
		
		Массив = Новый Массив;
		Массив.Добавить("ФасадСтеклянный");
		Массив.Добавить("ФасадАГТ");
		Массив.Добавить("ФасадЛДСП");
		Массив.Добавить("ФасадМДФ");
		Массив.Добавить("ФасадАлюминиевый");
		Массив.Добавить("ФасадСтеклянныйЗакругленный");
		КоличествоФасадов = 0;	
		
		Для Каждого Элемент Из Массив Цикл
			СтрокиФасада = СписокМатериалы.НайтиСтроки(Новый Структура("Материал", Элемент));
			Для Каждого Строка Из СтрокиФасада Цикл
				КоличествоФасадов = КоличествоФасадов + 1;
				НомерФасада = НомерЯщика + КоличествоФасадов;
				
				Структура.Вставить("ТаблицаФасадов" + НомерФасада, "Фасад");
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "ВидФасада", Строка.Материал);              
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "НомерДетали", Строка.НомерСтроки);         
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "Имя", Строка.ИмяДетали);                   
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "КоличествоДемпфер", Строка.КоличествоДемпфер);         
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "КоличествоМеханизмФасада", Строка.КоличествоМеханизмФасада);              
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "МеханизмФасада", Строка.МеханизмФасада);         
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "Демпфер", Строка.Демпфер);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "ПоложениеРучки", Строка.РасположениеПазовИРучкиНаФасадах.ПоложениеРучки);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "Петли", Строка.Петли);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "КоличествоПетель", Строка.КоличествоПетель);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "РасположениеПазов", Строка.РасположениеПазовИРучкиНаФасадах.ПоложениеПазов);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "МеханизмЭлемента", "");
				
			КонецЦикла;	
		КонецЦикла;
		
		КоличествоТаблицаФасадов = НомерЯщика + КоличествоФасадов;
		Структура.Вставить("КоличествоТаблицаФасадов", КоличествоТаблицаФасадов);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ВыгрузитьНужнуюТаблицуВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Детали.Выгрузить(, "Изделие, ГлубинаИзделия, ШиринаИзделия, ВысотаИзделия, КодИзделия, Расположение"));
	
КонецФункции

&НаСервере
Процедура ЗагрузитьТабличнуюЧасть(АдресТаблицы)
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
		
		Для Каждого Строка Из Детали Цикл
			
			Строка.НовыйИндекс = ТЗ.Получить(Детали.Индекс(Строка)).Порядок + 1;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДопГруппы()
	
	ВсеСушки = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Сушка Цикл
		ВсеСушки.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.СушкаДляКоробаСДном Цикл
		ВсеСушки.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.СушкаДляКоробаБезДна Цикл
		ВсеСушки.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("ВсеСушки", ВсеСушки);
	
	КромкаКМДФ = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.КромкаМДФ Цикл
		КромкаКМДФ.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.КантАлюминиевый Цикл
		КромкаКМДФ.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("КромкаКМДФ", КромкаКМДФ);
	
	Кромка2 = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Кромка2_19 Цикл
		Кромка2.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Кромка2_35 Цикл
		Кромка2.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("Кромка2мм", Кромка2);
	
	Кромка = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Кромка045_19 Цикл
		Кромка.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Кромка2мм Цикл
		Кромка.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.КантТ Цикл
		Кромка.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.КромкаМДФ Цикл
		Кромка.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.КантАлюминиевый Цикл
		Кромка.Добавить(Элемент);
	КонецЦикла;

	МассивыНоменклатурныхГрупп.Вставить("Кромка", Кромка);
	
	Стекло_И_Зеркало = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Стекло Цикл
		Стекло_И_Зеркало.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.СтеклоДляСкругляемогоФасада Цикл
		Стекло_И_Зеркало.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Зеркало Цикл
		Стекло_И_Зеркало.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("Стекло_И_Зеркало", Стекло_И_Зеркало);
	
	КромкаКФасадам = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Кромка045_19 Цикл
		КромкаКФасадам.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Кромка2мм Цикл
		КромкаКФасадам.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.КромкаМДФ Цикл
		КромкаКФасадам.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.КантАлюминиевый Цикл
		КромкаКФасадам.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("КромкаКФасадам", КромкаКФасадам);
	
	ЛДСП = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ЛДСП16 Цикл
		ЛДСП.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("ЛДСП", ЛДСП);
	
	ФасадыАГТ = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.АГТПанель Цикл
		ФасадыАГТ.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Стекло_И_Зеркало Цикл
		ФасадыАГТ.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ЛДСП10 Цикл
		ФасадыАГТ.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.МДФ8 Цикл
		ФасадыАГТ.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("ФасадыАГТ", ФасадыАГТ);
	
	ВсеФасады = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ЛДСП16 Цикл
		ВсеФасады.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.МДФ18 Цикл
		ВсеФасады.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ФасадыАГТ Цикл
		ВсеФасады.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("ВсеФасады", ВсеФасады);
	
	ВсяКромкаКФасадам = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.КромкаКФасадам Цикл
		ВсяКромкаКФасадам.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.РамочныйАлюминий Цикл
		ВсяКромкаКФасадам.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.АГТПрофиль Цикл
		ВсяКромкаКФасадам.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("ВсяКромкаКФасадам", ВсяКромкаКФасадам);
	
	МеханизмыФ = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ГазовыйЛифт Цикл
		МеханизмыФ.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Кронштейн Цикл
		МеханизмыФ.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("МеханизмыФ", МеханизмыФ);
	
	Петли = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ПетлиБезДоводчика Цикл
		Петли.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ПетлиСДоводчиком Цикл
		Петли.Добавить(Элемент);
	КонецЦикла;	
	МассивыНоменклатурныхГрупп.Вставить("Петли", Петли);
	
	ПетлиДляСтекол = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ПетлиДляСтеколБезДоводчика Цикл
		ПетлиДляСтекол.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ПетлиДляСтеколСДоводчиком Цикл
		ПетлиДляСтекол.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ПетлиПоворотные Цикл
		ПетлиДляСтекол.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("ПетлиДляСтекол", ПетлиДляСтекол);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДопЭлемент(ДопЭлемент, ШиринаИзделия, Подразделение)
	
	Если ДопЭлемент = Справочники.НоменклатурныеГруппы.Мойка Тогда
		
		Возврат Справочники.Номенклатура.МойкаКухоннаяМатовая731;
		
	Иначе
		
		Знак = ?(ДопЭлемент = Справочники.НоменклатурныеГруппы.ГазовыйЛифт, ">", "<");
		Порядок = ?(ДопЭлемент = Справочники.НоменклатурныеГруппы.ГазовыйЛифт, "", "УБЫВ");
		Ширина = ?(ДопЭлемент = Справочники.НоменклатурныеГруппы.ГазовыйЛифт, 50, ШиринаИзделия);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", ДопЭлемент);
		Запрос.УстановитьПараметр("ШиринаДетали", Ширина);
		ПодразделениеДляОпределенияДоступности = ЛексСервер.ПолучитьОсновноеПроизводство(Подразделение);
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеДляОпределенияДоступности);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	спрНоменклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК спрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
		|		ПО (НоменклатураПодразделений.Номенклатура = спрНоменклатура.Ссылка)
		|ГДЕ
		|	спрНоменклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
		|	И спрНоменклатура.ШиринаДетали " + Знак + "= &ШиринаДетали
		|	И НоменклатураПодразделений.Подразделение = &Подразделение
		|	И НоменклатураПодразделений.Доступность
		|
		|УПОРЯДОЧИТЬ ПО
		|	спрНоменклатура.ШиринаДетали " + Порядок;
		
		Выборка = Запрос.Выполнить().Выгрузить();
		
		Если Выборка.Количество() > 0 Тогда
			Возврат Выборка[0].Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;                                                          
	КонецЕсли;	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметр(Таблица, Параметр, ТипПараметра)
	
	ОбщийФасад = Элементы.Детали.ТекущиеДанные.ВидФасада;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Строка.ВидЭлемента = "Фасад" И ((ТипПараметра = "НоменклатураЭлемента" ИЛИ ТипПараметра = "ТорцовкаЭлемента"))Тогда   // ИЛИ (НЕ ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) И ТипПараметра = "НоменклатураРучки")) 
			
			Строка[ТипПараметра] = Неопределено;
			
		Иначе
						
			Если (ТипПараметра <> "НоменклатураФасада") ИЛИ (ТипПараметра = "НоменклатураФасада" И ОбщийФасад = Строка.ВидФасада) Тогда 
				
				Строка[ТипПараметра] = Параметр;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Процедура ОтобразитьКартинку()
	
	Данные = Элементы.Детали.ТекущиеДанные;
	АдресИзделия = "";
	
	Если Данные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Данные.КодИзделия) Тогда
			АдресИзделия = РабочийКаталог + Данные.Расположение + Данные.КодИзделия;
		КонецЕсли;
		
		АдресВХранилище = "";
		Если ЗначениеЗаполнено(АдресИзделия) Тогда
			ИмяФайла = АдресИзделия;
			ФайлИзображения = Новый Файл(ИмяФайла);
			Если ФайлИзображения.Существует() Тогда
				ПоместитьФайл(АдресВХранилище, ИмяФайла, , Ложь);
			Иначе
				ИмяФайла = РабочийКаталог + ПредопределенноеЗначение("Перечисление.ВидыПрисоединенныхФайлов.ОсновнаяКартинка") + Данные.КодИзделия;
				ФайлИзображения = Новый Файл(ИмяФайла);
				Если ФайлИзображения.Существует() Тогда
					ПоместитьФайл(АдресВХранилище, ИмяФайла, , Ложь);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		Изображение = АдресВХранилище;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Детали.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицы));
	
	Подразделение = Параметры.Подразделение;
	
	Если ЗначениеЗаполнено(Детали) Тогда
		
		Если Параметры.Свойство("Идентификатор") Тогда
			Элементы.Детали.ТекущаяСтрока = Параметры.Идентификатор;
		КонецЕсли;
		
		Для каждого Элемент Из Детали Цикл
			Если ЗначениеЗаполнено(Элемент.СтрокаТаблицаФасадов) Тогда
				Элемент.ТаблицаФасадов.Загрузить(ЗначениеИзСтрокиВнутр(Элемент.СтрокаТаблицаФасадов));	
			КонецЕсли;
			Структура = ПолучитьСтруктуруИзделия(Элемент.Изделие, Подразделение);
			
			Элемент.НовыйИндекс = Детали.Индекс(Элемент) + 1;
			Элемент.КодИзделия = Структура.КодИзделия;
			Элемент.ГлубинаИзделияМин = Структура.ГлубинаИзделияМин;
			Элемент.ШиринаИзделияМин = Структура.ШиринаИзделияМин;
			Элемент.ВысотаИзделияМин = Структура.ВысотаИзделияМин;
			Элемент.ГлубинаИзделияМакс = Структура.ГлубинаИзделияМакс;
			Элемент.ШиринаИзделияМакс = Структура.ШиринаИзделияМакс;
			Элемент.ВысотаИзделияМакс = Структура.ВысотаИзделияМакс;
			Элемент.Шаг = Структура.Шаг;
			Элемент.ЕстьЛДСП = Структура.ЕстьЛДСП;
			Элемент.ЕстьЛДСПДоп = Структура.ЕстьЛДСПДоп;
			Элемент.ЕстьКлееная = Структура.ЕстьКлееная;
			Элемент.ЕстьМДФ = Структура.ЕстьМДФ;
			Элемент.ЕстьСтекло = Структура.ЕстьСтекло;
			Элемент.ЕстьДВП = Структура.ЕстьДВП;
			//Элемент.ЕстьПристенок = Структура.ЕстьПристенок;
			Элемент.ЕстьМойка = Структура.ЕстьМойка;
			Элемент.ЕстьСушка = Структура.ЕстьСушка;
			Элемент.ЕстьНожки = Структура.ЕстьНожки;
			Элемент.НоменклатурнаяГруппаСушка = Структура.НоменклатурнаяГруппаСушка;
			Элемент.Расположение = ?(ЗначениеЗаполнено(Элемент.Расположение), Элемент.Расположение, Структура.Расположение);
			
			Если Элемент.Европаз = 0 Тогда
				Элемент.Европаз = 16;
			КонецЕсли;
			
			Если Элемент.Столешница = 0 Тогда
				Элемент.Столешница = 38;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Стр = Детали.Добавить();
		Стр.Расположение = Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая;
	КонецЕсли; // ЗначениеЗаполнено(Детали)
	
	СписокНоменклатурныхГрупп = Новый СписокЗначений;
	
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП16);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП10);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КантТ);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка045_19);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_19);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_35);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ДВП);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_45);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_42);
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Столешница);
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Пристенок);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Гравировка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Зеркало);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Стекло);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.СтеклоДляСкругляемогоФасада);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Ручка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.АГТПанель);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.АГТПрофиль);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КромкаМДФ);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КантАлюминиевый);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.МДФ18);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.МДФ8);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.РамочныйАлюминий);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Бутылочница);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Сушка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.СушкаДляКоробаСДном);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.СушкаДляКоробаБезДна);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ГазовыйЛифт);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Демпфер);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кронштейн);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Мойка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиБезДоводчика);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиСДоводчиком);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиДляСтеколБезДоводчика);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиДляСтеколСДоводчиком);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиПоворотные);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КухонныеНожки);
	
	МассивыНоменклатурныхГрупп = ЛексСервер.ОтборНоменклатурныхГрупп(СписокНоменклатурныхГрупп, Подразделение);
	
	ДобавитьДопГруппы();
	
	ШапкаОсновныхНастроек = Новый Структура;
	
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСП","");	
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСП","");	
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСПДоп","");
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСПДоп","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураДВП","");		
	ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания","");
	ШапкаОсновныхНастроек.Вставить("Ручка","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураСтекло", "");
	ШапкаОсновныхНастроек.Вставить("НоменклатураМДФ","");
	ШапкаОсновныхНастроек.Вставить("КромкаМДФ","");
	ШапкаОсновныхНастроек.Вставить("ВидФасада", "");
	ШапкаОсновныхНастроек.Вставить("НоменклатураФасада","");
	ШапкаОсновныхНастроек.Вставить("КромкаФасада","");
	//ШапкаОсновныхНастроек.Вставить("Столешница","");
	//ШапкаОсновныхНастроек.Вставить("Пристенок","");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РабочийКаталог = ФайловыеФункцииСлужебныйКлиент.ВыбратьПутьККаталогуДанныхПользователя();
	
	//Для каждого Элемент Из Детали Цикл
	//	Если ЗначениеЗаполнено(Элемент.Изделие) Тогда
	//		Элемент.АдресКартинки = РабочийКаталог + Элемент.АдресКартинки;
	//	КонецЕсли;
	//КонецЦикла;
	
	Элементы.ДеталиНоменклатураЛДСП.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП);
	Элементы.ДеталиКромкаЛДСП.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка);
	Элементы.ДеталиНоменклатураЛДСПДоп.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП);
	Элементы.ДеталиКромкаЛДСПДоп.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка);
	Элементы.ДеталиНоменклатураДляСклеивания.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП);	
	Элементы.ДеталиНоменклатураДВП.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ДВП);
	Элементы.ДеталиНоменклатураМДФ.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.МДФ18);
	Элементы.ДеталиКромкаМДФ.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаКМДФ);
	//Элементы.ДеталиСтолешница.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Столешница);
	//Элементы.ДеталиПристенок.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Пристенок);
	Элементы.ДеталиРучка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Ручка);
	Элементы.ДеталиНоменклатураСтекло.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Стекло_И_Зеркало);
	Элементы.ДеталиТаблицаФасадовНоменклатураРучки.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Ручка);
	Элементы.ДеталиТаблицаФасадовНоменклатураЭлемента.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП);
	Элементы.ДеталиТаблицаФасадовТорцовкаЭлемента.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка);
	Элементы.ДеталиТаблицаФасадовМеханизмФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.МеханизмыФ);
	Элементы.ДеталиТаблицаФасадовДемпфер.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Демпфер);
	Элементы.ДеталиМойка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Мойка);
	Элементы.ДеталиСушка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ВсеСушки);
	Элементы.ДеталиНожки.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КухонныеНожки);

	ОтобразитьКартинку();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДобавитьКДокументу(Команда)
	
	Модифицированность = Ложь;
	ТаблицаДетали = ПроверитьПередСохранением();
	Если ТаблицаДетали <> Неопределено Тогда 
		ОповеститьОВыборе(ТаблицаДетали);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрИзделия(Команда)
	
	ПараметрыДляФормы = Новый Структура;
	ПараметрыДляФормы.Вставить("АдресТаблицы", ВыгрузитьНужнуюТаблицуВХранилище());
	ПараметрыДляФормы.Вставить("РабочийКаталог", РабочийКаталог);
	
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаИзображениеИзделий", ПараметрыДляФормы, Элементы.Детали);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

&НаСервере
Функция ПроверитьПередСохранением()
	
	Ошибки = Неопределено;
	
	Для каждого Элемент Из Детали Цикл
		
		НомерСтроки = Детали.Индекс(Элемент) + 1;
		ОписаниеОшибки = Строка(Элемент.Изделие) + "(Номер изделия - " + НомерСтроки + ")";
		ШиринаИзделия = Элемент.ШиринаИзделия;
		
		Если НЕ ЗначениеЗаполнено(Элемент.Изделие) Тогда                    
			ТекстСообщения = "Не выбрано Изделие";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Детали[" + Детали.Индекс(Элемент) + "].Изделие", ТекстСообщения);
		Иначе
			
			Для Каждого Строка Из Элемент.ТаблицаФасадов Цикл
				
				Если НЕ ЗначениеЗаполнено(Строка.ВидФасада) Тогда
					ТекстСообщения = "Не выбран вид фасада у " + ОписаниеОшибки;
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Строка.НоменклатураФасада) Тогда
					ТекстСообщения = "Не выбран фасад у " + ОписаниеОшибки;
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Строка.ОбрамлениеФасада) И Строка.ВидФасада <> "ФасадСтеклянный" И Строка.ВидФасада <> "ФасадСтеклянныйЗакругленный" Тогда
					ТекстСообщения = "Не выбрано обрамление фасада у " + ОписаниеОшибки;
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);
				КонецЕсли;
				
				Ручка = Строка.НоменклатураРучки;
				Если НЕ ЗначениеЗаполнено(Ручка) И (Строка.ВидЭлемента = "Ящик" ИЛИ ЗначениеЗаполнено(Строка.РасположениеРучки))Тогда
					ТекстСообщения = "Не выбрана ручка у " + ОписаниеОшибки;
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);
				//ИначеЕсли ЗначениеЗаполнено(Ручка) И (ШиринаИзделия < Ручка.ДлинаДетали + 90) Тогда
				//	ТекстСообщения = "Размер ручки не подходит у " + ОписаниеОшибки;
				//	ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Строка.ДопЭлемент) И (Строка.ДопЭлемент.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Бутылочница
					ИЛИ Строка.ДопЭлемент.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком)
					И (Строка.ДопЭлемент.ШиринаДетали > Элемент.ШиринаИзделия) Тогда
					ТекстСообщения = "Размер бутылочницы не подходит у " + ОписаниеОшибки;
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);
				КонецЕсли;
				
				Если Строка.ВидЭлемента = "Фасад" Тогда
					
					Если ЗначениеЗаполнено(Ручка) И НЕ ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) Тогда
						ТекстСообщения = "Укажите расположение ручки у " + ОписаниеОшибки;
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);	
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.МеханизмФасада) И НЕ ЗначениеЗаполнено(Строка.КоличествоМеханизмФасада) Тогда
						ТекстСообщения = "Укажите количество механизмов фасада у " + ОписаниеОшибки;
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.Демпфер) И НЕ ЗначениеЗаполнено(Строка.КоличествоДемпфер) Тогда
						ТекстСообщения = "Укажите количество демпферов у " + ОписаниеОшибки;
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) И НЕ ЗначениеЗаполнено(Строка.Петли) Тогда
						ТекстСообщения = "Укажите петли у " + ОписаниеОшибки;
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.Петли) И НЕ ЗначениеЗаполнено(Строка.КоличествоПетель) Тогда
						ТекстСообщения = "Укажите количество петель у " + ОписаниеОшибки;
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.Петли) И НЕ ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) Тогда
						ТекстСообщения = "Укажите расположение петель у " + ОписаниеОшибки;
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);
					КонецЕсли;
					
				Иначе
					
					Если НЕ ЗначениеЗаполнено(Строка.ВыдвижнойЭлемент) Тогда
						ТекстСообщения = "Укажите выдвижной элемент у " + ОписаниеОшибки;
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Строка.МеханизмЭлемента) Тогда
						ТекстСообщения = "Укажите механизм элемент у " + ОписаниеОшибки;
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);	
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Строка.НоменклатураЭлемента) Тогда
						ТекстСообщения = "Укажите номенклатуру элемента у " + ОписаниеОшибки;
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);	
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Строка.ТорцовкаЭлемента) Тогда
						ТекстСообщения = "Укажите торцовку элемента у " + ОписаниеОшибки;
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);	
					КонецЕсли;
					
					Если Строка.ВидФасада = "ФасадСтеклянный" ИЛИ Строка.ВидФасада = "ФасадСтеклянныйЗакругленный" ИЛИ Строка.ВидФасада = "ФасадАлюминиевый" Тогда
						ТекстСообщения = "Данный вид фасада недоступен для ящика у " + ОписаниеОшибки;
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Изделие", ТекстСообщения);
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Элемент.Мойка) Тогда
				Если Элемент.Мойка.ШиринаДетали + 70 > Элемент.ШиринаИзделия Тогда
					ТекстСообщения = "Мойка не подходит по ширине. Выберите другую у " + ОписаниеОшибки;
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Мойка", ТекстСообщения);
				КонецЕсли;
				Если Элемент.Мойка.ГлубинаДетали + 70 > Элемент.ГлубинаИзделия Тогда
					ТекстСообщения = "Мойка не подходит по глубине. Выберите другую у " + ОписаниеОшибки;
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Мойка", ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если Элемент.ЕстьЛДСП Тогда
				Если НЕ ЗначениеЗаполнено(Элемент.НоменклатураЛДСП) Тогда
					ТекстСообщения = "Не выбрана номенклатура ЛДСП";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.НоменклатураЛДСП", ТекстСообщения);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Элемент.КромкаЛДСП) Тогда
					ТекстСообщения = "Не выбрана кромка ЛДСП";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.КромкаЛДСП", ТекстСообщения);
				КонецЕсли;
			КонецЕсли;	
			
			Если Элемент.ЕстьЛДСПДоп Тогда
				Если НЕ ЗначениеЗаполнено(Элемент.НоменклатураЛДСПДоп) Тогда
					ТекстСообщения = "Не выбрана номенклатура ЛДСП доп";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.НоменклатураЛДСПДоп", ТекстСообщения);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Элемент.КромкаЛДСПДоп) Тогда
					ТекстСообщения = "Не выбрана кромка ЛДСП доп";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.КромкаЛДСПДоп", ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если Элемент.ЕстьКлееная И НЕ ЗначениеЗаполнено(Элемент.НоменклатураДляСклеивания) Тогда
				ТекстСообщения = "Не выбрана доп. текстура";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.НоменклатураДляСклеивания", ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьНожки И НЕ ЗначениеЗаполнено(Элемент.Ножки) Тогда
				ТекстСообщения = "Не выбраны ножки";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Ножки", ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьСтекло И НЕ ЗначениеЗаполнено(Элемент.НоменклатураСтекло) Тогда
				ТекстСообщения = "Не выбрано стекло";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.Стекло", ТекстСообщения);
			КонецЕсли;
			
			Если (Элемент.ЕстьДВП ИЛИ Элемент.Изделие.СписокЯщики.Количество() > 0) И НЕ ЗначениеЗаполнено(Элемент.НоменклатураДВП) Тогда
				ТекстСообщения = "Не выбрана ДВП";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.НоменклатураДВП", ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьМДФ И НЕ ЗначениеЗаполнено(Элемент.НоменклатураМДФ) Тогда
				ТекстСообщения = "Не выбрана МДФ";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.МДФ", ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьМДФ И НЕ ЗначениеЗаполнено(Элемент.КромкаМДФ) Тогда
				ТекстСообщения = "Не заполнена кромка для МДФ";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Элементы.Детали.ТекущиеДанные.КромкаМДФ", ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	Иначе
		
		ТЗДетали = РеквизитФормыВЗначение("Детали");
		Для Каждого Элемент Из ТЗДетали Цикл
			Элемент.СтрокаТаблицаФасадов = ЗначениеВСтрокуВнутр(Элемент.ТаблицаФасадов);
		КонецЦикла;
		ЗначениеВРеквизитФормы(ТЗДетали, "Детали");
		
		Возврат ПоместитьВоВременноеХранилище(Детали.Выгрузить());
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ 

&НаКлиенте
Процедура ДеталиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Если (ТекущиеДанные <> Неопределено) Тогда
		НастройкиИзделия(ТекущиеДанные);
				
		МассивОсновныхНастроек = Новый Массив;
		
		МассивОсновныхНастроек.Добавить("НоменклатураЛДСП");
		МассивОсновныхНастроек.Добавить("КромкаЛДСП");
		МассивОсновныхНастроек.Добавить("НоменклатураЛДСПДоп");
		МассивОсновныхНастроек.Добавить("КромкаЛДСПДоп");
		МассивОсновныхНастроек.Добавить("НоменклатураДВП");
		МассивОсновныхНастроек.Добавить("НоменклатураДляСклеивания");
		МассивОсновныхНастроек.Добавить("Ручка");
		МассивОсновныхНастроек.Добавить("НоменклатураСтекло");
		МассивОсновныхНастроек.Добавить("НоменклатураМДФ");
		МассивОсновныхНастроек.Добавить("КромкаМДФ");
		МассивОсновныхНастроек.Добавить("ВидФасада");
		МассивОсновныхНастроек.Добавить("НоменклатураФасада");
		МассивОсновныхНастроек.Добавить("КромкаФасада");
		//МассивОсновныхНастроек.Добавить("Столешница");
		//МассивОсновныхНастроек.Добавить("Пристенок");
		
		Для Каждого ЭлементМассива Из МассивОсновныхНастроек Цикл
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные[ЭлементМассива]) И ЗначениеЗаполнено(ШапкаОсновныхНастроек[ЭлементМассива]) Тогда			
				ТекущиеДанные[ЭлементМассива] = ШапкаОсновныхНастроек[ЭлементМассива];		
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные[ЭлементМассива]) Тогда
				ШапкаОсновныхНастроек.Вставить(ЭлементМассива, ТекущиеДанные[ЭлементМассива]);
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущиеДанные.ТаблицаФасадов.Количество() > 0 Тогда
			ДеталиТаблицаФасадовПриАктивизацииСтроки(Элемент);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзделиеПриИзменении(Элемент)
	
	СтруктураИзделия = ПолучитьСтруктуруИзделия(Элементы.Детали.ТекущиеДанные.Изделие, Подразделение, Истина);
	Если ЗначениеЗаполнено(СтруктураИзделия) Тогда
		
		ДанныеИзделия = Элементы.Детали.ТекущиеДанные;
		ДанныеИзделия.КодИзделия = СтруктураИзделия.КодИзделия;
		ДанныеИзделия.Расположение = СтруктураИзделия.Расположение;
		ДанныеИзделия.ГлубинаИзделия = СтруктураИзделия.ГлубинаИзделия;
		ДанныеИзделия.ШиринаИзделия = СтруктураИзделия.ШиринаИзделия;
		ДанныеИзделия.ВысотаИзделия = СтруктураИзделия.ВысотаИзделия;
		ДанныеИзделия.ГлубинаИзделияМин = СтруктураИзделия.ГлубинаИзделияМин;
		ДанныеИзделия.ШиринаИзделияМин = СтруктураИзделия.ШиринаИзделияМин;
		ДанныеИзделия.ВысотаИзделияМин = СтруктураИзделия.ВысотаИзделияМин;
		ДанныеИзделия.ГлубинаИзделияМакс = СтруктураИзделия.ГлубинаИзделияМакс;
		ДанныеИзделия.ШиринаИзделияМакс = СтруктураИзделия.ШиринаИзделияМакс;
		ДанныеИзделия.ВысотаИзделияМакс = СтруктураИзделия.ВысотаИзделияМакс;
		ДанныеИзделия.Шаг = СтруктураИзделия.Шаг;
		ДанныеИзделия.ЕстьЛДСП = СтруктураИзделия.ЕстьЛДСП;
		ДанныеИзделия.ЕстьЛДСПДоп = СтруктураИзделия.ЕстьЛДСПДоп;
		ДанныеИзделия.ЕстьКлееная = СтруктураИзделия.ЕстьКлееная;
		ДанныеИзделия.ЕстьМДФ = СтруктураИзделия.ЕстьМДФ;
		ДанныеИзделия.ЕстьСтекло = СтруктураИзделия.ЕстьСтекло;
		ДанныеИзделия.ЕстьДВП = СтруктураИзделия.ЕстьДВП;
		//ДанныеИзделия.ЕстьПристенок = СтруктураИзделия.ЕстьПристенок;
		ДанныеИзделия.ЕстьМойка = СтруктураИзделия.ЕстьМойка;
		ДанныеИзделия.ЕстьСушка = СтруктураИзделия.ЕстьСушка;
		ДанныеИзделия.ЕстьНожки = СтруктураИзделия.ЕстьНожки;
		ДанныеИзделия.Мойка = СтруктураИзделия.НоменклатураМойка;
		ДанныеИзделия.Сушка = СтруктураИзделия.НоменклатураСушка;
		ДанныеИзделия.Ножки = СтруктураИзделия.Ножки;
		ДанныеИзделия.НоменклатурнаяГруппаСушка = СтруктураИзделия.НоменклатурнаяГруппаСушка;
		
		ДанныеИзделия.Европаз = 16;
		ДанныеИзделия.Столешница = 38;
		
		ТаблицаФасадов = Элементы.Детали.ТекущиеДанные.ТаблицаФасадов;
		ТаблицаФасадов.Очистить();
		Для Индекс = 1 По СтруктураИзделия.КоличествоТаблицаФасадов Цикл
			Строка = Элементы.Детали.ТекущиеДанные.ТаблицаФасадов.Добавить();
			Строка.НомерСтроки = Индекс;
			Строка.ИмяФасада = СтруктураИзделия["ТаблицаФасадов" + Индекс + "Имя"];
			Строка.ВидФасада = СтруктураИзделия["ТаблицаФасадов" + Индекс + "ВидФасада"];
			Строка.РасположениеРучки = СтруктураИзделия["ТаблицаФасадов" + Индекс + "ПоложениеРучки"];
			Строка.МеханизмФасада = СтруктураИзделия["ТаблицаФасадов" + Индекс + "МеханизмФасада"];
			Строка.Демпфер = СтруктураИзделия["ТаблицаФасадов" + Индекс + "Демпфер"];
			Строка.КоличествоМеханизмФасада = СтруктураИзделия["ТаблицаФасадов" + Индекс + "КоличествоМеханизмФасада"];
			Строка.КоличествоДемпфер = СтруктураИзделия["ТаблицаФасадов" + Индекс + "КоличествоДемпфер"];
			Строка.ВидЭлемента = СтруктураИзделия["ТаблицаФасадов" + Индекс];
			Строка.НомерДетали = СтруктураИзделия["ТаблицаФасадов" + Индекс + "НомерДетали"];
			Строка.Петли = СтруктураИзделия["ТаблицаФасадов" + Индекс + "Петли"];
			Строка.КоличествоПетель = СтруктураИзделия["ТаблицаФасадов" + Индекс + "КоличествоПетель"];
			Строка.РасположениеПазов = СтруктураИзделия["ТаблицаФасадов" + Индекс + "РасположениеПазов"];
			
			Строка.ДопЭлемент = ?(СтруктураИзделия.Свойство("Бутылочница"), СтруктураИзделия.Бутылочница, Неопределено);
	        			
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.ВидФасада) Тогда
				Строка.ВидФасада = ШапкаОсновныхНастроек.ВидФасада;
			КонецЕсли;
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураФасада) Тогда
				Строка.НоменклатураФасада = ШапкаОсновныхНастроек.НоменклатураФасада;
			КонецЕсли;
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.КромкаФасада) Тогда
				Строка.ОбрамлениеФасада = ШапкаОсновныхНастроек.КромкаФасада;
			КонецЕсли;
			
			Если Строка.ВидЭлемента = "Ящик" Тогда
				Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураЛДСП) Тогда
					Строка.НоменклатураЭлемента = ШапкаОсновныхНастроек.НоменклатураЛДСП;
				КонецЕсли;
				Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.КромкаЛДСП) Тогда
					Строка.ТорцовкаЭлемента = ШапкаОсновныхНастроек.КромкаЛДСП;
				КонецЕсли;
				Строка.ВыдвижнойЭлемент = СтруктураИзделия.СтандартныйЯщик;
				Строка.МеханизмЭлемента = СтруктураИзделия["ТаблицаФасадов" + Индекс + "МеханизмЭлемента"];
			КонецЕсли;	
		КонецЦикла;
		
		НастройкиИзделия(ДанныеИзделия);
		
		Ручка = Элементы.Детали.ТекущиеДанные.Ручка;
		УстановитьПараметр(ТаблицаФасадов, Ручка, "НоменклатураРучки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИзделия(ДанныеИзделия)
	
	Если ДанныеИзделия <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИзделия.Изделие) Тогда
						
			Элементы.ГлубинаИзделия.Подсказка = Строка(ДанныеИзделия.ГлубинаИзделияМин) + " - " + Строка(ДанныеИзделия.ГлубинаИзделияМакс);
			Элементы.ГлубинаИзделия.МаксимальноеЗначение = ДанныеИзделия.ГлубинаИзделияМакс;
			Элементы.ГлубинаИзделия.МинимальноеЗначение = ДанныеИзделия.ГлубинаИзделияМин;
			
			Элементы.ШиринаИзделия.Подсказка = Строка(ДанныеИзделия.ШиринаИзделияМин) + " - " + Строка(ДанныеИзделия.ШиринаИзделияМакс);
			Если ДанныеИзделия.Шаг > 1 Тогда
				Элементы.ШиринаИзделия.Подсказка = Элементы.ШиринаИзделия.Подсказка + " (шаг: " + Строка(ДанныеИзделия.Шаг) + ")";
			КонецЕсли;	
			Элементы.ШиринаИзделия.МаксимальноеЗначение = ДанныеИзделия.ШиринаИзделияМакс;
			Элементы.ШиринаИзделия.МинимальноеЗначение = ДанныеИзделия.ШиринаИзделияМин;
			
			Элементы.ВысотаИзделия.Подсказка = Строка(ДанныеИзделия.ВысотаИзделияМин) + " - " + Строка(ДанныеИзделия.ВысотаИзделияМакс);
			Элементы.ВысотаИзделия.МаксимальноеЗначение = ДанныеИзделия.ВысотаИзделияМакс;
			Элементы.ВысотаИзделия.МинимальноеЗначение = ДанныеИзделия.ВысотаИзделияМин;
			
			НастройкиФасадов = ДанныеИзделия.ТаблицаФасадов.Количество() > 0;
			
			Элементы.ДеталиНоменклатураЛДСП.Доступность = ДанныеИзделия.ЕстьЛДСП;
			Элементы.ДеталиКромкаЛДСП.Доступность = ДанныеИзделия.ЕстьЛДСП;
			Элементы.ДеталиНоменклатураЛДСПДоп.Доступность = ДанныеИзделия.ЕстьЛДСПДоп;
			Элементы.ДеталиКромкаЛДСПДоп.Доступность = ДанныеИзделия.ЕстьЛДСПДоп;
			Элементы.ДеталиНоменклатураДляСклеивания.Доступность = ДанныеИзделия.ЕстьКлееная;
			Элементы.ДеталиНоменклатураМДФ.Доступность = ДанныеИзделия.ЕстьМДФ;
			Элементы.ДеталиКромкаМДФ.Доступность = ДанныеИзделия.ЕстьМДФ;
			Элементы.ДеталиНоменклатураСтекло.Доступность = ДанныеИзделия.ЕстьСтекло;
			Элементы.ДеталиНоменклатураДВП.Доступность = ДанныеИзделия.ЕстьДВП;
			Элементы.ДеталиРучка.Доступность = НастройкиФасадов;
			//Элементы.ДеталиПристенок.Доступность = ДанныеИзделия.ЕстьПристенок;
			Элементы.ДеталиВидФасада.Доступность = НастройкиФасадов;
			Элементы.ДеталиНоменклатураФасада.Доступность = НастройкиФасадов;
			Элементы.ДеталиКромкаФасада.Доступность = НастройкиФасадов;
			Элементы.ДеталиМойка.Доступность = ДанныеИзделия.ЕстьМойка;
			Элементы.ДеталиСушка.Доступность = ДанныеИзделия.ЕстьСушка;
			Элементы.ДеталиНожки.Доступность = ДанныеИзделия.ЕстьНожки;
			
			ПриИзмененииВидФасада(Элементы.Детали.ТекущиеДанные.ВидФасада);
		КонецЕсли;
		ОтобразитьКартинку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаИзделияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Шаг > 0 Тогда
			Если ТекущиеДанные.ШиринаИзделия % ТекущиеДанные.Шаг <> 0 Тогда
				//Установим минимальное значение ширины короба
				ТекущиеДанные.ШиринаИзделия = ТекущиеДанные.ШиринаИзделияМин;
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Соблюдайте шаг %1 ", ТекущиеДанные.Шаг);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.ШиринаИзделия");
			Иначе
				Если ЗначениеЗаполнено(ТекущиеДанные.Сушка) Тогда
					ТекущиеДанные.Сушка = ПолучитьДопЭлемент(ТекущиеДанные.НоменклатурнаяГруппаСушка, ТекущиеДанные.ШиринаИзделия, Подразделение);
				КонецЕсли;
				
				ТаблицаФасадов = ТекущиеДанные.ТаблицаФасадов;
				Для Каждого Элемент Из ТаблицаФасадов Цикл
					Если ЗначениеЗаполнено(Элемент.ДопЭлемент) Тогда
						Элемент.ДопЭлемент = УстановитьДопЭлемент(Элемент.ДопЭлемент, ТекущиеДанные.ШиринаИзделия, Подразделение);
					КонецЕсли;
					//Если ЗначениеЗаполнено(Элемент.МеханизмФасада) Тогда
					//	Элемент.МеханизмФасада = УстановитьДопЭлемент(Элемент.МеханизмФасада, ТекущиеДанные.ШиринаИзделия, Подразделение);
					//КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьДопЭлемент(НоменклатураЭлемента, Ширина, Подразделение)
	
	НовыйЭлемент = НоменклатураЭлемента;
	Если НоменклатураЭлемента.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Бутылочница 
		ИЛИ НоменклатураЭлемента.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком Тогда
		НовыйЭлемент = ПолучитьДопЭлемент(Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком, Ширина, Подразделение);
	//ИначеЕсли НоменклатураЭлемента.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ГазовыйЛифт Тогда
	//	НовыйЭлемент = ПолучитьДопЭлемент(Справочники.НоменклатурныеГруппы.ГазовыйЛифт, Ширина, Подразделение);	
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

&НаКлиенте
Процедура ДеталиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗагрузитьТабличнуюЧасть(ВыбранноеЗначение);
	
	Детали.Сортировать("НовыйИндекс Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураЛДСППриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	НоменклатураЛДСП = ТекущиеДанные.НоменклатураЛДСП;
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСП", НоменклатураЛДСП);
	
	Если ТекущиеДанные.ЕстьЛДСПДоп Тогда
		
		ТекущиеДанные.НоменклатураЛДСПДоп = НоменклатураЛДСП;	
		ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСПДоп", ТекущиеДанные.НоменклатураЛДСПДоп);
				
	КонецЕсли;
	
	СтруктураПодставляяемойНоменклатуры = ЛексСервер.ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(НоменклатураЛДСП, Подразделение);	
	ТекущиеДанные.КромкаЛДСП = СтруктураПодставляяемойНоменклатуры.Кромка045_19;
	УстановитьПараметрыКромки(ТекущиеДанные);
	 	
	УстановитьПараметр(ТекущиеДанные.ТаблицаФасадов, НоменклатураЛДСП, "НоменклатураЭлемента");
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаЛДСППриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	УстановитьПараметрыКромки(ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыКромки(ТекущиеДанные)
	
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСП", ТекущиеДанные.КромкаЛДСП);
	
	УстановитьПараметр(ТекущиеДанные.ТаблицаФасадов, ТекущиеДанные.КромкаЛДСП, "ТорцовкаЭлемента");	
	
	Если ТекущиеДанные.ЕстьЛДСПДоп Тогда
		
		ТекущиеДанные.КромкаЛДСПДоп = ТекущиеДанные.КромкаЛДСП;	
		ШапкаОсновныхНастроек.Вставить("КромкаЛДСПДоп", ТекущиеДанные.КромкаЛДСПДоп);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураЛДСПДопПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	НоменклатураЛДСПДоп = ТекущиеДанные.НоменклатураЛДСПДоп;	
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСПДоп", НоменклатураЛДСПДоп);
	
	СтруктураПодставляяемойНоменклатуры = ЛексСервер.ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(НоменклатураЛДСПДоп, Подразделение);	
	ТекущиеДанные.КромкаЛДСПДоп = СтруктураПодставляяемойНоменклатуры.Кромка045_19;	
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСПДоп", ТекущиеДанные.КромкаЛДСПДоп);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаЛДСПДопПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ТекущиеДанные.КромкаЛДСПДоп = ТекущиеДанные.КромкаЛДСП;	
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСПДоп", ТекущиеДанные.КромкаЛДСПДоп);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиСтолешницаПриИзменении(Элемент)
	//ШапкаОсновныхНастроек.Вставить("Столешница", Элементы.Детали.ТекущиеДанные.Столешница);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураСтеклоПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураСтекло", Элементы.Детали.ТекущиеДанные.НоменклатураСтекло);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураМДФПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураМДФ", Элементы.Детали.ТекущиеДанные.НоменклатураМДФ);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаМДФПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("КромкаМДФ", Элементы.Детали.ТекущиеДанные.КромкаМДФ);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураДВППриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураДВП", Элементы.Детали.ТекущиеДанные.НоменклатураДВП);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиРучкаПриИзменении(Элемент)
	
	Ручка = Элементы.Детали.ТекущиеДанные.Ручка;
	ШапкаОсновныхНастроек.Вставить("Ручка", Ручка);
	
	УстановитьПараметр(Элементы.Детали.ТекущиеДанные.ТаблицаФасадов, Ручка, "НоменклатураРучки");	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураДляСклеиванияПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания", Элементы.Детали.ТекущиеДанные.НоменклатураДляСклеивания);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПристенокПриИзменении(Элемент)
	//ШапкаОсновныхНастроек.Вставить("Пристенок", Элементы.Детали.ТекущиеДанные.Пристенок);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиВидФасадаПриИзменении(Элемент)
	
	ВидФасада = Элементы.Детали.ТекущиеДанные.ВидФасада;
	ШапкаОсновныхНастроек.Вставить("ВидФасада", ВидФасада);	
	
	Элементы.ДеталиНоменклатураФасада.СписокВыбора.Очистить();
	Элементы.ДеталиКромкаФасада.СписокВыбора.Очистить();
	ПриИзмененииВидФасада(ВидФасада);
	
	УстановитьПараметр(Элементы.Детали.ТекущиеДанные.ТаблицаФасадов, Элементы.Детали.ТекущиеДанные.ВидФасада, "ВидФасада");
	
	Элементы.Детали.ТекущиеДанные.НоменклатураФасада = Неопределено;
	ДеталиНоменклатураФасадаПриИзменении(Элемент);
	Элементы.Детали.ТекущиеДанные.КромкаФасада = Неопределено;
	ДеталиКромкаФасадаПриИзменении(Элемент);
	
	ДеталиТаблицаФасадовПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидФасада(ВидФасада)
	
	Если ВидФасада = "ФасадАГТ" Тогда
		Элементы.ДеталиНоменклатураФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ФасадыАГТ);
		Элементы.ДеталиКромкаФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.АГТПрофиль);
	ИначеЕсли ВидФасада = "ФасадЛДСП" Тогда
		Элементы.ДеталиНоменклатураФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП16);
		Элементы.ДеталиКромкаФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаКФасадам);
	ИначеЕсли ВидФасада = "ФасадМДФ" Тогда
		Элементы.ДеталиНоменклатураФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.МДФ18);
		Элементы.ДеталиКромкаФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаКМДФ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураФасадаПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("НоменклатураФасада", Элементы.Детали.ТекущиеДанные.НоменклатураФасада);

	УстановитьПараметр(Элементы.Детали.ТекущиеДанные.ТаблицаФасадов, Элементы.Детали.ТекущиеДанные.НоменклатураФасада, "НоменклатураФасада");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаФасадаПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("КромкаФасада", Элементы.Детали.ТекущиеДанные.КромкаФасада);
	
	УстановитьПараметр(Элементы.Детали.ТекущиеДанные.ТаблицаФасадов, Элементы.Детали.ТекущиеДанные.КромкаФасада, "ОбрамлениеФасада");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиРасположениеПриИзменении(Элемент)
	
	ОтобразитьКартинку();	
	
КонецПроцедуры

/////////////////////////////////////////////////НОВЫЕ ФАСАДЫ///////////////////////////////////////////////////////

&НаКлиенте
Процедура ДеталиТаблицаФасадовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ТаблицаФасадов.Количество() > 0 Тогда
			ЗагрузитьЗначениеВыбораФасада();
			ДеталиТаблицаФасадовВыдвижнойЭлементПриИзменении(Элемент);
			
			ДанныеТаблицаФасадов = Элементы.ДеталиТаблицаФасадов.ТекущиеДанные;
			Если ДанныеТаблицаФасадов <> Неопределено Тогда
				ЭтоЯщик = ДанныеТаблицаФасадов.ВидЭлемента = "Ящик";
				
				Элементы.ДеталиТаблицаФасадовРасположениеРучки.ТолькоПросмотр = ЭтоЯщик;
				Элементы.ДеталиТаблицаФасадовМеханизмФасада.ТолькоПросмотр = ЭтоЯщик;
				Элементы.ДеталиТаблицаФасадовКоличествоДемпфер.ТолькоПросмотр = ЭтоЯщик;
				Элементы.ДеталиТаблицаФасадовДемпфер.ТолькоПросмотр = ЭтоЯщик;
				Элементы.ДеталиТаблицаФасадовКоличествоМеханизмФасада.ТолькоПросмотр = ЭтоЯщик;
				Элементы.ДеталиТаблицаФасадовПетли.ТолькоПросмотр = ЭтоЯщик;
				Элементы.ДеталиТаблицаФасадовКоличествоПетель.ТолькоПросмотр = ЭтоЯщик;
				Элементы.ДеталиТаблицаФасадовРасположениеПазов.ТолькоПросмотр = ЭтоЯщик;
				Элементы.ДеталиТаблицаФасадовВыдвижнойЭлемент.ТолькоПросмотр = НЕ ЭтоЯщик;
				Элементы.ДеталиТаблицаФасадовНоменклатураЭлемента.ТолькоПросмотр = НЕ ЭтоЯщик;
				Элементы.ДеталиТаблицаФасадовТорцовкаЭлемента.ТолькоПросмотр = НЕ ЭтоЯщик;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиТаблицаФасадовВидФасадаПриИзменении(Элемент)
	
	ДанныеТаблицаФасадов = Элементы.ДеталиТаблицаФасадов.ТекущиеДанные;
	ДанныеТаблицаФасадов.НоменклатураФасада = Неопределено;
	ДанныеТаблицаФасадов.ОбрамлениеФасада = Неопределено;
	//ДанныеТаблицаФасадов.Петли = Неопределено;
	ЗагрузитьЗначениеВыбораФасада();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗначениеВыбораФасада()
	
	ДанныеТаблицаФасадов = Элементы.ДеталиТаблицаФасадов.ТекущиеДанные;
	Если ДанныеТаблицаФасадов <> Неопределено Тогда
		Элементы.ДеталиТаблицаФасадовНоменклатураФасада.СписокВыбора.Очистить();
		Элементы.ДеталиТаблицаФасадовОбрамлениеФасада.СписокВыбора.Очистить();
		Элементы.ДеталиТаблицаФасадовПетли.СписокВыбора.Очистить();
		
		МассивНоменклатураФасада = Новый Массив;
		МассивОбрамлениеФасада = Новый Массив;
		МассивПетель = Новый Массив;
		
		Если ДанныеТаблицаФасадов.ВидФасада = "ФасадАГТ" Тогда
			МассивНоменклатураФасада = МассивыНоменклатурныхГрупп.ФасадыАГТ;
			МассивОбрамлениеФасада = МассивыНоменклатурныхГрупп.АГТПрофиль;
			МассивПетель = МассивыНоменклатурныхГрупп.Петли; 
		ИначеЕсли ДанныеТаблицаФасадов.ВидФасада = "ФасадСтеклянный" Тогда
			МассивНоменклатураФасада = МассивыНоменклатурныхГрупп.Стекло_И_Зеркало;
			МассивПетель = МассивыНоменклатурныхГрупп.ПетлиДляСтекол;
		ИначеЕсли ДанныеТаблицаФасадов.ВидФасада = "ФасадЛДСП" Тогда
			МассивНоменклатураФасада = МассивыНоменклатурныхГрупп.ЛДСП16;
			МассивОбрамлениеФасада = МассивыНоменклатурныхГрупп.КромкаКФасадам;
			МассивПетель = МассивыНоменклатурныхГрупп.Петли;
		ИначеЕсли ДанныеТаблицаФасадов.ВидФасада = "ФасадМДФ" Тогда
			МассивНоменклатураФасада = МассивыНоменклатурныхГрупп.МДФ18;
			МассивОбрамлениеФасада = МассивыНоменклатурныхГрупп.КромкаКМДФ;
			МассивПетель = МассивыНоменклатурныхГрупп.Петли;
		ИначеЕсли ДанныеТаблицаФасадов.ВидФасада = "ФасадАлюминиевый" Тогда
			МассивНоменклатураФасада = МассивыНоменклатурныхГрупп.Стекло_И_Зеркало;
			МассивОбрамлениеФасада = МассивыНоменклатурныхГрупп.РамочныйАлюминий;
			МассивПетель = МассивыНоменклатурныхГрупп.Петли;
		ИначеЕсли ДанныеТаблицаФасадов.ВидФасада = "ФасадСтеклянныйЗакругленный" Тогда
			МассивНоменклатураФасада = МассивыНоменклатурныхГрупп.Стекло_И_Зеркало;
			МассивПетель = МассивыНоменклатурныхГрупп.ПетлиПоворотные;
		КонецЕсли;
		
		Элементы.ДеталиТаблицаФасадовНоменклатураФасада.СписокВыбора.ЗагрузитьЗначения(МассивНоменклатураФасада);
		Элементы.ДеталиТаблицаФасадовОбрамлениеФасада.СписокВыбора.ЗагрузитьЗначения(МассивОбрамлениеФасада);
		Элементы.ДеталиТаблицаФасадовПетли.СписокВыбора.ЗагрузитьЗначения(МассивПетель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиТаблицаФасадовВыдвижнойЭлементПриИзменении(Элемент)
	
	ДанныеТаблицаФасадов = Элементы.ДеталиТаблицаФасадов.ТекущиеДанные;
	Если ДанныеТаблицаФасадов <> Неопределено Тогда
		Элементы.ДеталиТаблицаФасадовМеханизмЭлемента.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ДанныеТаблицаФасадов.ВыдвижнойЭлемент);
		Если ДанныеТаблицаФасадов.ВыдвижнойЭлемент = ПредопределенноеЗначение("Перечисление.ВидыЯщика.Обычный") Тогда
			Если ДанныеТаблицаФасадов.МеханизмЭлемента = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.Тандембокс") 
				ИЛИ ДанныеТаблицаФасадов.МеханизмЭлемента = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.Метабокс") Тогда
				ДанныеТаблицаФасадов.МеханизмЭлемента = Неопределено;
			КонецЕсли;
		ИначеЕсли ДанныеТаблицаФасадов.ВыдвижнойЭлемент = ПредопределенноеЗначение("Перечисление.ВидыЯщика.Тандембокс") Тогда
			ДанныеТаблицаФасадов.МеханизмЭлемента = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.Тандембокс");	
			Элементы.ДеталиТаблицаФасадовМеханизмЭлемента.ТолькоПросмотр = Истина;
		ИначеЕсли ДанныеТаблицаФасадов.ВыдвижнойЭлемент = ПредопределенноеЗначение("Перечисление.ВидыЯщика.Метабокс") Тогда	
			ДанныеТаблицаФасадов.МеханизмЭлемента =	ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.Метабокс");	
			Элементы.ДеталиТаблицаФасадовМеханизмЭлемента.ТолькоПросмотр = Истина;
		Иначе
			ДанныеТаблицаФасадов.МеханизмЭлемента = Неопределено;
			Элементы.ДеталиТаблицаФасадовМеханизмЭлемента.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиТабличныеЧастиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиТаблицаФасадовПовернутьФасадПриИзменении(Элемент)
	
	ДанныеТаблицаФасадов = Элементы.ДеталиТаблицаФасадов.ТекущиеДанные; 
	
	Если ЗначениеЗаполнено(ДанныеТаблицаФасадов.РасположениеПазов) Тогда
		
		//ДанныеТаблицаФасадов.РасположениеПазов = ПовернутьФасад(ДанныеТаблицаФасадов.РасположениеПазов, ДанныеТаблицаФасадов.ПовернутьФасад);
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДанныеТаблицаФасадов.РасположениеПазовИРучкиНаФасадах) Тогда
		
		//ДанныеТаблицаФасадов.РасположениеПазовИРучкиНаФасадах.ПоложениеРучки = ПовернутьФасад(ДанныеТаблицаФасадов.РасположениеПазовИРучкиНаФасадах.ПоложениеРучки, ДанныеТаблицаФасадов.ПовернутьФасад);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПовернутьФасад(Расположение, ПовернутьФасад)

	Если ПовернутьФасад Тогда
		
		Если Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Сверху") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Слева")
		ИначеЕсли Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Слева") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Снизу")
		ИначеЕсли Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Снизу") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Справа")
		ИначеЕсли Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Справа") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Сверху")
		КонецЕсли;
		
	Иначе
		
		Если Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Сверху") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Справа")
		ИначеЕсли Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Слева") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Сверху")
		ИначеЕсли Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Снизу") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Слева")
		ИначеЕсли Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Справа") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Снизу")
		КонецЕсли;
		
	КонецЕсли;	

	Возврат Расположение;
	
КонецФункции 

&НаКлиенте
Процедура ДеталиПриИзменении(Элемент)
	
	Для Каждого Элемент Из Детали Цикл
		
		Элемент.НовыйИндекс = Детали.Индекс(Элемент) + 1;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодборКомплектации(НомГруппы, ЭлементФормы)
	
	Пар = Новый Структура();
	Пар.Вставить("НомГруппы", НомГруппы);
	Пар.Вставить("Производство", Подразделение);	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодборКомплектации", Пар, ЭлементФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураЛДСПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ЛДСП16"));
	
	ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаЛДСПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиКромкаЛДСП();
	
	ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомГруппыДеталиКромкаЛДСП()
	
	НомГруппы = Новый СписокЗначений;
	
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.Кромка045_19);
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_19);
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_35);
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.КантТ);
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.КромкаМДФ);
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.КантАлюминиевый);

	Возврат НомГруппы;
	
КонецФункции

&НаКлиенте
Процедура ДеталиНоменклатураЛДСПДопНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ЛДСП16"));
	
	ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаЛДСПДопНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиКромкаЛДСП();
	
	ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураСтеклоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиНоменклатураСтекло();
	
	ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомГруппыДеталиНоменклатураСтекло()
	
	НомГруппы = Новый СписокЗначений;
	
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.Стекло);
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.СтеклоДляСкругляемогоФасада);
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.Зеркало);

	Возврат НомГруппы;

КонецФункции

&НаКлиенте
Процедура ДеталиНоменклатураДляСклеиванияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ЛДСП16"));
	
	ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураМДФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.МДФ18"));
	
	ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаМДФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиКромкаМДФ();
	
	ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);

КонецПроцедуры

&НаСервере
Функция ПолучитьНомГруппыДеталиКромкаМДФ()
	
	НомГруппы = Новый СписокЗначений;
	
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.КромкаМДФ);
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.КантАлюминиевый);

	Возврат НомГруппы;

КонецФункции

&НаКлиенте
Процедура ДеталиНоменклатураДВПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ДВП"));
	
	ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидФасада = Элементы.Детали.ТекущиеДанные.ВидФасада;
	Если ЗначениеЗаполнено(ВидФасада) Тогда
	
		НомГруппы = ПолучитьНомГруппыДеталиНоменклатураФасада(ВидФасада);
		ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомГруппыДеталиНоменклатураФасада(ВидФасада)
	
	НомГруппы = Новый СписокЗначений;
	
	
	Если ВидФасада = "ФасадАГТ" Тогда
		
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.АГТПанель);
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.Стекло);
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.СтеклоДляСкругляемогоФасада);
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.Зеркало);
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП10);
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.МДФ8);

	ИначеЕсли ВидФасада = "ФасадЛДСП" Тогда
		
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП16);

	ИначеЕсли ВидФасада = "ФасадМДФ" Тогда
		
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.МДФ18);

	КонецЕсли;

	Возврат НомГруппы;

КонецФункции

&НаКлиенте
Процедура ДеталиКромкаФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидФасада = Элементы.Детали.ТекущиеДанные.ВидФасада;
	Если ЗначениеЗаполнено(ВидФасада) Тогда
	
		 НомГруппы = ПолучитьНомГруппыДеталиКромкаФасада(ВидФасада);
		 ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомГруппыДеталиКромкаФасада(ВидФасада)
	
	НомГруппы = Новый СписокЗначений;
	
	
	Если ВидФасада = "ФасадАГТ" Тогда
		
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.АГТПрофиль);

	ИначеЕсли ВидФасада = "ФасадЛДСП" Тогда
		
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.Кромка045_19);
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_19);
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_35);
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.КромкаМДФ);
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.КантАлюминиевый);

	ИначеЕсли ВидФасада = "ФасадМДФ" Тогда
		
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.КромкаМДФ);
		НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.КантАлюминиевый);

	КонецЕсли;

	Возврат НомГруппы;

КонецФункции

&НаКлиенте
Процедура ДеталиРучкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.Ручка"));
	
	ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеталиНожкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.КухонныеНожки"));
	
	ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиМойкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.Мойка"));
	
	ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиСушкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиСушка();
	
	ОткрытьФормуПодборКомплектации(НомГруппы, Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомГруппыДеталиСушка()
	
	НомГруппы = Новый СписокЗначений;
	
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.Сушка);
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.СушкаДляКоробаСДном);
	НомГруппы.Добавить(Справочники.НоменклатурныеГруппы.СушкаДляКоробаБезДна);

	Возврат НомГруппы;

КонецФункции

&НаКлиенте
Процедура ДеталиТаблицаФасадовРасположениеПазовИРучкиНаФасадахОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураРасположенияПазовИРучки = РасположениеПазовОбработкаВыбораНаСервере(ВыбранноеЗначение);
	ТекущиеДанные = Элементы.ДеталиТаблицаФасадов.ТекущиеДанные;
	ТекущиеДанные.РасположениеПазовИРучкиНаФасадах = СтруктураРасположенияПазовИРучки.ЭлементСправочника;
	ПоложениеРучки = СтруктураРасположенияПазовИРучки.ПоложениеРучки;
	ПоложениеПазов = СтруктураРасположенияПазовИРучки.ПоложениеПазов;
	
КонецПроцедуры

&НаСервере
Функция РасположениеПазовОбработкаВыбораНаСервере(ЗначениеСправочника)
	
	СтруктураРасположенияПазовИРучки = Новый Структура;
	ЭлементСправочника = Справочники.РасположениеПазовИРучкиНаФасадах.НайтиПоРеквизиту("ИмяКартинки", ЗначениеСправочника);
	СтруктураРасположенияПазовИРучки.Вставить("ПоложениеРучки", ЭлементСправочника.ПоложениеРучки);
	СтруктураРасположенияПазовИРучки.Вставить("ПоложениеПазов", ЭлементСправочника.ПоложениеПазов);
	СтруктураРасположенияПазовИРучки.Вставить("ЭлементСправочника", ЭлементСправочника);
	Возврат СтруктураРасположенияПазовИРучки;
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
