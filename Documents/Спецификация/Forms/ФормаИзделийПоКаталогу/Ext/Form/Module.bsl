&НаКлиенте
Перем МассивДанныхДетали;

&НаКлиенте
Перем МассивВидовИзделий;

&НаСервере
Процедура ПроверитьКромкиЛДСП(Ошибки, ЛДСП)
	
	Структура = ЛексСервер.ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(ЛДСП, Подразделение);
	
	Если НЕ ЗначениеЗаполнено(Структура.Кромка045_19) Тогда
		Текст = "Не задана кромка 0.45мм по умолчанию для " + ЛДСП + ". Обратитесь в ИРЦ";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , Текст);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Структура.Кромка2_19) Тогда
		Текст = "Не задана кромка 2мм по умолчанию для " + ЛДСП + ". Обратитесь в ИРЦ";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , Текст);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Структура.Кромка2_35) Тогда
		Текст = "Не задана кромка 2мм по умолчанию для " + ЛДСП + ". Обратитесь в ИРЦ";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруИзделия(Изделие, Подразделение, Изменение = Ложь) 
	
	Структура = Новый Структура;
	
	ВидИзделияПоКаталогу = Изделие.ВидИзделияПоКаталогу;
	СписокМатериалы = Изделие.СписокМатериалы;
	СписокНоменклатуры = Изделие.СписокНоменклатуры;
	СписокДопЭлементов = Изделие.СписокДопЭлементов;
	СписокЯщики = Изделие.СписокЯщики;
	ЯщикиКоличество = Изделие.СписокЯщики.Количество();
	КухонныеНожки = Справочники.НоменклатурныеГруппы.КухонныеНожки;	
	
	ЕстьКлееная = Ложь;
	ЕстьЛДСП = ЯщикиКоличество > 0;
	ЕстьДВП = ЯщикиКоличество > 0;
	ЕстьЛДСПДоп = Ложь;
	ЕстьНожки = ЗначениеЗаполнено(СписокНоменклатуры.Найти(КухонныеНожки, "Номенклатура"));
	ЕстьСтекло = Ложь;
	ЕстьМДФ = Ложь;
	ЕстьСтолешница = Ложь;
	
	Для Каждого Деталь Из СписокМатериалы Цикл
		
		ДанныеДетали = ПолучитьДанныеДеталиСервер(Деталь.ВидДетали);
		
		Если НЕ ЕстьСтолешница И ДанныеДетали.ЭтоСтолешница Тогда
			ЕстьСтолешница = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьКлееная И ДанныеДетали.Клееная Тогда
			ЕстьКлееная = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьСтекло И ДанныеДетали.ЭтоСтекло Тогда
			ЕстьСтекло = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьЛДСПДоп И Деталь.ВторойЦвет Тогда
			ЕстьЛДСПДоп = Истина;
		КонецЕсли;
		
		Если НЕ ДанныеДетали.ЭтоФасад Тогда
		
			Для Каждого Стр Из ДанныеДетали.НомГруппы Цикл
				
				Если Стр.Значение.ПолеВыбора = "Текстура" ИЛИ Стр.Значение.ПолеВыбора = "ДопНом" Тогда
				
					НомГруппа = Стр.Значение.Группа;
					
					Если НЕ ЕстьЛДСП И (НомГруппа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.ЛДСП) ИЛИ НомГруппа = Справочники.НоменклатурныеГруппы.ЛДСП) Тогда
						ЕстьЛДСП = Истина;
					КонецЕсли;
					
					Если НЕ ЕстьДВП И (НомГруппа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.ДВП) ИЛИ НомГруппа = Справочники.НоменклатурныеГруппы.ДВП) Тогда
						ЕстьДВП = Истина;
					КонецЕсли;
					
					Если НЕ ЕстьМДФ И (НомГруппа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.МДФ) ИЛИ НомГруппа = Справочники.НоменклатурныеГруппы.МДФ) Тогда
						ЕстьМДФ = Истина;
					КонецЕсли;
					
				КонецЕсли;
						
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	Структура.Вставить("КодИзделия", Изделие.Код);
	Структура.Вставить("Расположение", Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая);
	Структура.Вставить("ГлубинаИзделия", Изделие.ГлубинаИзделия);
	Структура.Вставить("ШиринаИзделия", Изделие.ШиринаИзделия);
	Структура.Вставить("ВысотаИзделия", Изделие.ВысотаИзделия);
	Структура.Вставить("ГлубинаИзделияМин", Изделие.ГлубинаИзделияМин);
	Структура.Вставить("ШиринаИзделияМин", Изделие.ШиринаИзделияМин);
	Структура.Вставить("ВысотаИзделияМин", Изделие.ВысотаИзделияМин);
	Структура.Вставить("ГлубинаИзделияМакс", Изделие.ГлубинаИзделияМакс);
	Структура.Вставить("ШиринаИзделияМакс", Изделие.ШиринаИзделияМакс);
	Структура.Вставить("ВысотаИзделияМакс", Изделие.ВысотаИзделияМакс);
	Структура.Вставить("Шаг", Изделие.Шаг);
	Структура.Вставить("ЕстьЛДСП", ЕстьЛДСП);
	Структура.Вставить("ЕстьЛДСПДоп", ЕстьЛДСПДоп);
	Структура.Вставить("ЕстьКлееная", ЕстьКлееная);
	Структура.Вставить("ЕстьДВП", ЕстьДВП);
	Структура.Вставить("ЕстьСтекло", ЕстьСтекло);
	Структура.Вставить("ЕстьМДФ", ЕстьМДФ);
	Структура.Вставить("ЕстьСтолешница", ЕстьСтолешница);
	Структура.Вставить("ЕстьМойка", Ложь);
	Структура.Вставить("ЕстьСушка", Ложь);
	Структура.Вставить("НоменклатураСушка", Неопределено);
	Структура.Вставить("НоменклатурнаяГруппаСушка", Неопределено);
	Структура.Вставить("НоменклатураМойка", Неопределено);
	Структура.Вставить("ЕстьНожки", ЕстьНожки);
	Структура.Вставить("Ножки", ?(ЕстьНожки, КухонныеНожки.ОсновнаяНоменклатура, Неопределено));
	
	Для Каждого Элемент Из СписокДопЭлементов Цикл	
		НоменклатураДопЭлемента = ПолучитьДопЭлемент(Элемент.ДопЭлемент, Изделие.ШиринаИзделия, Подразделение);
		Если Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.Сушка 
			ИЛИ Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.СушкаДляКоробаБезДна
			ИЛИ Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.СушкаДляКоробаСДном Тогда
			Структура.Вставить("ЕстьСушка", Истина);
			Структура.Вставить("НоменклатураСушка", НоменклатураДопЭлемента);
			Структура.Вставить("НоменклатурнаяГруппаСушка", Элемент.ДопЭлемент);
		ИначеЕсли Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.Мойка Тогда
			Структура.Вставить("ЕстьМойка", Истина);
			Структура.Вставить("НоменклатураМойка", НоменклатураДопЭлемента);
		ИначеЕсли Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.Бутылочница
			ИЛИ Элемент.ДопЭлемент = Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком Тогда
			Структура.Вставить("Бутылочница", НоменклатураДопЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	Если Изменение Тогда
		
		НомерЯщика = 0;
		
		Для Каждого Элемент Из СписокЯщики Цикл
			
			НомерЯщика = Элемент.НомерСтроки;
			
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "Имя", Элемент.ИмяЯщика);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "ВидФасада", Элемент.ВидФасада);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "ВидДеталиФасад", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "НомерДетали", Элемент.НомерСтроки);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика, "Ящик");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "КоличествоДемпфер", 0);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "КоличествоМеханизмФасада", 0);
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "МеханизмФасада", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "Демпфер", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "РасположениеПазовИРучкиНаФасадах", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "ПоложениеРучки", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "Петли", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "КоличествоПетель", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "РасположениеПазов", "");
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "МеханизмЭлемента", ?(ЗначениеЗаполнено(Элемент.ВидНаправляющих), Элемент.ВидНаправляющих, Справочники.НоменклатурныеГруппы.ПустаяСсылка()));
			Структура.Вставить("ТаблицаФасадов" + НомерЯщика + "ЕстьРучка", Истина);
			
		КонецЦикла;
		
		КоличествоФасадов = 0;
		
		Для Каждого Строка Из СписокМатериалы Цикл
			
			ДанныеДетали = ПолучитьДанныеДеталиСервер(Строка.ВидДетали);
			
			Если ДанныеДетали.ЭтоФасад Тогда
			
				КоличествоФасадов = КоличествоФасадов + 1;
				НомерФасада = НомерЯщика + КоличествоФасадов;
				
				Структура.Вставить("ТаблицаФасадов" + НомерФасада, "Фасад");
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "ВидФасада", Строка.ВидДетали.Наименование);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "ВидДеталиФасад", Строка.ВидДетали);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "НомерДетали", Строка.НомерСтроки);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "Имя", Строка.ИмяДетали);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "КоличествоДемпфер", Строка.КоличествоДемпфер);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "КоличествоМеханизмФасада", Строка.КоличествоМеханизмФасада);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "МеханизмФасада", Строка.МеханизмФасада);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "Демпфер", Строка.Демпфер);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "РасположениеПазовИРучкиНаФасадах", Строка.РасположениеПазовИРучкиНаФасадах);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "ПоложениеРучки", Строка.РасположениеПазовИРучкиНаФасадах.ПоложениеРучки);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "Петли", Строка.Петли);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "КоличествоПетель", Строка.КоличествоПетель);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "РасположениеПазов", Строка.РасположениеПазовИРучкиНаФасадах.ПоложениеПазов);
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "МеханизмЭлемента", "");
				Структура.Вставить("ТаблицаФасадов" + НомерФасада + "ЕстьРучка", НЕ Строка.РасположениеПазовИРучкиНаФасадах.БезРучки);
				
			КонецЕсли;

		КонецЦикла;
		
		КоличествоТаблицаФасадов = НомерЯщика + КоличествоФасадов;
		Структура.Вставить("КоличествоТаблицаФасадов", КоличествоТаблицаФасадов);
		
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ВыгрузитьНужнуюТаблицуВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Детали.Выгрузить(, "Изделие, ГлубинаИзделия, ШиринаИзделия, ВысотаИзделия, КодИзделия, Расположение"));
	
КонецФункции

&НаСервере
Процедура ЗагрузитьТабличнуюЧасть(АдресТаблицы)
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
		
		Для Каждого Строка Из Детали Цикл
			
			Строка.НовыйИндекс = ТЗ.Получить(Детали.Индекс(Строка)).Порядок + 1;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДопЭлемент(ДопЭлемент, ШиринаИзделия, Подразделение)
	
	НоменклатурнаяГруппа = ДопЭлемент;
	
	Если ДопЭлемент = Справочники.НоменклатурныеГруппы.Мойка Тогда
		
		Возврат Справочники.Номенклатура.МойкаКухоннаяМатовая731;
		
	Иначе

		Если ДопЭлемент = Справочники.НоменклатурныеГруппы.ГазовыйЛифт Тогда
			Знак = ">";
		ИначеЕсли ДопЭлемент = Справочники.НоменклатурныеГруппы.СушкаДляКоробаБезДна
			ИЛИ ДопЭлемент = Справочники.НоменклатурныеГруппы.СушкаДляКоробаСДном
			ИЛИ ДопЭлемент = Справочники.НоменклатурныеГруппы.Сушка Тогда
			Знак = "";
		Иначе
			Знак = "<";
		КонецЕсли;
		
		Порядок = ?(ДопЭлемент = Справочники.НоменклатурныеГруппы.ГазовыйЛифт, "", "УБЫВ");
		Ширина = ?(ДопЭлемент = Справочники.НоменклатурныеГруппы.ГазовыйЛифт, 50, ШиринаИзделия);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
		Запрос.УстановитьПараметр("ШиринаДетали", Ширина);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	спрНом.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК спрНом
		|ГДЕ
		|	спрНом.ШиринаДетали " + Знак + "= &ШиринаДетали
		|	И спрНом.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
		|
		|УПОРЯДОЧИТЬ ПО
		|	спрНом.ШиринаДетали " + Порядок;
		
		Выборка = Запрос.Выполнить().Выгрузить();
		
		Если Выборка.Количество() > 0 Тогда
			Возврат Выборка[0].Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрФасада(Параметр, ТипПараметра)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	ОбщийФасад = ТекущиеДанные.ВидДеталиФасад;
	
	СтрокиФасадов = ТаблицаФасадов.НайтиСтроки(Новый Структура("sUID", ТекущиеДанные.UID));
	
	Для Каждого Строка Из СтрокиФасадов Цикл
		
		Если Строка.ВидЭлемента = "Фасад" И 
		   ((ТипПараметра = "НоменклатураЭлемента" 
		 ИЛИ ТипПараметра = "ТорцовкаЭлемента" 
		 ИЛИ (НЕ Строка.ЕстьРучка И ТипПараметра = "НоменклатураРучки"))) Тогда
			
			Строка[ТипПараметра] = Неопределено;
			
		ИначеЕсли Строка.ВидЭлемента = "Фасад" И ОбщийФасад <> Строка.ВидДеталиФасад И ТипПараметра <> "ВидДеталиФасад" Тогда
			
			Строка[ТипПараметра] = Строка[ТипПараметра];
			
		Иначе
			
			Если (ТипПараметра <> "НоменклатураФасада") ИЛИ (ТипПараметра = "НоменклатураФасада" И ОбщийФасад = Строка.ВидДеталиФасад) Тогда 
				
				Строка[ТипПараметра] = Параметр;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Процедура ОтобразитьКартинку()
	
	Данные = Элементы.Детали.ТекущиеДанные;
	АдресИзделия = "";
	
	Если Данные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Данные.КодИзделия) Тогда
			АдресИзделия = РабочийКаталог + Данные.Расположение + Данные.КодИзделия;
		КонецЕсли;
		
		АдресВХранилище = "";
		Если ЗначениеЗаполнено(АдресИзделия) Тогда
			ИмяФайла = АдресИзделия;
			ФайлИзображения = Новый Файл(ИмяФайла);
			Если ФайлИзображения.Существует() Тогда
				ПоместитьФайл(АдресВХранилище, ИмяФайла, , Ложь);
			Иначе
				ИмяФайла = РабочийКаталог + ПредопределенноеЗначение("Перечисление.ВидыПрисоединенныхФайлов.ОсновнаяКартинка") + Данные.КодИзделия;
				ФайлИзображения = Новый Файл(ИмяФайла);
				Если ФайлИзображения.Существует() Тогда
					ПоместитьФайл(АдресВХранилище, ИмяФайла, , Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Изображение = АдресВХранилище;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	Подразделение = Параметры.Подразделение;
	ВидИзделияСпецификации = Параметры.Изделие.ВидИзделия;
	
	Детали.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицы));
	ТаблицаФасадов.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицаФасадов));
	
	ПерезаполнитьСтруктуруИзделийКаталога(Детали);	
	ЗаполнитьМассивНомГрупп();
	ЗаполнитьШапкуОсновныхНастроек();
	УстановитьОтборИзделийКаталога();
	УстановитьОтборТиповДеталейДляФасада();
	
	Элементы.ДеталиНоменклатураСтолешница.Видимость = Ложь;
	Элементы.ДеталиСушка.Видимость = Ложь;
	Элементы.ДеталиМойка.Видимость = Ложь;
	Элементы.ДеталиНожки.Видимость = Ложь;
	Элементы.ДеталиНоменклатураСтекло.Видимость = Ложь;
	Элементы.ДеталиНоменклатураДляСклеивания.Видимость = Ложь;
	Элементы.ДеталиНоменклатураМДФ.Видимость = Ложь;
	Элементы.ДеталиКромкаМДФ.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСтруктуруИзделийКаталога(Детали)
	
	Если ЗначениеЗаполнено(Детали) Тогда
		
		Если Параметры.Свойство("Идентификатор") Тогда
			Элементы.Детали.ТекущаяСтрока = Параметры.Идентификатор;
		КонецЕсли;
		
		Для каждого Элемент Из Детали Цикл
			
			Структура = ПолучитьСтруктуруИзделия(Элемент.Изделие, Подразделение);
			
			Элемент.НовыйИндекс = Детали.Индекс(Элемент) + 1;
			Элемент.КодИзделия = Структура.КодИзделия;
			Элемент.ГлубинаИзделияМин = Структура.ГлубинаИзделияМин;
			Элемент.ШиринаИзделияМин = Структура.ШиринаИзделияМин;
			Элемент.ВысотаИзделияМин = Структура.ВысотаИзделияМин;
			Элемент.ГлубинаИзделияМакс = Структура.ГлубинаИзделияМакс;
			Элемент.ШиринаИзделияМакс = Структура.ШиринаИзделияМакс;
			Элемент.ВысотаИзделияМакс = Структура.ВысотаИзделияМакс;
			Элемент.Шаг = Структура.Шаг;
			Элемент.ЕстьЛДСП = Структура.ЕстьЛДСП;
			Элемент.ЕстьЛДСПДоп = Структура.ЕстьЛДСПДоп;
			Элемент.ЕстьКлееная = Структура.ЕстьКлееная;
			Элемент.ЕстьМДФ = Структура.ЕстьМДФ;
			Элемент.ЕстьСтекло = Структура.ЕстьСтекло;
			Элемент.ЕстьДВП = Структура.ЕстьДВП;
			Элемент.ЕстьМойка = Структура.ЕстьМойка;
			Элемент.ЕстьСушка = Структура.ЕстьСушка;
			Элемент.ЕстьСтолешница = Структура.ЕстьСтолешница;
			Элемент.ЕстьНожки = Структура.ЕстьНожки;
			Элемент.НоменклатурнаяГруппаСушка = Структура.НоменклатурнаяГруппаСушка;
			Элемент.Расположение = ?(ЗначениеЗаполнено(Элемент.Расположение), Элемент.Расположение, Структура.Расположение);
			
			Если Элемент.Европаз = 0 Тогда
				Элемент.Европаз = 8;
			КонецЕсли;
			
			Если Элемент.Столешница = 0 Тогда
				Элемент.Столешница = 38;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Стр = Детали.Добавить();
		Стр.Расположение = Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая;
		Стр.UID = Новый УникальныйИдентификатор;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТиповДеталейДляФасада()
	
	ВидыФасадов = ПолучитьВидыФасадов();
	
	Элементы.ДеталиВидФасада.СписокВыбора.ЗагрузитьЗначения(ВидыФасадов);
	Элементы.ТаблицаФасадовВидФасада.СписокВыбора.ЗагрузитьЗначения(ВидыФасадов);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокИзделийКаталога()
	
	МассивВидовИзделий = Новый Массив;
	
	Если ВидИзделияСпецификации	= Перечисления.ВидыИзделий.КорпуснаяМебель Тогда
		
		МассивВидовИзделий.Добавить(Справочники.ВидыИзделийПоКаталогу.Комод);
		МассивВидовИзделий.Добавить(Справочники.ВидыИзделийПоКаталогу.НадстройкаКомода);
		МассивВидовИзделий.Добавить(Справочники.ВидыИзделийПоКаталогу.КорпуснаяМебель);
		
	Иначе
		
		МассивВидовИзделий.Добавить(Справочники.ВидыИзделийПоКаталогу.КухняВерхний);
		МассивВидовИзделий.Добавить(Справочники.ВидыИзделийПоКаталогу.КухняНижний);
		
	КонецЕсли;
	
	Возврат МассивВидовИзделий;
	
КонецФункции

&НаСервере
Функция УстановитьОтборИзделийКаталога()
	
	МассивВидовИзделий = ПолучитьСписокИзделийКаталога();
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(Новый ПараметрВыбора("Отбор.Активный", Истина));
	МассивОтбора.Добавить(Новый ПараметрВыбора("Отбор.ВидИзделияПоКаталогу", Новый ФиксированныйМассив(МассивВидовИзделий)));
	
	Элементы.ДеталиИзделие.ПараметрыВыбора = Новый ФиксированныйМассив(МассивОтбора);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьШапкуОсновныхНастроек()
	
	ШапкаОсновныхНастроек = Новый Структура;
	
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСП","");
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСП","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСПДоп","");
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСПДоп","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураДВП","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания","");
	ШапкаОсновныхНастроек.Вставить("Ручка","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураСтекло", "");
	ШапкаОсновныхНастроек.Вставить("НоменклатураМДФ","");
	ШапкаОсновныхНастроек.Вставить("КромкаМДФ","");
	ШапкаОсновныхНастроек.Вставить("ВидДеталиФасад", "");
	ШапкаОсновныхНастроек.Вставить("НоменклатураФасада","");
	ШапкаОсновныхНастроек.Вставить("КромкаФасада","");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивНомГрупп()
	
	МассивНомГрупп = Новый Структура();

	МассивНомГрупп.Вставить("ЛДСП", Справочники.НоменклатурныеГруппы.ЛДСП);
	МассивНомГрупп.Вставить("ЛДСП16", Справочники.НоменклатурныеГруппы.ЛДСП16);
	МассивНомГрупп.Вставить("МДФ18", Справочники.НоменклатурныеГруппы.МДФ18);
	МассивНомГрупп.Вставить("ДВП", Справочники.НоменклатурныеГруппы.ДВП);	
	
	МассивНомГрупп.Вставить("Кромка", Справочники.НоменклатурныеГруппы.Кромка);
	МассивНомГрупп.Вставить("Кромка045_19", Справочники.НоменклатурныеГруппы.Кромка045_19);
	МассивНомГрупп.Вставить("Кромка2_19", Справочники.НоменклатурныеГруппы.Кромка2_19);
	МассивНомГрупп.Вставить("Кромка2_35", Справочники.НоменклатурныеГруппы.Кромка2_35);
	МассивНомГрупп.Вставить("КантТ", Справочники.НоменклатурныеГруппы.КантТ);
	МассивНомГрупп.Вставить("КромкаМДФ", Справочники.НоменклатурныеГруппы.КромкаМДФ);
	МассивНомГрупп.Вставить("КантАлюминиевый", Справочники.НоменклатурныеГруппы.КантАлюминиевый);
	
	МассивНомГрупп.Вставить("Бутылочница", Справочники.НоменклатурныеГруппы.Бутылочница);
	МассивНомГрупп.Вставить("БутылочницаСДоводчиком", Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком);
	
	МассивНомГрупп.Вставить("Стекло", Справочники.НоменклатурныеГруппы.Стекло);
	МассивНомГрупп.Вставить("СтеклоДляСкругляемогоФасада", Справочники.НоменклатурныеГруппы.СтеклоДляСкругляемогоФасада);
	МассивНомГрупп.Вставить("Зеркало", Справочники.НоменклатурныеГруппы.Зеркало);
	
	МассивНомГрупп.Вставить("Сушка", Справочники.НоменклатурныеГруппы.Сушка);
	МассивНомГрупп.Вставить("СушкаДляКоробаСДном", Справочники.НоменклатурныеГруппы.СушкаДляКоробаСДном);
	МассивНомГрупп.Вставить("СушкаДляКоробаБезДна", Справочники.НоменклатурныеГруппы.СушкаДляКоробаБезДна);
	
	МассивНомГрупп.Вставить("Ручка", Справочники.НоменклатурныеГруппы.Ручка);
	МассивНомГрупп.Вставить("КухонныеНожки", Справочники.НоменклатурныеГруппы.КухонныеНожки);
	МассивНомГрупп.Вставить("Мойка", Справочники.НоменклатурныеГруппы.Мойка);
	МассивНомГрупп.Вставить("ГазовыйЛифт", Справочники.НоменклатурныеГруппы.ГазовыйЛифт);
	МассивНомГрупп.Вставить("Кронштейн", Справочники.НоменклатурныеГруппы.Кронштейн);
	МассивНомГрупп.Вставить("Демпфер", Справочники.НоменклатурныеГруппы.Демпфер);
	
	МассивНомГрупп.Вставить("Столешница", Справочники.НоменклатурныеГруппы.Столешница);

КонецПроцедуры

&НаСервере
Функция ПолучитьВидыФасадов()
	
	Запрос = Новый Запрос();
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВидыДеталей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыДеталей КАК ВидыДеталей
	|ГДЕ
	|	ВидыДеталей.ФасадКаталога
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыДеталей.Наименование";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Мас = Новый Массив;
	
	Для Каждого Стр Из Результат Цикл
		
		Мас.Добавить(Стр.Ссылка);
		
	КонецЦикла;
	
	Возврат Мас;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РабочийКаталог = ФайловыеФункцииСлужебныйКлиент.ВыбратьПутьККаталогуДанныхПользователя();
	
	ОтобразитьКартинку();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДобавитьКДокументу(Команда)
	
	Модифицированность = Ложь;
	
	ОчиститьСообщения();
	
	Таблицы = ПроверитьПередСохранением();
		
	Если Таблицы <> Неопределено Тогда 
		
		ОповеститьОВыборе(Таблицы);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрИзделия(Команда)
	
	ПараметрыДляФормы = Новый Структура;
	ПараметрыДляФормы.Вставить("АдресТаблицы", ВыгрузитьНужнуюТаблицуВХранилище());
	ПараметрыДляФормы.Вставить("РабочийКаталог", РабочийКаталог);
	
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаИзображениеИзделий", ПараметрыДляФормы, Элементы.Детали);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

&НаСервере
Функция ПроверитьПередСохранением()

	Ошибки = Неопределено;
	
	НомерСтроки = 0;
	
	Для каждого Элемент Из Детали Цикл
		
		ИндексЭлемента = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		ПолеОшибки = "Детали[" + ИндексЭлемента + "].Изделие";
		
		НомерИзделияСтрока = "" + НомерСтроки + " изделие: ";
		
		ШиринаИзделия = Элемент.ШиринаИзделия;
		ВысотаИзделия = Элемент.ВысотаИзделия;
		ГлубинаИзделия = Элемент.ГлубинаИзделия;
		
		Если НЕ ЗначениеЗаполнено(Элемент.Изделие) Тогда
			ТекстСообщения = НомерИзделияСтрока + "Не выбрано изделие";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
		Иначе
			
			Если ШиринаИзделия > Элемент.ШиринаИзделияМакс ИЛИ ШиринаИзделия < Элемент.ШиринаИзделияМин Тогда
				ТекстСообщения = НомерИзделияСтрока + "Укажите ширину в диапазоне " + Элемент.ШиринаИзделияМин + "-" + Элемент.ШиринаИзделияМакс;
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			Если ВысотаИзделия > Элемент.ВысотаИзделияМакс ИЛИ ВысотаИзделия < Элемент.ВысотаИзделияМин Тогда
				ТекстСообщения = НомерИзделияСтрока + "Укажите высоту в диапазоне " + Элемент.ВысотаИзделияМин + "-" + Элемент.ВысотаИзделияМакс;
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			Если ГлубинаИзделия > Элемент.ГлубинаИзделияМакс ИЛИ ГлубинаИзделия < Элемент.ГлубинаИзделияМин Тогда
				ТекстСообщения = НомерИзделияСтрока + "Укажите глубину в диапазоне " + Элемент.ГлубинаИзделияМин + "-" + Элемент.ГлубинаИзделияМакс;
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			НомерСтрокиФасады = 0;
			
			СтрокиФасадов = ТаблицаФасадов.НайтиСтроки(Новый Структура("sUID", Элемент.UID));
			
			Для Каждого Строка Из СтрокиФасадов Цикл
				
				ИндексЭлементаФасады = НомерСтрокиФасады;
				НомерСтрокиФасады = НомерСтрокиФасады + 1;
				
				НомерФасадаСтрока = НомерИзделияСтрока + НомерСтрокиФасады + " фасад: ";
				
				ДанныеДеталиФасад = ПолучитьДанныеДеталиСервер(Строка.ВидДеталиФасад);
				
				Если НЕ ЗначениеЗаполнено(Строка.ВидДеталиФасад) Тогда
					ТекстСообщения = НомерФасадаСтрока + "Не выбран вид фасада.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Строка.НоменклатураФасада) Тогда
					ТекстСообщения = НомерФасадаСтрока + "Не выбрана номенклатура фасада.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Строка.ОбрамлениеФасада) И НЕ (ДанныеДеталиФасад.ЭтоФасад И ДанныеДеталиФасад.ЭтоСтекло) Тогда
					ТекстСообщения = НомерФасадаСтрока + "Не выбрано обрамление.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				
				Ручка = Строка.НоменклатураРучки;
				Если НЕ ЗначениеЗаполнено(Ручка) И Строка.ЕстьРучка Тогда
					ТекстСообщения = НомерФасадаСтрока + "Не выбрана ручка.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Строка.ДопЭлемент) 
					И (Строка.ДопЭлемент.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Бутылочница
				   ИЛИ Строка.ДопЭлемент.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком)
					И (Строка.ДопЭлемент.ШиринаДетали > Элемент.ШиринаИзделия) Тогда
					ТекстСообщения = НомерФасадаСтрока + "Размер бутылочницы не подходит: ШиринаДетали > Элемент.ШиринаИзделия.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				
				Если Строка.ВидЭлемента = "Фасад" Тогда
					
					Если ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) Тогда
						
						ПазыОтсутствуют = Строка.РасположениеПазовИРучкиНаФасадах.ПоложениеПазов = Перечисления.Стороны.Отсутствует;
						БезРучки = Строка.РасположениеПазовИРучкиНаФасадах.БезРучки;
						
					Иначе
						
						ПазыОтсутствуют = Ложь;
						БезРучки = Ложь;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Ручка) И НЕ ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите расположение ручки.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.МеханизмФасада) И НЕ ЗначениеЗаполнено(Строка.КоличествоМеханизмФасада) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите количество механизмов фасада.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.Демпфер) И НЕ ЗначениеЗаполнено(Строка.КоличествоДемпфер) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите количество демпферов.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Строка.Петли) И ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) И НЕ ПазыОтсутствуют Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите петли.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.Петли) И НЕ ЗначениеЗаполнено(Строка.КоличествоПетель) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите количество петель.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.Петли) И НЕ ЗначениеЗаполнено(Строка.РасположениеПазовИРучкиНаФасадах) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите расположение петель.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
				Иначе
					
					Если НЕ ЗначениеЗаполнено(Строка.СхемаЯщика) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите вид ящика.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Строка.МеханизмЭлемента) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите механизм ящика.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Строка.НоменклатураЭлемента) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите номенклатуру ящика.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Строка.ТорцовкаЭлемента) Тогда
						ТекстСообщения = НомерФасадаСтрока + "Укажите торцовку ящика.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
					Если (ДанныеДеталиФасад.ЭтоФасад И ДанныеДеталиФасад.ЭтоСтекло) Тогда
						ТекстСообщения = "Данный вид фасада недоступен для ящика.";
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Элемент.Мойка) Тогда
				Если Элемент.Мойка.ШиринаДетали + 70 > Элемент.ШиринаИзделия Тогда
					ТекстСообщения = НомерИзделияСтрока + "Мойка не подходит по ширине. Выберите другую.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				Если Элемент.Мойка.ГлубинаДетали + 70 > Элемент.ГлубинаИзделия Тогда
					ТекстСообщения = НомерИзделияСтрока + "Мойка не подходит по глубине. Выберите другую.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если Элемент.ЕстьСтолешница И НЕ ЗначениеЗаполнено(Элемент.НоменклатураСтолешница) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не выбрана номенклатура Столешницы.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьСушка И НЕ ЗначениеЗаполнено(Элемент.Сушка) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Выберите сушку.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьЛДСП Тогда
				Если НЕ ЗначениеЗаполнено(Элемент.НоменклатураЛДСП) Тогда
					ТекстСообщения = НомерИзделияСтрока + "Не выбрана номенклатура ЛДСП.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Элемент.КромкаЛДСП) Тогда
					ТекстСообщения = НомерИзделияСтрока + "Не выбрана кромка ЛДСП.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если Элемент.ЕстьЛДСПДоп Тогда
				Если НЕ ЗначениеЗаполнено(Элемент.НоменклатураЛДСПДоп) Тогда
					ТекстСообщения = НомерИзделияСтрока + "Не выбрана номенклатура ЛДСП Дополнительная.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Элемент.КромкаЛДСПДоп) Тогда
					ТекстСообщения = НомерИзделияСтрока + "Не выбрана кромка ЛДСП Дополнительная.";
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если Элемент.ЕстьКлееная И НЕ ЗначениеЗаполнено(Элемент.НоменклатураДляСклеивания) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не выбрана номенклатура для склейки.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьНожки И НЕ ЗначениеЗаполнено(Элемент.Ножки) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не выбраны ножки.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьСтекло И НЕ ЗначениеЗаполнено(Элемент.НоменклатураСтекло) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не выбрано стекло.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если (Элемент.ЕстьДВП ИЛИ Элемент.Изделие.СписокЯщики.Количество() > 0) И НЕ ЗначениеЗаполнено(Элемент.НоменклатураДВП) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не выбрана ДВП.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьМДФ И НЕ ЗначениеЗаполнено(Элемент.НоменклатураМДФ) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не выбрана МДФ.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если Элемент.ЕстьМДФ И НЕ ЗначениеЗаполнено(Элемент.КромкаМДФ) Тогда
				ТекстСообщения = НомерИзделияСтрока + "Не заполнена кромка для МДФ.";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);

	Иначе
		
		Стр = Новый Структура;
		Стр.Вставить("Детали", ПоместитьВоВременноеХранилище(Детали.Выгрузить()));
		Стр.Вставить("Фасады", ПоместитьВоВременноеХранилище(ТаблицаФасадов.Выгрузить()));
		
		Возврат Стр;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ 

&НаКлиенте
Процедура ДеталиПриАктивизацииСтроки(Элемент)
	
	Если НЕ ЗначениеЗаполнено(МассивДанныхДетали) Тогда
		МассивДанныхДетали = Новый Массив;	
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если (ТекущиеДанные <> Неопределено) Тогда
		
		НастройкиИзделия(ТекущиеДанные);
		
		МассивОсновныхНастроек = Новый Массив;
		
		МассивОсновныхНастроек.Добавить("НоменклатураЛДСП");
		МассивОсновныхНастроек.Добавить("КромкаЛДСП");
		МассивОсновныхНастроек.Добавить("НоменклатураЛДСПДоп");
		МассивОсновныхНастроек.Добавить("КромкаЛДСПДоп");
		МассивОсновныхНастроек.Добавить("НоменклатураДВП");
		МассивОсновныхНастроек.Добавить("НоменклатураДляСклеивания");
		МассивОсновныхНастроек.Добавить("Ручка");
		МассивОсновныхНастроек.Добавить("НоменклатураСтекло");
		МассивОсновныхНастроек.Добавить("НоменклатураМДФ");
		МассивОсновныхНастроек.Добавить("КромкаМДФ");
		МассивОсновныхНастроек.Добавить("ВидДеталиФасад");
		МассивОсновныхНастроек.Добавить("НоменклатураФасада");
		МассивОсновныхНастроек.Добавить("КромкаФасада");
		
		Для Каждого ЭлементМассива Из МассивОсновныхНастроек Цикл
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные[ЭлементМассива]) И ЗначениеЗаполнено(ШапкаОсновныхНастроек[ЭлементМассива]) Тогда
				ТекущиеДанные[ЭлементМассива] = ШапкаОсновныхНастроек[ЭлементМассива];
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные[ЭлементМассива]) Тогда
				ШапкаОсновныхНастроек.Вставить(ЭлементМассива, ТекущиеДанные[ЭлементМассива]);
			КонецЕсли;
		КонецЦикла;
		
		УстановитьОтборТаблицаФасадов(ТекущиеДанные.UID);
		
		ТаблицаФасадовПриАктивизацииСтроки(Элемент);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзделиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.UID) Тогда
		
		УдалитьСтрокиФасадов(ТекущиеДанные.UID);
		
	Иначе
		
		ТекущиеДанные.UID = Новый УникальныйИдентификатор;
		
	КонецЕсли;
	
	СтруктураИзделия = ПолучитьСтруктуруИзделия(ТекущиеДанные.Изделие, Подразделение, Истина);
	
	Если ЗначениеЗаполнено(СтруктураИзделия) Тогда
		
		ТекущиеДанные.КодИзделия = СтруктураИзделия.КодИзделия;
		ТекущиеДанные.Расположение = СтруктураИзделия.Расположение;
		ТекущиеДанные.ГлубинаИзделия = СтруктураИзделия.ГлубинаИзделия;
		ТекущиеДанные.ШиринаИзделия = СтруктураИзделия.ШиринаИзделия;
		ТекущиеДанные.ВысотаИзделия = СтруктураИзделия.ВысотаИзделия;
		ТекущиеДанные.ГлубинаИзделияМин = СтруктураИзделия.ГлубинаИзделияМин;
		ТекущиеДанные.ШиринаИзделияМин = СтруктураИзделия.ШиринаИзделияМин;
		ТекущиеДанные.ВысотаИзделияМин = СтруктураИзделия.ВысотаИзделияМин;
		ТекущиеДанные.ГлубинаИзделияМакс = СтруктураИзделия.ГлубинаИзделияМакс;
		ТекущиеДанные.ШиринаИзделияМакс = СтруктураИзделия.ШиринаИзделияМакс;
		ТекущиеДанные.ВысотаИзделияМакс = СтруктураИзделия.ВысотаИзделияМакс;
		ТекущиеДанные.Шаг = СтруктураИзделия.Шаг;
		ТекущиеДанные.ЕстьЛДСП = СтруктураИзделия.ЕстьЛДСП;
		ТекущиеДанные.ЕстьЛДСПДоп = СтруктураИзделия.ЕстьЛДСПДоп;
		ТекущиеДанные.ЕстьКлееная = СтруктураИзделия.ЕстьКлееная;
		ТекущиеДанные.ЕстьМДФ = СтруктураИзделия.ЕстьМДФ;
		ТекущиеДанные.ЕстьСтекло = СтруктураИзделия.ЕстьСтекло;
		ТекущиеДанные.ЕстьДВП = СтруктураИзделия.ЕстьДВП;
		ТекущиеДанные.ЕстьМойка = СтруктураИзделия.ЕстьМойка;
		ТекущиеДанные.ЕстьСушка = СтруктураИзделия.ЕстьСушка;
		ТекущиеДанные.ЕстьСтолешница = СтруктураИзделия.ЕстьСтолешница;
		ТекущиеДанные.ЕстьНожки = СтруктураИзделия.ЕстьНожки;
		ТекущиеДанные.Мойка = СтруктураИзделия.НоменклатураМойка;
		ТекущиеДанные.Сушка = СтруктураИзделия.НоменклатураСушка;
		ТекущиеДанные.Ножки = СтруктураИзделия.Ножки;
		ТекущиеДанные.НоменклатурнаяГруппаСушка = СтруктураИзделия.НоменклатурнаяГруппаСушка;
		ТекущиеДанные.Сборка = Истина;
		ТекущиеДанные.Европаз = 8;
		ТекущиеДанные.Столешница = 38;
		
		Для Индекс = 1 По СтруктураИзделия.КоличествоТаблицаФасадов Цикл
			
			Строка = ТаблицаФасадов.Добавить();
			
			Строка.sUID = ТекущиеДанные.UID;
			Строка.НомерСтр = Индекс;
			Строка.ВидЭлемента = СтруктураИзделия["ТаблицаФасадов" + Индекс];
			Строка.ИмяФасада = СтруктураИзделия["ТаблицаФасадов" + Индекс + "Имя"];
			Строка.ВидДеталиФасад = СтруктураИзделия["ТаблицаФасадов" + Индекс + "ВидДеталиФасад"];
			Строка.ВидФасада = СтруктураИзделия["ТаблицаФасадов" + Индекс + "ВидФасада"];
			Строка.РасположениеРучки = СтруктураИзделия["ТаблицаФасадов" + Индекс + "ПоложениеРучки"];
			Строка.МеханизмФасада = СтруктураИзделия["ТаблицаФасадов" + Индекс + "МеханизмФасада"];
			Строка.Демпфер = СтруктураИзделия["ТаблицаФасадов" + Индекс + "Демпфер"];
			Строка.КоличествоМеханизмФасада = СтруктураИзделия["ТаблицаФасадов" + Индекс + "КоличествоМеханизмФасада"];
			Строка.КоличествоДемпфер = СтруктураИзделия["ТаблицаФасадов" + Индекс + "КоличествоДемпфер"];
			Строка.РасположениеПазовИРучкиНаФасадах = СтруктураИзделия["ТаблицаФасадов" + Индекс + "РасположениеПазовИРучкиНаФасадах"];
			Строка.НомерДетали = СтруктураИзделия["ТаблицаФасадов" + Индекс + "НомерДетали"];
			Строка.Петли = СтруктураИзделия["ТаблицаФасадов" + Индекс + "Петли"];
			Строка.КоличествоПетель = СтруктураИзделия["ТаблицаФасадов" + Индекс + "КоличествоПетель"];
			Строка.РасположениеПазов = СтруктураИзделия["ТаблицаФасадов" + Индекс + "РасположениеПазов"];
			Строка.ЕстьРучка = СтруктураИзделия["ТаблицаФасадов" + Индекс + "ЕстьРучка"];
			
			Строка.ДопЭлемент = ?(СтруктураИзделия.Свойство("Бутылочница"), СтруктураИзделия.Бутылочница, Неопределено);
			
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.ВидДеталиФасад) Тогда
				Строка.ВидДеталиФасад = ШапкаОсновныхНастроек.ВидДеталиФасад;
			КонецЕсли;
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураФасада) Тогда
				Строка.НоменклатураФасада = ШапкаОсновныхНастроек.НоменклатураФасада;
			КонецЕсли;
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.КромкаФасада) Тогда
				Строка.ОбрамлениеФасада = ШапкаОсновныхНастроек.КромкаФасада;
			КонецЕсли;
			
			Если Строка.ВидЭлемента = "Ящик" Тогда
				Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураЛДСП) Тогда
					Строка.НоменклатураЭлемента = ШапкаОсновныхНастроек.НоменклатураЛДСП;
				КонецЕсли;
				Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.КромкаЛДСП) Тогда
					Строка.ТорцовкаЭлемента = ШапкаОсновныхНастроек.КромкаЛДСП;
				КонецЕсли;
				
				Строка.СхемаЯщика = Неопределено;

			КонецЕсли;
		КонецЦикла;
		
		УстановитьОтборТаблицаФасадов(ТекущиеДанные.UID);
		
		НастройкиИзделия(ТекущиеДанные);
		
		Ручка = ТекущиеДанные.Ручка;
		УстановитьПараметрФасада(Ручка, "НоменклатураРучки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовНоменклатуры(Статус)
	
	Элементы.Размеры.Доступность = Статус;
	Элементы.ГруппаНоменклатура.Доступность = Статус;
	Элементы.Фасад.Доступность = Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИзделия(ДанныеИзделия)
	
	Если ДанныеИзделия <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИзделия.Изделие) Тогда
			
			ВидимостьЭлементовНоменклатуры(Истина);
			
			Элементы.ВысотаИзделия.Подсказка = Строка(ДанныеИзделия.ВысотаИзделияМин) + " - " + Строка(ДанныеИзделия.ВысотаИзделияМакс);
			Элементы.ВысотаИзделия.МаксимальноеЗначение = ДанныеИзделия.ВысотаИзделияМакс;
			Элементы.ВысотаИзделия.МинимальноеЗначение = ДанныеИзделия.ВысотаИзделияМин;
			
			Элементы.ГлубинаИзделия.Подсказка = Строка(ДанныеИзделия.ГлубинаИзделияМин) + " - " + Строка(ДанныеИзделия.ГлубинаИзделияМакс);
			Элементы.ГлубинаИзделия.МаксимальноеЗначение = ДанныеИзделия.ГлубинаИзделияМакс;
			Элементы.ГлубинаИзделия.МинимальноеЗначение = ДанныеИзделия.ГлубинаИзделияМин;
			
			Элементы.ШиринаИзделия.Подсказка = Строка(ДанныеИзделия.ШиринаИзделияМин) + " - " + Строка(ДанныеИзделия.ШиринаИзделияМакс);
			
			Если ДанныеИзделия.Шаг > 1 Тогда
				Элементы.ШиринаИзделия.Подсказка = Элементы.ШиринаИзделия.Подсказка + " (шаг: " + Строка(ДанныеИзделия.Шаг) + ")";
			КонецЕсли;
			
			Элементы.ШиринаИзделия.МаксимальноеЗначение = ДанныеИзделия.ШиринаИзделияМакс;
			Элементы.ШиринаИзделия.МинимальноеЗначение = ДанныеИзделия.ШиринаИзделияМин;
			
			ЕстьФасады = ТаблицаФасадов.НайтиСтроки(Новый Структура("sUID", ДанныеИзделия.UID)).Количество() > 0;
			
			Элементы.ДеталиРучка.Видимость = ЕстьФасады;
			Элементы.ДеталиВидФасада.Видимость = ЕстьФасады;
			Элементы.ДеталиНоменклатураФасада.Видимость = ЕстьФасады;
			Элементы.ДеталиКромкаФасада.Видимость = ЕстьФасады;
			
			Элементы.ДеталиНоменклатураЛДСП.Видимость = ДанныеИзделия.ЕстьЛДСП;
			Элементы.ДеталиКромкаЛДСП.Видимость = ДанныеИзделия.ЕстьЛДСП;
			Элементы.ДеталиНоменклатураЛДСПДоп.Видимость = ДанныеИзделия.ЕстьЛДСПДоп;
			Элементы.ДеталиКромкаЛДСПДоп.Видимость = ДанныеИзделия.ЕстьЛДСПДоп;
			Элементы.ДеталиНоменклатураДляСклеивания.Видимость = ДанныеИзделия.ЕстьКлееная;
			Элементы.ДеталиНоменклатураМДФ.Видимость = ДанныеИзделия.ЕстьМДФ;
			Элементы.ДеталиКромкаМДФ.Видимость = ДанныеИзделия.ЕстьМДФ;
			Элементы.ДеталиНоменклатураСтекло.Видимость = ДанныеИзделия.ЕстьСтекло;
			Элементы.ДеталиНоменклатураДВП.Видимость = ДанныеИзделия.ЕстьДВП;
			Элементы.ДеталиМойка.Видимость = ДанныеИзделия.ЕстьМойка;
			Элементы.ДеталиСушка.Видимость = ДанныеИзделия.ЕстьСушка;
			Элементы.ДеталиНоменклатураСтолешница.Видимость = ДанныеИзделия.ЕстьСтолешница;
			Элементы.ДеталиНожки.Видимость = ДанныеИзделия.ЕстьНожки;
			
		Иначе
			
			ВидимостьЭлементовНоменклатуры(Ложь);
			
		КонецЕсли;
		
		ОтобразитьКартинку();
		
	Иначе
		
		ВидимостьЭлементовНоменклатуры(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаИзделияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Шаг > 0 Тогда
			Если (ТекущиеДанные.ШиринаИзделия - ТекущиеДанные.ШиринаИзделияМин) % ТекущиеДанные.Шаг <> 0 Тогда
				//Установим минимальное значение ширины короба
				ТекущиеДанные.ШиринаИзделия = ТекущиеДанные.ШиринаИзделияМин;
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Соблюдайте шаг %1, минимальное значение - %2 ", ТекущиеДанные.Шаг, ТекущиеДанные.ШиринаИзделияМин);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.ШиринаИзделия");
			Иначе
				Если ТекущиеДанные.ЕстьСушка Тогда
					ТекущиеДанные.Сушка = ПолучитьДопЭлемент(ТекущиеДанные.НоменклатурнаяГруппаСушка, ТекущиеДанные.ШиринаИзделия, Подразделение);
				КонецЕсли;

				Для Каждого Элемент Из ТаблицаФасадов Цикл
					Если ЗначениеЗаполнено(Элемент.ДопЭлемент) Тогда
						Элемент.ДопЭлемент = УстановитьДопЭлемент(Элемент.ДопЭлемент, ТекущиеДанные.ШиринаИзделия, Подразделение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьДопЭлемент(НоменклатураЭлемента, Ширина, Подразделение)
	
	НовыйЭлемент = НоменклатураЭлемента;
	Если НоменклатураЭлемента.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Бутылочница 
		ИЛИ НоменклатураЭлемента.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком Тогда
		НовыйЭлемент = ПолучитьДопЭлемент(Справочники.НоменклатурныеГруппы.БутылочницаСДоводчиком, Ширина, Подразделение);
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

&НаКлиенте
Процедура ДеталиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗагрузитьТабличнуюЧасть(ВыбранноеЗначение);
	Детали.Сортировать("НовыйИндекс Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураЛДСППриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	НоменклатураЛДСП = ТекущиеДанные.НоменклатураЛДСП;
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСП", НоменклатураЛДСП);
	
	Если ТекущиеДанные.ЕстьЛДСПДоп Тогда
		
		ТекущиеДанные.НоменклатураЛДСПДоп = НоменклатураЛДСП;
		ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСПДоп", ТекущиеДанные.НоменклатураЛДСПДоп);
		
	КонецЕсли;
	
	СтруктураПодставляяемойНоменклатуры = ЛексСервер.ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(НоменклатураЛДСП, Подразделение);
	ТекущиеДанные.КромкаЛДСП = СтруктураПодставляяемойНоменклатуры.Кромка045_19;
	УстановитьПараметрыКромки(ТекущиеДанные);
	
	УстановитьПараметрФасада(НоменклатураЛДСП, "НоменклатураЭлемента");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаЛДСППриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	УстановитьПараметрыКромки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыКромки(ТекущиеДанные)
	
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСП", ТекущиеДанные.КромкаЛДСП);
	
	УстановитьПараметрФасада(ТекущиеДанные.КромкаЛДСП, "ТорцовкаЭлемента");
	
	Если ТекущиеДанные.ЕстьЛДСПДоп Тогда
		
		ТекущиеДанные.КромкаЛДСПДоп = ТекущиеДанные.КромкаЛДСП;
		ШапкаОсновныхНастроек.Вставить("КромкаЛДСПДоп", ТекущиеДанные.КромкаЛДСПДоп);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураЛДСПДопПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	НоменклатураЛДСПДоп = ТекущиеДанные.НоменклатураЛДСПДоп;
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСПДоп", НоменклатураЛДСПДоп);
	
	СтруктураПодставляяемойНоменклатуры = ЛексСервер.ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(НоменклатураЛДСПДоп, Подразделение);
	ТекущиеДанные.КромкаЛДСПДоп = СтруктураПодставляяемойНоменклатуры.Кромка045_19;
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСПДоп", ТекущиеДанные.КромкаЛДСПДоп);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаЛДСПДопПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ТекущиеДанные.КромкаЛДСПДоп = ТекущиеДанные.КромкаЛДСП;
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСПДоп", ТекущиеДанные.КромкаЛДСПДоп);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураСтеклоПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураСтекло", Элементы.Детали.ТекущиеДанные.НоменклатураСтекло);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураМДФПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураМДФ", Элементы.Детали.ТекущиеДанные.НоменклатураМДФ);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаМДФПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("КромкаМДФ", Элементы.Детали.ТекущиеДанные.КромкаМДФ);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураДВППриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураДВП", Элементы.Детали.ТекущиеДанные.НоменклатураДВП);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиРучкаПриИзменении(Элемент)
	
	Ручка = Элементы.Детали.ТекущиеДанные.Ручка;
	ШапкаОсновныхНастроек.Вставить("Ручка", Ручка);
	
	УстановитьПараметрФасада(Ручка, "НоменклатураРучки");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураДляСклеиванияПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания", Элементы.Детали.ТекущиеДанные.НоменклатураДляСклеивания);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиВидФасадаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	ВидДеталиФасад = ТекущиеДанные.ВидДеталиФасад;
	ШапкаОсновныхНастроек.Вставить("ВидДеталиФасад", ВидДеталиФасад);
	
	УстановитьПараметрФасада(ВидДеталиФасад, "ВидДеталиФасад");
	
	ТекущиеДанные.НоменклатураФасада = Неопределено;
	ДеталиНоменклатураФасадаПриИзменении(Элемент);
	ТекущиеДанные.КромкаФасада = Неопределено;
	ДеталиКромкаФасадаПриИзменении(Элемент);
	
	ТаблицаФасадовПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураФасадаПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("НоменклатураФасада", Элементы.Детали.ТекущиеДанные.НоменклатураФасада);
	
	УстановитьПараметрФасада(Элементы.Детали.ТекущиеДанные.НоменклатураФасада, "НоменклатураФасада");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаФасадаПриИзменении(Элемент)
	
	ШапкаОсновныхНастроек.Вставить("КромкаФасада", Элементы.Детали.ТекущиеДанные.КромкаФасада);
	
	УстановитьПараметрФасада(Элементы.Детали.ТекущиеДанные.КромкаФасада, "ОбрамлениеФасада");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиРасположениеПриИзменении(Элемент)
	
	ОтобразитьКартинку();
	
КонецПроцедуры

/////////////////////////////////////////////////НОВЫЕ ФАСАДЫ///////////////////////////////////////////////////////

&НаКлиенте
Процедура ТаблицаФасадовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда

		ДанныеТаблицаФасадов = Элементы.ТаблицаФасадов.ТекущиеДанные;
		
		Если ДанныеТаблицаФасадов <> Неопределено Тогда
			
			ЭтоЯщик = ДанныеТаблицаФасадов.ВидЭлемента = "Ящик";
			
			Элементы.ТаблицаФасадовМеханизмФасада.ТолькоПросмотр = ЭтоЯщик;
			Элементы.ТаблицаФасадовКоличествоДемпфер.ТолькоПросмотр = ЭтоЯщик;
			Элементы.ТаблицаФасадовДемпфер.ТолькоПросмотр = ЭтоЯщик;
			Элементы.ТаблицаФасадовКоличествоМеханизмФасада.ТолькоПросмотр = ЭтоЯщик;
			Элементы.ТаблицаФасадовПетли.ТолькоПросмотр = ЭтоЯщик;
			Элементы.ТаблицаФасадовКоличествоПетель.ТолькоПросмотр = ЭтоЯщик;
			Элементы.ТаблицаФасадовВыдвижнойЭлемент.ТолькоПросмотр = НЕ ЭтоЯщик;
			Элементы.ТаблицаФасадовНоменклатураЭлемента.ТолькоПросмотр = НЕ ЭтоЯщик;
			Элементы.ТаблицаФасадовТорцовкаЭлемента.ТолькоПросмотр = НЕ ЭтоЯщик;
			Элементы.ТаблицаФасадовМеханизмЭлемента.ТолькоПросмотр = НЕ ЭтоЯщик;
			
			Элементы.ГруппаФасадыЯщик.Видимость = ЭтоЯщик;
			Элементы.ГруппаФасадыДоп.Видимость = НЕ ЭтоЯщик;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовВидФасадаПриИзменении(Элемент)
	
	ДанныеТаблицаФасадов = Элементы.ТаблицаФасадов.ТекущиеДанные;
	ДанныеТаблицаФасадов.НоменклатураФасада = Неопределено;
	ДанныеТаблицаФасадов.ОбрамлениеФасада = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовВыдвижнойЭлементПриИзменении(Элемент)
	
	// { Васильев Александр Леонидович [06.07.2015]
	// Подставляем первую попавшуюся номенклатурную группу.
	// Хотя по хорошему нужно проверять, подходит ли установленная группа, и оставлять её.
	// } Васильев Александр Леонидович [06.07.2015]
	
	ДанныеТаблицаФасадов = Элементы.ТаблицаФасадов.ТекущиеДанные;
	
	Если ДанныеТаблицаФасадов <> Неопределено Тогда
		
		НомГруппы = ПолучитьНомГруппыНаправляющие(ДанныеТаблицаФасадов.СхемаЯщика);
		
		Если НомГруппы.Количество() > 0 Тогда
			ДанныеТаблицаФасадов.МеханизмЭлемента = НомГруппы[0];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомГруппыНаправляющие(СхемаЯщика)
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы = СхемаЯщика.Направляющие.ВыгрузитьКолонку("Группа");
	
	Возврат НомГруппы;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаФасадовПовернутьФасадПриИзменении(Элемент)
	
	ДанныеТаблицаФасадов = Элементы.ТаблицаФасадов.ТекущиеДанные; 
	
	Если ЗначениеЗаполнено(ДанныеТаблицаФасадов.РасположениеПазов) Тогда
		
		ДанныеТаблицаФасадов.РасположениеПазов = ПовернутьФасад(ДанныеТаблицаФасадов.РасположениеПазов, ДанныеТаблицаФасадов.ПовернутьФасад);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеТаблицаФасадов.РасположениеПазовИРучкиНаФасадах) Тогда
		
		ДанныеТаблицаФасадов.РасположениеПазовИРучкиНаФасадах.ПоложениеРучки = ПовернутьФасад(ДанныеТаблицаФасадов.РасположениеПазовИРучкиНаФасадах.ПоложениеРучки, ДанныеТаблицаФасадов.ПовернутьФасад);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПовернутьФасад(Расположение, ПовернутьФасад)
	
	Если ПовернутьФасад Тогда
		
		Если Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Сверху") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Слева")
		ИначеЕсли Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Слева") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Снизу")
		ИначеЕсли Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Снизу") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Справа")
		ИначеЕсли Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Справа") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Сверху")
		КонецЕсли;
		
	Иначе
		
		Если Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Сверху") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Справа")
		ИначеЕсли Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Слева") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Сверху")
		ИначеЕсли Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Снизу") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Слева")
		ИначеЕсли Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Справа") Тогда
			Расположение = ПредопределенноеЗначение("Перечисление.Стороны.Снизу")
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Расположение;
	
КонецФункции 

&НаКлиенте
Процедура ДеталиПриИзменении(Элемент)
	
	Для Каждого Элемент Из Детали Цикл
		
		Элемент.НовыйИндекс = Детали.Индекс(Элемент) + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбора(НомГруппы, ЭлементФормы)
	
	Пар = Новый Структура();
	Пар.Вставить("НомГруппы", НомГруппы);
	Пар.Вставить("Подразделение", Подразделение);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", Пар, ЭлементФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураЛДСПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.ЛДСП16);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаЛДСПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиКромкаЛДСП();
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомГруппыДеталиКромкаЛДСП()
	
	НомГруппы = Новый СписокЗначений;
	
	НомГруппы.Добавить(МассивНомГрупп.Кромка045_19);
	НомГруппы.Добавить(МассивНомГрупп.Кромка2_19);
	НомГруппы.Добавить(МассивНомГрупп.Кромка2_35);
	НомГруппы.Добавить(МассивНомГрупп.КантТ);
	НомГруппы.Добавить(МассивНомГрупп.КромкаМДФ);
	НомГруппы.Добавить(МассивНомГрупп.КантАлюминиевый);
	
	Возврат НомГруппы;
	
КонецФункции

&НаКлиенте
Процедура ДеталиНоменклатураЛДСПДопНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.ЛДСП16);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаЛДСПДопНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиКромкаЛДСП();
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураСтеклоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиНоменклатураСтекло();
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомГруппыДеталиНоменклатураСтекло()
	
	НомГруппы = Новый СписокЗначений;
	
	НомГруппы.Добавить(МассивНомГрупп.Стекло);
	НомГруппы.Добавить(МассивНомГрупп.СтеклоДляСкругляемогоФасада);
	НомГруппы.Добавить(МассивНомГрупп.Зеркало);
	
	Возврат НомГруппы;
	
КонецФункции

&НаКлиенте
Процедура ДеталиНоменклатураДляСклеиванияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.ЛДСП16);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураМДФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.МДФ18);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаМДФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиКромкаМДФ();
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомГруппыДеталиКромкаМДФ()
	
	НомГруппы = Новый СписокЗначений;
	
	НомГруппы.Добавить(МассивНомГрупп.КромкаМДФ);
	НомГруппы.Добавить(МассивНомГрупп.КантАлюминиевый);
	
	Возврат НомГруппы;
	
КонецФункции

&НаКлиенте
Процедура ДеталиНоменклатураДВПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.ДВП);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидДеталиФасад = Элементы.Детали.ТекущиеДанные.ВидДеталиФасад;
	ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДеталиФасад,"Текстура",Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидДеталиФасад = Элементы.Детали.ТекущиеДанные.ВидДеталиФасад;
	ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДеталиФасад,"КантК,Кромка045,Кромка2,Окантовка",Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиРучкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.Ручка);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНожкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.КухонныеНожки);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиМойкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.Мойка);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиСушкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыДеталиСушка();
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомГруппыДеталиСушка()
	
	НомГруппы = Новый СписокЗначений;
	
	НомГруппы.Добавить(МассивНомГрупп.Сушка);
	НомГруппы.Добавить(МассивНомГрупп.СушкаДляКоробаСДном);
	НомГруппы.Добавить(МассивНомГрупп.СушкаДляКоробаБезДна);
	
	Возврат НомГруппы;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаФасадовРасположениеПазовИРучкиНаФасадахОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураРасположенияПазовИРучки = РасположениеПазовОбработкаВыбораНаСервере(ВыбранноеЗначение);
	ТекущиеДанные = Элементы.ТаблицаФасадов.ТекущиеДанные;
	ТекущиеДанные.РасположениеПазовИРучкиНаФасадах = СтруктураРасположенияПазовИРучки.ЭлементСправочника;
	ТекущиеДанные.ЕстьРучка = СтруктураРасположенияПазовИРучки.ЕстьРучка;
	ПоложениеРучки = СтруктураРасположенияПазовИРучки.ПоложениеРучки;
	ПоложениеПазов = СтруктураРасположенияПазовИРучки.ПоложениеПазов;
	
КонецПроцедуры

&НаСервере
Функция РасположениеПазовОбработкаВыбораНаСервере(ЗначениеСправочника)
	
	СтруктураРасположенияПазовИРучки = Новый Структура;
	ЭлементСправочника = Справочники.РасположениеПазовИРучкиНаФасадах.НайтиПоРеквизиту("ИмяКартинки", ЗначениеСправочника);
	СтруктураРасположенияПазовИРучки.Вставить("ЕстьРучка", НЕ ЭлементСправочника.БезРучки);
	СтруктураРасположенияПазовИРучки.Вставить("ПоложениеРучки", ЭлементСправочника.ПоложениеРучки);
	СтруктураРасположенияПазовИРучки.Вставить("ПоложениеПазов", ЭлементСправочника.ПоложениеПазов);
	СтруктураРасположенияПазовИРучки.Вставить("ЭлементСправочника", ЭлементСправочника);
	Возврат СтруктураРасположенияПазовИРучки;
	
КонецФункции

&НаКлиенте
Процедура ДеталиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ВидИзделияСпецификации = ПредопределенноеЗначение("Перечисление.ВидыИзделий.КорпуснаяМебель") И Детали.Количество() = 2 Тогда
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Максимум 2 корпусных изделия", , "Детали");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовМеханизмЭлементаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеТаблицаФасадов = Элементы.ТаблицаФасадов.ТекущиеДанные;
	
	Если ДанныеТаблицаФасадов <> Неопределено Тогда
		
		НомГруппы = ПолучитьНомГруппыНаправляющие(ДанныеТаблицаФасадов.СхемаЯщика);
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(НомГруппы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовВыдвижнойЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Активность", Истина);
	ПараметрыФормы = Новый Структура("Отбор",Отбор);
	
	ОткрытьФорму("Справочник.СхемыЯщиков.ФормаВыбора",ПараметрыФормы,Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

&НаСервереБезКонтекста
Функция ПолучитьДанныеДеталиСервер(ТипДетали)
	
	Стр = Новый Структура;
	
	НомГруппы = Новый СписокЗначений;
	
	Для Каждого Эл Из ТипДетали.НоменклатурныеГруппы Цикл
		
		Стр2 = Новый Структура;
		Стр2.Вставить("ПолеВыбора", Эл.ПолеВыбора);
		Стр2.Вставить("Группа", Эл.Группа);

		НомГруппы.Добавить(Стр2);	
		
	КонецЦикла;
	
	Стр.Вставить("НомГруппы", НомГруппы);
	
	СтрДоступность = Новый Структура;
	
	Для Каждого Рек Из Метаданные.Справочники.ВидыДеталей.Реквизиты Цикл

		Если Лев(Рек.Имя,15) = "ДоступностьПоля" Тогда
			
			СтрДоступность.Вставить(Рек.Имя,ТипДетали[Рек.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;

	Стр.Вставить("ДоступностьПолей", СтрДоступность);
	
	СтрОбязательныеПоля = Новый Структура;
	
	Для Каждого Рек Из Метаданные.Справочники.ВидыДеталей.Реквизиты Цикл

		Если Лев(Рек.Имя,16) = "ОбязательноеПоле" Тогда
			
			СтрОбязательныеПоля.Вставить(Рек.Имя,ТипДетали[Рек.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;

	Стр.Вставить("ОбязательныеПоля", СтрОбязательныеПоля);
	
	Стр.Вставить("ВидДетали", ТипДетали);
	Стр.Вставить("Клееная", ТипДетали.Клееная);
	Стр.Вставить("ОбтачиватьПоУмолчанию", ТипДетали.ОбтачиватьПоУмолчанию);
	Стр.Вставить("ИспользоватьСоответствиеНоменклатуры", ТипДетали.ИспользоватьСоответствиеНоменклатуры);
	Стр.Вставить("СпецФасад", ТипДетали.СпецФасад);
	Стр.Вставить("ПрипускСклейка", ТипДетали.ПрипускСклейка);
	Стр.Вставить("ПрипускПостформинг", ТипДетали.ПрипускПостформинг);
	Стр.Вставить("ЭтоФасад", ТипДетали.ЭтоФасад);
	Стр.Вставить("ЭтоСтолешница", ТипДетали.ЭтоСтолешница);
	Стр.Вставить("ЭтоСтекло", ТипДетали.ЭтоСтекло);
	Стр.Вставить("МинимальнаяШирина", ТипДетали.МинимальнаяШирина);
	Стр.Вставить("МинимальнаяВысота", ТипДетали.МинимальнаяВысота);

	
	Возврат Стр;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеДетали(ТипДетали)
	
	ЕстьДанные = Ложь;
	Результат = Неопределено;
	
	Для Каждого Эл Из МассивДанныхДетали Цикл
		
		Если Эл.ТипДетали = ТипДетали Тогда
			
			Результат = Эл.ДанныеДетали;
			ЕстьДанные = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьДанные Тогда
		
		 Результат = ПолучитьДанныеДеталиСервер(ТипДетали);
		 
		 Стр = Новый Структура();
		 Стр.Вставить("ТипДетали", ТипДетали);
		 Стр.Вставить("ДанныеДетали", Результат);
		 
		 МассивДанныхДетали.Добавить(Стр);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьНомГруппы(ПоляВыбора, ДанныеДетали)
	
	МасПоляВыбора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляВыбора, ",");
	
	НомГруппы = Новый СписокЗначений;
	
	Для Каждого Поле Из МасПоляВыбора Цикл
	
		Для Каждого Эл Из ДанныеДетали.НомГруппы Цикл
			
			Если Эл.Значение.ПолеВыбора = Поле Тогда
				НомГруппы.Добавить(Эл.Значение.Группа);	
			КонецЕсли
			
		КонецЦикла;
		
	КонецЦикла;
		
	Возврат НомГруппы;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаФасадовНоменклатураФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидДеталиФасад = Элементы.ТаблицаФасадов.ТекущиеДанные.ВидДеталиФасад;
	ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДеталиФасад,"Текстура",Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДетали,Поля,Элемент)

	Если ЗначениеЗаполнено(ВидДетали) Тогда

		ДанныеДетали = ПолучитьДанныеДетали(ВидДетали);
		НомГруппы = ПолучитьНомГруппы(Поля, ДанныеДетали);	
		
		Если НомГруппы.Количество() > 0 Тогда
			ОткрытьФормуПодбора(НомГруппы, Элемент);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовОбрамлениеФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидДеталиФасад = Элементы.ТаблицаФасадов.ТекущиеДанные.ВидДеталиФасад;
	ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДеталиФасад,"КантК,Кромка045,Кромка2,Окантовка",Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовНоменклатураРучкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.Ручка);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовПетлиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидДеталиФасад = Элементы.ТаблицаФасадов.ТекущиеДанные.ВидДеталиФасад;
	ПолучитьНомГруппыИОткрытьФормуПодбора(ВидДеталиФасад,"Петли",Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовМеханизмФасадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = ПолучитьНомГруппыМеханизм();
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);	
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомГруппыМеханизм()
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.ГазовыйЛифт);
	НомГруппы.Добавить(МассивНомГрупп.Кронштейн);
	
	Возврат НомГруппы;	
		
КонецФункции

&НаКлиенте
Процедура ТаблицаФасадовНоменклатураЭлементаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.ЛДСП);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовТорцовкаЭлементаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.Кромка);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовДемпферНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.Демпфер);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураСтолешницаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомГруппы = Новый СписокЗначений;
	НомГруппы.Добавить(МассивНомГрупп.Столешница);
	
	ОткрытьФормуПодбора(НомГруппы, Элемент);

	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФасадовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Функция УстановитьОтборТаблицаФасадов(UID)
	
	ОтборСтрок = Новый ФиксированнаяСтруктура("sUID", UID);
	Элементы.ТаблицаФасадов.ОтборСтрок = ОтборСтрок;
	
КонецФункции

&НаКлиенте
Процедура ДеталиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	УдалитьСтрокиФасадов(ТекущиеДанные.UID);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиФасадов(UID)
	
	СтрокиФасадов = ТаблицаФасадов.НайтиСтроки(Новый Структура("sUID", UID));
		
	Для каждого Строка Из СтрокиФасадов Цикл
	 	ТаблицаФасадов.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

