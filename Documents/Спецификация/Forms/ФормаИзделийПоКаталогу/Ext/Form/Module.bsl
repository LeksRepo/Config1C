////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

&НаКлиенте
Перем ТекДанныеСтроки;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруИзделия(Изделие, Подразделение) 
	
	Структура = Новый Структура;
	Структура.Вставить("Код", Изделие.Код);	
	Структура.Вставить("ГлубинаИзделия", Изделие.ГлубинаИзделия);                           
	Структура.Вставить("ШиринаИзделия", Изделие.ШиринаИзделия);                           
	Структура.Вставить("ВысотаИзделия", Изделие.ВысотаИзделия);                           
	Структура.Вставить("ГлубинаИзделияМин", Изделие.ГлубинаИзделияМин);                           
	Структура.Вставить("ШиринаИзделияМин", Изделие.ШиринаИзделияМин);                           
	Структура.Вставить("ВысотаИзделияМин", Изделие.ВысотаИзделияМин);                            
	Структура.Вставить("ГлубинаИзделияМакс", Изделие.ГлубинаИзделияМакс);                            
	Структура.Вставить("ШиринаИзделияМакс", Изделие.ШиринаИзделияМакс);                           
	Структура.Вставить("ВысотаИзделияМакс", Изделие.ВысотаИзделияМакс);
	Структура.Вставить("Шаг", Изделие.Шаг);
	Структура.Вставить("ЯщикиКоличество", Изделие.СписокЯщики.Количество());
	
	СписокЯщики = Изделие.СписокЯщики.Выгрузить();
	Для Каждого Элемент Из СписокЯщики Цикл
		
		Структура.Вставить("Ящик" + Элемент.НомерСтроки + "Имя", Элемент.ИмяЯщика);
		Структура.Вставить("Ящик" + Элемент.НомерСтроки + "ВидФасада", Элемент.ВидФасада);
	КонецЦикла;
	
	СписокМатериалы = Изделие.СписокМатериалы.Выгрузить();
	Структура.Вставить("ЛДСП10", 			ЗначениеЗаполнено(СписокМатериалы.Найти("10 ЛДСП", "Материал")));
	Структура.Вставить("ЛДСП16", 			ЗначениеЗаполнено(СписокМатериалы.Найти("16 ЛДСП", "Материал")));
	Структура.Вставить("ЛДСП1010", 		ЗначениеЗаполнено(СписокМатериалы.Найти("10 ЛДСП+10 ЛДСП", "Материал")));
	Структура.Вставить("ЛДСП1610", 		ЗначениеЗаполнено(СписокМатериалы.Найти("16 ЛДСП+10 ЛДСП", "Материал")));
	Структура.Вставить("ЛДСП1616", 		ЗначениеЗаполнено(СписокМатериалы.Найти("16 ЛДСП+16 ЛДСП", "Материал")));
	Структура.Вставить("ДВП", 				ЗначениеЗаполнено(СписокМатериалы.Найти("ДВП", "Материал")));
	Структура.Вставить("Столешница", 	ЗначениеЗаполнено(СписокМатериалы.Найти("Столешница", "Материал")));	
	Структура.Вставить("Стекло", 			ЗначениеЗаполнено(СписокМатериалы.Найти("Стекло", "Материал")));
	Структура.Вставить("МДФ", 				ЗначениеЗаполнено(СписокМатериалы.Найти("МДФ", "Материал")));
	Структура.Вставить("Пристенок",		ЗначениеЗаполнено(СписокМатериалы.Найти("Пристенок", "Материал")));
	
	Массив = Новый Массив;
	Массив.Добавить("ФасадСтеклянный");
	Массив.Добавить("ФасадАГТ");
	Массив.Добавить("ФасадЛДСП");
	Массив.Добавить("ФасадМДФ");
	Массив.Добавить("ФасадАлюминиевый");
	Массив.Добавить("ФасадСтеклянныйЗакругленный");
	КоличествоФасадов = 0;	
	
	Для Каждого Элемент Из Массив Цикл
		ОтборФасада = Новый Структура("Материал", Элемент);
		СтрокиФасада = СписокМатериалы.НайтиСтроки(ОтборФасада);
		
		Для Каждого Строка Из СтрокиФасада Цикл
			КоличествоФасадов = КоличествоФасадов + 1;
			
			Структура.Вставить("Фасад" + КоличествоФасадов + "ВидФасада", Строка.Материал);
			Структура.Вставить("Фасад" + КоличествоФасадов + "НомерДетали", Строка.НомерСтроки);
			Структура.Вставить("Фасад" + КоличествоФасадов + "Имя", Строка.ИмяДетали);
			
		КонецЦикла;	
	КонецЦикла;
	Структура.Вставить("ФасадыКоличество", КоличествоФасадов);	
	
	Структура.Вставить("КоличествоДопЭлементов", Изделие.СписокДопЭлементов.Количество());
	
	СписокДопЭлементов = Изделие.СписокДопЭлементов.Выгрузить();
	Для Каждого Элемент Из СписокДопЭлементов Цикл
		
		Структура.Вставить("ДопЭлемент" + Элемент.НомерСтроки + "Имя", Элемент.ДопЭлемент);
		НоменклатураДопЭлемента = ПолучитьДопЭлемент(Элемент.ДопЭлемент, Изделие.ШиринаИзделия, Подразделение);
		Структура.Вставить("ДопЭлемент" + Элемент.НомерСтроки + "Номенклатура", НоменклатураДопЭлемента);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ВыгрузитьНужнуюТаблицуВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Детали.Выгрузить(, "Изделие, ГлубинаИзделия, ШиринаИзделия, ВысотаИзделия, АдресКартинки"));
	
КонецФункции

&НаСервере
Процедура ЗагрузитьТабличнуюЧасть(АдресТаблицы)
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
		
		Для Каждого Строка Из Детали Цикл
			
			Строка.НовыйИндекс = ТЗ.Получить(Детали.Индекс(Строка)).Порядок;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДопГруппы() 
	
	Кромка2 = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Кромка2_19 Цикл
		Кромка2.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Кромка2_35 Цикл
		Кромка2.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("Кромка2мм", Кромка2);
	
	Кромка 	= Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Кромка045_19 Цикл
		Кромка.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Кромка2мм Цикл
		Кромка.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.КантТ Цикл
		Кромка.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("Кромка", Кромка);
	
	Стекло_И_Зеркало = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Стекло Цикл
		Стекло_И_Зеркало.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.СтеклоДляСкругляемогоФасада Цикл
		Стекло_И_Зеркало.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Зеркало Цикл
		Стекло_И_Зеркало.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("Стекло_И_Зеркало", Стекло_И_Зеркало);
	
	КромкаКФасадам = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Кромка045_19 Цикл
		КромкаКФасадам.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Кромка2мм Цикл
		КромкаКФасадам.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.КромкаМДФ Цикл
		КромкаКФасадам.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("КромкаКФасадам", КромкаКФасадам);
	
	ЛДСП = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ЛДСП16 Цикл
		ЛДСП.Добавить(Элемент);
	КонецЦикла;
	//Для каждого Элемент Из МассивыНоменклатурныхГрупп.ЛДСП10 Цикл
	//	ЛДСП.Добавить(Элемент);
	//КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("ЛДСП", ЛДСП);
	
	ФасадыАГТ = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.АГТПанель Цикл
		ФасадыАГТ.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Стекло_И_Зеркало Цикл
		ФасадыАГТ.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ЛДСП10 Цикл
		ФасадыАГТ.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.МДФ8 Цикл
		ФасадыАГТ.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("ФасадыАГТ", ФасадыАГТ);
	
	ВсеФасады = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ЛДСП16 Цикл
		ВсеФасады.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.МДФ18 Цикл
		ВсеФасады.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.ФасадыАГТ Цикл
		ВсеФасады.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("ВсеФасады", ВсеФасады);
	
	ВсяКромкаКФасадам = Новый Массив;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.КромкаКФасадам Цикл
		ВсяКромкаКФасадам.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.РамочныйАлюминий Цикл
		ВсяКромкаКФасадам.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.АГТПрофиль Цикл
		ВсяКромкаКФасадам.Добавить(Элемент);
	КонецЦикла;
	МассивыНоменклатурныхГрупп.Вставить("ВсяКромкаКФасадам", ВсяКромкаКФасадам);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоменклатурнаяГруппаФасада(Фасад)
	
	Возврат Фасад.НоменклатурнаяГруппа;                                                          
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДопЭлемент(ДопЭлемент, ШиринаИзделия, Подразделение)
	
	Если ДопЭлемент = Справочники.НоменклатурныеГруппы.Мойка Тогда
		
		Возврат Справочники.Номенклатура.МойкаКухоннаяМатовая731;
		
	Иначе
		
		Знак = ?(ДопЭлемент = Справочники.НоменклатурныеГруппы.ГазовыйЛифт, ">", "<");
		Порядок = ?(ДопЭлемент = Справочники.НоменклатурныеГруппы.ГазовыйЛифт, "", "УБЫВ");
		Ширина = ?(ДопЭлемент = Справочники.НоменклатурныеГруппы.ГазовыйЛифт, 50, ШиринаИзделия);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", ДопЭлемент);
		Запрос.УстановитьПараметр("ШиринаДетали", Ширина);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	спрНоменклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК спрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
		|		ПО (НоменклатураПодразделений.Номенклатура = спрНоменклатура.Ссылка)
		|ГДЕ
		|	спрНоменклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
		|	И спрНоменклатура.ШиринаДетали " + Знак + "= &ШиринаДетали
		|	И НоменклатураПодразделений.Подразделение = &Подразделение
		|	И НоменклатураПодразделений.Доступность
		|
		|УПОРЯДОЧИТЬ ПО
		|	спрНоменклатура.ШиринаДетали " + Порядок;
		
		Выборка = Запрос.Выполнить().Выгрузить();
		
		Если Выборка.Количество() > 0 Тогда
			Возврат Выборка[0].Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;                                                          
	КонецЕсли;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Процедура ОтобразитьКартинку() 
	Данные = Элементы.Детали.ТекущиеДанные;
	Если Данные <> Неопределено Тогда
		АдресИзделия = Данные.АдресКартинки;
		АдресВХранилище = "";
		Если ЗначениеЗаполнено(АдресИзделия) Тогда
			ИмяФайла = АдресИзделия;
			ФайлИзображения = Новый Файл(ИмяФайла);
			Если ФайлИзображения.Существует() Тогда
				ПоместитьФайл(АдресВХранилище, ИмяФайла, , Ложь);
			КонецЕсли;
		КонецЕсли;
		Изображение  = АдресВХранилище;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Детали.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицы));
	
	Подразделение = Параметры.Подразделение;
	
	Если ЗначениеЗаполнено(Детали) Тогда
		Если Параметры.Свойство("Идентификатор")  Тогда
			Элементы.Детали.ТекущаяСтрока = Параметры.Идентификатор;
		КонецЕсли;
		Для каждого Элемент Из Детали Цикл
			Если ЗначениеЗаполнено(Элемент.СтрокаЯщики) Тогда
				Элемент.Ящики.Загрузить(ЗначениеИзСтрокиВнутр(Элемент.СтрокаЯщики));	
			КонецЕсли;
			Если ЗначениеЗаполнено(Элемент.СтрокаФасады) Тогда
				Элемент.Фасады.Загрузить(ЗначениеИзСтрокиВнутр(Элемент.СтрокаФасады));	
			КонецЕсли;
			Если ЗначениеЗаполнено(Элемент.СтрокаДопЭлементов) Тогда
				Элемент.ДопЭлементы.Загрузить(ЗначениеИзСтрокиВнутр(Элемент.СтрокаДопЭлементов));	
			КонецЕсли;
			Элемент.АдресКартинки = "Изделие" + Элемент.Изделие.Код;
		КонецЦикла;
	Иначе                                                                                              
		Стр = Детали.Добавить();	
	КонецЕсли;
	
	СписокНоменклатурныхГрупп = Новый СписокЗначений;
	
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП16);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП10);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КантТ);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка045_19);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_19);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_35);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ДВП);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Столешница);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КромкаСтолешница);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Гравировка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Зеркало);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Стекло);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.СтеклоДляСкругляемогоФасада);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Ручка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.АГТПанель);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.АГТПрофиль);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КромкаМДФ);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.МДФ18);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.МДФ8);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.РамочныйАлюминий);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Пристенок);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Бутылочница);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Сушка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ГазовыйЛифт);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Мойка);
	
	МассивыНоменклатурныхГрупп = ЛексСервер.ОтборНоменклатурныхГрупп(СписокНоменклатурныхГрупп, Подразделение);
	
	ДобавитьДопГруппы();	
	
	ШапкаОсновныхНастроек = Новый Структура;
	
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСП","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураДВП","");
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСП","");
	ШапкаОсновныхНастроек.Вставить("Столешница","");;
	ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания","");
	ШапкаОсновныхНастроек.Вставить("Ручка","");
	ШапкаОсновныхНастроек.Вставить("НоменклатураСтекло", "");
	ШапкаОсновныхНастроек.Вставить("НоменклатураМДФ","");
	ШапкаОсновныхНастроек.Вставить("Пристенок","");
	ШапкаОсновныхНастроек.Вставить("ВидФасада", "");
	ШапкаОсновныхНастроек.Вставить("НоменклатураФасада","");
	ШапкаОсновныхНастроек.Вставить("КромкаФасада","");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РабочийКаталог = ФайловыеФункцииСлужебныйКлиент.ВыбратьПутьККаталогуДанныхПользователя();
	
	Для каждого Элемент Из Детали Цикл
		Если ЗначениеЗаполнено(Элемент.Изделие) Тогда
			Элемент.АдресКартинки = РабочийКаталог + Элемент.АдресКартинки;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ДеталиЯщикиФасад.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ВсеФасады);
	Элементы.ДеталиНоменклатураЛДСП.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП);
	Элементы.ДеталиКромкаЛДСП.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Кромка);
	Элементы.ДеталиНоменклатураДляСклеивания.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП);	
	Элементы.ДеталиНоменклатураДВП.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ДВП);
	Элементы.ДеталиНоменклатураМДФ.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.МДФ18);
	Элементы.ДеталиСтолешница.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Столешница);
	Элементы.ДеталиРучка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Ручка);
	Элементы.ДеталиЯщикиРучка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Ручка);
	Элементы.ДеталиФасадыРучка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Ручка);
	Элементы.ДеталиНоменклатураСтекло.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Стекло_И_Зеркало);
	Элементы.ДеталиПристенок.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Пристенок);
	
	ОтобразитьКартинку();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДобавитьКДокументу(Команда)
	
	Модифицированность = Ложь;
	ТаблицаДетали = ПроверитьПередСохранением();
	Если ТаблицаДетали <> Неопределено Тогда 
		ОповеститьОВыборе(ТаблицаДетали);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПросмотрИзделия(Команда)
	
	//СписокИзображений = Новый СписокЗначений;
	//КоличествоДеталей = Детали.Количество();
	//Для Индекс = 1 По КоличествоДеталей Цикл
	//	СписокИзображений.Добавить(Индекс, Детали[Индекс - 1].АдресКартинки);
	//КонецЦикла;	
	//
	//ПараметрыДляФормы = Новый Структура;
	//ПараметрыДляФормы.Вставить("СписокИзображений", СписокИзображений);
	//ПараметрыДляФормы.Вставить("РабочийКаталог", РабочийКаталог);
	//ПараметрыДляФормы.Вставить("НовыйПросмотр", Ложь);
	//ОткрытьФорму("Документ.Спецификация.Форма.ФормаИзображениеИзделий", ПараметрыДляФормы, ЭтаФорма);
	
	ПараметрыДляФормы = Новый Структура;
	ПараметрыДляФормы.Вставить("АдресТаблицы", ВыгрузитьНужнуюТаблицуВХранилище());
	ПараметрыДляФормы.Вставить("РабочийКаталог", РабочийКаталог);
	ПараметрыДляФормы.Вставить("НовыйПросмотр", Истина);
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаИзображениеИзделий", ПараметрыДляФормы, Элементы.Детали);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

&НаСервере
Функция ПроверитьПередСохранением()
	
	Отказ  = Ложь;
	
	Для каждого Элемент Из Детали Цикл
		
		НомерСтроки = Элемент.ПолучитьИдентификатор() + 1;
		ОписаниеОшибки = Строка(Элемент.Изделие) + "(Номер изделия - " + НомерСтроки + ")";
		ШиринаИзделия = Элемент.ШиринаИзделия;
		
		Для Каждого Строка Из Элемент.Ящики Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ВидЯщика) Тогда	
				//Элементы.ДеталиЯщики.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
				Текст = "Не выбран вид ящика у " + ОписаниеОшибки;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.Ящики");
				Отказ = Истина;
			КонецЕсли;	
			Если	НЕ ЗначениеЗаполнено(Строка.Направляющие) Тогда
				//Элементы.ДеталиЯщики.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
				Текст = "Не выбраны направляющие у " + ОписаниеОшибки;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.Ящики");
				Отказ = Истина;
			КонецЕсли;
			Если Строка.ВидФасада <> "Нет" Тогда
				Если	НЕ ЗначениеЗаполнено(Строка.Фасад) Тогда
					//Элементы.ДеталиЯщики.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
					Текст = "Не выбран фасад ящика у " + ОписаниеОшибки;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.Ящики");
					Отказ = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Строка.КромкаФасада)  Тогда
					//Элементы.ДеталиЯщики.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
					Текст = "Не выбран профиль к фасаду у " + ОписаниеОшибки;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.Ящики");
					Отказ = Истина;	
				КонецЕсли;
				Ручка = Строка.Ручка;
				Если ЗначениеЗаполнено(Ручка) И (ШиринаИзделия < Ручка.ДлинаДетали + 90) Тогда
					//Элементы.ДеталиЯщики.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
					Текст = "Размер ручки не подходит у " + ОписаниеОшибки;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.Ящики");
					Отказ = Истина;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из Элемент.Фасады Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда	
				//Элементы.ДеталиЯщики.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
				Текст = "Не выбрана номенклатура фасада у " + ОписаниеОшибки;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.Фасады");
				Отказ = Истина;
			КонецЕсли;	
			Если	НЕ ЗначениеЗаполнено(Строка.Кромка) И Строка.ВидФасада <> "ФасадСтеклянный" И Строка.ВидФасада <> "ФасадСтеклянныйЗакругленный" Тогда
				//Элементы.ДеталиЯщики.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
				Текст = "Не выбрана кромка фасада у " + ОписаниеОшибки;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.Фасады");
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из Элемент.ДопЭлементы Цикл
			Если Строка.ДопЭлемент = Справочники.НоменклатурныеГруппы.Мойка Тогда
				Если Строка.НоменклатураДопЭлемента.ШиринаДетали + 70 > Элемент.ШиринаИзделия Тогда
					//Элементы.ДеталиЯщики.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
					Текст = "Мойка не подходит по ширине. Выберите другую у " + ОписаниеОшибки;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.ДопЭлементы");
					Отказ = Истина;
				КонецЕсли;
				Если Строка.НоменклатураДопЭлемента.ГлубинаДетали + 70 > Элемент.ГлубинаИзделия Тогда
					//Элементы.ДеталиЯщики.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
					Текст = "Мойка не подходит по глубине. Выберите другую у " + ОписаниеОшибки;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.ДопЭлементы");
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДопТекстуры = ЗначениеЗаполнено(Элемент.Изделие.СписокМатериалы.Найти("10 ЛДСП+10 ЛДСП")) ИЛИ ЗначениеЗаполнено(Элемент.Изделие.СписокМатериалы.Найти("16 ЛДСП+10 ЛДСП"))
		ИЛИ ЗначениеЗаполнено(Элемент.Изделие.СписокМатериалы.Найти("16 ЛДСП+16 ЛДСП"));
		НоменклатураЛДСП = ЗначениеЗаполнено(Элемент.Изделие.СписокМатериалы.Найти("10 ЛДСП")) ИЛИ ЗначениеЗаполнено(Элемент.Изделие.СписокМатериалы.Найти("16 ЛДСП"))
		ИЛИ ДопТекстуры;
		
		Если НЕ ЗначениеЗаполнено(Элемент.Изделие) Тогда
			Элементы.Детали.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
			Текст = "Не выбрано Изделие";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.Изделие");
			Отказ = Истина;
		КонецЕсли;
		
		Если НоменклатураЛДСП Тогда
			Если НЕ ЗначениеЗаполнено(Элемент.НоменклатураЛДСП) Тогда
				Элементы.Детали.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
				Текст = "Не выбрана номенклатура ЛДСП";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.НоменклатураЛДСП");
				Отказ = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Элемент.КромкаЛДСП) Тогда
				Элементы.Детали.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
				Текст = "Не выбрана кромка ЛДСП";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.КромкаЛДСП");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;	
		
		Если ДопТекстуры И НЕ ЗначениеЗаполнено(Элемент.НоменклатураДляСклеивания) Тогда
			Элементы.Детали.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
			Текст = "Не выбрана доп. текстура";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.НоменклатураДляСклеивания");
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.Изделие.СписокМатериалы.Найти("Столешница")) И НЕ ЗначениеЗаполнено(Элемент.Столешница) Тогда
			Элементы.Детали.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
			Текст = "Не выбрана столешница";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.Столешница");
			Отказ = Истина;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Элемент.Изделие.СписокМатериалы.Найти("Пристенок")) И НЕ ЗначениеЗаполнено(Элемент.Пристенок) Тогда
			Элементы.Детали.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
			Текст = "Не выбран пристенок";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.Пристенок");
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.Изделие.СписокМатериалы.Найти("Стекло")) И НЕ ЗначениеЗаполнено(Элемент.НоменклатураСтекло) Тогда
			Элементы.Детали.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
			Текст = "Не выбрано стекло";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.НоменклатураСтекло");
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Элемент.НоменклатураДВП) И (ЗначениеЗаполнено(Элемент.Изделие.СписокМатериалы.Найти("ДВП")) ИЛИ Элемент.Ящики.Количество() > 0) Тогда
			Элементы.Детали.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
			Текст = "Не выбрана ДВП";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.НоменклатураДВП");
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.Изделие.СписокМатериалы.Найти("МДФ")) И НЕ ЗначениеЗаполнено(Элемент.НоменклатураМДФ) Тогда
			Элементы.Детали.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
			Текст = "Не выбрана МДФ";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.НоменклатураМДФ");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		ТЗЯщики = РеквизитФормыВЗначение("Детали");
		Для Каждого Элемент Из ТЗЯщики Цикл	
			Элемент.СтрокаЯщики = ЗначениеВСтрокуВнутр(Элемент.Ящики);	
			Элемент.СтрокаФасады = ЗначениеВСтрокуВнутр(Элемент.Фасады);
			Элемент.СтрокаДопЭлементов = ЗначениеВСтрокуВнутр(Элемент.ДопЭлементы);
		КонецЦикла;	
		ЗначениеВРеквизитФормы(ТЗЯщики, "Детали");
		
		Возврат ПоместитьВоВременноеХранилище(Детали.Выгрузить());
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ 

&НаКлиенте
Процедура ДеталиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Если (ТекущиеДанные <> Неопределено) И (ТекДанныеСтроки <> ТекущиеДанные) Тогда
		НастройкиИзделия();
		ТекДанныеСтроки = ТекущиеДанные;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НоменклатураЛДСП) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураЛДСП) Тогда			
			ТекущиеДанные.НоменклатураЛДСП = ШапкаОсновныхНастроек.НоменклатураЛДСП;		
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НоменклатураЛДСП) Тогда
			ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСП", ТекущиеДанные.НоменклатураЛДСП);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НоменклатураДВП) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураДВП) Тогда			
			ТекущиеДанные.НоменклатураДВП = ШапкаОсновныхНастроек.НоменклатураДВП;		
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НоменклатураДВП) Тогда
			ШапкаОсновныхНастроек.Вставить("НоменклатураДВП", ТекущиеДанные.НоменклатураДВП);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КромкаЛДСП) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.КромкаЛДСП) Тогда			
			ТекущиеДанные.КромкаЛДСП = ШапкаОсновныхНастроек.КромкаЛДСП;		
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.КромкаЛДСП) Тогда
			ШапкаОсновныхНастроек.Вставить("КромкаЛДСП", ТекущиеДанные.КромкаЛДСП);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Столешница) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.Столешница) Тогда			
			ТекущиеДанные.Столешница = ШапкаОсновныхНастроек.Столешница;		
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Столешница) Тогда
			ШапкаОсновныхНастроек.Вставить("Столешница", ТекущиеДанные.Столешница);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НоменклатураДляСклеивания) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураДляСклеивания) Тогда			
			ТекущиеДанные.НоменклатураДляСклеивания = ШапкаОсновныхНастроек.НоменклатураДляСклеивания;		
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НоменклатураДляСклеивания) Тогда
			ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания", ТекущиеДанные.НоменклатураДляСклеивания);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Ручка) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.Ручка) Тогда			
			ТекущиеДанные.Ручка = ШапкаОсновныхНастроек.Ручка;
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Ручка) Тогда
			ШапкаОсновныхНастроек.Вставить("Ручка", ТекущиеДанные.Ручка);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НоменклатураСтекло) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураСтекло) Тогда			
			ТекущиеДанные.НоменклатураСтекло = ШапкаОсновныхНастроек.НоменклатураСтекло;		
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НоменклатураСтекло) Тогда
			ШапкаОсновныхНастроек.Вставить("НоменклатураСтекло", ТекущиеДанные.НоменклатураСтекло);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НоменклатураМДФ) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураМДФ) Тогда			
			ТекущиеДанные.НоменклатураМДФ = ШапкаОсновныхНастроек.НоменклатураМДФ;		
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НоменклатураМДФ) Тогда
			ШапкаОсновныхНастроек.Вставить("НоменклатураМДФ", ТекущиеДанные.НоменклатураМДФ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Пристенок) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.Пристенок) Тогда			
			ТекущиеДанные.Пристенок = ШапкаОсновныхНастроек.Пристенок;		
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Пристенок) Тогда
			ШапкаОсновныхНастроек.Вставить("Пристенок", ТекущиеДанные.Пристенок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ВидФасада) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.ВидФасада) Тогда			
			ТекущиеДанные.ВидФасада = ШапкаОсновныхНастроек.ВидФасада;		
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ВидФасада) Тогда
			ШапкаОсновныхНастроек.Вставить("ВидФасада", ТекущиеДанные.ВидФасада);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НоменклатураФасада) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураФасада) Тогда			
			ТекущиеДанные.НоменклатураФасада = ШапкаОсновныхНастроек.НоменклатураФасада;		
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НоменклатураФасада) Тогда
			ШапкаОсновныхНастроек.Вставить("НоменклатураФасада", ТекущиеДанные.НоменклатураФасада);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КромкаФасада) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.КромкаФасада) Тогда			
			ТекущиеДанные.КромкаФасада = ШапкаОсновныхНастроек.КромкаФасада;		
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.КромкаФасада) Тогда
			ШапкаОсновныхНастроек.Вставить("КромкаФасада", ТекущиеДанные.КромкаФасада);
		КонецЕсли;
		
		Если ТекущиеДанные.ДопЭлементы.Количество() > 0 Тогда
			ДеталиДопЭлементыПриАктивизацииСтроки(Элемент);
		КонецЕсли;
		
		Если ТекущиеДанные.Ящики.Количество() > 0 Тогда
			ДеталиЯщикиПриАктивизацииСтроки(Элемент);
		КонецЕсли;
		
		Если ТекущиеДанные.Фасады.Количество() > 0 Тогда
			ДеталиФасадыПриАктивизацииСтроки(Элемент);	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзделиеПриИзменении(Элемент)
	
	НастройкиИзделия();
	Если ЗначениеЗаполнено(СтруктураИзделия) Тогда
		Элементы.Детали.ТекущиеДанные.ГлубинаИзделия = СтруктураИзделия.ГлубинаИзделия;
		Элементы.Детали.ТекущиеДанные.ШиринаИзделия = СтруктураИзделия.ШиринаИзделия;
		Элементы.Детали.ТекущиеДанные.ВысотаИзделия = СтруктураИзделия.ВысотаИзделия;
		Элементы.Детали.ТекущиеДанные.Шаг = СтруктураИзделия.Шаг;
		
		Ящики = Элементы.Детали.ТекущиеДанные.Ящики;
		Ящики.Очистить();
		Для Индекс = 1 По СтруктураИзделия.ЯщикиКоличество Цикл
			Строка = Элементы.Детали.ТекущиеДанные.Ящики.Добавить();
			Строка.Представление = СтруктураИзделия["Ящик" + Индекс +  "Имя"];
			Строка.ВидФасада = СтруктураИзделия["Ящик" + Индекс +  "ВидФасада"];
			
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураФасада) Тогда
				Строка.Фасад = ШапкаОсновныхНастроек.НоменклатураФасада;
			КонецЕсли;
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.КромкаФасада) Тогда
				Строка.КромкаФасада = ШапкаОсновныхНастроек.КромкаФасада;
			КонецЕсли;
		КонецЦикла;
		
		Фасады = Элементы.Детали.ТекущиеДанные.Фасады;
		Фасады.Очистить();
		Для Индекс = 1 По СтруктураИзделия.ФасадыКоличество Цикл
			
			Строка = Элементы.Детали.ТекущиеДанные.Фасады.Добавить();
			Строка.ВидФасада = СтруктураИзделия["Фасад" + Индекс +  "ВидФасада"];
			Строка.НомерДетали = СтруктураИзделия["Фасад" + Индекс +  "НомерДетали"];
			Строка.Представление = СтруктураИзделия["Фасад" + Индекс +  "Имя"];
			
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.ВидФасада) Тогда
				Строка.ВидФасада = ШапкаОсновныхНастроек.ВидФасада;
			КонецЕсли;
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.НоменклатураФасада) Тогда
				Строка.Номенклатура = ШапкаОсновныхНастроек.НоменклатураФасада;
			КонецЕсли;
			Если ЗначениеЗаполнено(ШапкаОсновныхНастроек.КромкаФасада) Тогда
				Строка.Кромка = ШапкаОсновныхНастроек.КромкаФасада;
			КонецЕсли;	
		КонецЦикла;
		
		ДопЭлементы = Элементы.Детали.ТекущиеДанные.ДопЭлементы;
		ДопЭлементы.Очистить();
		Для Индекс = 1 По СтруктураИзделия.КоличествоДопЭлементов Цикл
			Строка = Элементы.Детали.ТекущиеДанные.ДопЭлементы.Добавить();
			Строка.ДопЭлемент = СтруктураИзделия["ДопЭлемент" + Индекс +  "Имя"];
			Строка.НоменклатураДопЭлемента = СтруктураИзделия["ДопЭлемент" + Индекс +  "Номенклатура"];
		КонецЦикла;
		
		Ручка = Элементы.Детали.ТекущиеДанные.Ручка;
		УстановитьПараметр(Фасады, Ручка, "Ручка");
		УстановитьПараметр(Ящики, Ручка, "Ручка");		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИзделия() 
	Если Элементы.Детали.ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.Детали.ТекущиеДанные.Изделие) Тогда
			СтруктураИзделия = ПолучитьСтруктуруИзделия(Элементы.Детали.ТекущиеДанные.Изделие, Подразделение);
			
			Элементы.Детали.ТекущиеДанные.АдресКартинки = РабочийКаталог + "Изделие" + СтруктураИзделия.Код;
			
			Элементы.ГлубинаИзделия.Подсказка = Строка(СтруктураИзделия.ГлубинаИзделияМин) + " - " + Строка(СтруктураИзделия.ГлубинаИзделияМакс);
			Элементы.ГлубинаИзделия.МаксимальноеЗначение = СтруктураИзделия.ГлубинаИзделияМакс;
			Элементы.ГлубинаИзделия.МинимальноеЗначение = СтруктураИзделия.ГлубинаИзделияМин;
			Элементы.ШиринаИзделия.Подсказка = Строка(СтруктураИзделия.ШиринаИзделияМин) + " - " + Строка(СтруктураИзделия.ШиринаИзделияМакс);
			Если СтруктураИзделия.Шаг > 0 Тогда
				Элементы.ШиринаИзделия.Подсказка = Элементы.ШиринаИзделия.Подсказка + " (шаг: " + Строка(СтруктураИзделия.Шаг) + ")";
			КонецЕсли;	
			Элементы.ШиринаИзделия.МаксимальноеЗначение = СтруктураИзделия.ШиринаИзделияМакс;
			Элементы.ШиринаИзделия.МинимальноеЗначение = СтруктураИзделия.ШиринаИзделияМин;
			Элементы.ВысотаИзделия.Подсказка = Строка(СтруктураИзделия.ВысотаИзделияМин) + " - " + Строка(СтруктураИзделия.ВысотаИзделияМакс);
			Элементы.ВысотаИзделия.МаксимальноеЗначение = СтруктураИзделия.ВысотаИзделияМакс;
			Элементы.ВысотаИзделия.МинимальноеЗначение = СтруктураИзделия.ВысотаИзделияМин;
						
			//Элементы.ДеталиЯщики.Высота = ?(СтруктураИзделия.ЯщикиКоличество = 0, 2, СтруктураИзделия.ЯщикиКоличество + 2);
			//Элементы.ДеталиФасады.Высота = ?(СтруктураИзделия.ФасадыКоличество = 0, 2, СтруктураИзделия.ФасадыКоличество + 2);
			//Элементы.ДеталиДопЭлементы.Высота = ?(СтруктураИзделия.КоличествоДопЭлементов = 0, 2, СтруктураИзделия.КоличествоДопЭлементов + 2);
			
			ЕстьЛДСП = СтруктураИзделия.ЛДСП10 ИЛИ СтруктураИзделия.ЛДСП16 ИЛИ СтруктураИзделия.ЛДСП1010 ИЛИ
			СтруктураИзделия.ЛДСП1610 ИЛИ СтруктураИзделия.ЛДСП1616 ИЛИ СтруктураИзделия.ЯщикиКоличество > 0;
			НастройкиФасадов = СтруктураИзделия.ФасадыКоличество > 0 ИЛИ СтруктураИзделия.ЯщикиКоличество;
			
			Элементы.ДеталиНоменклатураЛДСП.Доступность = ЕстьЛДСП;
			Элементы.ДеталиКромкаЛДСП.Доступность = ЕстьЛДСП;
			Элементы.ДеталиНоменклатураДляСклеивания.Доступность = СтруктураИзделия.ЛДСП1010 ИЛИ СтруктураИзделия.ЛДСП1610 ИЛИ СтруктураИзделия.ЛДСП1616;
			Элементы.ДеталиНоменклатураМДФ.Доступность = СтруктураИзделия.МДФ;
			Элементы.ДеталиНоменклатураСтекло.Доступность = СтруктураИзделия.Стекло;
			Элементы.ДеталиНоменклатураДВП.Доступность = СтруктураИзделия.ДВП ИЛИ СтруктураИзделия.ЯщикиКоличество > 0;
			Элементы.ДеталиРучка.Доступность = НастройкиФасадов;
			Элементы.ДеталиПристенок.Доступность = СтруктураИзделия.Пристенок;
			Элементы.ДеталиВидФасада.Доступность = НастройкиФасадов;
			Элементы.ДеталиНоменклатураФасада.Доступность = НастройкиФасадов;
			Элементы.ДеталиКромкаФасада.Доступность = НастройкиФасадов;
			ПриИзмененииВидФасада(Элементы.Детали.ТекущиеДанные.ВидФасада);
		КонецЕсли;
		ОтобразитьКартинку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиЯщикиВидЯщикаПриИзменении(Элемент)
	
	ДанныеЯщика = Элементы.ДеталиЯщики.ТекущиеДанные;
	Если ДанныеЯщика <> Неопределено Тогда
		Элементы.ДеталиЯщикиНаправляющие.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ДанныеЯщика.ВидЯщика);
		Если ДанныеЯщика.ВидЯщика = ПредопределенноеЗначение("Перечисление.ВидыЯщика.Обычный") Тогда
			Если ДанныеЯщика.Направляющие = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.Тандембокс") 
				ИЛИ ДанныеЯщика.Направляющие = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.Метабокс") Тогда
				ДанныеЯщика.Направляющие = Неопределено;
			КонецЕсли;
		ИначеЕсли	ДанныеЯщика.ВидЯщика = ПредопределенноеЗначение("Перечисление.ВидыЯщика.Тандембокс") Тогда
			ДанныеЯщика.Направляющие = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.Тандембокс");	
			Элементы.ДеталиЯщикиНаправляющие.ТолькоПросмотр = Истина;
		ИначеЕсли	ДанныеЯщика.ВидЯщика = ПредопределенноеЗначение("Перечисление.ВидыЯщика.Метабокс") Тогда	
			ДанныеЯщика.Направляющие =	ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.Метабокс");	
			Элементы.ДеталиЯщикиНаправляющие.ТолькоПросмотр = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиЯщикиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Ящики.Количество() > 0 Тогда
			Если Элементы.ДеталиЯщики.ТекущиеДанные <> Неопределено Тогда
			ДеталиЯщикиВидЯщикаПриИзменении(Элемент);
			ОпределитьКромкуЯщиков();
			Элементы.ДеталиЯщикиФасад.ТолькоПросмотр = Элементы.ДеталиЯщики.ТекущиеДанные.ВидФасада = "Нет";
			Элементы.ДеталиЯщикиКромкаФасада.ТолькоПросмотр = Элементы.ДеталиЯщики.ТекущиеДанные.ВидФасада = "Нет";
			Элементы.ДеталиЯщикиРучка.ТолькоПросмотр = Элементы.ДеталиЯщики.ТекущиеДанные.ВидФасада = "Нет";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеталиЯщикиФасадПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеталиЯщики.ТекущиеДанные;
	ТекущиеДанные.КромкаФасада = Неопределено;
	ОпределитьКромкуЯщиков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьКромкуЯщиков() 
	
	ТекущиеДанные = Элементы.ДеталиЯщики.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Фасад) Тогда
			Элементы.ДеталиЯщикиКромкаФасада.СписокВыбора.Очистить();
			ГруппаФасада = НоменклатурнаяГруппаФасада(ТекущиеДанные.Фасад);
			Если ГруппаФасада = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ЛДСП16") Тогда
				Элементы.ДеталиЯщикиКромкаФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаКФасадам);	
			ИначеЕсли ГруппаФасада = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.МДФ18") Тогда
				Элементы.ДеталиЯщикиКромкаФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаМДФ);
			Иначе 
				Элементы.ДеталиЯщикиКромкаФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.АГТПрофиль);	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиФасадыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Фасады.Количество() > 0 Тогда
			ОпределитьВидыФасадов();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиФасадыВидФасадаПриИзменении(Элемент)
	
	ДанныеФасада = Элементы.ДеталиФасады.ТекущиеДанные;
	ДанныеФасада.Номенклатура = Неопределено;
	ДанныеФасада.Кромка = Неопределено;
	ОпределитьВидыФасадов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьВидыФасадов() 
	
	ДанныеФасада = Элементы.ДеталиФасады.ТекущиеДанные;
	Если ДанныеФасада <> Неопределено Тогда
		Элементы.ДеталиФасадыНоменклатура.СписокВыбора.Очистить();
		Элементы.ДеталиФасадыКромка.СписокВыбора.Очистить();
		Если ДанныеФасада.ВидФасада = "ФасадАГТ" Тогда
			Элементы.ДеталиФасадыНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ФасадыАГТ);
			Элементы.ДеталиФасадыКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.АГТПрофиль);
		ИначеЕсли ДанныеФасада.ВидФасада = "ФасадСтеклянный" Тогда
			Элементы.ДеталиФасадыНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Стекло_И_Зеркало);
		ИначеЕсли ДанныеФасада.ВидФасада = "ФасадЛДСП" Тогда
			Элементы.ДеталиФасадыНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП16);
			Элементы.ДеталиФасадыКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаКФасадам);
		ИначеЕсли ДанныеФасада.ВидФасада = "ФасадМДФ" Тогда
			Элементы.ДеталиФасадыНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.МДФ18);
			Элементы.ДеталиФасадыКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаМДФ);
		ИначеЕсли ДанныеФасада.ВидФасада = "ФасадАлюминиевый" Тогда
			Элементы.ДеталиФасадыНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Стекло_И_Зеркало);
			Элементы.ДеталиФасадыКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.РамочныйАлюминий);
		ИначеЕсли ДанныеФасада.ВидФасада = "ФасадСтеклянныйЗакругленный" Тогда
			Элементы.ДеталиФасадыНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Стекло_И_Зеркало);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураЛДСППриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураЛДСП", Элементы.Детали.ТекущиеДанные.НоменклатураЛДСП);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаЛДСППриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("КромкаЛДСП", Элементы.Детали.ТекущиеДанные.КромкаЛДСП);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиСтолешницаПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("Столешница", Элементы.Детали.ТекущиеДанные.Столешница);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураСтеклоПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураСтекло", Элементы.Детали.ТекущиеДанные.НоменклатураСтекло);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураМДФПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураМДФ", Элементы.Детали.ТекущиеДанные.НоменклатураМДФ);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураДВППриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураДВП", Элементы.Детали.ТекущиеДанные.НоменклатураДВП);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиРучкаПриИзменении(Элемент)
	Ручка = Элементы.Детали.ТекущиеДанные.Ручка;
	ШапкаОсновныхНастроек.Вставить("Ручка", Ручка);
	
	УстановитьПараметр(Элементы.Детали.ТекущиеДанные.Фасады, Ручка, "Ручка");
	УстановитьПараметр(Элементы.Детали.ТекущиеДанные.Ящики, Ручка, "Ручка");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметр(Таблица, Параметр, ТипПараметра) 
	
	Для Каждого Строка Из Таблица Цикл
		Если Строка.ВидФасада = "Нет" Тогда
			Строка[ТипПараметра] = Неопределено;
		Иначе	
			Строка[ТипПараметра] = Параметр;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураДляСклеиванияПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураДляСклеивания", Элементы.Детали.ТекущиеДанные.НоменклатураДляСклеивания);
КонецПроцедуры

&НаКлиенте
Процедура ШиринаИзделияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Шаг > 0 Тогда
			Если ТекущиеДанные.ШиринаИзделия % ТекущиеДанные.Шаг <> 0 Тогда
				ТекущиеДанные.ШиринаИзделия = СтруктураИзделия.ШиринаИзделия;
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Соблюдайте шаг %1 ", ТекущиеДанные.Шаг);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Элементы.Детали.ТекущиеДанные.ШиринаИзделия");
			Иначе 
				Если СтруктураИзделия.КоличествоДопЭлементов > 0 Тогда
					СтруктураИзделия = РазмерыДопЭлементов(СтруктураИзделия, ТекущиеДанные.ШиринаИзделия, Подразделение);
					
					ДопЭлементы = Элементы.Детали.ТекущиеДанные.ДопЭлементы;
					ДопЭлементы.Очистить();
					Для Индекс = 1 По СтруктураИзделия.КоличествоДопЭлементов Цикл
						Строка = Элементы.Детали.ТекущиеДанные.ДопЭлементы.Добавить();
						Строка.ДопЭлемент = СтруктураИзделия["ДопЭлемент" + Индекс +  "Имя"];
						Строка.НоменклатураДопЭлемента = СтруктураИзделия["ДопЭлемент" + Индекс +  "Номенклатура"];
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазмерыДопЭлементов(СтруктураИзделия, Ширина, Подразделение) 
	
	Для Индекс = 1 По СтруктураИзделия.КоличествоДопЭлементов Цикл
		НоменклатураДопЭлемента = ПолучитьДопЭлемент(СтруктураИзделия["ДопЭлемент" + Индекс +  "Имя"], Ширина, Подразделение);
		СтруктураИзделия.Вставить("ДопЭлемент" + Индекс + "Номенклатура", НоменклатураДопЭлемента);
	КонецЦикла; 
	
	Возврат СтруктураИзделия;
	
КонецФункции

&НаКлиенте
Процедура ДеталиПристенокПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("Пристенок", Элементы.Детали.ТекущиеДанные.Пристенок);
КонецПроцедуры

&НаКлиенте
Процедура ДеталиДопЭлементыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ДопЭлементы.Количество() > 0 Тогда	
			Данные = Элементы.ДеталиДопЭлементы.ТекущиеДанные;
			Если Данные <> Неопределено Тогда
				Если Данные.ДопЭлемент = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.Бутылочница") Тогда
					Элементы.ДеталиДопЭлементыНоменклатураДопЭлемента.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Бутылочница);
				ИначеЕсли Данные.ДопЭлемент = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.Сушка") Тогда
					Элементы.ДеталиДопЭлементыНоменклатураДопЭлемента.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Сушка);
				ИначеЕсли Данные.ДопЭлемент = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ГазовыйЛифт") Тогда
					Элементы.ДеталиДопЭлементыНоменклатураДопЭлемента.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ГазовыйЛифт);
				ИначеЕсли Данные.ДопЭлемент = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.Мойка") Тогда
					Элементы.ДеталиДопЭлементыНоменклатураДопЭлемента.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Мойка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиВидФасадаПриИзменении(Элемент)
	
	ВидФасада = Элементы.Детали.ТекущиеДанные.ВидФасада;
	ШапкаОсновныхНастроек.Вставить("ВидФасада", ВидФасада);	
	
	Элементы.ДеталиНоменклатураФасада.СписокВыбора.Очистить();
	Элементы.ДеталиКромкаФасада.СписокВыбора.Очистить();
	ПриИзмененииВидФасада(ВидФасада);
	
	УстановитьПараметр(Элементы.Детали.ТекущиеДанные.Фасады, Элементы.Детали.ТекущиеДанные.ВидФасада, "ВидФасада");
	Элементы.Детали.ТекущиеДанные.НоменклатураФасада = Неопределено;
	ДеталиНоменклатураФасадаПриИзменении(Элемент);
	Элементы.Детали.ТекущиеДанные.КромкаФасада = Неопределено;
	ДеталиКромкаФасадаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидФасада(ВидФасада) 
	
	Если ВидФасада = "ФасадАГТ" Тогда
		Элементы.ДеталиНоменклатураФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ФасадыАГТ);
		Элементы.ДеталиКромкаФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.АГТПрофиль);
	ИначеЕсли ВидФасада = "ФасадЛДСП" Тогда
		Элементы.ДеталиНоменклатураФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП16);
		Элементы.ДеталиКромкаФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаКФасадам);
	ИначеЕсли ВидФасада = "ФасадМДФ" Тогда
		Элементы.ДеталиНоменклатураФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.МДФ18);
		Элементы.ДеталиКромкаФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаМДФ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураФасадаПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("НоменклатураФасада", Элементы.Детали.ТекущиеДанные.НоменклатураФасада);
	УстановитьПараметр(Элементы.Детали.ТекущиеДанные.Фасады, Элементы.Детали.ТекущиеДанные.НоменклатураФасада, "Номенклатура");
	УстановитьПараметр(Элементы.Детали.ТекущиеДанные.Ящики, Элементы.Детали.ТекущиеДанные.НоменклатураФасада, "Фасад");
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаФасадаПриИзменении(Элемент)
	ШапкаОсновныхНастроек.Вставить("КромкаФасада", Элементы.Детали.ТекущиеДанные.КромкаФасада);
	УстановитьПараметр(Элементы.Детали.ТекущиеДанные.Фасады, Элементы.Детали.ТекущиеДанные.КромкаФасада, "Кромка");
	УстановитьПараметр(Элементы.Детали.ТекущиеДанные.Ящики, Элементы.Детали.ТекущиеДанные.КромкаФасада, "КромкаФасада");
КонецПроцедуры

&НаКлиенте
Процедура ДеталиТабличныеЧастиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗагрузитьТабличнуюЧасть(ВыбранноеЗначение);
	
	Детали.Сортировать("НовыйИндекс Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяФорма(Команда)
	
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаШкафПоКаталогу");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
