////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция УстановитьПараметрыЗапроса(НачалоПериода, КонецПериода)
	
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецПериода);
	
КонецФункции // УстановитьПараметрыЗапроса()

&НаСервере
Функция УстановитьОтборПоПериоду(Текущий, НомерДокумента = Неопределено)
	
	// Текущий -- булево,
	// истина - 5 дней, ложь - все время
	СекундВСутках = 86400;
	Если Текущий Тогда
		НачалоПериода = НачалоДня(ТекущаяДата()) - СекундВСутках * 2;
		КонецПериода = КонецДня(ТекущаяДата()) + СекундВСутках * 2;
	Иначе
		НачалоПериода = '0001.01.01';
		КонецПериода = '3999.11.30';
	КонецЕсли;
	
	УстановитьПараметрыЗапроса(НачалоПериода, КонецПериода);
	
	// позиционируемся на документе с указанным номером
	Если ЗначениеЗаполнено(НомерДокумента) Тогда
		ВведенныйНомерСНулями = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерДокумента, 11, "0", "Слева");
		// пользователь может ввести номер документа, к которому у него нет доступа
		Попытка
			СсылкаНаДокумент = Документы.Спецификация.НайтиПоНомеру(ВведенныйНомерСНулями, ТекущаяДата());
			Если СсылкаНаДокумент.Пустая() Тогда
				СсылкаНаДокумент = Документы.Спецификация.НайтиПоНомеру(ВведенныйНомерСНулями, ДобавитьМесяц(ТекущаяДата(), -12));
			КонецЕсли;
		Исключение
			СсылкаНаДокумент = Неопределено;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
			Элементы.Список.ТекущаяСтрока = СсылкаНаДокумент;
		Иначе
			ТекстСообщения = "Спецификация № %1 не найдена";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерДокумента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // УстановитьПараметрыЗапроса()

&НаСервереБезКонтекста
Функция СохранитьВДокументРедактированнуюСтроку(СсылкаСпецификация, СтрокаРедактированнаяФлэш) 
	
	Если ЗначениеЗаполнено(СсылкаСпецификация) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДокОбъект = СсылкаСпецификация.ПолучитьОбъект();
		ДокОбъект.СтрокаПечатьЭтикеток = СтрокаРедактированнаяФлэш;
		ДокОбъект.Записать();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьСтрокуЭтикеток(СсылкаСпецификация, СтрокаРедактированнаяФлэш) 
	
	Если ЗначениеЗаполнено(СсылкаСпецификация) Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей = РегистрыСведений.РаскройДеталей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(СсылкаСпецификация);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 1 Тогда                  
			НаборЗаписей[0].СтрокаЭтикеток = СтрокаРедактированнаяФлэш;
			НаборЗаписей.Записать();
		КонецЕсли;                                              
			
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизит)
	
	Возврат Ссылка[Реквизит];
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиНовуюСтрокуФлэш(Спецификация, Команда, Данные = Неопределено)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Спецификация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаскройДеталей.СтрокаРаскрой,
	|	РаскройДеталей.СтрокаЭтикеток,
	|	РаскройДеталей.ТекущаяСтрокаРаскроя,
	|	РаскройДеталей.ТаблицаДеталей
	|ИЗ
	|	РегистрСведений.РаскройДеталей КАК РаскройДеталей
	|ГДЕ
	|	РаскройДеталей.Объект = &Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Если Команда = "init" Тогда
		
		Возврат Выборка.ТекущаяСтрокаРаскроя + "♥" + Выборка.СтрокаЭтикеток;
		
	ИначеЕсли Команда = "new" Тогда
		
		СтруктураРаскроя = РегистрыСведений.РаскройДеталей.ПолучитьСтрокуРаскроя(Спецификация);
		
		ЗаписатьНовыйРаскрой(Спецификация, СтруктураРаскроя.ДанныеДляРаскроя, СтруктураРаскроя.ТаблицаДеталей, "");
		
		Возврат СтруктураРаскроя.ДанныеДляРаскроя;
				
	ИначеЕсли Команда = "recr" Тогда
		
		ТЗ = Выборка.ТаблицаДеталей.Получить();
		МассивИД = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Данные, ",");
		
		Для Каждого Элемент Из МассивИД Цикл
			
			НашаСтрока = ТЗ.Найти(Число(Элемент), "ИД");
			Если НашаСтрока <> Неопределено Тогда 
				ТЗ.Удалить(НашаСтрока);
			КонецЕсли;
			
		КонецЦикла;	
		
		СтруктураРаскроя = РегистрыСведений.РаскройДеталей.ПолучитьСтрокуРаскроя(Спецификация, ТЗ);
		
		ЗаписатьНовыйРаскрой(Спецификация, СтруктураРаскроя.ДанныеДляРаскроя, СтруктураРаскроя.ТаблицаДеталей, "");
		
		Возврат СтруктураРаскроя.ДанныеДляРаскроя;
		
	КонецЕсли;
	                                     	
КонецФункции // НайтиНовуюСтрокуФлэш()

&НаСервереБезКонтекста
Процедура ЗаписатьНовыйРаскрой(Спецификация, ТекущаяСтрокаРаскроя, ТаблицаДеталей, СтрокаЭтикеток)
	
	НаборЗаписей = РегистрыСведений.РаскройДеталей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Спецификация);
	
	НаборЗаписей.Прочитать();
	Запись = НаборЗаписей[0];
	
	Запись.СтрокаЭтикеток = СтрокаЭтикеток;	
	Запись.ТекущаяСтрокаРаскроя = ТекущаяСтрокаРаскроя;
	Запись.ТаблицаДеталей = ТаблицаДеталей;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//url = ЛексКлиент.ПутьHTML(ИмяHTML);
	new_url = ЛексКлиент.ПутьHTML(ИмяНовойHTML);
	
	Попытка
		//Элементы.КнопкаПоказатьРаскрой.Документ.url = url;
		Элементы.КнопкаПоказатьНовыйРаскрой.Документ.url = new_url;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьОтборПоПериоду(Истина);
	ИмяHTML = ЛексСервер.ПолучитьИмяХТМЛ(Справочники.Файлы.ЭтикеткиHtml);
	ИмяНовойHTML = ЛексСервер.ПолучитьИмяХТМЛ(Справочники.Файлы.НовыеЭтикеткиHtml);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура КнопкаПоказатьРаскройПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ПолученнаяСтрока = Элементы.КнопкаПоказатьРаскрой.Документ.getElementById("output").tag;
	ДанныеФлэш = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолученнаяСтрока, "☻");
	
	Если ДанныеФлэш.Количество() = 0 Тогда // получена пустая строка (без разделителей)
		Элементы.КнопкаПоказатьРаскрой.Документ.body.scroll = "no";
		Возврат;
	КонецЕсли;
	
	КомандаФлэш = ДанныеФлэш[0];
	
	Если КомандаФлэш = "init" Тогда
		
		Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			
			СсылкаСпецификация = Элементы.Список.ТекущиеДанные.Ссылка;
						
			СтрокаПечатьЭтикеток = "♥" + ЗначенияРеквизитовОбъекта(СсылкаСпецификация, "СтрокаПечатьЭтикеток");
			СтрокаПечатьЭтикеток = ЛексКлиентСервер.ПеревестиСтрокуВКодыСимволов(СтрокаПечатьЭтикеток );
			ФлэшСтрока = ЗначенияРеквизитовОбъекта(СсылкаСпецификация, "СтрокаРаскрояЛДСП");
			ФлэшСтрока = ФлэшСтрока + СтрокаПечатьЭтикеток;
						
			ЛГ = ЛексКлиентСервер.ПеревестиКодыСимволовВстроку(ФлэшСтрока);
			Элементы.КнопкаПоказатьРаскрой.Документ.getElementById("input").tag = ФлэшСтрока;
			
		КонецЕсли;
		
	ИначеЕсли КомандаФлэш = "print" Тогда
		
		Данные = Base64Значение(ДанныеФлэш[1]);
		
		Картинка = Новый Картинка(Данные);
		
		ТабДок = Новый ТабличныйДокумент;
		
		Рисунок = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Рисунок.Верх = 0;
		Рисунок.Лево = 0;
		Рисунок.Высота = 57;	//60
		Рисунок.Ширина = 49;	//49
		Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		Рисунок.Картинка = Картинка;
		Рисунок.РазмерКартинки = РазмерКартинки.АвтоРазмер;
		
		ТабДок.РазмерКолонтитулаСверху = 0;
		ТабДок.РазмерКолонтитулаСнизу = 0;
		ТабДок.ПолеСлева = 0;
		ТабДок.ПолеСверху = 0;
		ТабДок.ПолеСправа = 0;
		ТабДок.ПолеСнизу = 0;
		
		//СтрокаСоединения = НРег(СтрокаСоединенияИнформационнойБазы());
		//Если Найти(СтрокаСоединения, "psqlbase002") <> 0 Тогда
		ТабДок.Напечатать();
		//Иначе
		//	ТабДок.Показать();
		//КонецЕсли;
		
	ИначеЕсли КомандаФлэш = "exit" Тогда
		
		СтрокаРедактированнаяФлэш = ДанныеФлэш[1];
		
		Если ЗначениеЗаполнено(СтрокаРедактированнаяФлэш) Тогда
			СсылкаСпецификация = Элементы.Список.ТекущиеДанные.Ссылка;
			СохранитьВДокументРедактированнуюСтроку(СсылкаСпецификация, СтрокаРедактированнаяФлэш);
		КонецЕсли; 
		
	КонецЕсли;
	
	Элементы.КнопкаПоказатьРаскрой.Документ.getElementById("output").tag = "";
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПоказатьНовыйРаскройПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ПолученнаяСтрока = Элементы.КнопкаПоказатьНовыйРаскрой.Документ.getElementById("output").tag;
	ДанныеФлэш = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолученнаяСтрока, "☻");
	
	Элементы.КнопкаПоказатьНовыйРаскрой.Документ.getElementById("output").tag = "";
	
	Если ДанныеФлэш.Количество() = 0 Тогда // получена пустая строка (без разделителей)
		Элементы.КнопкаПоказатьНовыйРаскрой.Документ.body.scroll = "no";
		Возврат;
	КонецЕсли;                       
	
	КомандаФлэш = ДанныеФлэш[0];
	ЭлементФлэш = Элементы.КнопкаПоказатьНовыйРаскрой.Документ.getElementById("input");
	
	Если КомандаФлэш = "init" Тогда
		
		Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			
			СсылкаСпецификация = Элементы.Список.ТекущиеДанные.Ссылка;
			
			НоваяСтрока = НайтиНовуюСтрокуФлэш(СсылкаСпецификация, КомандаФлэш);
						
			ЭлементФлэш.tag = НоваяСтрока;
			
		КонецЕсли;
		
	ИначеЕсли КомандаФлэш = "new" Тогда
		
		Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			
			СсылкаСпецификация = Элементы.Список.ТекущиеДанные.Ссылка;
			
			НоваяСтрока = НайтиНовуюСтрокуФлэш(СсылкаСпецификация, КомандаФлэш);
			
			ЭлементФлэш.tag = НоваяСтрока;
			ЭлементФлэш.click();
						
		КонецЕсли;
		
	ИначеЕсли КомандаФлэш = "recr" Тогда
		
		Если Элементы.Список.ТекущиеДанные <> Неопределено И ДанныеФлэш.Количество() = 2 Тогда
			
			СсылкаСпецификация = Элементы.Список.ТекущиеДанные.Ссылка;
			
			НоваяСтрока = НайтиНовуюСтрокуФлэш(СсылкаСпецификация, КомандаФлэш, ДанныеФлэш[1]);
			
			ЭлементФлэш.tag = НоваяСтрока;
			ЭлементФлэш.click();
						
		КонецЕсли;
		
	ИначеЕсли КомандаФлэш = "print" Тогда
		
		Данные = Base64Значение(ДанныеФлэш[1]);
		
		Картинка = Новый Картинка(Данные);
		
		ТабДок = Новый ТабличныйДокумент;
		
		Рисунок = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Рисунок.Верх = 0;
		Рисунок.Лево = 0;
		Рисунок.Высота = 57;	//60
		Рисунок.Ширина = 49;	//49
		Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		Рисунок.Картинка = Картинка;
		Рисунок.РазмерКартинки = РазмерКартинки.АвтоРазмер;
		
		ТабДок.РазмерКолонтитулаСверху = 0;
		ТабДок.РазмерКолонтитулаСнизу = 0;
		ТабДок.ПолеСлева = 0;
		ТабДок.ПолеСверху = 0;
		ТабДок.ПолеСправа = 0;
		ТабДок.ПолеСнизу = 0;
		
		//СтрокаСоединения = НРег(СтрокаСоединенияИнформационнойБазы());
		//Если Найти(СтрокаСоединения, "psqlbase002") <> 0 Тогда
		ТабДок.Напечатать();
		//Иначе
		//	ТабДок.Показать();
		//КонецЕсли;
		
	ИначеЕсли КомандаФлэш = "exit" Тогда
		
		СтрокаРедактированнаяФлэш = ДанныеФлэш[1];
		
		Если ЗначениеЗаполнено(СтрокаРедактированнаяФлэш) Тогда
			СсылкаСпецификация = Элементы.Список.ТекущиеДанные.Ссылка;
			СохранитьСтрокуЭтикеток(СсылкаСпецификация, СтрокаРедактированнаяФлэш);
		КонецЕсли; 
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекущие(Команда)
	
	УстановитьОтборПоПериоду(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсе(Команда)
	
	УстановитьОтборПоПериоду(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНомеру(Команда)
	
	ВведенныйНомер = ОткрытьФормуМодально("ОбщаяФорма.ВводЧисла");
	Если ЗначениеЗаполнено(ВведенныйНомер) Тогда
		УстановитьОтборПоПериоду(Ложь, Строка(ВведенныйНомер));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ СПИСОК

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

