
#Область Заполнение_документа_при_записи

&НаКлиенте
Процедура ЗаписатьПустуюСпецификацию()
	
	//Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ТолькоПросмотр Тогда
			Записать();
		КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьУслугуДляМебельнойКромки(ТекущийОбъект, Строка, ИмяПоля, МалоразмернаяДеталь)
	
	МебельнаяКромка = Строка[ИмяПоля];
	Услуга = Неопределено;
	НоменклатурныеГруппы = Справочники.НоменклатурныеГруппы;
	ГруппаКромки = МебельнаяКромка.НоменклатурнаяГруппа;
	
	Если НЕ ЗначениеЗаполнено(МебельнаяКромка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПоля = ВРег(ИмяПоля);
	Если Найти(ИмяПоля,"ВЕРХ") <> 0 Тогда
		Радиус1 = "РадиусПравоВерх";
		Радиус2 = "РадиусЛевоВерх";
		Сторона = "ШиринаДетали";
	ИначеЕсли Найти(ИмяПоля, "НИЗ") <> 0 Тогда
		Радиус1 = "РадиусПравоНиз";
		Радиус2 = "РадиусЛевоНиз";
		Сторона = "ШиринаДетали";
	ИначеЕсли Найти(ИмяПоля, "ЛЕВ") <> 0 Тогда
		Радиус1 = "РадиусЛевоНиз";
		Радиус2 = "РадиусЛевоВерх";
		Сторона = "ВысотаДетали";
	ИначеЕсли Найти(ИмяПоля, "ПРАВ") <> 0 Тогда
		Радиус1 = "РадиусПравоНиз";
		Радиус2 = "РадиусПравоВерх";
		Сторона = "ВысотаДетали";
	КонецЕсли;
	
	Если ГруппаКромки = НоменклатурныеГруппы.КантАлюминиевый ИЛИ МалоразмернаяДеталь Тогда
		КоличествоУслуги = Строка.Количество; // по единице за сторону
	Иначе
		КоличествоУслуги = Строка[Сторона] * Строка.Количество / 1000;
	КонецЕсли;
	
	Радиус = Строка[Радиус1] + Строка[Радиус2];
	
	Если МалоразмернаяДеталь Тогда
		
		Услуга = Справочники.Номенклатура.КромлениеМалоразмернойДетали;
		
	ИначеЕсли Радиус = 0 Тогда
		
		Услуга = ПолучитьУслугуКромления(МебельнаяКромка);
		
	Иначе
		
		Услуга = Справочники.Номенклатура.КриволинейноеКромление;
		
	КонецЕсли;
			
	ДобавитьСтроку(ТекущийОбъект, Услуга, КоличествоУслуги, Строка.НомерИзделия);
	
КонецФункции

&НаСервере
Функция ЗаполнитьУслугиМебельнойКромки(ТекущийОбъект, Строка)
	
	Массив = Новый Массив;
	Массив.Добавить("ВыборМебельнойКромкиСверху");
	Массив.Добавить("ВыборМебельнойКромкиСнизу");
	Массив.Добавить("ВыборМебельнойКромкиСлева");
	Массив.Добавить("ВыборМебельнойКромкиСправа");
	МалоразмернаяДеталь = Строка.ШиринаДетали < 80 или Строка.ВысотаДетали < 80;
	
	Для каждого ъ Из Массив Цикл
		ДобавитьУслугуДляМебельнойКромки(ТекущийОбъект, Строка, ъ, МалоразмернаяДеталь);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ДобавитьНаценкуНаИзделие(Таблица)
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Номенклатура", Справочники.Номенклатура.РозничнаяНаценка);
	НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 1 Тогда // по идее должна быть всего одна строка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", Объект.Дата);
		Запрос.УстановитьПараметр("Изделие", Объект.Изделие);
		Запрос.УстановитьПараметр("Офис", Объект.Офис);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НаценкиНаИзделияСрезПоследних.Наценка
		|ИЗ
		|	РегистрСведений.НаценкиНаИзделия.СрезПоследних(
		|			&Период,
		|			ВидИзделия = &Изделие
		|				И Офис = &Офис) КАК НаценкиНаИзделияСрезПоследних";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если Выборка.Наценка <> 0 Тогда
				НайденныеСтроки[0].Цена = Выборка.Наценка;
				НайденныеСтроки[0].РозничнаяСтоимость = Выборка.Наценка;
			Иначе
				Таблица.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УменьшитьВнутреннююСтоимостьБезНашихМонтажей(Таблица)
	
	СпрНоменклатура = Справочники.Номенклатура;
	
	ИсключаемыеУслуги = Новый Массив;
	ИсключаемыеУслуги.Добавить(СпрНоменклатура.ВыездМастера);
	ИсключаемыеУслуги.Добавить(СпрНоменклатура.СборкаИзделия);
	ИсключаемыеУслуги.Добавить(СпрНоменклатура.ПроездМонтажникаЗаГородом);
	ИсключаемыеУслуги.Добавить(СпрНоменклатура.ДоставкаЗаГородом);
	ИсключаемыеУслуги.Добавить(СпрНоменклатура.ДоставкаПоГороду);
	ИсключаемыеУслуги.Добавить(СпрНоменклатура.ПодъемИзделияНаЭтаж);
	
	Для каждого Услуга Из ИсключаемыеУслуги Цикл
		НайденнаяСтрока = Таблица.Найти(Услуга, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.ВнутренняяСтоимость = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуСкладГотовойПродукции(ТекущийОбъект)
	
	ТекущийОбъект.СкладГотовойПродукции.Очистить();
	
	Для каждого Строка Из ТекущийОбъект.СписокНоменклатуры Цикл
		
		Номенклатура = Строка.Номенклатура;
		
		Если НЕ Строка.ЧерезСклад ИЛИ Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Материал Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоБезОтхода = Строка.Количество * 100 / (100 + Номенклатура.ПроцентОтхода); // стыдно за такую хуйню :(
		
		Если Номенклатура.МестоОбработки = Перечисления.МестоОбработки.Отгрузка ИЛИ Строка.НомерИзделия = 0 Тогда
			КоличествоЦех = 0;
			КоличествоСклад = КоличествоБезОтхода;
		ИначеЕсли Номенклатура.МестоОбработки = Перечисления.МестоОбработки.ПоКаталогуВЦех И Строка.НомерИзделия <> 0 Тогда
			КоличествоСклад = 0;
			КоличествоЦех = КоличествоБезОтхода;
		Иначе
			КоличествоЦех = 0;
			КоличествоСклад = 0;
		КонецЕсли;
		
		НоваяСтрока = ТекущийОбъект.СкладГотовойПродукции.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.КоличествоСклад = КоличествоСклад;
		НоваяСтрока.КоличествоЦех = КоличествоЦех;
		
	КонецЦикла;
	
	// Ручка для ящиков с фасадами из ЛДСП передается в цех
	Для каждого Ящик Из ТекущийОбъект.СписокЯщики Цикл
		
		Если Ящик.ФасадНоменклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ЛДСП16 И ЗначениеЗаполнено(Ящик.РучкаНоменклатура) И Ящик.НомерИзделия = 0 Тогда
			Ручка = Ящик.РучкаНоменклатура;
			КоличествоРучек = Ящик.КоличествоРучек * Ящик.КоличествоЯщиков;
			
			Отбор = Новый Структура("Номенклатура", Ручка);
			СтрокаРучка = ТекущийОбъект.СкладГотовойПродукции.НайтиСтроки(Отбор)[0];
			СтрокаРучка.КоличествоСклад = СтрокаРучка.КоличествоСклад - КоличествоРучек;
			СтрокаРучка.КоличествоЦех = СтрокаРучка.КоличествоЦех + КоличествоРучек;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// тут думать как отличать, что можно сворачивать, а что нет
	
	ТекущийОбъект.СкладГотовойПродукции.Свернуть("Номенклатура", "КоличествоСклад, КоличествоЦех");
	ТекущийОбъект.СкладГотовойПродукции.Сортировать("Номенклатура Возр");
	
КонецФункции

&НаСервере
Функция ЗаписатьСтрокуРаскроя(ПараметрыЗаписи)
	
	НаборЗаписей = РегистрыСведений.РаскройДеталей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Запись.РисунокРаскроя = ?(ПараметрыЗаписи.РисунокРаскроя = "save☻", "", ПараметрыЗаписи.РисунокРаскроя);
	Запись.РисунокКривогоПила = ?(ПараметрыЗаписи.РисунокКривогоПила = "save☻", "", ПараметрыЗаписи.РисунокКривогоПила);
	Запись.СтрокаРаскрой = ПараметрыЗаписи.ДанныеДляРаскроя;
	Запись.СтрокаЭтикеток = "";
	Запись.ТекущаяСтрокаРаскроя = ПараметрыЗаписи.ДанныеДляРаскроя;
	Запись.ТаблицаДеталей = ПараметрыЗаписи.ТаблицаДеталей;
	Запись.Объект = Объект.Ссылка;
	
	НаборЗаписей.Записать();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте 
Функция ЗаписатьРисункиРаскроя(ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ПараметрыЗаписи.СтрокаКривогоПила) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ХранимыйФайл", "КривойПил");
		ПараметрыФормы.Вставить("СтрокаКривогоПила", ПараметрыЗаписи.СтрокаКривогоПила);
		
		Значение = ОткрытьФормуМодально("Документ.Спецификация.Форма.ФормаФлэш", ПараметрыФормы);
		
		ПараметрыЗаписи.Вставить("РисунокКривогоПила", Значение);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗаписи.ДанныеДляРаскроя) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ХранимыйФайл", "НовыйРаскрой");
		ПараметрыФормы.Вставить("СтрокаНовогоРаскрояЛДСП", ПараметрыЗаписи.ДанныеДляРаскроя);
		ПараметрыФормы.Вставить("ВидОтображения", "1");
		
		Значение = ОткрытьФормуМодально("Документ.Спецификация.Форма.ФормаФлэш", ПараметрыФормы);
		
		ПараметрыЗаписи.Вставить("РисунокРаскроя", Значение);
				
	КонецЕсли;
	
	Возврат ПараметрыЗаписи;
	  
КонецФункции
	
&НаСервере
Функция ПосчитатьПрисадкиКриволинейнаяДеталь(СтрокаФлэш)
	
	ВсегоОтверстий = 0;
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаФлэш, "#");
	
	Если МассивПодстрок.Количество() > 0 Тогда
		
		НужнаяСтрока = МассивПодстрок[2];
		ВторойМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НужнаяСтрока, "*");
		
		Если ВторойМассив.Количество() > 0 Тогда
			
			Для каждого Массив Из ВторойМассив Цикл
				
				Подмассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Массив, "_");
				
				Если Подмассив.Количество() > 0 Тогда
					
					Определитель = Подмассив[0];
					КоличествоОтверстиВРяду = 0;
					КоличествоРядовОтверстий = 0;
					
					Если Определитель = "10" или Определитель = "11" или Определитель = "14" Тогда
						
						КоличествоОтверстиВРяду =Число(Подмассив[4]);
						КоличествоРядовОтверстий = Число(Подмассив[5]);
						
					ИначеЕсли Определитель = "12" Тогда 
						
						КоличествоОтверстиВРяду = Число(Подмассив[3]);
						КоличествоРядовОтверстий = Число(Подмассив[5]);
						
					КонецЕсли;
					//КоличествоРядовОтверстий нельзя выносить, хоть и одинаковая строка. "Определитель" может быть не только эти цифры
					Попытка
						
						Если КоличествоОтверстиВРяду > 0 и КоличествоРядовОтверстий > 0 Тогда
							
							ВсегоОтверстий = ВсегоОтверстий + КоличествоОтверстиВРяду * КоличествоРядовОтверстий;
							
						ИначеЕсли КоличествоОтверстиВРяду > 0 Тогда
							
							ВсегоОтверстий = КоличествоОтверстиВРяду;
							
						КонецЕсли;
						
					Исключение
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В криволинейной детали выбрали ПРИСАДКУ ПОД ЕВРОВИНТ ТОРЦЕВУЮ");
						
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВсегоОтверстий;
	
КонецФункции // ПосчитатьПрисадкиКриволинейнаяДеталь()

&НаКлиентеНаСервереБезКонтекста
Функция Клееная(Материал)
	
	Возврат Найти(Материал, "+") <> 0;
	
КонецФункции

&НаКлиенте
Функция СохранитьИИзменитьСтатус(НовыйСтатус)
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить("НовыйСтатус", НовыйСтатус);
	Записать(ПараметрыЗаписи);
	
	СтатусСпецификации = НовыйСтатус;
	ОбновитьОтображениеДанных();
	
КонецФункции

&НаСервере
Функция ЗаполнитьУслуги(ТекущийОбъект)
	
	Номенклатура = Справочники.Номенклатура;
	СправочникиНоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы;
	ПлощадьУпаковываемыхМатериалов = 0;
	ПлощадьИзготавливаемыхМатериалов = 0;
	ПлощадьГравировок = 0;
	
	#ОБЛАСТЬ ОСНОВНОЙ_ЦИКЛ
	//ОСНОВНОЙ ЦИКЛ ЗАПОЛНЕНИЯ ТАБЛИЦЫ УСЛУГАМИ
	Для каждого Строка Из Объект.СписокМатериалы Цикл
		
		КантыИзРедактора = Строка.КантыИзРедактора;
		
		Если ЗначениеЗаполнено(КантыИзРедактора) Тогда 
			
			КантыИзРедактора = ЗначениеИзСтрокиВнутр(КантыИзРедактора);
			МассивКантов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КантыИзРедактора, "|");
			
			Для Каждого Строчка Из МассивКантов Цикл
				
				ПараметрыКанта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строчка , "_");
				НоменклатурныйНомер = ПараметрыКанта[0];
				ДлинаКанта = Число(ПараметрыКанта[1]);
				НоменклатураКанта = Номенклатура.НайтиПоКоду(НоменклатурныйНомер);
				
				Если НоменклатураКанта.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.КантТ
					ИЛИ НоменклатураКанта.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.КантП Тогда
					Услуга = Номенклатура.Окантовка;
				Иначе
					Услуга = Номенклатура.КриволинейноеКромление;
				КонецЕсли;
				
				ДобавитьСтроку(ТекущийОбъект, Услуга, ДлинаКанта / 1000, Строка.НомерИзделия);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Материал = Строка.Материал;
		НоменклатурнаяГруппа = Строка.Номенклатура.НоменклатурнаяГруппа;
		
		Фасад = Найти(Материал, "Фасад") <> 0;
		ЛДСП = Найти(Материал, "ЛДСП") <> 0 И НЕ Фасад;
		Столешница = Материал = "Столешница" ИЛИ Материал = "Пристенок";
		Клееная = Клееная(Материал);
		
		//Детали ЛДСП и ДВП и МДФ и Столешниц с кромочным материалом
		Если ЛДСП ИЛИ Материал = "ДВП" ИЛИ Материал = "МДФ" ИЛИ Столешница Тогда
			
			Площадь = ?(Клееная, Строка.Количество * 2, Строка.Количество);
			
			Если Материал = "16 ЛДСП" ИЛИ Клееная ИЛИ Столешница Тогда
				ПлощадьИзготавливаемыхМатериалов = ПлощадьИзготавливаемыхМатериалов + Строка.ВысотаДетали * Строка.ШиринаДетали * Строка.Количество / 1000000;
			КонецЕсли;
			
			Если Материал = "ДВП" Тогда
				Услуга = Номенклатура.ИзготовлениеДеревяннойДеталиСтекольнаяЗона;
			Иначе
				Услуга = Номенклатура.РаспилЗаДеталь;
			КонецЕсли;
			ДобавитьСтроку(ТекущийОбъект, Услуга, Площадь, Строка.НомерИзделия);
			
			Если Клееная Тогда
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.СклеиваниеЛДСПЗонаКромки, Строка.Количество, Строка.НомерИзделия);
			КонецЕсли;
			
			//Радиусы
			РадиусЛевоВерх = Строка.РадиусЛевоВерх;
			РадиусЛевоНиз = Строка.РадиусЛевоНиз;
			РадиусПравоВерх = Строка.РадиусПравоВерх;
			РадиусПравоНиз = Строка.РадиусПравоНиз;
			
			//Кривой пил
			ДлинаКривогоПила = Число(Строка.ДлинаКривогоПила);
			
			Если ДлинаКривогоПила > 0 Тогда
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.КриволинейныйПилЗонаКромки, ДлинаКривогоПила / 1000 * Строка.Количество, Строка.НомерИзделия);
			КонецЕсли;
			
			ВысотаДетали = Строка.ВысотаДетали;
			ШиринаДетали = Строка.ШиринаДетали;
			
			ЗаполнитьУслугиМебельнойКромки(ТекущийОбъект, Строка);
			
			/////////////////////////////////////////////
			// СТЕКЛА
		ИначеЕсли Материал = "Стекло" Тогда
			
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.ИзготовлениеДеталиСтекло, Строка.Количество, Строка.НомерИзделия);
			
			Если Строка.Обтачивать Тогда
				
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.Обточка, Строка.Периметр / 1000 * Строка.Количество, Строка.НомерИзделия);
				
			КонецЕсли;
			
			//Кривой рез
			ДлинаКривогоПила = 0;
			
			ДлинаКривогоПила = Число(Строка.ДлинаКривогоПила);
			
			Если ДлинаКривогоПила > 0 Тогда
				
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.КриволинейныйРез, ДлинаКривогоПила / 1000 * Строка.Количество, Строка.НомерИзделия);
				
			КонецЕсли;
			
			// ГРАВИРОВКИ
			СтрокаФлэш = Строка.СтрокаДляФлэш;
			Если ЗначениеЗаполнено(СтрокаФлэш) Тогда
				
				МассивСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаФлэш, "#");
				
				Если МассивСтроки.Количество() > 3 Тогда
					
					ПлощадьГравировки = Число(МассивСтроки[3]) / 1000000 * Строка.Количество;
					
					Если ПлощадьГравировки > 0 Тогда
						
						ДобавитьСтроку(ТекущийОбъект, Номенклатура.Гравировка, ПлощадьГравировки, Строка.НомерИзделия);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			/////////////////////////////////////////////
			// ФАСАДЫ
		ИначеЕсли Фасад Тогда
			
			ШиринаВставки = Строка.Номенклатура.ГлубинаДетали;
			ШиринаПаза = Строка.УниверсальнаяКромка.ШиринаПаза;
			
			Если Материал = "ФасадАГТ" Тогда
				
				Если ШиринаПаза < ШиринаВставки Тогда
					
					ДобавитьСтроку(ТекущийОбъект, Номенклатура.ФрезеровкаДеталиЗонаКухонь, Строка.Количество, Строка.НомерИзделия);
					
				КонецЕсли;
				
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.СборкаАГТФасада, Строка.Количество, Строка.НомерИзделия);
				
			ИначеЕсли Материал = "ФасадМДФ" ИЛИ Материал = "ФасадЛДСП" Тогда
				
				ЗаполнитьУслугиМебельнойКромки(ТекущийОбъект, Строка);
				
			ИначеЕсли Материал = "ФасадАлюминиевый" Тогда
				
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.СборкаАлюминевогоФасада, Строка.Количество, Строка.НомерИзделия);
				
			КонецЕсли;
			
			Если Строка.Обтачивать Тогда
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.Обточка, Строка.Периметр / 1000 * Строка.Количество, Строка.НомерИзделия);
			КонецЕсли;
			
			// { Васильев Александр Леонидович [03.03.2014]
			// что то мне тут не нравится...
			// может как-нить по цеховой зоне,
			// но как тогда деревянная деталь в стекольной зоне...
			// } Васильев Александр Леонидович [03.03.2014]
			Если НоменклатурнаяГруппа = СправочникиНоменклатурнаяГруппа.Стекло ИЛИ НоменклатурнаяГруппа = СправочникиНоменклатурнаяГруппа.Зеркало
				ИЛИ НоменклатурнаяГруппа = СправочникиНоменклатурнаяГруппа.СтеклоДляСкругляемогоФасада Тогда
				Услуга = Номенклатура.ИзготовлениеДеталиСтекло;
			ИначеЕсли НоменклатурнаяГруппа.ПринадлежитЭлементу(СправочникиНоменклатурнаяГруппа.МДФ)
				ИЛИ НоменклатурнаяГруппа.ПринадлежитЭлементу(СправочникиНоменклатурнаяГруппа.ЛДСП) Тогда
				Услуга = Номенклатура.РаспилЗаДеталь;
			Иначе
				Услуга = Номенклатура.ИзготовлениеДеревяннойДеталиСтекольнаяЗона;
			КонецЕсли;
			ДобавитьСтроку(ТекущийОбъект, Услуга, Строка.Количество, Строка.НомерИзделия);
			
			Если Строка.ОтверстийподРучку > 0 Тогда
				
				Если Материал = "ФасадСтеклянный" ИЛИ Материал = "ФасадСтеклянныйЗакругленный" Тогда
					Услуга = Номенклатура.СверлениеВСтеклеДо5мм;
				Иначе
					Услуга = Номенклатура.УслугаПрисадка;
				КонецЕсли;
				
				ДобавитьСтроку(ТекущийОбъект, Услуга, Строка.ОтверстийподРучку * Строка.Количество, Строка.НомерИзделия);
				
			КонецЕсли;
			
			Если Строка.КоличествоПетель * Строка.Количество > 0 Тогда
				
				Если Материал = "ФасадСтеклянный" Тогда
					
					ДобавитьСтроку(ТекущийОбъект, Номенклатура.СверлениеВСтеклеДо5мм, Строка.КоличествоПетель * Строка.Количество, Строка.НомерИзделия);
					
				Иначе
					
					ДобавитьСтроку(ТекущийОбъект, Номенклатура.ПрисадкаПодПетли, Строка.КоличествоПетель * Строка.Количество, Строка.НомерИзделия);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Материал = "ФасадСтеклянныйЗакругленный" Тогда
				
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.ЗагибСтеклянногоФасада, Строка.Количество, Строка.НомерИзделия);
				
			КонецЕсли;
			
		КонецЕсли; // ФАСАДЫ
		
		//Услуги из криволинейной детали (ТОЛЬКО ПРИСАДКИ)
		Если ЗначениеЗаполнено(Строка.СтрокаДляФлэш) Тогда
			КоличествоПрисадок = ПосчитатьПрисадкиКриволинейнаяДеталь(Строка.СтрокаДляФлэш);
			
			Если КоличествоПрисадок > 0 Тогда
				
				Если Материал = "ФасадСтеклянныйЗакругленный" или Материал = "ФасадСтеклянный" или Материал = "Стекло" Тогда
					
					ДобавитьСтроку(ТекущийОбъект, Номенклатура.СверлениеВСтеклеДо5мм, КоличествоПрисадок * Строка.Количество, Строка.НомерИзделия);
					
				Иначе
					
					ДобавитьСтроку(ТекущийОбъект, Номенклатура.ПрисадкаПодПетли, КоличествоПрисадок * Строка.Количество, Строка.НомерИзделия);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураОтверстий = Строка.СтруктураОтверстий;
		
		Если ЗначениеЗаполнено(СтруктураОтверстий) Тогда
			
			ТаблицаОтверстий = ЗначениеИзСтрокиВнутр(СтруктураОтверстий);
			
			Для Каждого Элемент Из ТаблицаОтверстий Цикл
				
				Если Элемент.ВидОтверстий = Перечисления.ВидыОтверстий.Европаз Тогда
					Услуга = Номенклатура.УслугаЕвропаз;
				Иначе
					Услуга = Номенклатура.УслугаПрисадка;
				КонецЕсли;
				
				ДобавитьСтроку(ТекущийОбъект, Услуга, Элемент.Количество * Строка.Количество, Строка.НомерИзделия);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПлощадьУпаковываемыхМатериалов = ПлощадьУпаковываемыхМатериалов + Строка.ВысотаДетали * Строка.ШиринаДетали * (Клееная + 1) * Строка.Количество / 1000000;
		
	КонецЦикла; // Для каждого Строка Из Объект.СписокМатериалы Цикл
	
	#КОНЕЦОБЛАСТИ
	
	#ОБЛАСТЬ ЯЩИКИ
	Для каждого Строка Из Объект.СписокЯщики Цикл
		
		ДобавитьСтроку(ТекущийОбъект, Номенклатура.ИзготовлениеЯщика, Строка.КоличествоЯщиков, Строка.НомерИзделия);
		НоменклатурнаяГруппаФасада = Строка.ФасадНоменклатура.НоменклатурнаяГруппа;
		НоменклатурнаяГруппаОбрамлениеФасада = Строка.КромкаФасадНоменклатура.НоменклатурнаяГруппа;
		СправочникНоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы;
		
		ДобавитьСтроку(ТекущийОбъект, Номенклатура.НакручиваниеРучкиНаЛДСПФасадЯщика, Строка.КоличествоЯщиков * Строка.КоличествоРучек, Строка.НомерИзделия);
		
		Если Строка.КромкаНоменклатура.ГлубинаДетали >= 1 Тогда
			УслугаКромки = Номенклатура.КромлениеТолстойКромки;
		Иначе
			УслугаКромки = Номенклатура.КромлениеТонкойКромки;
		КонецЕсли;
		
		Если Строка.КромкаФасадНоменклатура.ГлубинаДетали >= 1 Тогда
			УслугаКромкиФасада = Номенклатура.КромлениеТолстойКромки;
		Иначе
			УслугаКромкиФасада = Номенклатура.КромлениеТонкойКромки;
		КонецЕсли;
		
		Если НоменклатурнаяГруппаОбрамлениеФасада = СправочникНоменклатурнаяГруппа.АГТПрофиль Тогда
			
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.СборкаАГТФасада, Строка.КоличествоЯщиков, Строка.НомерИзделия);
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.ИзготовлениеДеревяннойДеталиСтекольнаяЗона, Строка.КоличествоЯщиков, Строка.НомерИзделия);
			
			ШиринаВставки = Строка.ФасадНоменклатура.ГлубинаДетали;
			ШиринаПаза = Строка.КромкаФасадНоменклатура.ШиринаПаза;
			
			Если ШиринаПаза < ШиринаВставки Тогда
				
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.ФрезеровкаДеталиЗонаКухонь, Строка.КоличествоЯщиков, Строка.НомерИзделия);
				
			КонецЕсли;
			
		Иначе
			
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.РаспилЗаДеталь, Строка.КоличествоЯщиков, Строка.НомерИзделия);
			ДобавитьСтроку(ТекущийОбъект, УслугаКромкиФасада, Строка.КоличествоЯщиков * 2 * (Строка.ШиринаФасад + Строка.ВысотаФасад) / 1000, Строка.НомерИзделия);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ДноНоменклатура) Тогда
			
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.ИзготовлениеДеревяннойДеталиСтекольнаяЗона, Строка.КоличествоЯщиков, Строка.НомерИзделия);
			
		КонецЕсли;
		
		Если Строка.ДлинаРебро > 0 Тогда
			
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.РаспилЗаДеталь, Строка.КоличествоЯщиков, Строка.НомерИзделия);
			
		КонецЕсли;
		
		Если Строка.ВидЯщика = Перечисления.ВидыЯщика.Обычный Тогда
			
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.РаспилЗаДеталь, Строка.КоличествоЯщиков * 4, Строка.НомерИзделия); // было 5 деталей, Дима сказал только 4
			ДобавитьСтроку(ТекущийОбъект, УслугаКромки, Строка.КоличествоЯщиков *  (2 * (Строка.ШиринаБоковойСтороны + Строка.ДлинаБоковойСтороны)) / 1000, Строка.НомерИзделия);
			ПлощадьИзготавливаемыхМатериалов = ПлощадьИзготавливаемыхМатериалов + (Строка.ШиринаБоковойСтороны * Строка.ВысотаБоковойСтороны * 2 + Строка.ДлинаБоковойСтороны * Строка.ВысотаБоковойСтороны * 2) * Строка.КоличествоЯщиков / 1000000;
			
		Иначе
			
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.РаспилЗаДеталь, Строка.КоличествоЯщиков * 2, Строка.НомерИзделия);
			ДобавитьСтроку(ТекущийОбъект, УслугаКромки, Строка.КоличествоЯщиков * (2 *( Строка.ШиринаБоковойСтороны + Строка.ВысотаБоковойСтороны)) / 1000, Строка.НомерИзделия);
			ПлощадьИзготавливаемыхМатериалов = ПлощадьИзготавливаемыхМатериалов + Строка.ШиринаБоковойСтороны * Строка.ВысотаБоковойСтороны * Строка.КоличествоЯщиков / 1000000;
			
		КонецЕсли;
		
	КонецЦикла;
	#КОНЕЦОБЛАСТИ
	
	Если НЕ Объект.Дилерский Тогда
		ДобавитьСтроку(ТекущийОбъект, Номенклатура.РозничнаяНаценка, 1, 0);
	КонецЕсли;
	
	Если Объект.Изделие.ДобавлятьНаценки Тогда
		
		ДобавитьСтроку(ТекущийОбъект, Номенклатура.УслугаЗамер, 1, 0);
		
		Если ТекущийОбъект.Изделие <> Справочники.Изделия.ШкафКупеПоКаталогу Тогда
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.УслугаДизайн, 1, 0);
		КонецЕсли;
		
		///Решение Д. Лайн 7.04.14 на кухни добавляем 2 выезда мастера
		Если НЕ Объект.Изделие.ВидИзделия = Перечисления.ВидыИзделий.Кухня Тогда
			
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.ВыездМастера, 1, 0);
			
		Иначе
			
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.ВыездМастераНаСборкуКухни, 1, 0);
			
		КонецЕсли;
		
		ДобавитьСтроку(ТекущийОбъект, Номенклатура.СборкаИзделия, ПлощадьИзготавливаемыхМатериалов, 0);
		
		Если ТекущийОбъект.Километраж > 0 Тогда
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.ПроездМонтажникаЗаГородом, Объект.Километраж, 0);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущийОбъект.Упаковка Тогда
		
		КоличествоДверей = 0;
		
		Для каждого Дверь Из ТекущийОбъект.СписокДверей Цикл
			КоличествоДверей = КоличествоДверей + ЛексСервер.ЗначениеРеквизитаОбъекта(Дверь.Двери, "Количество");
		КонецЦикла;
		
		Если КоличествоДверей > 0 Тогда
			
			КоличествоУпаковок = Окр(КоличествоДверей / 2 + 0.5, 0, РежимОкругления.Окр15как10);
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.УпаковкаДверей, КоличествоУпаковок, 0);
			
		КонецЕсли;
		
		ДобавитьСтроку(ТекущийОбъект, Номенклатура.УпаковкаДеталей, ПлощадьУпаковываемыхМатериалов, 0);
		
	КонецЕсли;
	
	УслугаРасчет = Объект.Изделие.УслугаРасчет;
	Если ЗначениеЗаполнено(УслугаРасчет) Тогда
		ДобавитьСтроку(ТекущийОбъект,УслугаРасчет , 1, 0);
	КонецЕсли;
	
	Если ТекущийОбъект.ПакетУслуг <> Перечисления.ПакетыУслуг.СамовывозОтПроизводителя Тогда
		
		Если ТекущийОбъект.ПакетУслуг = Перечисления.ПакетыУслуг.ДоставкаДоТранспортнойКомпании Тогда
			Этаж = 1;
		Иначе
			
			АдресСтруктурой = ЛексСервер.ПолучитьСтруктуруИзАдреса(ТекущийОбъект.АдресМонтажа);
			
			Если ЗначениеЗаполнено(АдресСтруктурой.Этаж) Тогда
				Этаж = Число(АдресСтруктурой.Этаж);
			Иначе 
				Этаж = 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьСтроку(ТекущийОбъект, Номенклатура.ПодъемИзделияНаЭтаж, Этаж, 0);
		ДобавитьСтроку(ТекущийОбъект, Номенклатура.ДоставкаПоГороду, 1, 0);
		
		РастояниеДоЗавода = ТекущийОбъект.Офис.РастояниеДоЗавода;
		
		Если ТекущийОбъект.ПакетУслуг <> Перечисления.ПакетыУслуг.ДоставкаДоТранспортнойКомпании И (ТекущийОбъект.Километраж > 0 ИЛИ РастояниеДоЗавода > 0) Тогда
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.ДоставкаЗаГородом, ТекущийОбъект.Километраж + РастояниеДоЗавода, 0);
		КонецЕсли;
		
	КонецЕсли;
	
	//////////////////////////////
	// материал под заказ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", ТекущийОбъект.Производство);
	Запрос.УстановитьПараметр("МассивНоменклатуры", ТекущийОбъект.СписокНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПодразделений.Номенклатура КАК Номенклатура,
	|	НоменклатураПодразделений.Подразделение,
	|	НоменклатураПодразделений.ПодЗаказ
	|ИЗ
	|	РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
	|ГДЕ
	|	НоменклатураПодразделений.Подразделение = &Подразделение
	|	И НоменклатураПодразделений.Номенклатура В
	|			(ВЫБРАТЬ
	|				втНоменклатура.Ссылка
	|			ИЗ
	|				втНоменклатура)
	|	И НоменклатураПодразделений.ПодЗаказ";

	РезультатЗапроса = Запрос.Выполнить();
	
	ТекущийОбъект.ЕстьМатериалПодЗаказ = НЕ РезультатЗапроса.Пустой();
	
	Если ТекущийОбъект.ЕстьМатериалПодЗаказ Тогда
		ДобавитьСтроку(ТекущийОбъект, Номенклатура.ДоставкаМатериала, 1, 0);
	КонецЕсли;
	
	ТекущийОбъект.КоличествоМетровЛДСП = ПлощадьИзготавливаемыхМатериалов;
	
КонецФункции // ЗаполнитьУслуги()

&НаСервере
Функция УвеличитьМатериалыДоЦелыхЛистов(ТекущийОбъект)
	
	ТаблицаСпискаНоменклатуры = ТекущийОбъект.СписокНоменклатуры.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСпискаНоменклатуры", ТаблицаСпискаНоменклатуры);
	Запрос.УстановитьПараметр("Производство", ТекущийОбъект.Производство);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаСпискаНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаСпискаНоменклатуры.Количество,
	|	ТаблицаСпискаНоменклатуры.ЕдиницаИзмерения,
	|	ТаблицаСпискаНоменклатуры.Цена,
	|	ТаблицаСпискаНоменклатуры.ЗарплатаЦеха,
	|	ТаблицаСпискаНоменклатуры.НомерИзделия,
	|	ТаблицаСпискаНоменклатуры.НомерСтроки,
	|	ТаблицаСпискаНоменклатуры.ЧерезСклад,
	|	ТаблицаСпискаНоменклатуры.РозничнаяСтоимость
	|ПОМЕСТИТЬ ТаблицаСпискаНоменклатуры
	|ИЗ
	|	&ТаблицаСпискаНоменклатуры КАК ТаблицаСпискаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСпискаНоменклатуры.Номенклатура,
	|	ТаблицаСпискаНоменклатуры.НомерИзделия,
	|	ТаблицаСпискаНоменклатуры.Количество КАК Количество,
	|	ТаблицаСпискаНоменклатуры.ЧерезСклад КАК ЧерезСклад,
	|	ТаблицаСпискаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(НоменклатураПодразделений.ПодЗаказ, ЛОЖЬ) КАК ПодЗаказ,
	|	ЕСТЬNULL(НоменклатураПодразделений.Доступность, ЛОЖЬ) КАК Доступность,
	|	ТаблицаСпискаНоменклатуры.Номенклатура.ШиринаДетали КАК ШиринаДетали,
	|	ТаблицаСпискаНоменклатуры.Номенклатура.ДлинаДетали КАК ДлинаДетали
	|ИЗ
	|	ТаблицаСпискаНоменклатуры КАК ТаблицаСпискаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
	|		ПО (НоменклатураПодразделений.Подразделение = &Производство)
	|			И ТаблицаСпискаНоменклатуры.Номенклатура = НоменклатураПодразделений.Номенклатура";
	
	Таблица = Запрос.Выполнить().Выгрузить();
		
	ТаблицаПодЗаказ = Таблица.Скопировать(Новый Структура("ПодЗаказ", Истина));
	ТаблицаПодЗаказ.Свернуть("Номенклатура, ШиринаДетали, ДлинаДетали", "Количество");
	
	
	Для Каждого Элемент Из ТаблицаПодЗаказ Цикл
		
		СтрокаМатериала = ТекущийОбъект.СписокЛистовНоменклатуры.Найти(Элемент.Номенклатура);
		Если СтрокаМатериала <> Неопределено Тогда
			
			Если СтрокаМатериала.Номенклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Столешница 
				ИЛИ СтрокаМатериала.Номенклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Пристенок Тогда
				
				ОстатокМатериала = СтрокаМатериала.Количество * ((Элемент.ДлинаДетали) / 1000) - Элемент.Количество;
				
			Иначе
								
				ОстатокМатериала = СтрокаМатериала.Количество * ((Элемент.ШиринаДетали * Элемент.ДлинаДетали) / 1000000) - Элемент.Количество;
				
			КонецЕсли;
			
			Если ОстатокМатериала > 0 Тогда
				
				НоваяСтрока = Таблица.Добавить();
				НоваяСтрока.Номенклатура = Элемент.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
				НоваяСтрока.Количество = ОстатокМатериала;
				НоваяСтрока.ПодЗаказ = Истина;
				НоваяСтрока.ЧерезСклад = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.СписокНоменклатуры.Загрузить(Таблица);
				
КонецФункции

&НаСервере
Функция ЗаполнитьМатериалы(ТекущийОбъект, Ошибки)
		
	ТекущийОбъект.СписокНоменклатуры.Очистить();
	ТекущийОбъект.МерныйМатериал.Очистить();
	
	Изделие = ТекущийОбъект.Изделие;
	
	// Табличная часть справочника Изделия
	Для каждого Строка Из Изделие.СписокНоменклатуры Цикл
		ДобавитьСтроку(ТекущийОбъект, Строка.Номенклатура, Строка.Количество, 0, Ошибки, "у изделия " + Изделие);
	КонецЦикла;
	
	ТаблицаКантовПоместу = Новый ТаблицаЗначений;
	ТаблицаКантовПоместу.Колонки.Добавить("Номенклатура");
	ТаблицаКантовПоместу.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаКантовПоместу.Колонки.Добавить("Количество");
	ТаблицаКантовПоместу.Колонки.Добавить("НомерИзделия");
	
	#ОБЛАСТЬ Основной_цикл_заполнения_материалов
	
	Для Каждого Строка Из ТекущийОбъект.СписокМатериалы Цикл
		//Добавляем номенклатуру из ТЧ Материалы
		Материал = Строка.Материал;
		Клееная = Клееная(Материал);
		ФасадСПрофилем = Материал = "ФасадАГТ" ИЛИ Материал = "ФасадАлюминиевый";
		ФасадМДФ = Материал = "ФасадМДФ";
		Номенклатура = Справочники.Номенклатура;
		ЛДСП = Найти(Материал, "ЛДСП") <> 0;
		КоличествоДеталей = Строка.Количество;
		ВысотаДетали = Строка.ВысотаДетали;
		ШиринаДетали = Строка.ШиринаДетали;
		
		//Ручки
		
		Если НЕ Клееная И ЗначениеЗаполнено(Строка.НоменклатураДляСклеивания) Тогда
			
			ДобавитьСтроку(ТекущийОбъект, Строка.НоменклатураДляСклеивания, Строка.Количество, Строка.НомерИзделия, Ошибки);
			
		КонецЕсли;
		
		Если ФасадСПрофилем Тогда
			
			ВместимостьНаЛисте(Строка.Номенклатура, ВысотаДетали, ШиринаДетали, Ошибки, "фасада у детали № " + Строка.НомерСтроки, "СписокМатериалы", Строка.НомерСтроки);
			
			Если ВысотаДетали  > 0 И ШиринаДетали > 0 Тогда 
				Площадь = ((ВысотаДетали + 2 * Строка.УниверсальнаяКромка.ШиринаПаза) * (ШиринаДетали + 2 * Строка.УниверсальнаяКромка.ШиринаПаза) / 1000000) * КоличествоДеталей;
			Иначе
				Площадь = 0;
			КонецЕсли;
			
			ДобавитьСтроку(ТекущийОбъект, Строка.Номенклатура, Площадь, Строка.НомерИзделия, Ошибки, "фасада у детали № " + Строка.НомерСтроки, "СписокМатериалы", Строка.НомерСтроки);
			
			Периметр = (ШиринаДетали + ВысотаДетали + 4 * Строка.УниверсальнаяКромка.ГлубинаДетали) * 2;
			ДлинаПрофиля = Периметр * КоличествоДеталей / 1000;
			ДобавитьСтроку(ТекущийОбъект, Строка.УниверсальнаяКромка, ДлинаПрофиля, Строка.НомерИзделия, Ошибки, "универсальной кромки у детали № " + Строка.НомерСтроки, "СписокМатериалы", Строка.НомерСтроки);
			ШиринаВставки = Строка.Номенклатура.ГлубинаДетали;
			ШиринаПаза = Строка.УниверсальнаяКромка.ШиринаПаза;
			ПериметрВставки = (ВысотаДетали +ШиринаДетали) * 2 / 1000;
			
			Если ШиринаПаза > ШиринаВставки Тогда
				
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.УплотнительДляАлюминиевогоПрофиля, ПериметрВставки * КоличествоДеталей, Строка.НомерИзделия, Ошибки);
				
			ИначеЕсли ШиринаПаза < ШиринаВставки Тогда
				
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.ФрезеровкаДеталиЗонаКухонь, ПериметрВставки * КоличествоДеталей, Строка.НомерИзделия, Ошибки);
				
			КонецЕсли;
			
			Если Материал = "ФасадАГТ" Тогда
				
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.Шпонка, КоличествоДеталей * 8, Строка.НомерИзделия, Ошибки);
				
			ИначеЕсли Материал = "ФасадАлюминиевый" Тогда
				
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.УголСоединительныйКАлюминевомуПрофилю, КоличествоДеталей * 4, Строка.НомерИзделия, Ошибки);
				
				КоличествоВтулок = КоличествоДеталей * 2;
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.ВтулкаДистанционнаяАлюминиевая, КоличествоВтулок, Строка.НомерИзделия, Ошибки);
				ДопЭлемент = Номенклатура.ВтулкаДистанционнаяАлюминиевая.ДополнительныйЭлемент;
				Если ЗначениеЗаполнено(ДопЭлемент) Тогда
					ДобавитьСтроку(ТекущийОбъект, ДопЭлемент, КоличествоВтулок, Строка.НомерИзделия, Ошибки);
				КонецЕсли;
				
			КонецЕсли; // Материал = "ФасадАГТ"
			
		Иначе // НЕ ФасадСПрофилем
			
			Если Материал = "Столешница" ИЛИ Материал = "Пристенок" Тогда // по хорошему бы от единицы измерения отталкиваться
				
				СтруктураКратности = ЛексСервер.ПосчитатьКратность(Строка.Номенклатура, ВысотаДетали);
				
				Если СтруктураКратности.КоличествоМатериала = ВысотаДетали Тогда
					
					Площадь = (ВысотаДетали / 1000) * КоличествоДеталей;
					
				Иначе
					
					Площадь = СтруктураКратности.КоличествоМатериала / 1000 * КоличествоДеталей; 
					
				КонецЕсли;
				
			Иначе
				
				Площадь = (ВысотаДетали * ШиринаДетали / 1000000) * КоличествоДеталей;
				
			КонецЕсли;
			
			ВместимостьНаЛисте(Строка.Номенклатура, ВысотаДетали, ШиринаДетали, Ошибки, "у детали № " + Строка.НомерСтроки, "СписокМатериалы", Строка.НомерСтроки);
			
			ДобавитьСтроку(ТекущийОбъект, Строка.Номенклатура, Площадь, Строка.НомерИзделия, Ошибки, "у детали № " + Строка.НомерСтроки, "СписокМатериалы", Строка.НомерСтроки);
			
		КонецЕсли; // ФасадСПрофилем
		
		Если ЗначениеЗаполнено(Строка.Петли) Тогда
			
			ДобавитьСтроку(ТекущийОбъект, Строка.Петли, Строка.КоличествоПетель * КоличествоДеталей, Строка.НомерИзделия, Ошибки);
			
		КонецЕсли;
		
		Если ФасадМДФ Тогда
			
			Площадь = ШиринаДетали * КоличествоДеталей / 1000;
			ДобавитьСтроку(ТекущийОбъект, Строка.УниверсальнаяКромка, Площадь, Строка.НомерИзделия, Ошибки, "универсальной кромки у детали № " + Строка.НомерСтроки, "СписокМатериалы", Строка.НомерСтроки);
			
		КонецЕсли;
		
		Если Клееная Тогда
			
			ДобавитьСтроку(ТекущийОбъект, Строка.НоменклатураДляСклеивания, Площадь, Строка.НомерИзделия, Ошибки, "клееной у детали № " + Строка.НомерСтроки, "СписокМатериалы", Строка.НомерСтроки);
			
		КонецЕсли;
		
		//Считаем кромку. Для Фасадов с Профилем уже посчитана
		Если НЕ ФасадСПрофилем Тогда
			
			КромкиСлеваСправа = Новый Массив;
			КромкиСверхуСнизу = Новый Массив;
			
			Если ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСверху) Тогда
				Если Строка.ПереключательКромкаСверху = "По месту" Тогда
					НоваяСтрока = ТаблицаКантовПоместу.Добавить();
					ДобавитьКантПоМесту(НоваяСтрока, Строка.ВыборМебельнойКромкиСверху, Строка.ШиринаДетали * Строка.Количество / 1000, Строка.НомерИзделия);
				Иначе
					КромкиСверхуСнизу.Добавить(Строка.ВыборМебельнойКромкиСверху);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСнизу) Тогда
				Если Строка.ПереключательКромкаСнизу = "По месту" Тогда
					НоваяСтрока = ТаблицаКантовПоместу.Добавить();
					ДобавитьКантПоМесту(НоваяСтрока, Строка.ВыборМебельнойКромкиСнизу, Строка.ШиринаДетали * Строка.Количество / 1000, Строка.НомерИзделия);
				Иначе
					КромкиСверхуСнизу.Добавить(Строка.ВыборМебельнойКромкиСнизу);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСлева) Тогда
				Если Строка.ПереключательКромкаСлева = "По месту" Тогда
					НоваяСтрока = ТаблицаКантовПоместу.Добавить();
					ДобавитьКантПоМесту(НоваяСтрока, Строка.ВыборМебельнойКромкиСлева, Строка.ВысотаДетали * Строка.Количество / 1000, Строка.НомерИзделия);
				Иначе
					КромкиСлеваСправа.Добавить(Строка.ВыборМебельнойКромкиСлева);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСправа) Тогда
				Если Строка.ПереключательКромкаСправа = "По месту" Тогда
					НоваяСтрока = ТаблицаКантовПоместу.Добавить();
					ДобавитьКантПоМесту(НоваяСтрока, Строка.ВыборМебельнойКромкиСправа, Строка.ВысотаДетали * Строка.Количество / 1000, Строка.НомерИзделия);
				Иначе
					КромкиСлеваСправа.Добавить(Строка.ВыборМебельнойКромкиСправа);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого Строчка Из КромкиСверхуСнизу Цикл
				
				Площадь = ШиринаДетали * КоличествоДеталей / 1000;
				ДобавитьСтроку(ТекущийОбъект, Строчка, Площадь, Строка.НомерИзделия, Ошибки, "кромки у детали № " + Строка.НомерСтроки, "СписокМатериалы", Строка.НомерСтроки);
				
			КонецЦикла;
			
			Для Каждого Строчка Из КромкиСлеваСправа Цикл
				
				Площадь = ВысотаДетали*КоличествоДеталей / 1000;
				ДобавитьСтроку(ТекущийОбъект, Строчка, Площадь, Строка.НомерИзделия, Ошибки, "кромки у детали № " + Строка.НомерСтроки, "СписокМатериалы", Строка.НомерСтроки);
				
			КонецЦикла;
			
			//Если деталь криволинейная и у нее есть кромка - считаем ее
			КантыИзРедактора = Строка.КантыИзРедактора;
			
			Если ЗначениеЗаполнено(КантыИзРедактора) Тогда 
				
				КантыИзРедактора = ЗначениеИзСтрокиВнутр(КантыИзРедактора);
				МассивКантов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КантыИзРедактора, "|");
				//МассивКантов.Удалить(МассивКантов.Количество()-1);
				
				Для Каждого Кромка Из МассивКантов Цикл
					
					ПараметрыКанта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Кромка, "_");
					НоменклатурныйНомер = ПараметрыКанта[0];
					ДлинаКанта = Число(ПараметрыКанта[1]);
					НоменклатураКанта = Номенклатура.НайтиПоКоду(НоменклатурныйНомер);
					ДлинаКромления = ДлинаКанта * КоличествоДеталей / 1000;
					
					Если Клееная Тогда
						
						ДлинаКромления = ДлинаКромления * 2;
						
					КонецЕсли;
					
					ДобавитьСтроку(ТекущийОбъект, НоменклатураКанта, ДлинаКромления, Строка.НомерИзделия, Ошибки, "канта из редактора у детали № " + Строка.НомерСтроки, "СписокМатериалы", Строка.НомерСтроки);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	#КОНЕЦОБЛАСТИ
	
	#ОБЛАСТЬ Ящики
	Для каждого Строка Из ТекущийОбъект.СписокЯщики Цикл
		
		ОшибкаРазмеров = НЕ ЗначениеЗаполнено(Строка.ПроемЯщика) ИЛИ НЕ ЗначениеЗаполнено(Строка.ВысотаЯщика) ИЛИ НЕ ЗначениеЗаполнено(Строка.ГлубинаЯщика);
		
		Если НЕ ЗначениеЗаполнено(Строка.ПроемЯщика) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.СписокЯщики[" + (Строка.НомерСтроки - 1) + "].Номенклатура", "Не заполнен проем у ящика № " + Строка.НомерСтроки);	
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Строка.ВысотаЯщика) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.СписокЯщики[" + (Строка.НомерСтроки - 1) + "].Номенклатура", "Не заполнена высота у ящика № " + Строка.НомерСтроки);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ГлубинаЯщика) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.СписокЯщики[" + (Строка.НомерСтроки - 1) + "].Номенклатура", "Не заполнена глубина у ящика № " + Строка.НомерСтроки);
		КонецЕсли;
		
		КоличествоЯщиков = Строка.КоличествоЯщиков;    
		//Направляющие для ящика
		Если НЕ Строка.БезНаправляющих Тогда
			ДобавитьСтроку(ТекущийОбъект, Строка.НаправляющиеНоменклатура, КоличествоЯщиков, Строка.НомерИзделия, Ошибки, "направляющей у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки, ОшибкаРазмеров);
		КонецЕсли;
		
		//Считаем материал стенок, ребер и кромку
		Если Строка.ВидЯщика = Перечисления.ВидыЯщика.Обычный Тогда
			
			ПлощадьКромки = (2 * Строка.ШиринаБоковойСтороны + 2 * Строка.ГлубинаЯщика + Строка.ДлинаРебро) * Строка.КоличествоЯщиков / 1000;
			//Площадь = ((Строка.ШиринаБоковойСтороны * Строка.ВысотаЯщика * 2 + Строка.ГлубинаЯщика * Строка.ВысотаЯщика * 2 +
			//Строка.ДлинаРебро * Строка.ВысотаЯщика) / 1000000) * КоличествоЯщиков;
			
			ВместимостьНаЛисте(Строка.Номенклатура, Строка.ШиринаБоковойСтороны, Строка.ВысотаБоковойСтороны, Ошибки, "боковой стороны у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки);
			ДобавитьСтроку(ТекущийОбъект, Строка.Номенклатура, ((Строка.ШиринаБоковойСтороны * Строка.ВысотаБоковойСтороны * 2) / 1000000) * КоличествоЯщиков, Строка.НомерИзделия, Ошибки, "боковой стороны у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки, ОшибкаРазмеров);
			
			ВместимостьНаЛисте(Строка.Номенклатура, Строка.ДлинаБоковойСтороны, Строка.ВысотаБоковойСтороны, Ошибки, "боковой стороны у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки);
			ДобавитьСтроку(ТекущийОбъект, Строка.Номенклатура, ((Строка.ДлинаБоковойСтороны * Строка.ВысотаБоковойСтороны * 2) / 1000000) * КоличествоЯщиков, Строка.НомерИзделия, Ошибки, "боковой стороны у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки, ОшибкаРазмеров);
			
			Если ЗначениеЗаполнено(Строка.ДлинаРебро) Тогда
				
				ВместимостьНаЛисте(Строка.Номенклатура, Строка.ДлинаРебро, Строка.ВысотаЯщика, Ошибки, "ребра у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки);
				ДобавитьСтроку(ТекущийОбъект, Строка.Номенклатура, ((Строка.ДлинаРебро * Строка.ВысотаЯщика) / 1000000) * КоличествоЯщиков, Строка.НомерИзделия, Ошибки, "ребра у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки, ОшибкаРазмеров);
				
			КонецЕсли;	
					
		Иначе
			
			ПлощадьКромки = 2 * (Строка.ШиринаБоковойСтороны + Строка.ВысотаБоковойСтороны + Строка.ДлинаДно + Строка.ШиринаДно) * Строка.КоличествоЯщиков/1000;
			Площадь = (Строка.ШиринаБоковойСтороны * Строка.ВысотаБоковойСтороны) / 1000000 * КоличествоЯщиков;
			ВместимостьНаЛисте(Строка.Номенклатура, Строка.ШиринаБоковойСтороны, Строка.ВысотаБоковойСтороны, Ошибки, "боковой стороны у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки);
			ДобавитьСтроку(ТекущийОбъект, Строка.Номенклатура, Площадь, Строка.НомерИзделия, Ошибки, "боковой стороны у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки, ОшибкаРазмеров);
			
			Если Строка.ВысотаЯщика > 150 Тогда
				//Рейлинги для МТ и ТБ
				ГруппаРейлингов = ?(Строка.НаправляющиеНоменклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Метабокс, 
				Справочники.НоменклатурныеГруппы.РейлингПодМетабокс, Справочники.НоменклатурныеГруппы.РейлингПодТандембокс);
				
				РейлингКНаправляющим = НайтиНаправляющиеНоменклатура(ГруппаРейлингов, Строка.НаправляющиеНоменклатура.ДлинаДетали);
				
				Если ЗначениеЗаполнено(РейлингКНаправляющим) Тогда
					ДобавитьСтроку(ТекущийОбъект, РейлингКНаправляющим, ?(Строка.ВысотаЯщика < 201, КоличествоЯщиков, КоличествоЯщиков * 2), Строка.НомерИзделия, Ошибки);
				КонецЕсли;
				
				//Соединители для ТБ
				Если Строка.ВидЯщика = Перечисления.ВидыЯщика.Тандембокс Тогда
					Соединитель = ?(Строка.ВысотаЯщика < 201, Справочники.Номенклатура.СоединительДляТандембокс1шт, Справочники.Номенклатура.СоединительДляТандембокс2шт);
					ДобавитьСтроку(ТекущийОбъект, Соединитель, КоличествоЯщиков, Строка.НомерИзделия, Ошибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьСтроку(ТекущийОбъект, Строка.КромкаНоменклатура, ПлощадьКромки, Строка.НомерИзделия, Ошибки, "кромки у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки, ОшибкаРазмеров);
				
		Площадь = Строка.ДлинаДно * Строка.ШиринаДно * КоличествоЯщиков / 1000000;
		ВместимостьНаЛисте(Строка.ДноНоменклатура, Строка.ДлинаДно, Строка.ШиринаДно, Ошибки, "дно у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки);
		ДобавитьСтроку(ТекущийОбъект, Строка.ДноНоменклатура, Площадь, Строка.НомерИзделия, Ошибки, "дно у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки, ОшибкаРазмеров);
		
		//Добавляем фасады: материал, кромку и ручки
		Если Строка.ВидФасада <> "Нет" Тогда
			
			ШиринаФасадБезКромки = (Строка.ШиринаФасад - 2 * Строка.КромкаФасадНоменклатура.ГлубинаДетали);
			ВысотаФасадБезКромки = (Строка.ВысотаФасад - 2 * Строка.КромкаФасадНоменклатура.ГлубинаДетали);
			
			Если ШиринаФасадБезКромки > 0 И ВысотаФасадБезКромки > 0 Тогда
				Площадь = ШиринаФасадБезКромки * ВысотаФасадБезКромки * КоличествоЯщиков / 1000000;
			Иначе
				Площадь = 0;
			КонецЕсли;
			
			ВместимостьНаЛисте(Строка.ФасадНоменклатура, ВысотаФасадБезКромки, ШиринаФасадБезКромки, Ошибки, "фасада у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки);
			ДобавитьСтроку(ТекущийОбъект, Строка.ФасадНоменклатура, Площадь, Строка.НомерИзделия, Ошибки, "фасада у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки);
			
			//Ручки для ящиков
			Если Строка.КоличествоРучек > 0 Тогда
				
				КоличествоРучек = Строка.КоличествоРучек * КоличествоЯщиков;
				ДобавитьСтроку(ТекущийОбъект, Строка.РучкаНоменклатура, КоличествоРучек, Строка.НомерИзделия, Ошибки, "ручки у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки);
				
			КонецЕсли;
			
			Площадь = (2 * Строка.ШиринаФасад + 2 * Строка.ВысотаФасад) * Строка.КоличествоЯщиков / 1000; 
			ДобавитьСтроку(ТекущийОбъект, Строка.КромкаФасадНоменклатура, Площадь, Строка.НомерИзделия, Ошибки, "кромки фасада у ящика № " + Строка.НомерСтроки, "СписокЯщики", Строка.НомерСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	#КОНЕЦОБЛАСТИ
	
	//Добавляем номенклатуру из комплектации
	Для каждого Строка Из ТекущийОбъект.Комплектация Цикл
		
		СтруктураКратности = ЛексСервер.ПосчитатьКратность(Строка.Номенклатура, Строка.Количество);
		
		Если СтруктураКратности.КоличествоМатериала <> Строка.Количество Тогда
			
			Строка.Количество = СтруктураКратности.КоличествоМатериала;
			
			//ТекстСообщения = "'%1' поставляется только размером, кратным %2. Количество материала было изменено на %3";
			//ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.Номенклатура, СтруктураКратности.Кратность, СтруктураКратности.КоличествоМатериала);
			//
			//Если ЗначениеЗаполнено(СтрокаСообщенияОКратности) Тогда
			//	
			//	СтрокаСообщенияОКратности = СтрокаСообщенияОКратности + Символы.ПС + ТекстСообщения;
			//	
			//Иначе
			//	
			//	СтрокаСообщенияОКратности = ТекстСообщения;
			//	
			//КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьСтроку(ТекущийОбъект, Строка.Номенклатура, СтруктураКратности.КоличествоМатериала, Строка.НомерИзделия, Ошибки);
		
	КонецЦикла;
	
	// ключ шестигранный
	Если ТекущийОбъект.СписокДверей.Количество() > 0 Тогда
		// { Васильев Александр Леонидович [11.02.2014]
		// Гарбузов говорит надо, Кривенко говорит не надо.
		ДобавитьСтроку(ТекущийОбъект, Справочники.Номенклатура.КлючШестигранный, 1, 0, Ошибки);
		// 24 февраля, на розничной планерке опять сказали надо
		// } Васильев Александр Леонидович [11.02.2014]
	КонецЕсли;
	
	//Добавляем номенклатуру из дверей
	Для каждого Строка Из ТекущийОбъект.СписокДверей Цикл
		
		ТаблицаНоменклатурыДверей = Строка.Двери.СписокНоменклатуры;
		
		Для каждого СтрокаНоменклатуры Из ТаблицаНоменклатурыДверей Цикл
			
			СтруктураКратности = ЛексСервер.ПосчитатьКратность(СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.КоличествоСОтходом);
			ДобавитьСтроку(ТекущийОбъект, СтрокаНоменклатуры.Номенклатура, СтруктураКратности.КоличествоМатериала, 0, Ошибки, "строки № " + СтрокаНоменклатуры.НомерСтроки + " у двери № " + Строка.НомерСтроки, "СписокДверей", Строка.НомерСтроки);
			//ДобавитьСтроку(ТекущийОбъект, СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.КоличествоСОтходом, 0, Ошибки, "строки № " + СтрокаНоменклатуры.НомерСтроки + " у двери № " + Строка.НомерСтроки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаКантовПоместу.Количество() > 0 Тогда
		
		ТаблицаКантовПоместу.Свернуть("Номенклатура", "Количество");
		
		Для каждого Строчка Из ТаблицаКантовПоместу Цикл
			
			КоличествоКанта = Строчка.Количество + Строчка.Количество * 0.01 * 15; //Дима сказал добавить к канту по месту 15 процентов
			
			НоваяСтрока = ТекущийОбъект.СписокНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура = Строчка.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Количество = КоличествоКанта;
			НоваяСтрока.НомерИзделия = 0;
			НоваяСтрока.ЧерезСклад = Ложь;
			
			// { Васильев Александр Леонидович [10.12.2013]
			// мерный материал
			НоваяСтрока = ТекущийОбъект.МерныйМатериал.Добавить();
			НоваяСтрока.Номенклатура = Строчка.Номенклатура;
			НоваяСтрока.Количество = КоличествоКанта;
			НоваяСтрока.НомерИзделия = 0;
			// } Васильев Александр Леонидович [10.12.2013]
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ЗаполнитьМатериалы()

&НаСервере
Процедура ЗаполнитьСтоимость(ТекущийОбъект)
	
	// { Васильев Александр Леонидович [30.05.2014]
	// Здесь должна заполняться ТОЛЬКО стоимость
	// сколько было элементов в таблице, столько и должно остаться
	// } Васильев Александр Леонидович [30.05.2014]
	
	Дата = ТекущийОбъект.Дата;
	Контрагент = ТекущийОбъект.Контрагент;
	Подразделение = ТекущийОбъект.Подразделение;
	ТаблицаСпискаНоменклатуры = ТекущийОбъект.СписокНоменклатуры.Выгрузить();
	
	Если ТекущийОбъект.Изделие = Справочники.Изделия.Детали Тогда
		
		КоэфициентОфиса = 1;
		
	Иначе
		
		КоэфициентОфиса = ?(ЗначениеЗаполнено(ТекущийОбъект.Офис.Коэффициент), ТекущийОбъект.Офис.Коэффициент, 1);
		
	КонецЕсли;
	
	СтоимостьДокумента = 0;
	СпрНоменклатура = Справочники.Номенклатура;
	
	// { Васильев Александр Леонидович [17.03.2014]
	// увеличение количества на процент отхода
	// } Васильев Александр Леонидович [17.03.2014]
	Для каждого Строка Из ТаблицаСпискаНоменклатуры Цикл
		ПроцентОтхода = Строка.Номенклатура.ПроцентОтхода;
		Если ПроцентОтхода > 0 Тогда 
			Строка.Количество = Строка.Количество + Строка.Количество * 0.01 * ПроцентОтхода;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСпискаНоменклатуры", ТаблицаСпискаНоменклатуры);
	Запрос.УстановитьПараметр("Регион", ТекущийОбъект.Подразделение.Регион);
	Запрос.УстановитьПараметр("Производство", ТекущийОбъект.Производство);
	Запрос.УстановитьПараметр("Коэффициент", КоэфициентОфиса);
	Запрос.УстановитьПараметр("СкидкаНаУслуги", ТекущийОбъект.СкидкаНаУслуги);
	Запрос.УстановитьПараметр("СкидкаНаМатериал", ТекущийОбъект.СкидкаНаМатериалы);
	Запрос.УстановитьПараметр("Период", ТекущийОбъект.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаСпискаНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаСпискаНоменклатуры.Количество,
	|	ТаблицаСпискаНоменклатуры.ЕдиницаИзмерения,
	|	ТаблицаСпискаНоменклатуры.Цена,
	|	ТаблицаСпискаНоменклатуры.ЗарплатаЦеха,
	|	ТаблицаСпискаНоменклатуры.НомерИзделия,
	|	ТаблицаСпискаНоменклатуры.НомерСтроки,
	|	ТаблицаСпискаНоменклатуры.ЧерезСклад,
	|	ВЫБОР
	|		КОГДА ТаблицаСпискаНоменклатуры.ЧерезСклад
	|			ТОГДА ТаблицаСпискаНоменклатуры.НомерСтроки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧерезСкладНомерСтроки,
	|	ТаблицаСпискаНоменклатуры.РозничнаяСтоимость,
	|	ТаблицаСпискаНоменклатуры.ПодЗаказ
	|ПОМЕСТИТЬ ТаблицаСпискаНоменклатуры
	|ИЗ
	|	&ТаблицаСпискаНоменклатуры КАК ТаблицаСпискаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСпискаНоменклатуры.Номенклатура,
	|	ТаблицаСпискаНоменклатуры.НомерИзделия,
	|	СУММА(ТаблицаСпискаНоменклатуры.Количество) КАК Количество,
	|	ТаблицаСпискаНоменклатуры.ЧерезСклад КАК ЧерезСклад,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ТаблицаСпискаНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|					И (ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) - ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) * 0.01 * &СкидкаНаМатериал) * &Коэффициент >= ЕСТЬNULL(РозничныеЦеныСрез.Внутренняя, 0)
	|				ТОГДА (ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) - ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) * 0.01 * &СкидкаНаМатериал) * &Коэффициент
	|			КОГДА ТаблицаСпискаНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|					И (ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) - ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) * 0.01 * &СкидкаНаУслуги) * &Коэффициент >= ЕСТЬNULL(РозничныеЦеныСрез.Внутренняя, 0)
	|				ТОГДА (ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) - ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) * 0.01 * &СкидкаНаУслуги) * &Коэффициент
	|			ИНАЧЕ ЕСТЬNULL(РозничныеЦеныСрез.Внутренняя, 0)
	|		КОНЕЦ) КАК Цена,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаСпискаНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|					И (ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) * ТаблицаСпискаНоменклатуры.Количество - ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) * ТаблицаСпискаНоменклатуры.Количество * 0.01 * &СкидкаНаМатериал) * &Коэффициент >= ЕСТЬNULL(РозничныеЦеныСрез.Внутренняя, 0) * ТаблицаСпискаНоменклатуры.Количество
	|				ТОГДА (ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) * ТаблицаСпискаНоменклатуры.Количество - ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) * ТаблицаСпискаНоменклатуры.Количество * 0.01 * &СкидкаНаМатериал) * &Коэффициент
	|			КОГДА ТаблицаСпискаНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|					И (ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) * ТаблицаСпискаНоменклатуры.Количество - ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) * ТаблицаСпискаНоменклатуры.Количество * 0.01 * &СкидкаНаУслуги) * &Коэффициент >= ЕСТЬNULL(РозничныеЦеныСрез.Внутренняя, 0) * ТаблицаСпискаНоменклатуры.Количество
	|				ТОГДА (ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) * ТаблицаСпискаНоменклатуры.Количество - ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0) * ТаблицаСпискаНоменклатуры.Количество * 0.01 * &СкидкаНаУслуги) * &Коэффициент
	|			ИНАЧЕ ЕСТЬNULL(РозничныеЦеныСрез.Внутренняя, 0) * ТаблицаСпискаНоменклатуры.Количество
	|		КОНЕЦ) КАК РозничнаяСтоимость,
	|	МИНИМУМ(ТаблицаСпискаНоменклатуры.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	СУММА(ЕСТЬNULL(РозничныеЦеныСрез.Внутренняя, 0) * ТаблицаСпискаНоменклатуры.Количество) КАК ВнутренняяСтоимость,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаСпискаНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|				ТОГДА ЕСТЬNULL(РозничныеЦеныСрез.ПлановаяЗакупочная, 0) * ТаблицаСпискаНоменклатуры.Количество * &Коэффициент
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗарплатаЦеха,
	|	МАКСИМУМ(ТаблицаСпискаНоменклатуры.ПодЗаказ) КАК ПодЗаказ,
	|	ТаблицаСпискаНоменклатуры.ЧерезСкладНомерСтроки
	|ИЗ
	|	ТаблицаСпискаНоменклатуры КАК ТаблицаСпискаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Регион = &Регион
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ТаблицаСпискаНоменклатуры.Номенклатура
	|						ИЗ
	|							ТаблицаСпискаНоменклатуры КАК ТаблицаСпискаНоменклатуры)) КАК РозничныеЦеныСрез
	|		ПО ТаблицаСпискаНоменклатуры.Номенклатура = РозничныеЦеныСрез.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСпискаНоменклатуры.Номенклатура,
	|	ТаблицаСпискаНоменклатуры.НомерИзделия,
	|	ТаблицаСпискаНоменклатуры.ЧерезСклад,
	|	ТаблицаСпискаНоменклатуры.ЧерезСкладНомерСтроки";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ДобавитьНаценкуНаИзделие(Таблица);
	
	Если ТекущийОбъект.Подразделение.СвоиМонтажи Тогда
		// { Васильев Александр Леонидович [17.03.2014]
		// некоторые бренддилеры сами устанавливают свои изделия
		// и не должны платить внутреннюю цену за некоторые услуги
		// } Васильев Александр Леонидович [17.03.2014]
		УменьшитьВнутреннююСтоимостьБезНашихМонтажей(Таблица);
	КонецЕсли;
	
	Если ТекущийОбъект.Срочный Тогда
		
		Структура = Документы.Спецификация.ПолучитьСтоимостьУслугБезВнешних(Таблица);
		
		// 50% от суммы наряда + 500 руб.
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Номенклатура = СпрНоменклатура.СрочностьЗаказа;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.ЗарплатаЦеха = Структура.ЗарплатаЦеха * 0.5;
		НоваяСтрока.РозничнаяСтоимость = Структура.РозничнаяСтоимость * 0.5 + 500;
		НоваяСтрока.Цена = НоваяСтрока.РозничнаяСтоимость;
		НоваяСтрока.ЧерезСклад = Ложь;
		
	КонецЕсли;
	
	ТекущийОбъект.СписокНоменклатуры.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Функция УстановитьДатуОтгрузки()
	
	Если ЗначениеЗаполнено(Объект.ДатаМонтажа) Тогда
		
		Если ДеньНедели(Объект.ДатаМонтажа) > 1 Тогда
			МинусДней = 1;
		Иначе
			МинусДней = 2;
		КонецЕсли;
		
		Объект.ДатаОтгрузки = Объект.ДатаМонтажа - МинусДней * 86400;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммуСоСкидкой()
	
	СтруктураСкидка = ЛексСервер.ПолучитьСкидкуДоговора(Объект.Подразделение, Объект.Дата, Объект.СуммаДокумента, ВидОплаты, Объект.Офис, Объект.Контрагент);
	ПроцентСкидки = СтруктураСкидка.РазмерСкидки;
	СуммаДокументаСоСкидкой = Объект.СуммаДокумента * (1 - ПроцентСкидки / 100);
	ЭтаФорма.Элементы.СкидкаПостоянномуКлиенту.Заголовок = "Постоянному клиенту скидка + " + СтруктураСкидка.РазмерСкидкиПостоянногоКлиента + "%";
	ЭтаФорма.Элементы.СкидкаПостоянномуКлиенту.Видимость = СтруктураСкидка.ЭтоПостоянныйКлиент;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьСкидки()
	
	Если Объект.Дилерский Тогда
		
		СтруктураСкидок = ЛексСервер.ПолучитьСкидкуКонтрагента(Объект.Подразделение, Объект.Дата, Объект.Контрагент);
		Объект.СкидкаНаУслуги = СтруктураСкидок.СкидкаНаУслуги;
		Объект.СкидкаНаМатериалы = СтруктураСкидок.СкидкаНаМатериалы;
		
	КонецЕсли
	
КонецФункции // ОбновитьСкидки()

&НаСервере
Функция ВыгрузитьНужнуюТаблицуВХранилище(ТабличнаяЧасть)
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ДанныеФормыКоллекция") Тогда
		
		Адрес = ПоместитьВоВременноеХранилище(ТабличнаяЧасть.Выгрузить());
		Возврат Адрес;
		
	ИначеЕсли ТипЗнч(ТабличнаяЧасть) = Тип("Структура") Тогда
		
		Возврат ПоместитьВоВременноеХранилище(ТабличнаяЧасть);
		
	КонецЕсли;
	
КонецФункции 

&НаСервере
Процедура ЗагрузитьТабличнуюЧасть(АдресТаблицы, ИмяТабличнойЧасти)
	
	ТЗ_Структура = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Если ТипЗнч(ТЗ_Структура) = Тип("ТаблицаЗначений") Тогда
		
		Модифицированность = Истина;
		Объект[ИмяТабличнойЧасти].Загрузить(ТЗ_Структура);
		
	ИначеЕсли ТипЗнч(ТЗ_Структура) = Тип("Структура") Тогда
		
		Если ТЗ_Структура.Свойство("Детали") И ТЗ_Структура.Свойство("Двери") Тогда
			
			Модифицированность = Истина;
			Объект[ИмяТабличнойЧасти].Загрузить(ТЗ_Структура.Детали);
			
			Объект.СписокДверей.Очистить();
			
			Если ЗначениеЗаполнено(ТЗ_Структура.Двери) Тогда
				
				СтрокаДверей = Объект.СписокДверей.Добавить();
				СтрокаДверей.Двери = ТЗ_Структура.Двери;
				СтрокаДверей.ПоКаталогу = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//Если ТЗ_Структура.Свойство("ПодставляемыеЗначенияИзРеквизита") Тогда
		//
		//	СтруктураПодбираемойПоЦветуНоменклатуры.Вставить("ШкафПоКаталогу", ТЗ_Структура.ПодставляемыеЗначенияИзРеквизита);
		//
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьФормуПодбора(ИмяПодбора, ТаблицаДляФормы, СтрокаДанных, ВладелецПодобра, ПараметрыПодбора = Неопределено)
	
	АдресТаблицы = ВыгрузитьНужнуюТаблицуВХранилище(ТаблицаДляФормы);
	
	Если ПараметрыПодбора = Неопределено ИЛИ ТипЗнч(ПараметрыПодбора) <> Тип("Структура") Тогда
		ПараметрыПодбора = Новый Структура;
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("АдресТаблицы", АдресТаблицы);
	ПараметрыПодбора.Вставить("Подразделение", Объект.Подразделение);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыПодбора.Вставить("Спецификация", Объект.Ссылка);
		
	КонецЕсли;
	
	Если СтрокаДанных <> Неопределено Тогда
		
		ПараметрыПодбора.Вставить("Идентификатор", СтрокаДанных.НомерСтроки - 1);
		
	КонецЕсли;
	
	ОткрытьФорму("Документ.Спецификация.Форма." + ИмяПодбора, ПараметрыПодбора, ВладелецПодобра);
	
КонецФункции

&НаКлиенте
Функция Собрать()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ПараметрыФормыПодбора = Новый Структура;
	ПараметрыФормыПодбора.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	Если ИмяТекущейСтраницы = "СтраницаМатериалы" Тогда
		
		ИмяПодбора = "ФормаДетали";
		ТаблицаДляФормы = Объект.СписокМатериалы;
		СтрокаДанных = Элементы.СписокМатериалы.ТекущиеДанные;
		ВладелецПодобра = Элементы.СписокМатериалы;
		ПараметрыФормыПодбора.Вставить("Строка3DРедактор", Объект.Строка3DРедактор);
		ПараметрыФормыПодбора.ТолькоПросмотр = ПараметрыФормыПодбора.ТолькоПросмотр ИЛИ Элементы.СтраницаМатериалы.ТолькоПросмотр;
		
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаЯщики" Тогда
		
		ИмяПодбора = "ФормаЯщики";
		ТаблицаДляФормы = Объект.СписокЯщики;
		СтрокаДанных = Элементы.СписокЯщики.ТекущиеДанные;
		ВладелецПодобра = Элементы.СписокЯщики;
		ПараметрыФормыПодбора.ТолькоПросмотр = ПараметрыФормыПодбора.ТолькоПросмотр ИЛИ Элементы.СтраницаЯщики.ТолькоПросмотр;
		
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаИзделияПоКаталогу" Тогда
		
		ИмяПодбора = ПолучитьФормуИзделияПоКаталогу(Объект.Изделие); //"ФормаИзделийПоКаталогу";
		
		Если ИмяПодбора = "ФормаИзделийПоКаталогу" Тогда
			
			ТаблицаДляФормы = Объект.СписокИзделийПоКаталогу;
			
		ИначеЕсли ИмяПодбора = "ФормаШкафПоКаталогу" Тогда
			
			ЗаписатьПустуюСпецификацию();
			
			ТаблицаДляФормы = Новый Структура;
			ТаблицаДляФормы.Вставить("Детали", Объект.СписокИзделийПоКаталогу);
			ТаблицаДляФормы.Вставить("Двери", Неопределено);
			СтрокаДверей = Объект.СписокДверей.НайтиСтроки(Новый Структура("ПоКаталогу", Истина));
			
			Если СтрокаДверей.Количество() = 1 Тогда
				ТаблицаДляФормы.Вставить("Двери", СтрокаДверей[0].Двери);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДанных = Элементы.СписокИзделийПоКаталогу.ТекущиеДанные;
		ВладелецПодобра = Элементы.СписокИзделийПоКаталогу;
		
	КонецЕсли;
	
	ОткрытьФормуПодбора(ИмяПодбора, ТаблицаДляФормы, СтрокаДанных, ВладелецПодобра, ПараметрыФормыПодбора);
	
КонецФункции // Собрать()

&НаСервереБезКонтекста
Функция ПолучитьФормуИзделияПоКаталогу(Изделие)
	
	Если Изделие.ВидИзделия = Перечисления.ВидыИзделий.ШкафКупе Тогда
		Форма = "ФормаШкафПоКаталогу";
	Иначе
		Форма = "ФормаИзделийПоКаталогу";
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции

&НаСервере
Функция ПолучитьАдресТаблицы()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ДлинаДетали", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Дробный", Новый ОписаниеТипов("Булево"));
	
	Для каждого Строка Из Объект.Комплектация Цикл
		
		НоменклатурнаяГруппа 	= Строка.Номенклатура.НоменклатурнаяГруппа;
		Дробный 						= Строка.Номенклатура.ЕдиницаИзмерения.Дробный;
		
		Если НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.СотовыеПолки 
			или НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Корзины 
			или НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.СотовыеЭлементы Тогда
			
			Если Дробный Тогда
				
				НоваяСтрока 							= ТЗ.Добавить();
				НоваяСтрока.Номенклатура 		= Строка.Номенклатура;
				НоваяСтрока.Количество 		= 1;
				НоваяСтрока.ДлинаДетали 		= Строка.Количество * 1000;
				НоваяСтрока.Дробный 			= Дробный;
				
			Иначе
				
				НоваяСтрока 							= ТЗ.Добавить();
				НоваяСтрока.Номенклатура 		= Строка.Номенклатура;
				НоваяСтрока.Количество 		= Строка.Количество;
				НоваяСтрока.ДлинаДетали 		= 0;
				НоваяСтрока.Дробный 			= Дробный;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	ТЗ.Свернуть("Номенклатура, ДлинаДетали, Дробный", "Количество");
	Возврат ПоместитьВоВременноеХранилище(ТЗ);
	
КонецФункции // ПолучитьАдресТаблицы()

&НаСервере
Процедура ДобавитьКантПоМесту(НоваяСтрока, Номенклатура, Площадь, НомерИзделия)
	
	Если НЕ Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
		
		НоваяСтрока.Номенклатура 			= Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения 	= НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.Количество 			= Площадь;
		НоваяСтрока.НомерИзделия 		= НомерИзделия;
		
	Иначе
		
		Сообщение 			= Новый СообщениеПользователю;
		Сообщение.Текст 	= "Не заполнена номенклатура канта, устанавлевоемого по месту";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКантПоМесту()

&НаСервере
Функция ДобавитьСтроку(ТекущийОбъект, Номенклатура, Площадь, НомерИзделия, Ошибки = Неопределено, ВидНоменклатуры = "", Таблица = Неопределено, НомерСтроки = 0, ОтказОшибки = Ложь)
	
	Поле = Неопределено;
	
	Если Таблица <> Неопределено Тогда
		Если Таблица = "СписокДверей" Тогда	
			Поле = "Объект." + Таблица + "[" + (НомерСтроки - 1) + "].Двери";		
		Иначе
			Поле = "Объект." + Таблица + "[" + (НомерСтроки - 1) + "].Номенклатура";
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Если Площадь > 0 Тогда
			
			НоваяСтрока = ТекущийОбъект.СписокНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Количество = Площадь;
			НоваяСтрока.НомерИзделия = НомерИзделия;
			НоваяСтрока.ЧерезСклад = НЕ (Номенклатура.МестоОбработки = Перечисления.МестоОбработки.Цех ИЛИ Номенклатура.МестоОбработки = Перечисления.МестоОбработки.ЦехМерный);
			
			Если Номенклатура.МестоОбработки = Перечисления.МестоОбработки.ЦехМерный И Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
				НоваяСтрока = ТекущийОбъект.МерныйМатериал.Добавить();
				НоваяСтрока.Номенклатура = Номенклатура;
				НоваяСтрока.Количество = Площадь;
				НоваяСтрока.НомерИзделия = НомерИзделия;
			КонецЕсли;
			
		Иначе
			
			Если НЕ ОтказОшибки Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Поле, "Не верно количество (площадь) " + ВидНоменклатуры);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ ОтказОшибки Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Поле, "Не заполнена номенклатура " + ВидНоменклатуры);
			//Сообщить("Найдена деталь с незаполненной номенклатурой", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ДобавитьСтроку()

&НаСервере
Функция ВместимостьНаЛисте(Номенклатура, ВысотаДетали, ШиринаДетали, Ошибки = Неопределено, ВидНоменклатуры = "", Таблица = Неопределено, НомерСтроки = 0);
	
	Поле = Неопределено;
	
	Если Таблица <> Неопределено Тогда
		Если Таблица = "СписокДверей" Тогда	
			Поле = "Объект." + Таблица + "[" + (НомерСтроки - 1) + "].Двери";		
		Иначе
			Поле = "Объект." + Таблица + "[" + (НомерСтроки - 1) + "].Номенклатура";
		КонецЕсли;
	КонецЕсли;
	
	ДлинаЛиста = Номенклатура.ДлинаДетали;
	ШиринаЛиста = Номенклатура.ШиринаДетали;
	НаличиеТекстуры = Номенклатура.НаличиеТекстуры;
	
	Если НаличиеТекстуры Тогда
		Если (ВысотаДетали > ДлинаЛиста ИЛИ ШиринаДетали > ШиринаЛиста) Тогда	
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Поле, "Большие размеры номенклатуры " + ВидНоменклатуры);
		КонецЕсли;
	Иначе
		Если (ВысотаДетали > ДлинаЛиста ИЛИ ШиринаДетали > ШиринаЛиста) И (ВысотаДетали > ШиринаЛиста ИЛИ ШиринаДетали > ДлинаЛиста) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Поле, "Большие размеры номенклатуры " + ВидНоменклатуры);
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьУслугуКромления(НоменклатураМебельнаяКромка)
	
	НоменклатурныеГруппы = Справочники.НоменклатурныеГруппы;
	ГруппаКромки = НоменклатураМебельнаяКромка.НоменклатурнаяГруппа;
	
	Если ГруппаКромки = НоменклатурныеГруппы.Кромка2_42 или ГруппаКромки = НоменклатурныеГруппы.Кромка2_45 Тогда
		Услуга = Справочники.Номенклатура.КромлениеСтолешницыПристенка;
	ИначеЕсли ГруппаКромки = НоменклатурныеГруппы.КантАлюминиевый Тогда
		Услуга = Справочники.Номенклатура.ОкантовкаАлюминием;
	ИначеЕсли ГруппаКромки = НоменклатурныеГруппы.КантТ
		ИЛИ ГруппаКромки = НоменклатурныеГруппы.КантП Тогда
		Услуга = Справочники.Номенклатура.Окантовка;
	Иначе
		Если НоменклатураМебельнаяКромка.ГлубинаДетали < 1 Тогда
			Услуга = Справочники.Номенклатура.КромлениеТонкойКромки;
		Иначе
			Услуга = Справочники.Номенклатура.КромлениеТолстойКромки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Услуга;
	
КонецФункции

&НаСервере
Процедура ОбработкаИзделийПоКаталогу()
	
	//Определим вид изделия
	ИзделиеШкафКупе = Объект.Изделие.ВидИзделия = Перечисления.ВидыИзделий.ШкафКупе;
	ИзделиеКухня = НЕ ИзделиеШкафКупе;
	
	//Если рассчитываем шкаф купе, определим влияет ли пол на основное изделие, определим эту величину
	//Если ИзделиеШкафКупе Тогда
	Пол = 0;
	//	НашПол = Объект.СписокИзделийПоКаталогу.НайтиСтроки(Новый Структура("ВидИзделия", Перечисления.ВидыИзделийПоКаталогу.Пол));
	//	Если НашПол.Количество() > 0 Тогда
	//		Если НашПол[0].Изделие.УчитыватьПол Тогда
	//			Пол = НашПол[0].ВысотаИзделия;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	КоличествоИзделий = Объект.СписокИзделийПоКаталогу.Количество();
	
	Для Каждого Элемент Из Объект.СписокИзделийПоКаталогу Цикл
		
		НашеИзделие = Элемент.Изделие;
		
		//Размеры изделия
		ШиринаИзделия = Элемент.ШиринаИзделия;
		ВысотаИзделия = Элемент.ВысотаИзделия;
		ГлубинаИзделия = Элемент.ГлубинаИзделия;
		Европаз = Элемент.Европаз;
		Если ЗначениеЗаполнено(Элемент.Столешница) Тогда
			Столешница = Элемент.Столешница.ГлубинаДетали;
		Иначе
			Столешница = 0;
		КонецЕсли;
		
		//Припуски, все равны одному припуску указанному в Каталоге изделия 
		//Припуски у ОсновногоЭлемента зависят от наличия других элементов с разных сторон
		ПрипускСверху = ?(Найти(Элемент.СтрокаПрипусков, "ПрипускСверху") <> 0, НашеИзделие.Припуск, 0);
		ПрипускСнизу = ?(Найти(Элемент.СтрокаПрипусков, "ПрипускСнизу") <> 0, НашеИзделие.Припуск, 0);
		ПрипускСлева = ?(Найти(Элемент.СтрокаПрипусков, "ПрипускСлева") <> 0, НашеИзделие.Припуск, 0);
		ПрипускСправа = ?(Найти(Элемент.СтрокаПрипусков, "ПрипускСправа") <> 0, НашеИзделие.Припуск, 0);
		
		СтруктураПодбираемойПоЦветуНоменклатуры = ЛексСервер.ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(Элемент.НоменклатураЛДСП, Объект.Подразделение);
		///////////////////////////////////////////////Список Номенклатуры////////////////////////////////////////////////////////////////////////
		//Список номенклатуры Каталога изделий в ТЧ Комплектация
		
		# Область ДобавлениеКомплектацииИДопЭлементов
		СписокНоменклатурыИзделия = НашеИзделие.СписокНоменклатуры;
		Для Каждого Строка Из СписокНоменклатурыИзделия Цикл
			Количество = 0;
			Попытка
				Выполнить("Количество = " + Строка.Количество);
				
				Номенклатура = Строка.Номенклатура;
				НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
				
				Если НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.МонтажныйУголок и ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры) Тогда
					
					Номенклатура = ?(ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры.МонтажныйУголок), СтруктураПодбираемойПоЦветуНоменклатуры.МонтажныйУголок, Номенклатура);
					
				ИначеЕсли НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Заглушка и ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры) Тогда
					
					Номенклатура = ?(ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры.Заглушка), СтруктураПодбираемойПоЦветуНоменклатуры.Заглушка, Номенклатура);
					
				КонецЕсли;
				
				ДобавитьКомплектацию(Номенклатура, Количество, Элемент.НомерСтроки);
				
			Исключение
				Текст = "Ошибка при формировании формул списка номенклатуры каталога изделий " + Элемент.Изделие;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			КонецПопытки;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Элемент.Мойка) Тогда
			ДобавитьКомплектацию(Элемент.Мойка, 1, Элемент.НомерСтроки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.Сушка) Тогда
			ДобавитьКомплектацию(Элемент.Сушка, 1, Элемент.НомерСтроки);
		КонецЕсли;
		
		#КонецОбласти
		
		Если ЗначениеЗаполнено(Элемент.СтрокаТаблицаФасадов) Тогда
			ПараметрыТаблицаФасадов = ЗначениеИзСтрокиВнутр(Элемент.СтрокаТаблицаФасадов);
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////Материалы//////////////////////////////////////////////////////////////////////////////////////
		
		# Область ДобавлениеМатериалов
		
		СписокМатериалыИзделия = НашеИзделие.СписокМатериалы;	
		Для Каждого Строка Из СписокМатериалыИзделия Цикл
			
			ЭтоФасад = Ложь;
			
			Если ЗначениеЗаполнено(Элемент.СтрокаТаблицаФасадов) Тогда
				СтрокаФасада = ПараметрыТаблицаФасадов.Найти(Строка.НомерСтроки, "НомерДетали");
				Если ЗначениеЗаполнено(СтрокаФасада) Тогда
					Если СтрокаФасада.ВидЭлемента = "Фасад" Тогда
						Материал = СтрокаФасада.ВидФасада;
						НоменклатураФасад = СтрокаФасада.НоменклатураФасада;
						Кромка = СтрокаФасада.ОбрамлениеФасада;
						РучкаФасада = СтрокаФасада.НоменклатураРучки;
						ПоложениеРучки = СтрокаФасада.РасположениеРучки;
						Петли = СтрокаФасада.Петли;
						КоличествоПетель = СтрокаФасада.КоличествоПетель;
						РасположениеПазов = СтрокаФасада.РасположениеПазов;
						ЭтоФасад = Истина;
						
						Если ЗначениеЗаполнено(СтрокаФасада.МеханизмФасада) Тогда
							ДобавитьКомплектацию(СтрокаФасада.МеханизмФасада, СтрокаФасада.КоличествоМеханизмФасада, Элемент.НомерСтроки);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаФасада.Демпфер) Тогда
							ДобавитьКомплектацию(СтрокаФасада.Демпфер, СтрокаФасада.КоличествоДемпфер, Элемент.НомерСтроки);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаФасада.ДопЭлемент) Тогда
							ДобавитьКомплектацию(СтрокаФасада.ДопЭлемент, 1, Элемент.НомерСтроки);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = Объект.СписокМатериалы.Добавить();
			НоваяСтрока.Материал = ?(ЭтоФасад, Материал, Строка.Материал);
			
			Если ЗначениеЗаполнено(Строка.ВысотаДетали) И ЗначениеЗаполнено(Строка.ШиринаДетали) Тогда
				Попытка
					Выполнить("НоваяСтрока.ВысотаДетали = " + Строка.ВысотаДетали);
					Выполнить("НоваяСтрока.ШиринаДетали = " + Строка.ШиринаДетали);
				Исключение
					Текст = "Ошибка при формировании формул для """ + Строка.ИмяДетали + """ каталога изделий " + Элемент.Изделие;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки;
				
				Если ЭтоФасад И ЗначениеЗаполнено(СтрокаФасада) Тогда
					Если СтрокаФасада.ПовернутьФасад Тогда
						ВременноеЗначение = НоваяСтрока.ВысотаДетали;
						НоваяСтрока.ВысотаДетали = НоваяСтрока.ШиринаДетали;
						НоваяСтрока.ШиринаДетали = ВременноеЗначение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
					
			НоваяСтрока.Количество = Строка.Количество;
			КромкаНоменклатуры = Неопределено;
			
			Если Строка.Материал = "10 ЛДСП" ИЛИ Строка.Материал = "16 ЛДСП" ИЛИ Строка.Материал = "10 ЛДСП+10 ЛДСП" 
				ИЛИ Строка.Материал = "16 ЛДСП+10 ЛДСП" ИЛИ Строка.Материал = "16 ЛДСП+16 ЛДСП" Тогда
				НоваяСтрока.Номенклатура = Элемент.НоменклатураЛДСП;
				КромкаНоменклатуры = Элемент.КромкаЛДСП;
				Если Строка.Материал = "10 ЛДСП+10 ЛДСП" ИЛИ Строка.Материал = "16 ЛДСП+10 ЛДСП" ИЛИ Строка.Материал = "16 ЛДСП+16 ЛДСП" Тогда
					НоваяСтрока.НоменклатураДляСклеивания = Элемент.НоменклатураДляСклеивания;
				КонецЕсли;
			ИначеЕсли Строка.Материал = "ДВП" Тогда
				НоваяСтрока.Номенклатура = Элемент.НоменклатураДВП;
			ИначеЕсли Строка.Материал = "Столешница" Тогда
				НоваяСтрока.Номенклатура = Элемент.Столешница;
			ИначеЕсли Строка.Материал = "Стекло" Тогда
				НоваяСтрока.Номенклатура = Элемент.НоменклатураСтекло;
			ИначеЕсли Строка.Материал = "МДФ" Тогда
				НоваяСтрока.Номенклатура = Элемент.НоменклатураМДФ;
			ИначеЕсли Строка.Материал = "Пристенок" Тогда
				НоваяСтрока.Номенклатура = Элемент.Пристенок;
			ИначеЕсли ЭтоФасад Тогда
				НоваяСтрока.Номенклатура = НоменклатураФасад;
				КромкаНоменклатуры =  Кромка;
				
				ПетляДоступна = Ложь;
				Если ЗначениеЗаполнено(Петли) Тогда
					Если Материал = "ФасадСтеклянныйЗакругленный" Тогда
						ПетляДоступна = Петли.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПетлиПоворотные;
					ИначеЕсли Материал = "ФасадСтеклянный" Тогда
						ПетляДоступна = Петли.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПетлиДляСтеколБезДоводчика
						ИЛИ Петли.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПетлиДляСтеколСДоводчиком
						ИЛИ Петли.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПетлиПоворотные;
					Иначе
						ПетляДоступна = Петли.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПетлиБезДоводчика
						ИЛИ Петли.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПетлиСДоводчиком;
					КонецЕсли;
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Номенклатура", Петли);
					ПодразделениеДляПоиска = ЛексСервер.ПолучитьОсновноеПроизводство(Объект.Подразделение);
					СтруктураПоиска.Вставить("Подразделение", ПодразделениеДляПоиска);
					Если ПетляДоступна Тогда
						ПетляДоступна = РегистрыСведений.НоменклатураПодразделений.Получить(СтруктураПоиска).Доступность;
					Иначе
						Текст = "Петли """ + Петли + """ недоступны для """ + Строка.ИмяДетали + """ каталога изделий " + Элемент.Изделие;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.Петли = ?(ПетляДоступна, Петли, Неопределено);
				НоваяСтрока.КоличествоПетель = ?(ПетляДоступна, КоличествоПетель, 0);
				НоваяСтрока.РасположениеПазов = ?(ПетляДоступна, РасположениеПазов, Неопределено);
				НоваяСтрока.ДиаметрПазов = Строка.ДиаметрПазов;
				
				НоваяСтрока.РадиусФасада = "";
				НоваяСтрока.ПоложениеРучки = ПоложениеРучки;
				Если ЗначениеЗаполнено(Строка.ПоложениеРучки) Тогда
					НоваяСтрока.НоменклатураДляСклеивания = РучкаФасада;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) И ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Строка.Номенклатура;
			КонецЕсли;	
			
			НоваяСтрока.СоблюдениеТекстуры = НоваяСтрока.Номенклатура.НаличиеТекстуры;
			
			ТорцеваяЛента = Новый Структура;
			ТорцеваяЛента.Вставить("ТорцеваяЛентаСверху", Справочники.Номенклатура.ПустаяСсылка());
			ТорцеваяЛента.Вставить("ТорцеваяЛентаСнизу", Справочники.Номенклатура.ПустаяСсылка());
			ТорцеваяЛента.Вставить("ТорцеваяЛентаСлева", Справочники.Номенклатура.ПустаяСсылка());
			ТорцеваяЛента.Вставить("ТорцеваяЛентаСправа", Справочники.Номенклатура.ПустаяСсылка());
			
			Если ЗначениеЗаполнено(КромкаНоменклатуры) Тогда
				ПереключательКромка = "Нет";
				Если КромкаНоменклатуры.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.КантП
					ИЛИ КромкаНоменклатуры.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.КантТ Тогда
					НоваяСтрока.Кант = КромкаНоменклатуры;
					ПереключательКромка = "Кант";
				ИначеЕсли КромкаНоменклатуры.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Кромка2_19
					ИЛИ КромкаНоменклатуры.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Кромка2_35 Тогда
					НоваяСтрока.Кромка2мм = КромкаНоменклатуры;
					ПереключательКромка = "2";
				ИначеЕсли КромкаНоменклатуры.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Кромка045_19 Тогда
					НоваяСтрока.Кромка045мм = КромкаНоменклатуры;
					ПереключательКромка = "0.45";
				ИначеЕсли КромкаНоменклатуры.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.АГТПрофиль
					ИЛИ КромкаНоменклатуры.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.КромкаМДФ
					ИЛИ КромкаНоменклатуры.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.РамочныйАлюминий Тогда
					НоваяСтрока.УниверсальнаяКромка = КромкаНоменклатуры;
					ПереключательКромка = "УниверсальнаяКромка";
				КонецЕсли;
				
				Если Строка.КромкаСверху Тогда
					НоваяСтрока.ПереключательКромкаСверху = ПереключательКромка;
					НоваяСтрока.ВыборМебельнойКромкиСверху = КромкаНоменклатуры;
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСверху", КромкаНоменклатуры);
				КонецЕсли;
				Если Строка.КромкаСлева Тогда
					НоваяСтрока.ПереключательКромкаСлева = ПереключательКромка;
					НоваяСтрока.ВыборМебельнойКромкиСлева = КромкаНоменклатуры;
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСлева", КромкаНоменклатуры);
				КонецЕсли;
				Если Строка.КромкаСнизу Тогда
					НоваяСтрока.ПереключательКромкаСнизу = ПереключательКромка;
					НоваяСтрока.ВыборМебельнойКромкиСнизу = КромкаНоменклатуры;
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСнизу", КромкаНоменклатуры);
				КонецЕсли;
				Если Строка.КромкаСправа Тогда
					НоваяСтрока.ПереключательКромкаСправа = ПереключательКромка;
					НоваяСтрока.ВыборМебельнойКромкиСправа = КромкаНоменклатуры;
					ТорцеваяЛента.Вставить("ТорцеваяЛентаСправа", КромкаНоменклатуры);
				КонецЕсли;
				
			КонецЕсли;
			
			// Размеры с учетом кромки
			СтруктураРазмеров = Документы.Спецификация.ПолучитьРазмерыМатериалов(НоваяСтрока.Номенклатура, ТорцеваяЛента);
			ВысотаДеталиБезКромки = НоваяСтрока.ВысотаДетали -  СтруктураРазмеров.ВычитаемоеДляВысоты;
			ШиринаДеталиБезКромки = НоваяСтрока.ШиринаДетали - СтруктураРазмеров.ВычитаемоеДляШирины;
			
			НоваяСтрока.ВысотаДетали = ?(ВысотаДеталиБезКромки >= 0, ВысотаДеталиБезКромки, 0);
			НоваяСтрока.ШиринаДетали = ?(ШиринаДеталиБезКромки >= 0, ШиринаДеталиБезКромки, 0);
			
			Если ЗначениеЗаполнено(Строка.РадиусЛевоВерх)Тогда
				Попытка
					Выполнить("R1 = " + Строка.РадиусЛевоВерх);
				Исключение
					Текст = "Ошибка при формировании формул радиусов """ + Строка.ИмяДетали + """ каталога изделий " + Элемент.Изделие;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки;
			Иначе
				R1 = 0;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.РадиусПравоВерх)Тогда
				Попытка
					Выполнить("R2 = " + Строка.РадиусПравоВерх);
				Исключение
					Текст = "Ошибка при формировании формул радиусов """ + Строка.ИмяДетали + """ каталога изделий " + Элемент.Изделие;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки;
			Иначе
				R2 = 0;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.РадиусПравоНиз)Тогда
				Попытка
					Выполнить("R3 = " + Строка.РадиусПравоНиз);
				Исключение
					Текст = "Ошибка при формировании формул радиусов """ + Строка.ИмяДетали + """ каталога изделий " + Элемент.Изделие;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки;
			Иначе
				R3 = 0;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.РадиусЛевоНиз)Тогда
				Попытка
					Выполнить("R4 = " + Строка.РадиусЛевоНиз);
				Исключение
					Текст = "Ошибка при формировании формул радиусов """ + Строка.ИмяДетали + """ каталога изделий " + Элемент.Изделие;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки;
			Иначе
				R4 = 0;
			КонецЕсли;
			
			НоваяСтрока.РадиусЛевоВерх = R1 - (R1 % 50);
			НоваяСтрока.РадиусПравоВерх = R2 - (R2 % 50);
			НоваяСтрока.РадиусПравоНиз = ?(Строка.Срез, R3, R3 - (R3 % 50));
			НоваяСтрока.РадиусЛевоНиз = R4 - (R4 % 50);
			НоваяСтрока.Срез = Строка.Срез;
			
			НоваяСтрока.СтруктураОтверстий = Строка.СтруктураОтверстий;
			
			НоваяСтрока.Периметр = 2 * (НоваяСтрока.ВысотаДетали + НоваяСтрока.ШиринаДетали - R1 - R2 - R3 - R4) + Окр(3.14159 * (R1 + R2 + R3 + R4) / 2);
			НоваяСтрока.ДлинаКривогоПила = Окр(3.14159 * (R1 + R2 + R3 + R4) / 2);
			
			НоваяСтрока.Обтачивать = Строка.Обтачивать;
			НоваяСтрока.Идентификатор = Строка.Идентификатор;
			НоваяСтрока.НомерИзделия = Элемент.НомерСтроки;
			
		КонецЦикла; // Строка Из СписокМатериалыИзделия
		
		#КонецОбласти
		
		///////////////////////////////////////////////////////////////////ЯЩИКИ//////////////////////////////////////////////////////////////////////////////////////
		
		# Область ДобавлениеЯщиков
		
		СписокЯщикиИзделия = НашеИзделие.СписокЯщики;
		
		Для Каждого Строка Из СписокЯщикиИзделия Цикл
			НоваяСтрока = Объект.СписокЯщики.Добавить();
			
			Попытка
				Выполнить("НоваяСтрока.ГлубинаЯщика = " + Строка.ГлубинаЯщика);
				Выполнить("НоваяСтрока.ПроемЯщика = " + Строка.ПроемЯщика);
				Выполнить("НоваяСтрока.ВысотаЯщика = " + Строка.ВысотаЯщика);
			Исключение
				Текст = "Ошибка при формировании формул для ящиков каталога изделий " + Элемент.Изделие;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			КонецПопытки;
			
			Если ИзделиеШкафКупе Тогда
				
				НоваяСтрока.ВидЯщика = Перечисления.ВидыЯщика.Обычный;
				НоваяСтрока.НаправляющиеНоменклатура = НайтиНаправляющиеНоменклатура(Справочники.НоменклатурныеГруппы.НаправляющиеШариковые35, НоваяСтрока.ГлубинаЯщика);
				НоваяСтрока.ГлубинаЯщика = НоваяСтрока.НаправляющиеНоменклатура.ДлинаДетали;
				
				НоваяСтрока.Номенклатура = Элемент.НоменклатураЛДСП;
				
				Если ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры)
					И ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры.Кромка045_19) Тогда
					
					НоваяСтрока.КромкаНоменклатура = СтруктураПодбираемойПоЦветуНоменклатуры.Кромка045_19;
					
				Иначе
					
					НоваяСтрока.КромкаНоменклатура = Элемент.КромкаЛДСП;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаПоиска = ПараметрыТаблицаФасадов.Получить(Строка.НомерСтроки - 1);//Строка.ИмяЯщика);
				Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
					НоваяСтрока.ВидЯщика = СтрокаПоиска.ВыдвижнойЭлемент;
					НоваяСтрока.НаправляющиеНоменклатура = НайтиНаправляющиеНоменклатура(СтрокаПоиска.МеханизмЭлемента, НоваяСтрока.ГлубинаЯщика);
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.НаправляющиеНоменклатура) Тогда
						Текст = "Внимание! Направляющая не найдена у " + НашеИзделие;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					КонецЕсли;
					НоваяСтрока.ГлубинаЯщика = НоваяСтрока.НаправляющиеНоменклатура.ДлинаДетали;
					
					Если ЗначениеЗаполнено(СтрокаПоиска.ДопЭлемент) Тогда
						ДобавитьКомплектацию(СтрокаПоиска.ДопЭлемент, 1, Элемент.НомерСтроки);					
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.Номенклатура = СтрокаПоиска.НоменклатураЭлемента;
				НоваяСтрока.КромкаНоменклатура = СтрокаПоиска.ТорцовкаЭлемента;
				
			КонецЕсли;
			
			//Количество боковых сторон у обычного ящика 4, а у Тбокса и МТбокса 2 остальные стороны нулевые
			Если НоваяСтрока.ВидЯщика = Перечисления.ВидыЯщика.Обычный Тогда
				Если ЗначениеЗаполнено(НоваяСтрока.НаправляющиеНоменклатура) Тогда
					Если НоваяСтрока.НаправляющиеНоменклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НаправляющиеШариковыеСДоводчиком Тогда
						НоваяСтрока.ШиринаБоковойСтороны = НоваяСтрока.ПроемЯщика - 60; 
						НоваяСтрока.ШиринаДно = НоваяСтрока.ПроемЯщика - 30;
					Иначе
						НоваяСтрока.ШиринаБоковойСтороны = НоваяСтрока.ПроемЯщика - 58; 
						НоваяСтрока.ШиринаДно = НоваяСтрока.ПроемЯщика - 28;
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока.ВысотаБоковойСтороны = НоваяСтрока.ВысотаЯщика;
				НоваяСтрока.ДлинаБоковойСтороны = НоваяСтрока.ГлубинаЯщика;
				НоваяСтрока.ДлинаДно = НоваяСтрока.ГлубинаЯщика - 2;
				//Ребро? [Наличие ребра указываем после заполнения спецификации по желанию]
				//НоваяСтрока.ДлинаРебро =
				//НоваяСтрока.ДноНоменклатура = Элемент.НоменклатураДВП;
			ИначеЕсли НоваяСтрока.ВидЯщика = Перечисления.ВидыЯщика.Тандембокс Тогда
				НоваяСтрока.ШиринаБоковойСтороны = НоваяСтрока.ПроемЯщика - 87;
				НоваяСтрока.ШиринаДно = НоваяСтрока.ПроемЯщика - 75;
				//НоваяСтрока.ДноНоменклатура = Элемент.НоменклатураЛДСП;
				
				Если НоваяСтрока.ВысотаЯщика > 86 И НоваяСтрока.ВысотаЯщика < 151 Тогда 
					НоваяСтрока.ВысотаБоковойСтороны = 70;
				ИначеЕсли НоваяСтрока.ВысотаЯщика > 150 И НоваяСтрока.ВысотаЯщика < 201 Тогда 
					НоваяСтрока.ВысотаБоковойСтороны = 130;
				ИначеЕсли НоваяСтрока.ВысотаЯщика > 200 Тогда 
					НоваяСтрока.ВысотаБоковойСтороны = 190; 
				КонецЕсли;
				
				НоваяСтрока.ДлинаБоковойСтороны = 0;
				НоваяСтрока.ДлинаДно = НоваяСтрока.ГлубинаЯщика - 5;
				
			ИначеЕсли НоваяСтрока.ВидЯщика = Перечисления.ВидыЯщика.Метабокс Тогда
				НоваяСтрока.ШиринаБоковойСтороны = НоваяСтрока.ПроемЯщика - 30; 
				НоваяСтрока.ШиринаДно = НоваяСтрока.ПроемЯщика - 30;
				//НоваяСтрока.ДноНоменклатура = Элемент.НоменклатураЛДСП;
				
				Если НоваяСтрока.ВысотаЯщика > 86 И НоваяСтрока.ВысотаЯщика < 151 Тогда 
					НоваяСтрока.ВысотаБоковойСтороны = 80; 
				ИначеЕсли НоваяСтрока.ВысотаЯщика > 150 И НоваяСтрока.ВысотаЯщика < 201 Тогда 
					НоваяСтрока.ВысотаБоковойСтороны = 120; 
				ИначеЕсли НоваяСтрока.ВысотаЯщика > 200 Тогда 
					НоваяСтрока.ВысотаБоковойСтороны = 200; 
				КонецЕсли;
				
				НоваяСтрока.ДлинаБоковойСтороны = 0;
				НоваяСтрока.ДлинаДно = НоваяСтрока.ГлубинаЯщика - 5;
				
			КонецЕсли;
			
			//Если НЕ ЗначениеЗаполнено(НоваяСтрока.ДноНоменклатура) И ЗначениеЗаполнено(Строка.ДноНоменклатура) Тогда
			
			Если НоваяСтрока.ВидЯщика = Перечисления.ВидыЯщика.Обычный Тогда
				
				Если ЗначениеЗаполнено(Строка.ДноНоменклатура) Тогда
					
					НоваяСтрока.ДноНоменклатура = Строка.ДноНоменклатура;
					
				Иначе
					
					НоваяСтрока.ДноНоменклатура = Элемент.НоменклатураДВП;
					
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока.ДноНоменклатура = Элемент.НоменклатураЛДСП;
				
			КонецЕсли;
			
			НоваяСтрока.ВидФасада = Строка.ВидФасада;
			Если НоваяСтрока.ВидФасада <> "Нет" Тогда
				Попытка
					ШиринаФасад = 0; 
					ВысотаФасад = 0;
					Выполнить("ШиринаФасад = " + Строка.ШиринаФасада);
					Выполнить("ВысотаФасад = " + Строка.ВысотаФасада);
					НоваяСтрока.ШиринаФасад = Окр(ШиринаФасад, 0, РежимОкругления.Окр15как10);
					НоваяСтрока.ВысотаФасад = Окр(ВысотаФасад, 0, РежимОкругления.Окр15как10);
				Исключение
					Текст = "Ошибка при формировании формул для фасадов ящика каталога изделий " + Элемент.Изделие;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки;
				
				Если ИзделиеШкафКупе Тогда
					
					НоваяСтрока.ФасадНоменклатура = Элемент.НоменклатураЛДСП;
					НоваяСтрока.РучкаНоменклатура = Элемент.Ручка;
					НоваяСтрока.КоличествоРучек = 1;
										
					Если ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры)
						И ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры.Кромка2_19) Тогда
						
						НоваяСтрока.КромкаФасадНоменклатура = СтруктураПодбираемойПоЦветуНоменклатуры.Кромка2_19;
						
					Иначе
						
						НоваяСтрока.КромкаФасадНоменклатура = Элемент.КромкаЛДСП;
						
					КонецЕсли;
										
				Иначе
					
					НоваяСтрока.ФасадНоменклатура = СтрокаПоиска.НоменклатураФасада;
					НоваяСтрока.РучкаНоменклатура = СтрокаПоиска.НоменклатураРучки;
					НоваяСтрока.КоличествоРучек = 1;
					НоваяСтрока.КромкаФасадНоменклатура = СтрокаПоиска.ОбрамлениеФасада;
					                                              
					Если СтрокаПоиска.ПовернутьФасад Тогда
						ВременноеЗначение = НоваяСтрока.ШиринаФасад;
						НоваяСтрока.ШиринаФасад = НоваяСтрока.ВысотаФасад;
						НоваяСтрока.ВысотаФасад = ВременноеЗначение;
					КонецЕсли;
					
				КонецЕсли; // ИзделиеШкафКупе
				
			КонецЕсли;
			
			НоваяСтрока.НомерИзделия = Элемент.НомерСтроки;
			НоваяСтрока.КоличествоЯщиков =  Строка.КоличествоЯщиков;
			
		КонецЦикла; //Для Каждого Строка Из СписокЯщикиИзделия Цикл
		
		#КонецОбласти
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомплектацию(Номенклатура, Количество, НомерИзделия) 
	
	НоваяСтрока = Объект.Комплектация.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
	НоваяСтрока.НомерИзделия = НомерИзделия;
	
КонецПроцедуры

&НаСервере
Функция НайтиНаправляющиеНоменклатура(НоменклатурнаяГруппа, ГлубинаЯщика) 
	
	Подразделение = ЛексСервер.ПолучитьОсновноеПроизводство(Объект.Подразделение);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	спрНоменклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК спрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
	|		ПО (НоменклатураПодразделений.Номенклатура = спрНоменклатура.Ссылка)
	|ГДЕ
	|	спрНоменклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|	И спрНоменклатура.ДлинаДетали <= &ДлинаДетали
	|	И НоменклатураПодразделений.Подразделение = &Подразделение
	|	И НоменклатураПодразделений.Доступность
	|
	|УПОРЯДОЧИТЬ ПО
	|	спрНоменклатура.ДлинаДетали УБЫВ";
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("ДлинаДетали", ГлубинаЯщика);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Если Выборка.Количество() > 0 Тогда
		Возврат Выборка[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьТаблицу(Таблица)
	
	Количество = Таблица.Количество();
	Если Количество > 0 Тогда
		Для Индекс = 1 По Количество Цикл
			Элемент = Таблица[Количество - Индекс];
			Если Элемент.НомерИзделия > 0 Тогда
				Таблица.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Управление_внешним_видом
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Возвращает Строку для УведомлениеМатериалПодЗаказ в которой есть рабочий телефон Заведующего Складами Материалов из указанного подразделения
//
// Параметры:
//  Подразделение  - СправочникСсылка.Подразделение, подразделение, в котором ищем ЗаведующегоСкладамиМатериалов
//
// Возвращаемое значение:
//   ТекстУведомления   - Строка, телефон ЗаведующегоСкладамиМатериалов
&НаСервереБезКонтекста
Функция ПолучитьУведомлениеМатериалПодЗаказ(Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Должность", Справочники.Должности.ЗаведующийСкладамиМатериалов);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФизическиеЛица.ТелефонРабочий
	|ИЗ
	|	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ДолжностиСотрудниковСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	ДолжностиСотрудниковСрезПоследних.Подразделение = &Подразделение
	|	И ДолжностиСотрудниковСрезПоследних.Должность = &Должность
	|УПОРЯДОЧИТЬ ПО
	|	ТелефонРабочий УБЫВ";
	
	ТекстУведомления = "Согласуйте по тел. ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		 Телефон = "89622857398"; // телефон Гарбузова
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий(); // может быть только одна запись
		Телефон = Выборка.ТелефонРабочий;
	КонецЕсли;
	
	ТекстУведомления = ТекстУведомления + Телефон;
	
	Возврат ТекстУведомления;
	
КонецФункции // ПолучитьУведомлениеМатериалПодЗаказ()

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьЭлементыФормы(лФорма, лПараметры)
	
	Если ТипЗнч(лПараметры) <> Тип("Структура") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Элементы = лФорма.Элементы;
	
	Если лПараметры.Свойство("ЕстьМатериалПодЗаказ") Тогда
		Элементы.УведомлениеМатериалПодЗаказ.Видимость = лПараметры.ЕстьМатериалПодЗаказ;
	КонецЕсли;
	
	Если лПараметры.Свойство("ЕстьМонтаж") Тогда
		
		Элементы.ДатаМонтажа.Доступность = лПараметры.ЕстьМонтаж;
		Элементы.ДатаОтгрузки.Доступность = НЕ лПараметры.ЕстьМонтаж;
		
	КонецЕсли;
	
	Если лПараметры.Свойство("КонтрагентЧастноеЛицо") Тогда
		
		Элементы.Телефон.Видимость = лПараметры.КонтрагентЧастноеЛицо;
		
	КонецЕсли;
	
	Если лПараметры.Свойство("ПользовательАдминистратор") Тогда
		
		МассивЭлементовАдминистратора = Новый Массив;
		МассивЭлементовАдминистратора.Добавить(Элементы.СтраницаСписокНоменклатуры);
		МассивЭлементовАдминистратора.Добавить(Элементы.СтраницаСкладГотовойПродукции);
		МассивЭлементовАдминистратора.Добавить(Элементы.СтраницаСписокЛистовНоменклатуры);
		
		Если лПараметры.ПользовательАдминистратор Тогда
			Для каждого ЭлементовАдминистратора Из МассивЭлементовАдминистратора Цикл
				ЭлементовАдминистратора.Видимость = Истина;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// дилерские элементы
	Если лПараметры.Свойство("Дилерский") Тогда
		
		МассивДилерскихЭлементов = Новый Массив;
		МассивДилерскихЭлементов.Добавить(Элементы.Офис);
		МассивДилерскихЭлементов.Добавить(Элементы.Телефон);
		МассивДилерскихЭлементов.Добавить(Элементы.Технолог);
		МассивДилерскихЭлементов.Добавить(Элементы.Изделие);
		МассивДилерскихЭлементов.Добавить(Элементы.Договор);
		МассивДилерскихЭлементов.Добавить(Элементы.ГруппаСкидкаДоговора);
		
		Если лПараметры.Дилерский Тогда
			Элементы.Контрагент.Доступность = Ложь;
			Элементы.ГруппаСкидки.Видимость = Истина;
			Для каждого ДилерскийЭлемент Из МассивДилерскихЭлементов Цикл
				ДилерскийЭлемент.Видимость = Ложь;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если лПараметры.Свойство("ШкафКупеПоКаталогу") Тогда
		//ШкафКупеПоКаталогу = Объект.Изделие = ПредопределенноеЗначение("Справочник.Изделия.ШкафКупеПоКаталогу");
		
		Элементы.СтраницаМатериалы.ТолькоПросмотр = лПараметры.ШкафКупеПоКаталогу;
		Элементы.СтраницаЯщики.ТолькоПросмотр = лПараметры.ШкафКупеПоКаталогу;
		Элементы.СтраницаДвери.ТолькоПросмотр = лПараметры.ШкафКупеПоКаталогу;
		Элементы.СтраницаКомплектация.ТолькоПросмотр = лПараметры.ШкафКупеПоКаталогу;
		Элементы.КомплектацияФурнитура.Доступность = НЕ лПараметры.ШкафКупеПоКаталогу;
		Элементы.КомплектацияСотовыеЭлементы.Доступность = НЕ лПараметры.ШкафКупеПоКаталогу;
		Элементы.СписокДверейДобавитьДвери.Доступность = НЕ лПараметры.ШкафКупеПоКаталогу;
		Элементы.Двери.Доступность = НЕ лПараметры.ШкафКупеПоКаталогу;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОбновитьДоступностьКоманд()
	
	Если ТолькоПросмотр Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// { Васильев Александр Леонидович [05.06.2014]
	// ну нахуй ебучее говнище :(
	// } Васильев Александр Леонидович [05.06.2014]
	
	// категории пользователей:
	// 1 Администраторы -- можно всё и всегда
	// 2 Технологи -- редактируют до передачи в цех
	// 3 Дилеры -- только передают в производство
	// 4 Дизайнеры -- детали передают в производство, остальное передают на проверку
	// 5 Логисты -- ставят только проверен логистом
	
	ПроверенЛогистом = НЕ Объект.ЕстьМатериалПодЗаказ ИЛИ ЛексСервер.СпецификацияПроверенаЛогистом(СтатусСпецификации);
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Технолог = УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.Инженер);
	Технолог = Технолог ИЛИ УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.ИнженерТехнолог);
	Технолог = Технолог И ПроверенЛогистом;
	Администратор = УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.Администратор);
	Дизайнер = УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.ДизайнерКонсультант);
	Дизайнер = Дизайнер И ПроверенЛогистом;
	Дилер = УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.Дилер);
	Дилер = Дилер И ПроверенЛогистом;
	Логист = РольДоступна("ПроверкаЛогистомСпецификации");
	
	ДоступныСтатусы = Администратор;
	
	ДизайнерВПроизводство = (Объект.Изделие = Справочники.Изделия.Детали ИЛИ Объект.Изделие = Справочники.Изделия.ДопСоглашение) И Дизайнер;
	ТехнологВПроизводство = Технолог И (СтатусСпецификации = Перечисления.СтатусыСпецификации.Рассчитывается ИЛИ Объект.Изделие = Справочники.Изделия.Переделка ИЛИ Объект.Изделие = Справочники.Изделия.ДопСоглашение);
	
	Ком = КоманднаяПанель.ПодчиненныеЭлементы.Статусы.ПодчиненныеЭлементы;
	
	Ком.ФормаНаПроверку.Доступность = Администратор ИЛИ Дилер ИЛИ Дизайнер;
	Ком.ФормаЕстьЗамечания.Доступность = Администратор ИЛИ Технолог;
	Ком.ФормаПроверенаЛогистом.Доступность = Объект.ЕстьМатериалПодЗаказ И (Администратор ИЛИ Логист);
	Ком.ФормаПроверена.Доступность = Администратор ИЛИ Технолог;
	Ком.ФормаПередатьВПроизводство.Доступность = Администратор ИЛИ ДизайнерВПроизводство ИЛИ Дилер ИЛИ ТехнологВПроизводство;
	
	ТолькоПросмотр = НЕ ЛексСервер.ДоступностьСпецификации(Объект.Ссылка); // помойму не здесь это должно быть...
	Элементы.АдресМонтажа.Доступность = НЕ ТолькоПросмотр;
	
КонецФункции

#КонецОбласти

#Область СобытияФормы
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ВладелецФормы <> Неопределено Тогда
		
		Если ВладелецФормы.Заголовок = "Помощник ввода дополнительного соглашения" Тогда
			
			ПересчитатьСуммуСоСкидкой();
			СтруктураСпецификации = Новый Структура;
			СтруктураСпецификации.Вставить("Спецификация", Объект.Ссылка);
			СтруктураСпецификации.Вставить("СуммаДокумента", СуммаДокументаСоСкидкой);
			ОповеститьОВыборе(СтруктураСпецификации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	//Если ПараметрыЗаписи.ЗаписатьРаскрой Тогда
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ЗаписатьРисункиРаскроя(ПараметрыЗаписи);
		
	КонецЕсли;
	
	ЗаписатьСтрокуРаскроя(ПараметрыЗаписи);
	
	ПересчитатьСуммуСоСкидкой();
	ОбновитьДоступностьКоманд();
	
	Если ЗначениеЗаполнено(СтрокаСообщенияОКратности) Тогда
		
		//ПоказатьОповещениеПользователя("Изменился размер номенклатуры", ,СтрокаСообщенияОКратности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("НовыйСтатус") Тогда
		Документы.Спецификация.УстановитьСтатусСпецификации(ТекущийОбъект.Ссылка, ПараметрыЗаписи.НовыйСтатус);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьМатериалПодЗаказ", ТекущийОбъект.ЕстьМатериалПодЗаказ);
	СтруктураПараметров.Вставить("Подразделение", ТекущийОбъект.Подразделение);
	
	ОбновитьЭлементыФормы(ЭтаФорма, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	СтатусСпецификации = Документы.Спецификация.ПолучитьСтатусСпецификации(Объект.Ссылка);
	
	// команды
	ОбновитьДоступностьКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Свойство("ПовторнаяПроверка") Тогда
		ПовторнаяПроверка = Параметры.ПовторнаяПроверка;
	КонецЕсли;
	
	Если Параметры.Свойство("НомерСтроки") Тогда
		Элементы.СписокМатериалы.ТекущаяСтрока = Параметры.НомерСтроки - 1;
	КонецЕсли;
	
	//Договор
	Договор = Документы.Спецификация.ПолучитьДоговор(Объект.Ссылка);
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = "Введите договор";
	КонецЕсли;
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ПользовательАдминистратор = УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.Администратор);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дилерский", Объект.Дилерский);
	СтруктураПараметров.Вставить("ЕстьМонтаж", Объект.ПакетУслуг = Перечисления.ПакетыУслуг.ДоставкаДоКлиентаИМонтаж);
	СтруктураПараметров.Вставить("ПользовательАдминистратор", ПользовательАдминистратор);
	СтруктураПараметров.Вставить("ЕстьМатериалПодЗаказ", Объект.ЕстьМатериалПодЗаказ);
	СтруктураПараметров.Вставить("ШкафКупеПоКаталогу", Объект.Изделие = Справочники.Изделия.ШкафКупеПоКаталогу);
	
	УведомлениеМатериалПодЗаказ = ПолучитьУведомлениеМатериалПодЗаказ(Объект.Производство);
	ОбновитьЭлементыФормы(ЭтаФорма, СтруктураПараметров);
	
	// { Васильев Александр Леонидович [15.05.2014]
	// с 2014.07.01 можно удалить все упоминания о неноменклатурном материале
	// } Васильев Александр Леонидович [15.05.2014]
	
	ВидОплаты = Перечисления.ВидыОплатыДоговоров.ПолнаяПредоплата; // для расчета скидки
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияНаменованиеПриИзменении(Элемент)
	
	ТекущиеДанные 								= Элементы.Комплектация.ТекущиеДанные;
	ТекущиеДанные.ЕдиницаИзмерения 	= ЛексСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаИзмерения");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ДанныеДляРаскроя", "");
	ПараметрыЗаписи.Вставить("СтрокаКривогоПила", "");
	ПараметрыЗаписи.Вставить("ТаблицаДеталей", "");
	ПараметрыЗаписи.Вставить("ЗаписатьРаскрой", "");
	ПараметрыЗаписи.Вставить("РисунокКривогоПила", "");
	ПараметрыЗаписи.Вставить("РисунокРаскроя", "");

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекущийСтатус = Документы.Спецификация.ПолучитьСтатусСпецификации(Объект.Ссылка);
		Если Модифицированность 
			И (ТекущийСтатус = Перечисления.СтатусыСпецификации.ПроверенТехнологом ИЛИ ТекущийСтатус = Перечисления.СтатусыСпецификации.ПроверенЛогистом) 
			И ТекущийОбъект.Изделие <> Справочники.Изделия.ШкафКупеПоКаталогу Тогда
			Документы.Спецификация.УстановитьСтатусСпецификации(Объект.Ссылка, Перечисления.СтатусыСпецификации.Сохранен);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийОбъект.ЭтоКухня = Ложь;
	Для каждого ИзделиеПоКаталогу Из ТекущийОбъект.СписокИзделийПоКаталогу Цикл
		Если ИзделиеПоКаталогу.Изделие.ВидИзделия = Перечисления.ВидыИзделийПоКаталогу.КухняВерхний ИЛИ ИзделиеПоКаталогу.Изделие.ВидИзделия = Перечисления.ВидыИзделийПоКаталогу.КухняНижний Тогда
			ТекущийОбъект.ЭтоКухня = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Сегодня = ТекущаяДата();
	Если ДеньНедели(Сегодня) <> 7 Тогда
		ТекущийОбъект.Дата = Сегодня;
	Иначе
		ТекущийОбъект.Дата = КонецДня(Сегодня) + 1;
	КонецЕсли;
	
	ДатаОтгрузки = ТекущийОбъект.ДатаОтгрузки;
	ДатаДокумента = НачалоДня(ТекущийОбъект.Дата);
	
	ЕстьВоскресеньеОтСоздания = ДеньНедели(ДатаДокумента) > ДеньНедели(ДатаОтгрузки);
	
	РазностьВДнях = (ДатаОтгрузки - ДатаДокумента) / 86400;
	Если РазностьВДнях < (3 + ЕстьВоскресеньеОтСоздания + ТекущийОбъект.ЭтоКухня) Тогда
		// Это вроде как быстрый заказ
		ТекущийОбъект.Быстрый = Истина;
		ТекущийОбъект.ДатаИзготовления = ДатаДокумента;
		ТекущийОбъект.ДатаОтгрузки = ДатаДокумента;
	Иначе
		// А это типа обычный заказ
		
		ТекущийОбъект.Быстрый = Ложь;
		
		КоличествоДней = 1 + Число(ТекущийОбъект.ЭтоКухня);
		ДатаИзготовления = ДатаОтгрузки - КоличествоДней * 86400;
		
		ЕстьВоскресеньеОтИзготовления = ДеньНедели(ДатаИзготовления) > ДеньНедели(ДатаОтгрузки);
		
		Если ДеньНедели(ДатаИзготовления) = 7 ИЛИ ЕстьВоскресеньеОтИзготовления Тогда
			ДатаИзготовления = ДатаИзготовления - 86400;
		КонецЕсли;
		
		ТекущийОбъект.ДатаИзготовления = ДатаИзготовления;
		
	КонецЕсли;
	
	ТекущийОбъект.Срочный = ТекущийОбъект.Изделие = Справочники.Изделия.Детали И ТекущийОбъект.ДатаИзготовления = ТекущийОбъект.ДатаОтгрузки;
	
	Ошибки = Неопределено;
	
	ЗаполнитьМатериалы(ТекущийОбъект, Ошибки);
	ЗаполнитьУслуги(ТекущийОбъект);
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	// { Васильев Александр Леонидович [25.06.2014]
	// Перенести проверку в ОбработкаПроверкиЗаполнения
	Отказ = Отказ ИЛИ ПроверитьДоступностьПодразделениямНаСервере(ТекущийОбъект.СписокНоменклатуры, ТекущийОбъект.Подразделение);
	// } Васильев Александр Леонидович [25.06.2014]
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураРаскроя = РегистрыСведений.РаскройДеталей.ПолучитьСтрокуРаскроя(ТекущийОбъект);
	Если ТипЗнч(СтруктураРаскроя) = Тип("Структура") Тогда
		
		ТекущийОбъект.СписокЛистовНоменклатуры.Загрузить(СтруктураРаскроя.ТаблицаЛистовНоменклатуры);
		ПараметрыЗаписи.Вставить("ДанныеДляРаскроя", СтруктураРаскроя.ДанныеДляРаскроя);
		ПараметрыЗаписи.Вставить("СтрокаКривогоПила", СтруктураРаскроя.СтрокаКривогоПила);
		ПараметрыЗаписи.Вставить("ТаблицаДеталей", СтруктураРаскроя.ТаблицаДеталей);
		ПараметрыЗаписи.Вставить("ЗаписатьРаскрой", Модифицированность);
		ПараметрыЗаписи.Вставить("РисунокКривогоПила", "");
		ПараметрыЗаписи.Вставить("РисунокРаскроя", "");
		
	Иначе
		
		Отказ = Истина;
		Сообщить(?(ЗначениеЗаполнено(СтруктураРаскроя), СтруктураРаскроя, "Ошибка раскроя - ошибка неопределена"), СтатусСообщения.ОченьВажное);
		Возврат;
		
	КонецЕсли;
	
	ПередатьВПроизводство = ПараметрыЗаписи.Свойство("ПередатьВПроизводство") И ПараметрыЗаписи.ПередатьВПроизводство;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПередатьВПроизводство", ПередатьВПроизводство);
	
	УвеличитьМатериалыДоЦелыхЛистов(ТекущийОбъект);
	
	ЗаполнитьСтоимость(ТекущийОбъект); // тут происходит группировка таблица
	ЗаполнитьТаблицуСкладГотовойПродукции(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбновитьСкидки();
	Иначе
		КонтрагентЧастноеЛицо = Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ЧастноеЛицо");
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("КонтрагентЧастноеЛицо", КонтрагентЧастноеЛицо);
		ОбновитьЭлементыФормы(ЭтаФорма, СтруктураПараметров);
	КонецЕсли;
	
	Если НЕ Объект.Дилерский Тогда
		ПересчитатьСуммуСоСкидкой();
	КонецЕсли;
	
	Если ПовторнаяПроверка Тогда
		ТолькоПросмотрФормы = ТолькоПросмотр ИЛИ Элементы.СтраницаМатериалы.ТолькоПросмотр;
		ТаблицаДляФормы = Объект.СписокМатериалы;
		ОткрытьФормуПодбора("ФормаДетали", ТаблицаДляФормы, Элементы.СписокМатериалы.ТекущиеДанные, Элементы.СписокМатериалы);
	КонецЕсли;
	
	//Нужно для подбора всякой ерунды по цвету
	//СтруктураПодбираемойПоЦветуНоменклатуры = Новый Структура;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.Договор") Тогда 
		
		Договор = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Двери") Тогда
		
		СтрокиДверей = Объект.СписокДверей.НайтиСтроки(Новый Структура("Двери", ВыбранноеЗначение));
		Если СтрокиДверей.Количество() > 0 Тогда
			Модифицированность = Истина;
		Иначе
			НоваяСтрока = Объект.СписокДверей.Добавить();
			НоваяСтрока.Двери = ОпределитьДверь(ВыбранноеЗначение, Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Команды
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаСервере
Функция ПоказатьМатериалПодЗаказ()
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_Заказ";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Макет = Документы.Спецификация.ПолучитьМакет("МатериалПодЗаказ");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаНоменклатуры = Макет.ПолучитьОбласть("ШапкаНоменклатуры");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ОбластьШапка.Параметры.СпецификацияНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.Номер);
	ТабДок.Вывести(ОбластьШапка);
	ТабДок.Вывести(ОбластьШапкаНоменклатуры);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСпискаНоменклатуры", Объект.СписокНоменклатуры.Выгрузить());
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Регион", Объект.Производство.Регион);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаСпискаНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаСпискаНоменклатуры.Количество,
	|	ТаблицаСпискаНоменклатуры.ЕдиницаИзмерения,
	|	ТаблицаСпискаНоменклатуры.Цена,
	|	ТаблицаСпискаНоменклатуры.РозничнаяСтоимость КАК Стоимость,
	|	ТаблицаСпискаНоменклатуры.ПодЗаказ
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	&ТаблицаСпискаНоменклатуры КАК ТаблицаСпискаНоменклатуры
	|ГДЕ
	|	ТаблицаСпискаНоменклатуры.ПодЗаказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура,
	|	втНоменклатура.Количество,
	|	втНоменклатура.ЕдиницаИзмерения,
	|	втНоменклатура.Цена,
	|	втНоменклатура.Стоимость,
	|	ЦеныНоменклатурыСрезПоследних.Поставщик КАК Поставщик
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Регион = &Регион
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							т.Номенклатура
	|						ИЗ
	|							втНоменклатура КАК т)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО втНоменклатура.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить();
	НомерСтроки = 1;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		ТабДок.Вывести(ОбластьСтрока);
		НомерСтроки = 1 + НомерСтроки;
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура НаПроверкуИнженеру(Команда)
	
	Если Объект.ЕстьМатериалПодЗаказ Тогда
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыСпецификации.ПроверяетсяЛогистом");
	Иначе 
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыСпецификации.ПроверяетсяТехнологом");
	КонецЕсли;
	
	СохранитьИИзменитьСтатус(НовыйСтатус);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьЗамечания(Команда)
	
	Если Объект.ЗамечанияИнженера = "" Тогда
		Текст = "Заполните замечания по спецификации";
		Поле = "Объект.ЗамечанияИнженера";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ,Поле);
	Иначе
		СохранитьИИзменитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыСпецификации.ЕстьОшибки"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьВПроизводство(Команда)
	
	// { Васильев Александр Леонидович [13.02.2014]
	// по идее, передача в производство
	// происходит вместе с проведением спецификации
	// тогда должна сработать ОбработкаПроверкиЗаполнения
	// } Васильев Александр Леонидович [13.02.2014]
	
	ПараметрыЗаписиДокумента = ПередатьВПроизводствоНаСервере();
	
	Если ПараметрыЗаписиДокумента <> Неопределено Тогда
		
		ПараметрыЗаписиДокумента = ЗаписатьРисункиРаскроя(ПараметрыЗаписиДокумента);
		ЗаписатьСтрокуРаскроя(ПараметрыЗаписиДокумента);
		
		Если Объект.Проведен Тогда
			
			Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередатьВПроизводствоНаСервере()
	
	Если НЕ Объект.Дилерский И НЕ ЗначениеЗаполнено(Объект.Технолог) Тогда
		//Nrn. //Дилеры в производство передают сами. Тут и случается жопа
		Объект.Технолог = ПользователиКлиентСервер.ТекущийПользователь().ФизическоеЛицо;
	КонецЕсли; 
		
	Если Объект.Дилерский И Объект.ЕстьМатериалПодЗаказ И НЕ ЛексСервер.СпецификацияПроверенаЛогистом(СтатусСпецификации) Тогда
		ТекстСообщения = "В спецификации есть материал под заказ, согласуйте с логистом";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("ПередатьВПроизводство", Истина);
	
	Записать(ПараметрыЗаписи);
	
	ЗафиксироватьТранзакцию();
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

&НаКлиенте
Процедура ПроверенаТехнологом(Команда)
	
	СохранитьИИзменитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыСпецификации.ПроверенТехнологом"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверенаЛогистом(Команда)
	
	НовыйСтаутс = ПредопределенноеЗначение("Перечисление.СтатусыСпецификации.ПроверенЛогистом");
	СохранитьИИзменитьСтатус(НовыйСтаутс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	Собрать();
	
КонецПроцедуры

&НаКлиенте
Процедура Фурнитура(Команда)
	
	СчетчикЛДСП = 0;
	КоличествоНужныхРадиусов = 0;
	
	Для каждого Строка Из Объект.СписокМатериалы Цикл
		
		Материал = Строка.Материал;
		СуммаРадиусов = 0;
		ЛДСП = Найти(Материал, "ЛДСП") <> 0;
		СчетчикЛДСП = СчетчикЛДСП + Строка.Количество * ЛДСП;
		КоличествоНужныхРадиусов = ?(ЛДСП И (Строка.РадиусЛевоВерх >= 150 ИЛИ Строка.РадиусЛевоНиз >= 150 ИЛИ Строка.РадиусПравоВерх >= 150 ИЛИ Строка.РадиусПравоНиз >= 150), КоличествоНужныхРадиусов + Строка.Количество, КоличествоНужныхРадиусов);
		
	КонецЦикла;
	
	КоличествоЯщиков = 0;
	
	Для каждого Строка Из Объект.СписокЯщики Цикл
		
		КоличествоЯщиков = КоличествоЯщиков + Строка.КоличествоЯщиков;
		
	КонецЦикла;
	
	Строка = "";
	ПараметрыФурнитуры = ПосчитатьКоличествоКрепежа();
	
	ПараметрыФурнитуры.Вставить("КоличествоДеталейЛДСП", СчетчикЛДСП);
	ПараметрыФурнитуры.Вставить("КоличествоЯщиков", КоличествоЯщиков);
	ПараметрыФурнитуры.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФурнитуры.Вставить("КоличествоНужныхРадиусов", КоличествоНужныхРадиусов);
	
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаФурнитура", ПараметрыФурнитуры, Элементы.Комплектация);
	
КонецПроцедуры

&НаСервере
Функция ПосчитатьКоличествоКрепежа()
	
	Шуруп16х35черный = 0;
	Шуруп40х35черный = 0;
	Дюбель6х40черный = 0;
	Шуруп30х35черный = 0;
	Шуруп16х35хром = 0;
	Шуруп40х35золото = 0;
	Шуруп16х35золото = 0;
	Шуруп40х35хром = 0;
	ФлянецХромированный = 0;
	Евровинт50 = 0;
	
	ТЗ = Объект.Комплектация.Выгрузить();
	ТЗ.Свернуть("Номенклатура", "Количество");
	
	Для каждого Строка Из ТЗ Цикл
		
		Номенклатура = Справочники.Номенклатура;
		Шуруп16х35черный = ?(Строка.Номенклатура = Номенклатура.Шуруп16х35черный, Строка.Количество, Шуруп16х35черный);
		Шуруп40х35черный = ?(Строка.Номенклатура = Номенклатура.Шуруп40х35черный, Строка.Количество, Шуруп40х35черный);
		Дюбель6х40черный = ?(Строка.Номенклатура = Номенклатура.Дюбель6х40черный, Строка.Количество, Дюбель6х40черный);
		Шуруп30х35черный = ?(Строка.Номенклатура = Номенклатура.Шуруп30х35черный, Строка.Количество, Шуруп30х35черный);
		Шуруп16х35хром = ?(Строка.Номенклатура = Номенклатура.Шуруп16х35хром, Строка.Количество, Шуруп16х35хром);
		Шуруп40х35золото = ?(Строка.Номенклатура = Номенклатура.Шуруп40х35золото, Строка.Количество, Шуруп40х35золото);
		Шуруп16х35золото = ?(Строка.Номенклатура = Номенклатура.Шуруп16х35золото, Строка.Количество, Шуруп16х35золото);
		Шуруп40х35хром = ?(Строка.Номенклатура = Номенклатура.Шуруп40х35хром, Строка.Количество, Шуруп40х35хром);
		Евровинт50 = ?(Строка.Номенклатура = Номенклатура.Евровинт50, Строка.Количество, Евровинт50);
		ФлянецХромированный = ?(Строка.Номенклатура = Номенклатура.ФлянецХромированный, Строка.Количество, ФлянецХромированный);
		
	КонецЦикла;
	
	ПараметрыФурнитуры = Новый Структура;
	
	ПараметрыФурнитуры.Вставить("Шуруп16х35черный", Шуруп16х35черный);
	ПараметрыФурнитуры.Вставить("Шуруп40х35черный", Шуруп40х35черный);
	ПараметрыФурнитуры.Вставить("Дюбель6х40черный", Дюбель6х40черный);
	ПараметрыФурнитуры.Вставить("Шуруп30х35черный", Шуруп30х35черный);
	ПараметрыФурнитуры.Вставить("Шуруп16х35хром", Шуруп16х35хром);
	ПараметрыФурнитуры.Вставить("Шуруп40х35золото", Шуруп40х35золото);
	ПараметрыФурнитуры.Вставить("Шуруп16х35золото", Шуруп16х35золото);
	ПараметрыФурнитуры.Вставить("Шуруп40х35хром", Шуруп40х35хром);
	ПараметрыФурнитуры.Вставить("Евровинт50", Евровинт50);
	ПараметрыФурнитуры.Вставить("ФлянецХромированный", ФлянецХромированный);
	
	Возврат ПараметрыФурнитуры;
	
КонецФункции // ПосчитатьКоличествоКрпежа()

&НаКлиенте
Процедура СотовыеЭлементы(Команда)
	
	АдресТаблицы 			= ПолучитьАдресТаблицы();
	ПараметрыПодбора 	= Новый Структура;
	ПараметрыПодбора.Вставить("АдресТаблицы", АдресТаблицы);
	ПараметрыПодбора.Вставить("Подразделение", Объект.Подразделение);
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаСотовыеЭлементы", ПараметрыПодбора, Элементы.Комплектация);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКаталогу(Команда = Неопределено)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Табличные части будут изменены." + Символы.ПС + "Продолжить?" ;
	
	Если (Объект.СписокМатериалы.Количество() > 0 ИЛИ Объект.СписокЯщики.Количество() > 0 ИЛИ Объект.СписокНоменклатуры.Количество() > 0) 
		И Вопрос(Текст, Режим, 0) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	//Очистка Табличных частей от данных полученных ранее
	ПерезаполнитьТаблицу(Объект.СписокМатериалы);
	ПерезаполнитьТаблицу(Объект.СписокЯщики);
	ПерезаполнитьТаблицу(Объект.Комплектация);
	
	Объект.СписокНоменклатуры.Очистить();
	ОбработкаИзделийПоКаталогу();
	
КонецПроцедуры

#КонецОбласти

#Область События_реквизитов_шапки
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ДатаМонтажаПриИзменении(Элемент)
	
	УстановитьДатуОтгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетУслугПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура;
	ЕстьМонтаж = Объект.ПакетУслуг = ПредопределенноеЗначение("Перечисление.ПакетыУслуг.ДоставкаДоКлиентаИМонтаж");
	СтруктураПараметров.Вставить("ЕстьМонтаж", ЕстьМонтаж);
	ОбновитьЭлементыФормы(ЭтаФорма, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	ПересчитатьСуммуСоСкидкой();
	
КонецПроцедуры

//&НаКлиенте
//Процедура КонтрагентПриИзменении(Элемент)
//	
//	ПересчитатьСуммуСоСкидкой();
//	
//КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ПредопределенноеЗначение("Справочник.Контрагенты.ЧастноеЛицо"));
	
	ВыбранныйКонтрагент = ОткрытьФормуМодально("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы);
	Если ВыбранныйКонтрагент <> Неопределено Тогда
		Объект.Контрагент = ВыбранныйКонтрагент;
		КонтрагентЧастноеЛицо = Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ЧастноеЛицо");
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("КонтрагентЧастноеЛицо", КонтрагентЧастноеЛицо);
		ОбновитьЭлементыФормы(ЭтаФорма, СтруктураПараметров);
		ОбновитьСкидки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМонтажаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		ТекстСообщения = "Выберите подразделение!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Подразделение", "Объект");
		
	Иначе
		
		ПараметрыАдреса = Новый Структура;
		ПараметрыАдреса.Вставить("Подразделение", Объект.Подразделение);
		
		
		Если Объект.АдресМонтажа = "Введите адрес" Тогда
			
			СтарыйАдрес = "";
			
		Иначе
			
			СтарыйАдрес = Объект.АдресМонтажа;
			
		КонецЕсли;
		
		ПараметрыАдреса.Вставить("Офис", Объект.Офис);
		ПараметрыАдреса.Вставить("СтарыйАдрес", СтарыйАдрес);
		СтруктураАдреса = ОткрытьФормуМодально("ОбщаяФорма.ФормаВводаАдреса", ПараметрыАдреса, ЭтаФорма);
		
		Если ТипЗнч(СтруктураАдреса) = Тип("Структура") Тогда
			
			Объект.АдресМонтажа = СтруктураАдреса.Адрес;
			Объект.Километраж = СтруктураАдреса.Километраж;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаМонтажаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Офис) Тогда
		
		КонецПериода = Объект.Дата + 30 * 86400;
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Офис", Объект.Офис);
		ПараметрыФормы.Вставить("НачалоПериода", Объект.Дата + 3 * 86400);
		ПараметрыФормы.Вставить("КонецПериода", КонецПериода);
		
		ВыбраннаяДата = ОткрытьФормуМодально("Документ.Спецификация.Форма.ФормаВыбораДатыМонтажа", ПараметрыФормы);
		Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
			Объект.ДатаМонтажа = ВыбраннаяДата;
			УстановитьДатуОтгрузки();
		КонецЕсли;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен офис";
		Сообщение.Поле = "Объект.Офис";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНажатие(Элемент, СтандартнаяОбработка)
	
	Если Договор = "Введите договор" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.Договор.Форма.ФормаДокумента",ПараметрыЗаполнения, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбновитьСкидки();
	Объект.Производство = ЛексСервер.ПолучитьОсновноеПроизводство(Объект.Подразделение);
	УведомлениеМатериалПодЗаказ = ПолучитьУведомлениеМатериалПодЗаказ(Объект.Производство);
	
КонецПроцедуры

&НаКлиенте
Процедура ОфисПриИзменении(Элемент)
	
	МенятьАдрес = ПроверитьГородОфисаНаСервере(Объект.Ссылка, Объект.Офис);
	
	Если МенятьАдрес Тогда
		
		Объект.АдресМонтажа = "Введите адрес";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьГородОфисаНаСервере(Ссылка, СтарыйОфис)
	
	Возврат Ссылка.Офис.Город <> СтарыйОфис.Город;;
	
КонецФункции

&НаКлиенте
Процедура ИзделиеПриИзменении(Элемент)
	
	ШкафКупеПоКаталогу = ПредопределенноеЗначение("Справочник.Изделия.ШкафКупеПоКаталогу");
	
	Если Объект.Изделие = ШкафКупеПоКаталогу
		И (Объект.СписокМатериалы.Количество() > 0 ИЛИ Объект.СписокЯщики.Количество() > 0
		ИЛИ Объект.Комплектация.Количество() > 0 ИЛИ Объект.СписокДверей.Количество() > 0 ИЛИ Объект.СписокИзделийПоКаталогу.Количество() > 0) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "Табличные части будут очищены." + Символы.ПС + "Продолжить?" + Символы.ПС + "(В случае отказа Изделие будет - Детали)";
		
		Если Вопрос(Текст, Режим, 0) = КодВозвратаДиалога.Нет Тогда
			Объект.Изделие = ПредопределенноеЗначение("Справочник.Изделия.Детали");
		Иначе
			Объект.СписокМатериалы.Очистить();
			Объект.СписокЯщики.Очистить();
			Объект.Комплектация.Очистить();
			Объект.СписокДверей.Очистить();
			Объект.СписокИзделийПоКаталогу.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ШкафКупеПоКаталогу", Объект.Изделие = ШкафКупеПоКаталогу);
	ОбновитьЭлементыФормы(ЭтаФорма, СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область События_таблицы_Материалы
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ СПИСОК ЛДСП

&НаКлиенте
Процедура СписокМатериалыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("АдресХранилища") Тогда
			ЗагрузитьТабличнуюЧасть(ВыбранноеЗначение.АдресХранилища, Элемент.Имя);
		КонецЕсли;
		
		Если ВыбранноеЗначение.Свойство("Строка3DРедактор") Тогда
			Объект.Строка3DРедактор = ВыбранноеЗначение.Строка3DРедактор;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Собрать();
	
КонецПроцедуры

#КонецОбласти

#Область События_таблицы_Ящики
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ СПИСОК ЯЩИКИ

&НаКлиенте
Процедура СписокЯщикиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗагрузитьТабличнуюЧасть(ВыбранноеЗначение, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЯщикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Собрать();
	
КонецПроцедуры

#КонецОбласти

#Область События_таблицы_Двери
//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ СПИСОК Двери

&НаКлиенте
Процедура ДобавитьНовуюДверь(Команда)
	
	ЗаписатьПустуюСпецификацию();
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Спецификация", Объект.Ссылка));
	Форма = ПолучитьФорму("Справочник.Двери.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДвериСоСпецификации(Команда)
	
	//ПараметрыФормы = Новый Структура("Спецификация", Объект.Ссылка);
	Форма = ПолучитьФорму("Справочник.Двери.Форма.ФормаВыбора", , ЭтаФорма);
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура СписокДверейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗаписатьПустуюСпецификацию();
	
	СтандартнаяОбработка = Ложь;
	СсылкаНаДверь = Элемент.ТекущиеДанные.Двери;
	ТолькоПросмотрФормы = ТолькоПросмотр ИЛИ Элементы.СтраницаДвери.ТолькоПросмотр;
	ПараметрыФормы = Новый Структура("Ключ", СсылкаНаДверь);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотрФормы);
	ОткрытьФорму("Справочник.Двери.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьДверь(Дверь, Спецификация)
		
	Если Дверь.Спецификация <> Спецификация Тогда
		
		ОбъектДвери = Дверь.ПолучитьОбъект();
		НашаДверь = ОбъектДвери.Скопировать();
		НашаДверь.Спецификация = Спецификация;
		НашаДверь.Записать();
		
		Дверь = НашаДверь.Ссылка;
		
	КонецЕсли;
	
	Возврат Дверь;
	
КонецФункции 

#КонецОбласти

#Область События_таблицы_ИзделияПоКаталогу
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Изделия по каталогу

&НаКлиенте
Процедура ИзделияПоКаталогуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Собрать();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзделияПоКаталогуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗагрузитьТабличнуюЧасть(ВыбранноеЗначение, Элемент.Имя);
	ЗаполнитьПоКаталогу();
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	ДобавитьТабЧасть(ВыбранноеЗначение.АдресТаблицы, ВыбранноеЗначение.Таблица);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьТабЧасть(АдресТаблицы, Таблица)
	
	ТЗ 									= ПолучитьИзВременногоХранилища(АдресТаблицы);
	СправочникНоменклатуры 	= Справочники.Номенклатура;
	СправочникГрупп 				= Справочники.НоменклатурныеГруппы;
	МассивСтрок 						= Новый Массив;
	
	Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого Строка Из Объект.Комплектация Цикл
			
			НужнаяНоменклатурнаяГруппа 	= Ложь;
			Номенклатура 							= Строка.Номенклатура;
			Группа 										= Номенклатура.НоменклатурнаяГруппа;
			
			Если ЗначениеЗаполнено(Группа) Тогда
				
				Если Таблица = "СотовыеЭлементы" Тогда
					
					НужнаяНоменклатурнаяГруппа = Группа = СправочникГрупп.СотовыеПолки ИЛИ Группа = СправочникГрупп.СотовыеЭлементы 
					или Группа = СправочникГрупп.Корзины ИЛИ Группа.ПринадлежитЭлементу(СправочникГрупп.Направляющие);
					
				ИначеЕсли Таблица = "Фурнитура" Тогда
					
					//Можно будет внести уголки, подумаем
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Таблица = "СотовыеЭлементы" Тогда
				
				Предопределенный = Номенклатура = СправочникНоменклатуры.Прищепки ИЛИ Номенклатура = СправочникНоменклатуры.Наконечник 
				или Номенклатура = СправочникНоменклатуры.Клипсы ИЛИ Номенклатура = СправочникНоменклатуры.Карманы 
				или Номенклатура = СправочникНоменклатуры.КронштейнДляСотовойПолки;
				
			ИначеЕсли Таблица = "Фурнитура" Тогда
				
				Предопределенный = Номенклатура = СправочникНоменклатуры.Шуруп40х35золото ИЛИ Номенклатура = СправочникНоменклатуры.Шуруп16х35золото 
				или Номенклатура = СправочникНоменклатуры.Шуруп40х35хром ИЛИ Номенклатура = СправочникНоменклатуры.Шуруп16х35хром
				или Номенклатура = СправочникНоменклатуры.Евровинт50 ИЛИ Номенклатура = СправочникНоменклатуры.ФлянецХромированный
				или Номенклатура = СправочникНоменклатуры.Шуруп16х35черный ИЛИ Номенклатура = СправочникНоменклатуры.Шуруп30х35черный
				или Номенклатура = СправочникНоменклатуры.Шуруп30х35черный ИЛИ Номенклатура = СправочникНоменклатуры.Дюбель6х40черный;
				
			КонецЕсли;
			
			Если Предопределенный ИЛИ НужнаяНоменклатурнаяГруппа Тогда
				
				МассивСтрок.Добавить(Строка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого Элемент Из МассивСтрок Цикл
			
			Объект.Комплектация.Удалить(Элемент);
			
		КонецЦикла;
		
		Для каждого Строчка Из ТЗ Цикл
			
			НоваяСтрока 								= Объект.Комплектация.Добавить();
			НоваяСтрока.Номенклатура 			= Строчка.Номенклатура;
			НоваяСтрока.Количество 			= Строчка.Количество;
			НоваяСтрока.ЕдиницаИзмерения 	= Строчка.ЕдиницаИзмерения;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
	//	
	//	Модифицированность 					= Истина;
	//	СписокОбъектовКомплектации 		= Объект.Комплектация.Выгрузить();
	//	
	//	Для каждого Строка Из ТЗ Цикл
	//		
	//		СчетчикСовпадений = 0;
	//		
	//		Для Каждого СтрокаКомплектации Из СписокОбъектовКомплектации Цикл
	//			
	//			Если СтрокаКомплектации.Номенклатура = Строка.Номенклатура Тогда 
	//				
	//				СтрокаКомплектации.Количество 	= Строка.Количество;
	//				СчетчикСовпадений 					= СчетчикСовпадений +1;
	//				
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//		Если СчетчикСовпадений = 0 Тогда
	//			
	//			НоваяСтрока 							= Объект.Комплектация.Добавить();
	//			НоваяСтрока.Номенклатура 		= Строка.Номенклатура;
	//			НоваяСтрока.Количество 		= Строка.Количество;
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
КонецФункции // ДобавитьТабЧасть()

&НаКлиенте
Процедура КомплектацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.Комплектация.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			
			
			//Дробный = ЛексСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Дробный");
			//
			//Если Дробный Тогда
			//	
			//	МаксимальныйРазмерДетали = ЛексСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ДлинаДетали");
			//	
			//	Если ТекущиеДанные.Количество > МаксимальныйРазмерДетали Тогда
			//		
			//		Элементы.Комплектация.ТекущиеДанные.Количество = МаксимальныйРазмерДетали;
			//		
			//	КонецЕсли;
			//	
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДоступностьПодразделениямНаСервере(СписокНоменклатуры, фПодразделение)
	
	фПроизводство = ЛексСервер.ПолучитьОсновноеПроизводство(фПодразделение);
	
	Отказ = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СписокНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	&СписокНоменклатуры КАК СписокНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокНоменклатуры.Номенклатура
	|ИЗ
	|	СписокНоменклатуры КАК СписокНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
	|		ПО (НоменклатураПодразделений.Подразделение = &Подразделение)
	|			И СписокНоменклатуры.Номенклатура = НоменклатураПодразделений.Номенклатура
	|ГДЕ
	|	НЕ ЕСТЬNULL(НоменклатураПодразделений.Доступность, ЛОЖЬ)
	|	И СписокНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)";
	
	Запрос.УстановитьПараметр("Подразделение", фПроизводство);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Номенклатура "+ ВыборкаДетальныеЗаписи.Номенклатура + " не доступна для подразделения " + фПроизводство;
		Сообщение.Поле = "" + ВыборкаДетальныеЗаписи.Номенклатура;
		Сообщение.Сообщить();
		Отказ = Истина;
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

#КонецОбласти

#Область Работа_с_3D_редатором

&НаКлиенте
Функция СформироватьXMLДляФлэш()
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура УведомлениеМатериалПодЗаказНажатие(Элемент, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ТабДок = ПоказатьМатериалПодЗаказ();
	ТабДок.Показать("Материалы под заказ");
КонецПроцедуры

#КонецОбласти

