&НаСервере
Перем ТаблицаДеталиЯщиков;

#Область Заполнение_документа_при_записи

&НаСервере
Функция ЗаполнитьХлыстовойМатериал(фнОбъект)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("тзНоменклатура", фнОбъект.СписокНоменклатуры.Выгрузить());
	Запрос.УстановитьПараметр("Подразделение", фнОбъект.Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(тзНоменклатура.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	тзНоменклатура.КоличествоТребуется
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	&тзНоменклатура КАК тзНоменклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПодразделений.Номенклатура,
	|	НоменклатураПодразделений.ОкруглятьДоЛистов
	|ПОМЕСТИТЬ рсНомПодразделений
	|ИЗ
	|	РегистрСведений.НоменклатураПодразделений.СрезПоследних(,Подразделение = &Подразделение) КАК НоменклатураПодразделений
	|ГДЕ
	|	НоменклатураПодразделений.Номенклатура В
	|			(ВЫБРАТЬ
	|				т.Номенклатура
	|			ИЗ
	|				втНоменклатура КАК т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	втНоменклатура.Номенклатура КАК Кратность,
	|	втНоменклатура.КоличествоТребуется,
	|	ЕСТЬNULL(рсНомПодразделений.ОкруглятьДоЛистов, ИСТИНА) КАК ОкруглятьДоЛистов
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ рсНомПодразделений КАК рсНомПодразделений
	|		ПО втНоменклатура.Номенклатура = рсНомПодразделений.Номенклатура
	|ГДЕ
	|	втНоменклатура.Номенклатура.НоменклатурнаяГруппа.ВидМатериала = ЗНАЧЕНИЕ(Перечисление.ВидыМатериалов.Хлыстовой)
	|	И втНоменклатура.Номенклатура.Кратность > 0
	|ИТОГИ
	|	МАКСИМУМ(Кратность),
	|	МАКСИМУМ(ОкруглятьДоЛистов)
	|ПО
	|	Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		МассивОтрезков = Новый Массив;
		
		ОсновнаяПоСкладу = ЛексСервер.ПолучитьОсновнуюПоСкладу(фнОбъект.Подразделение, ВыборкаНоменклатура.Номенклатура);
		Если НЕ ЗначениеЗаполнено(ОсновнаяПоСкладу)
			ИЛИ ОсновнаяПоСкладу.Базовый Тогда
			ДлинаХлыста = ВыборкаНоменклатура.Номенклатура.ДлинаДетали;
		Иначе
			ДлинаХлыста = ОсновнаяПоСкладу.КоэффициентБазовых * 1000;
		КонецЕсли;
		
		Кратность = ВыборкаНоменклатура.Номенклатура.Кратность * 1000;
		КоличествоДобавления = 0;
		
		ДилерскийТрек = Ложь;
		НомГруппа = ВыборкаНоменклатура.Номенклатура.НоменклатурнаяГруппа;
		Спр = Справочники.НоменклатурныеГруппы;
		
		Если фнОбъект.Дилерский Тогда
			
			Если НомГруппа = Спр.ТрекВерхний
				ИЛИ НомГруппа = Спр.ТрекНижний
				ИЛИ НомГруппа = Спр.ТрекОднополосныйВерхний
				ИЛИ НомГруппа = Спр.ТрекОднополосныйНижний
				ИЛИ НомГруппа = Спр.ТрекНаПоворотнуюСистему Тогда
				
				ДилерскийТрек = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Выборка = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			Отрезок = Выборка.КоличествоТребуется * 1000;
			
			Если Отрезок > ДлинаХлыста Тогда
				
				КоличествоЦелыхКусков = Цел(Отрезок/ДлинаХлыста);
				Отрезок = Отрезок % ДлинаХлыста;
				
				Отбор = Новый Структура();
				Отбор.Вставить("Номенклатура",Выборка.Номенклатура);
				Отбор.Вставить("КоличествоТребуется",Выборка.КоличествоТребуется);
				
				Строка = фнОбъект.СписокНоменклатуры.НайтиСтроки(Отбор)[0];
				фнОбъект.СписокНоменклатуры.Удалить(Строка);
				
				Инд = 0;
				
				Пока Инд < КоличествоЦелыхКусков Цикл
					
					ДобавитьСтроку(фнОбъект, ВыборкаНоменклатура.Номенклатура, ДлинаХлыста/1000,,,,,,,, ДлинаХлыста/1000);
					Инд = Инд + 1;
					
				КонецЦикла;
				
				Если НЕ ДилерскийТрек Тогда
					ДобавитьСтроку(фнОбъект, ВыборкаНоменклатура.Номенклатура, Отрезок/1000,,,,,,,, Отрезок/1000);
				КонецЕсли;
				
			ИначеЕсли ДилерскийТрек Тогда
				
				Отбор = Новый Структура();
				Отбор.Вставить("Номенклатура",Выборка.Номенклатура);
				Отбор.Вставить("КоличествоТребуется",Выборка.КоличествоТребуется);
				
				Строка = фнОбъект.СписокНоменклатуры.НайтиСтроки(Отбор)[0];
				фнОбъект.СписокНоменклатуры.Удалить(Строка);
				
			КонецЕсли;
			
			МассивОтрезков.Добавить(Отрезок);
			
		КонецЦикла;
		
		Пока МассивОтрезков.Количество() > 0 Цикл
			
			Если ДилерскийТрек Тогда
				
				Отрезок = МассивОтрезков[0];
				Кол = Окр(Отрезок/Кратность+0.49999)*Кратность;
				Кол = Кол / 1000;
				ДобавитьСтроку(фнОбъект, ВыборкаНоменклатура.Номенклатура, Кол,,,,,,,, Кол);
				
				МассивОтрезков.Удалить(0);
				
			Иначе
				
				РезультатРаскроя = Раскрой.МаксимальнаяСуммаПодмножеств(МассивОтрезков, ДлинаХлыста);
				
				Если ВыборкаНоменклатура.ОкруглятьДоЛистов Тогда
					КоличествоДобавления = КоличествоДобавления + ДлинаХлыста - РезультатРаскроя.Сумма;
				ИначеЕсли РезультатРаскроя.Сумма % Кратность > 0 Тогда
					КратныхОтрезков = Цел(РезультатРаскроя.Сумма / Кратность); // Кратных отрезков
					ПродатьХлыстов = (КратныхОтрезков + 1) * Кратность;
					КоличествоДобавления = КоличествоДобавления + ПродатьХлыстов - РезультатРаскроя.Сумма;
				КонецЕсли;
				
				Для каждого РазмещеннаяДеталь Из РезультатРаскроя.Массив Цикл
					
					Индекс = МассивОтрезков.Найти(РазмещеннаяДеталь);
					МассивОтрезков.Удалить(Индекс);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоДобавления > 0 Тогда
			
			КоличествоДобавления = КоличествоДобавления / 1000;
			ДобавитьСтроку(фнОбъект, ВыборкаНоменклатура.Номенклатура, КоличествоДобавления,,,,,,,, 0);
			
		КонецЕсли;
		
	КонецЦикла; // ВыборкаНоменклатура.Следующий()
	
КонецФункции

&НаСервере
Функция СформироватьВТНоменклатура(Запрос, ТекущийОбъект)
	
	ТаблицаСпискаНоменклатуры = ТекущийОбъект.СписокНоменклатуры.Выгрузить();
	Запрос.УстановитьПараметр("тзНоменклатура", ТаблицаСпискаНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(тзНоменклатура.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	тзНоменклатура.Количество,
	|	тзНоменклатура.КоличествоТребуется,
	|	тзНоменклатура.Цена,
	|	тзНоменклатура.ЗарплатаЦеха,
	|	тзНоменклатура.НомерИзделия,
	|	тзНоменклатура.НомерСтроки,
	|	тзНоменклатура.ИспользуетсяВКоробе,
	|	тзНоменклатура.УслугаСМатериаломЗаказчика,
	|	тзНоменклатура.ЧерезСклад,
	|	тзНоменклатура.ПредоставитЗаказчик,
	|	тзНоменклатура.РозничнаяСтоимость,
	|	тзНоменклатура.СуммаБезНаценкиОфиса,
	|	тзНоменклатура.ПоКаталогуМестоОбработки,
	|	тзНоменклатура.Двери
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	&тзНоменклатура КАК тзНоменклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	Запрос.Выполнить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДетали(ТипДетали)
	
	Стр = Новый Структура;
	
	Стр.Вставить("Клееная", ТипДетали.Клееная);
	Стр.Вставить("ОбтачиватьПоУмолчанию", ТипДетали.ОбтачиватьПоУмолчанию);
	Стр.Вставить("ИспользоватьСоответствиеНоменклатуры", ТипДетали.ИспользоватьСоответствиеНоменклатуры);
	Стр.Вставить("МатериалСтрока", ТипДетали.МатериалСтрока);
	Стр.Вставить("ПрипускСклейка", ТипДетали.ПрипускСклейка);
	Стр.Вставить("ПрипускПостформинг", ТипДетали.ПрипускПостформинг);
	Стр.Вставить("ЭтоФасад", ТипДетали.ЭтоФасад);
	Стр.Вставить("ЭтоСтолешница", ТипДетали.ЭтоСтолешница);
	Стр.Вставить("ЭтоСтекло", ТипДетали.ЭтоСтекло);
	Стр.Вставить("МинимальнаяШирина", ТипДетали.МинимальнаяШирина);
	Стр.Вставить("МинимальнаяВысота", ТипДетали.МинимальнаяВысота);
	Стр.Вставить("СчитатьПлощадь", ТипДетали.СчитатьПлощадь);
	Стр.Вставить("РазмерТекстура", ТипДетали.РазмерТекстура);
	Стр.Вставить("РазмерДопНоменклатура", ТипДетали.РазмерДопНоменклатура);
	Стр.Вставить("УчитыватьКратность", ТипДетали.УчитыватьКратность);
	Стр.Вставить("СпецФасад", ТипДетали.СпецФасад);
	
	НомГруппы = Новый СписокЗначений;
	
	Для Каждого Эл Из ТипДетали.НоменклатурныеГруппы Цикл
		
		Стр2 = Новый Структура;
		Стр2.Вставить("ПолеВыбора", Эл.ПолеВыбора);
		Стр2.Вставить("Группа", Эл.Группа);
		
		НомГруппы.Добавить(Стр2);
		
	КонецЦикла;
	
	Стр.Вставить("НомГруппы", НомГруппы);
	
	Услуги = Новый СписокЗначений;
	
	Для Каждого Эл Из ТипДетали.Услуги Цикл
		
		Стр2 = Новый Структура;
		Стр2.Вставить("Услуга", Эл.Услуга);
		Стр2.Вставить("Количество", Эл.Количество);
		
		Услуги.Добавить(Стр2);
		
	КонецЦикла;
	
	Стр.Вставить("Услуги", Услуги);
	
	Комплектация = Новый СписокЗначений;
	
	Для Каждого Эл Из ТипДетали.Комплектация Цикл
		
		Стр2 = Новый Структура;
		Стр2.Вставить("Номенклатура", Эл.Номенклатура);
		Стр2.Вставить("Количество", Эл.Количество);
		
		Комплектация.Добавить(Стр2);
		
	КонецЦикла;
	
	Стр.Вставить("Комплектация", Комплектация);
	
	Возврат Стр;
	
КонецФункции

&НаСервере
Функция ОбновитьСписокНоменклатурыЗаказчика(фнОбъект)
	
	МассивНоменклатуры = Новый Массив;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокНоменклатуры", фнОбъект.СписокНоменклатуры.Выгрузить());
	Запрос.УстановитьПараметр("Выбранные", фнОбъект.СписокМатериаловЗаказчика.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Подразделение", фнОбъект.Подразделение);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Список.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Список
	|ИЗ
	|	&СписокНоменклатуры КАК Список
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Список.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(НомПодр.МожетПредоставитьЗаказчик, ЛОЖЬ) КАК МожетПредоставитьЗаказчик
	|ИЗ
	|	Список КАК Список
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений.СрезПоследних(, &Подразделение = Подразделение) КАК НомПодр
	|		ПО Список.Номенклатура = НомПодр.Номенклатура
	|ГДЕ
	|	НомПодр.МожетПредоставитьЗаказчик
	|	И НЕ Список.Номенклатура В (&Выбранные)
	|
	|СГРУППИРОВАТЬ ПО
	|	Список.Номенклатура,
	|	ЕСТЬNULL(НомПодр.МожетПредоставитьЗаказчик, ЛОЖЬ)";
	
	МассивНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	СписокВыбора = Элементы.СписокМатериаловЗаказчикаНоменклатура.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.ЗагрузитьЗначения(МассивНоменклатуры);
	
КонецФункции

&НаСервере
Функция ПроставитьФлагЭтоКухня(ТекущийОбъект)
	
	ТекущийОбъект.ЭтоКухня = Ложь;
	
	Для каждого ИзделиеПоКаталогу Из ТекущийОбъект.СписокИзделийПоКаталогу Цикл
		Если ИзделиеПоКаталогу.Изделие.ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.КухняВерхний
			ИЛИ ИзделиеПоКаталогу.Изделие.ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.КухняНижний Тогда
			ТекущийОбъект.ЭтоКухня = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция УбратьПроверкуПриМодифицированности()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекущийСтатус = Документы.Спецификация.ПолучитьСтатусСпецификации(Объект.Ссылка);
		
		Если Модифицированность
			И ТекущийСтатус = Перечисления.СтатусыСпецификации.МатериалПроверен
			И Объект.ЕстьМатериалПодЗаказ Тогда
			Документы.Спецификация.УстановитьСтатусСпецификации(Объект.Ссылка, Перечисления.СтатусыСпецификации.Сохранен);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаполнитьОсновныеЦвета(ТекущийОбъект)
	
	ЦветВертикальногоПрофиля = Неопределено;
	ЦветЛДСПОсновной = Неопределено;
	ЦветЛДСПДополнительный = Неопределено;
	
	Запрос = Новый Запрос;
	
	НоменклатурныеГруппы = Новый Массив;
	НоменклатурныеГруппы.Добавить(Справочники.НоменклатурныеГруппы.ВертикальныйПрофиль);
	НоменклатурныеГруппы.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП16);
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", ТекущийОбъект.СписокНоменклатуры);
	Запрос.УстановитьПараметр("НоменклатурныеГруппы", НоменклатурныеГруппы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокНоменклатуры.Номенклатура КАК Номенклатура,
	|	СписокНоменклатуры.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&СписокНоменклатуры КАК СписокНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номенклатура КАК Номенклатура,
	|	СУММА(ВТ.Количество) КАК Количество,
	|	ВЫРАЗИТЬ(ВТ.Номенклатура КАК Справочник.Номенклатура).НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВЫРАЗИТЬ(ВТ.Номенклатура КАК Справочник.Номенклатура).НоменклатурнаяГруппа В (&НоменклатурныеГруппы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Номенклатура,
	|	ВЫРАЗИТЬ(ВТ.Номенклатура КАК Справочник.Номенклатура).НоменклатурнаяГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатурнаяГруппа,
	|	Количество УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ВертикальныйПрофиль Тогда
				
				ТекущийОбъект.ЦветВертикальногоПрофиля = Выборка.Номенклатура;
				
			ИначеЕсли Выборка.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ЛДСП16 Тогда
				
				Если НЕ ЗначениеЗаполнено(ЦветЛДСПОсновной) Тогда
					
					ТекущийОбъект.ЦветЛДСПОсновной = Выборка.Номенклатура;
					
				ИначеЕсли НЕ ЗначениеЗаполнено(ЦветЛДСПДополнительный) Тогда
					
					ТекущийОбъект.ЦветЛДСПДополнительный = Выборка.Номенклатура;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // НЕ РезультатЗапроса.Пустой()
	
КонецФункции

&НаСервере
Функция ЗаполнитьКоличествоКоробов(ТекущийОбъект)
	
	Если ТекущийОбъект.СписокИзделийПоКаталогу.Количество() = 0 Тогда
		ТекущийОбъект.КоличествоКоробов = 0;
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ВидыИзделий = Новый Массив;
	ВидыИзделий.Добавить(Справочники.ВидыИзделийПоКаталогу.КорпуснаяМебель);
	ВидыИзделий.Добавить(Справочники.ВидыИзделийПоКаталогу.КухняВерхний);
	ВидыИзделий.Добавить(Справочники.ВидыИзделийПоКаталогу.КухняНижний);
	ВидыИзделий.Добавить(Справочники.ВидыИзделийПоКаталогу.Комод);
	
	Запрос.УстановитьПараметр("СписокИзделийПоКаталогу", ТекущийОбъект.СписокИзделийПоКаталогу);
	Запрос.УстановитьПараметр("ВидыИзделий", ВидыИзделий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокИзделийПоКаталогу.Изделие КАК Изделие,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&СписокИзделийПоКаталогу КАК СписокИзделийПоКаталогу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Изделие,
	|	ВТ.Количество КАК Количество
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВЫРАЗИТЬ(ВТ.Изделие КАК Справочник.КаталогИзделий).ВидИзделияПоКаталогу В (&ВидыИзделий)
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	ОБЩИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка.Следующий();
	ТекущийОбъект.КоличествоКоробов = Выборка.Количество;
	
КонецФункции

&НаСервере
Функция ЗаполненыПоставщики(ТаблицаСписокМатериаловПодЗаказ, ЭтоДилер)
	
	ПоставщикиЗаполнены = Истина;
	
	Для Каждого Элемент Из ТаблицаСписокМатериаловПодЗаказ Цикл
		
		Если НЕ ЗначениеЗаполнено(Элемент.Поставщик) Тогда
			
			ПоставщикиЗаполнены = Ложь;
			
			Если НЕ ЭтоДилер Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните поставщиков", ,"Объект.СписокМатериаловПодЗаказ");
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоставщикиЗаполнены;
	
КонецФункции 

&НаКлиенте
Функция ЗаполненыПоставщикиНаКлиенте()
	
	ПоставщикиЗаполнены = Истина;
	
	Для Каждого Элемент Из Объект.СписокМатериаловПодЗаказ Цикл
		
		Если НЕ ЗначениеЗаполнено(Элемент.Поставщик) Тогда
			
			ПоставщикиЗаполнены = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоставщикиЗаполнены;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьПустуюСпецификацию()
	
	//Предварительная запись ПУСТОЙ спецификации при добавлении дверей или открытия формы ШкафПоКаталогу
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьУслугуДляМебельнойКромки(ТекущийОбъект, Строка, ИмяПоля, МалоразмернаяДеталь)
	
	МебельнаяКромка = Строка[ИмяПоля];
	НоменклатурныеГруппы = Справочники.НоменклатурныеГруппы;
	ГруппаКромки = МебельнаяКромка.НоменклатурнаяГруппа;
	Услуга = Неопределено;
	МатериалЗаказчика = ТекущийОбъект.СписокМатериаловЗаказчика.Найти(МебельнаяКромка, "Номенклатура") <> Неопределено;
	
	Если НЕ ЗначениеЗаполнено(МебельнаяКромка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Срез = Ложь;
	
	ИмяПоля = ВРег(ИмяПоля);
	Если Найти(ИмяПоля,"ВЕРХ") <> 0 Тогда
		Радиус1 = "РадиусПравоВерх";
		Радиус2 = "РадиусЛевоВерх";
		Сторона = "ШиринаДетали";
	ИначеЕсли Найти(ИмяПоля, "НИЗ") <> 0 Тогда
		Радиус1 = "РадиусПравоНиз";
		Радиус2 = "РадиусЛевоНиз";
		Сторона = "ШиринаДетали";
		Срез = Строка["Срез"];
		
	ИначеЕсли Найти(ИмяПоля, "ЛЕВ") <> 0 Тогда
		Радиус1 = "РадиусЛевоНиз";
		Радиус2 = "РадиусЛевоВерх";
		Сторона = "ВысотаДетали";
	ИначеЕсли Найти(ИмяПоля, "ПРАВ") <> 0 Тогда
		Радиус1 = "РадиусПравоНиз";
		Радиус2 = "РадиусПравоВерх";
		Сторона = "ВысотаДетали";
		Срез = Строка["Срез"];
	КонецЕсли;
	
	Если ГруппаКромки = НоменклатурныеГруппы.КантАлюминиевый
		ИЛИ ГруппаКромки = НоменклатурныеГруппы.ТорцеваяРучка16мм
		ИЛИ ГруппаКромки = НоменклатурныеГруппы.ТорцеваяРучка18мм Тогда
		КоличествоУслуги = Строка.Количество; // по единице за сторону
	Иначе
		КоличествоУслуги = Строка[Сторона] * Строка.Количество / 1000;
	КонецЕсли;
	
	Радиус = Строка[Радиус1] + Строка[Радиус2];
	
	Если Радиус = 0 ИЛИ Срез Тогда
		Услуга = ПолучитьУслугуКромления(МебельнаяКромка);
	Иначе
		Услуга = Справочники.Номенклатура.КриволинейноеКромление;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Услуга) Тогда
		ДобавитьСтроку(ТекущийОбъект, Услуга, КоличествоУслуги, Строка.НомерИзделия,,,,,, МатериалЗаказчика);
	КонецЕсли;
	
	// Добавление отдельной услуги 'Кромление малоразмерной детали'
	
	Если МалоразмернаяДеталь Тогда
		
		КоличествоУслуги = Строка.Количество;
		Услуга = Справочники.Номенклатура.КромлениеМалоразмернойДетали;
		ДобавитьСтроку(ТекущийОбъект, Услуга, КоличествоУслуги, Строка.НомерИзделия,,,,,, МатериалЗаказчика);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаполнитьУслугиМебельнойКромки(ТекущийОбъект, Строка)
	
	Массив = Новый Массив;
	Массив.Добавить("ВыборМебельнойКромкиСверху");
	Массив.Добавить("ВыборМебельнойКромкиСнизу");
	Массив.Добавить("ВыборМебельнойКромкиСлева");
	Массив.Добавить("ВыборМебельнойКромкиСправа");
	МалоразмернаяДеталь = Строка.ШиринаДетали < 80 ИЛИ Строка.ВысотаДетали < 80;
	
	Для каждого ъ Из Массив Цикл
		ДобавитьУслугуДляМебельнойКромки(ТекущийОбъект, Строка, ъ, МалоразмернаяДеталь);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуСкладГотовойПродукции(фнОбъект)
	
	фнОбъект.СкладГотовойПродукции.Очистить();
	фнОбъект.ТребуетсяКомплектация = Ложь;
	
	Для каждого Строка Из фнОбъект.СписокНоменклатуры Цикл
		
		Номенклатура = Строка.Номенклатура;
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура,
		"ВидНоменклатуры, ПроцентОтхода, МестоОбработки, ЕдиницаИзмерения, НоменклатурнаяГруппа");
		
		Если (СтруктураРеквизитов.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Материал
			ИЛИ НЕ Строка.ЧерезСклад)
			И НЕ ЗначениеЗаполнено(Строка.ПоКаталогуМестоОбработки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		фнОбъект.ТребуетсяКомплектация = Истина;
		
		КоличествоБезОтхода = Строка.КоличествоТребуется;
		
		Если ЗначениеЗаполнено(Строка.ПоКаталогуМестоОбработки) Тогда
			
			Если Строка.ПоКаталогуМестоОбработки = "Цех" Тогда
				
				КоличествоСклад = 0;
				КоличествоЦех = КоличествоБезОтхода;
				
			ИначеЕсли Строка.ПоКаталогуМестоОбработки = "Склад" Тогда
				
				КоличествоЦех = 0;
				КоличествоСклад = КоличествоБезОтхода;
				
			Иначе
				
				КоличествоЦех = 0;
				КоличествоСклад = 0;
				
			КонецЕсли
			
		Иначе
			
			Если СтруктураРеквизитов.МестоОбработки = Перечисления.МестоОбработки.Отгрузка ИЛИ Строка.НомерИзделия = 0 Тогда
				
				КоличествоЦех = 0;
				КоличествоСклад = КоличествоБезОтхода;
				
			ИначеЕсли СтруктураРеквизитов.МестоОбработки = Перечисления.МестоОбработки.ПоКаталогуВЦех И Строка.НомерИзделия <> 0 Тогда
				
				КоличествоСклад = 0;
				КоличествоЦех = КоличествоБезОтхода;
				
			Иначе
				
				КоличествоЦех = 0;
				КоличествоСклад = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоЦех > 0 ИЛИ КоличествоСклад > 0 Тогда
			
			СтрокаТЗ = фнОбъект.СкладГотовойПродукции.Найти(Номенклатура, "Номенклатура");
			Хлыстовой = СтруктураРеквизитов.НоменклатурнаяГруппа.ВидМатериала = Перечисления.ВидыМатериалов.Хлыстовой;
			
			Если СтрокаТЗ = Неопределено ИЛИ Хлыстовой Тогда
				
				НоваяСтрока = фнОбъект.СкладГотовойПродукции.Добавить();
				НоваяСтрока.Номенклатура = Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения = СтруктураРеквизитов.ЕдиницаИзмерения;
				НоваяСтрока.КоличествоСклад = КоличествоСклад;
				НоваяСтрока.КоличествоЦех = КоличествоЦех;
				
			Иначе
				
				Если КоличествоСклад > 0 Тогда
					
					СтрокаТЗ.КоличествоСклад = СтрокаТЗ.КоличествоСклад + КоличествоСклад;
					
				ИначеЕсли КоличествоЦех > 0 Тогда
					
					СтрокаТЗ.КоличествоЦех = СтрокаТЗ.КоличествоЦех + КоличествоЦех;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	фнОбъект.СкладГотовойПродукции.Сортировать("Номенклатура Возр");
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьСтрокуРаскроя(Спецификация, СвойстваРаскроя)
	
	НаборЗаписей = РегистрыСведений.РаскройДеталей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Спецификация);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Запись.СтрокаРаскрой = СвойстваРаскроя.ДанныеДляРаскроя;
	Запись.ТекущаяСтрокаРаскроя = СвойстваРаскроя.ДанныеДляРаскроя;
	Запись.ТаблицаДеталей = СвойстваРаскроя.ТаблицаДеталей;
	Запись.СтрокаКривогоПила = СвойстваРаскроя.СтрокаКривогоПила;
	Запись.Объект = Спецификация;
	Запись.АлгоритмРаскроя = СвойстваРаскроя.АлгоритмРаскроя;
	Запись.ВремяФормирования = ?(СвойстваРаскроя.ВремяФормирования > 0, СвойстваРаскроя.ВремяФормирования, Запись.ВремяФормирования);
	
	// В старом раскрое нет этого свойства.
	Если СвойстваРаскроя.Свойство("ЛучшийПроцентОтхода") Тогда
		Запись.ИдеальныйПроцентОтхода = СвойстваРаскроя.ЛучшийПроцентОтхода;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецФункции

&НаСервере
Функция ПосчитатьПрисадкиКриволинейнаяДеталь(СтрокаФлэш)
	
	ВсегоОтверстий = 0;
	ВсегоЕвропазов = 0;
	ВсегоОтверстийСтекло5_50 = 0;
	ВсегоОтверстийСтекло64 = 0;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаФлэш, "#");
	СтруктураОтверстий = Новый Структура;
	
	Если МассивПодстрок.Количество() > 0 Тогда
		
		НужнаяСтрока = МассивПодстрок[2];
		ВторойМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НужнаяСтрока, "*");
		
		Если ВторойМассив.Количество() > 0 Тогда
			
			Для каждого Массив Из ВторойМассив Цикл
				
				Подмассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Массив, "_");
				
				Если Подмассив.Количество() > 0 Тогда
					
					Определитель = Подмассив[0];
					КоличествоОтверстийВРяду = 0;
					КоличествоРядовОтверстий = 0;
					КоличествоЕвропазов = 0;
					
					Если Определитель = "10" или Определитель = "11" или Определитель = "14" Тогда
						
						КоличествоОтверстийВРяду =Число(Подмассив[4]);
						КоличествоРядовОтверстий = Число(Подмассив[5]);
						
					ИначеЕсли Определитель = "12" Тогда
						
						КоличествоОтверстийВРяду = Число(Подмассив[3]);
						КоличествоРядовОтверстий = Число(Подмассив[5]);
						
					ИначеЕсли Определитель = "13" Тогда
						
						КоличествоЕвропазов = 1;
						
					ИначеЕсли (Определитель = "18" ИЛИ Определитель = "19" ИЛИ Определитель = "20" ИЛИ Определитель = "22") Тогда
						
						КоличествоОтверстийВРяду = 1;
						
					ИначеЕсли Определитель = "21" Тогда
						
						КоличествоОтверстийВРяду = 2;
						
					ИначеЕсли Определитель = "23" Тогда
						
						Диаметр = Число(Подмассив[3]);
						
						Если Диаметр = 64 Тогда
							
							ВсегоОтверстийСтекло64 = ВсегоОтверстийСтекло64 + 1;
							
						ИначеЕсли Диаметр >= 5 И Диаметр <= 50 Тогда	
							
							ВсегоОтверстийСтекло5_50 = ВсегоОтверстийСтекло5_50 + 1;
							
						КонецЕсли;
						
					КонецЕсли;
					//КоличествоРядовОтверстий нельзя выносить, хоть и одинаковая строка. "Определитель" может быть не только эти цифры
					Попытка
						
						Если КоличествоОтверстийВРяду > 0 и КоличествоРядовОтверстий > 0 Тогда
							
							ВсегоОтверстий = ВсегоОтверстий + КоличествоОтверстийВРяду * КоличествоРядовОтверстий;
							
						ИначеЕсли КоличествоОтверстийВРяду > 0 Тогда
							
							ВсегоОтверстий = ВсегоОтверстий + КоличествоОтверстийВРяду;
							
						КонецЕсли;
						
						Если КоличествоЕвропазов > 0 Тогда
							
							ВсегоЕвропазов = ВсегоЕвропазов + КоличествоЕвропазов;
							
						КонецЕсли;
						
					Исключение
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В криволинейной детали выбрали ПРИСАДКУ ПОД ЕВРОВИНТ ТОРЦЕВУЮ");
						
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОтверстий.Вставить("КоличествоПрисадок", ВсегоОтверстий);
	СтруктураОтверстий.Вставить("КоличествоЕвропазов", ВсегоЕвропазов);
	СтруктураОтверстий.Вставить("ВсегоОтверстийСтекло5_50", ВсегоОтверстийСтекло5_50);
	СтруктураОтверстий.Вставить("ВсегоОтверстийСтекло64", ВсегоОтверстийСтекло64);
	
	Возврат СтруктураОтверстий;
	
КонецФункции

&НаСервере
Функция ЗаполнитьУслуги(ТекущийОбъект)
	
	Метр = 1000;
	МетрКв = Метр * Метр;
	
	Номенклатура = Справочники.Номенклатура;
	СправочникиНоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы;
	ПлощадьУпаковываемыхМатериалов = 0;
	ПлощадьИзготавливаемыхМатериалов = 0;
	ПлощадьГравировок = 0;
	
	//Получить данные об упаковке и сборке коробов
	
	УпаковкаПоКаталогу = Новый Структура;
	
	Для Каждого ИзделиеК Из ТекущийОбъект.СписокИзделийПоКаталогу Цикл
		
		Стр = Новый Структура;
		Стр.Вставить("Сборка", ИзделиеК.Сборка);
		
		УпаковкаПоКаталогу.Вставить("Строка" + ИзделиеК.НомерСтроки, Стр);
		
	КонецЦикла;
	
	Если ТекущийОбъект.Изделие.Серийное Тогда
		
		КоличествоЧасов = 0;
		Для каждого Строка Из ТекущийОбъект.СписокИзделийПоКаталогу Цикл
			КоличествоЧасов = КоличествоЧасов + Строка.Изделие.КоличествоЧасов;
		КонецЦикла;
		
		ДобавитьСтроку(ТекущийОбъект, Справочники.Номенклатура.НормоЧасСерийногоИзделия, КоличествоЧасов, 0);
		
	Иначе
		
		#ОБЛАСТЬ ОСНОВНОЙ_ЦИКЛ
		
		Для каждого Строка Из ТекущийОбъект.СписокДеталей Цикл
			
			МатериалЗаказчика = ТекущийОбъект.СписокМатериаловЗаказчика.Найти(Строка.Номенклатура, "Номенклатура") <> Неопределено;
			
			КосойПил = Строка.КосойПил;
			КантыИзРедактора = Строка.КантыИзРедактора;
			
			Если КосойПил > 0 Тогда
				
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.КосойПил, КосойПил * Строка.Количество, Строка.НомерИзделия,,,,,,МатериалЗаказчика);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КантыИзРедактора) Тогда
				
				КантыИзРедактора = ЗначениеИзСтрокиВнутр(КантыИзРедактора);
				МассивКантов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КантыИзРедактора, "|");
				
				Для Каждого СтрокаКант Из МассивКантов Цикл
					
					ПараметрыКанта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаКант , "_");
					НоменклатурныйНомер = ПараметрыКанта[0];
					ДлинаКанта = Число(ПараметрыКанта[1]);
					ТипКромления = Число(ПараметрыКанта[2]);
					
					НоменклатураКант = Справочники.Номенклатура.НайтиПоКоду(НоменклатурныйНомер);
					
					Если ТипКромления = 0 Тогда
						Услуга = ПолучитьУслугуКромления(НоменклатураКант);
					Иначе
						Услуга = Номенклатура.КриволинейноеКромление;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Услуга) Тогда
						ДобавитьСтроку(ТекущийОбъект, Услуга, ДлинаКанта / 1000 * Строка.Количество, Строка.НомерИзделия,,,,,, МатериалЗаказчика);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДанныеДетали = ПолучитьДанныеДетали(Строка.ВидДетали);
			СтрокаНоменклатура = Строка.Номенклатура;
			НоменклатураДляСклеивания = Строка.НоменклатураДляСклеивания;
			НоменклатурнаяГруппа = СтрокаНоменклатура.НоменклатурнаяГруппа;
			
			Клееная = ДанныеДетали.Клееная;
			КоличествоДеталей = Строка.Количество;
			ВысотаДетали = Строка.ВысотаДетали;
			ШиринаДетали = Строка.ШиринаДетали;
			ДлинаКривогоПила = Число(Строка.ДлинаКривогоПила);
			Периметр = Число(Строка.Периметр);
			Обтачивать = Строка.Обтачивать;
			Постформинг = Строка.Постформинг;
			
			ШиринаВставки = СтрокаНоменклатура.ГлубинаДетали;
			ШиринаПаза = ?(ЗначениеЗаполнено(Строка.УниверсальнаяКромка), Строка.УниверсальнаяКромка.ШиринаПаза, 0);
			
			ОтверстийподРучку = 0;
			
			Если ДанныеДетали.ЭтоСтекло И ЗначениеЗаполнено(НоменклатураДляСклеивания) Тогда
				
				ОтверстийподРучку = 2;
				
			КонецЕсли;
			
			КоличествоПетель = Строка.КоличествоПетель;
			
			ПлощадьГравировки = 0;
			КоличествоПрисадок = 0;
			КоличествоЕвропазов = 0;
			
			Если ЗначениеЗаполнено(Строка.СтрокаДляФлэш) Тогда
				
				СтруктураПрисадок = ПосчитатьПрисадкиКриволинейнаяДеталь(Строка.СтрокаДляФлэш);
				КоличествоПрисадок = СтруктураПрисадок.КоличествоПрисадок;
				КоличествоЕвропазов = СтруктураПрисадок.КоличествоЕвропазов;
				КоличествоОтверстийСтекло5_50 = СтруктураПрисадок.ВсегоОтверстийСтекло5_50;
				КоличествоОтверстийСтекло64 = СтруктураПрисадок.ВсегоОтверстийСтекло64;
				
				Если КоличествоПрисадок > 0 Тогда
					
					Если НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.СтеклоДляСкругляемогоФасада
						ИЛИ НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Стекло
						ИЛИ НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Зеркало Тогда
						
						ДобавитьСтроку(ТекущийОбъект, Номенклатура.СверлениеВСтеклеДо5мм, КоличествоПрисадок * Строка.Количество, Строка.НомерИзделия);
						
					Иначе
						
						ДобавитьСтроку(ТекущийОбъект, Номенклатура.ПрисадкаИндивидуальная, КоличествоПрисадок * Строка.Количество, Строка.НомерИзделия);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если КоличествоЕвропазов > 0 Тогда
					
					ДобавитьСтроку(ТекущийОбъект, Номенклатура.УслугаЕвропаз, КоличествоЕвропазов * Строка.Количество, Строка.НомерИзделия,,,,,, МатериалЗаказчика);
					
				КонецЕсли;
				
				Если КоличествоОтверстийСтекло5_50 > 0 Тогда
					
					ДобавитьСтроку(ТекущийОбъект, Номенклатура.СверлениеВСтеклеСвыше5мм, КоличествоОтверстийСтекло5_50 * Строка.Количество, Строка.НомерИзделия,,,,,, МатериалЗаказчика);
					
				КонецЕсли;
				
				Если КоличествоОтверстийСтекло64 > 0 Тогда
					
					ДобавитьСтроку(ТекущийОбъект, Номенклатура.СверлениеВСтеклеПодРозетку64, КоличествоОтверстийСтекло64 * Строка.Количество, Строка.НомерИзделия,,,,,, МатериалЗаказчика);
					
				КонецЕсли;
				
			КонецЕсли;
			
			МассивСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка.СтрокаДляФлэш, "#");
			
			Если МассивСтроки.Количество() > 3 Тогда
				
				ПлощадьГравировки = Число(МассивСтроки[3]) / 1000000 * КоличествоДеталей;
				
				Если ПлощадьГравировки > 0 Тогда
					
					ДобавитьСтроку(ТекущийОбъект, Номенклатура.Гравировка, ПлощадьГравировки, Строка.НомерИзделия,,,,,, МатериалЗаказчика);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДанныеДетали.СчитатьПлощадь Тогда
				
				ПлощадьИзготавливаемыхМатериалов = ПлощадьИзготавливаемыхМатериалов + ВысотаДетали * ШиринаДетали * КоличествоДеталей / МетрКв;
				
			КонецЕсли;
			
			Для Каждого Эл Из ДанныеДетали.Услуги Цикл
				
				Эл = Эл.Значение;
				КоличествоУслуги = 0;
				
				Попытка
					
					Выполнить("КоличествоУслуги = " + Эл.Количество);
					КоличествоУслуги = КоличествоУслуги * КоличествоДеталей;
					
					Если КоличествоУслуги > 0 Тогда
						
						ДобавитьСтроку(ТекущийОбъект, Эл.Услуга, КоличествоУслуги, Строка.НомерИзделия,,,,,, МатериалЗаказчика);
						
					КонецЕсли;
					
				Исключение
					
					Сообщить("Ошибка при формировании формулы: №001");
					
				КонецПопытки;
				
			КонецЦикла;
			
			Если НЕ ДанныеДетали.СпецФасад Тогда
				
				ЗаполнитьУслугиМебельнойКромки(ТекущийОбъект, Строка);
				
			КонецЕсли;
			
			СтруктураОтверстий = Строка.СтруктураОтверстий;
			
			Если НЕ ДанныеДетали.ЭтоФасад И ЗначениеЗаполнено(СтруктураОтверстий) Тогда
				
				ТаблицаОтверстий = ЗначениеИзСтрокиВнутр(СтруктураОтверстий);
				
				Для Каждого Элемент Из ТаблицаОтверстий Цикл
					
					Если Элемент.ВидОтверстий = Перечисления.ВидыОтверстий.Европаз Тогда
						Услуга = Номенклатура.УслугаЕвропаз;
					ИначеЕсли Элемент.ВидОтверстий=Перечисления.ВидыОтверстий.ОбратнаяПрисадка Тогда
						Услуга = Номенклатура.ОбратнаяПрисадка;
					ИначеЕсли Элемент.ВидОтверстий=Перечисления.ВидыОтверстий.ПрисадкаПодСтяжки Тогда
						Услуга = Номенклатура.ПрисадкаПодСтяжки;
					Иначе
						Услуга = Номенклатура.УслугаПрисадка;
					КонецЕсли;
					
					Если НЕ Услуга = Номенклатура.УслугаЕвропаз Тогда
						ДобавитьСтроку(ТекущийОбъект, Услуга, Элемент.Количество * Строка.Количество, Строка.НомерИзделия,,,,,, МатериалЗаказчика);
					Иначе
						ДобавитьСтроку(ТекущийОбъект, Услуга, Строка.Количество, Строка.НомерИзделия,,,,,, МатериалЗаказчика);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если Строка.НомерИзделия = 0 Тогда
				
				ПлощадьУпаковываемыхМатериалов = ПлощадьУпаковываемыхМатериалов + ВысотаДетали * ШиринаДетали * (Клееная + 1) * КоличествоДеталей / МетрКв;
				
			Иначе
				
				ДанныеИзделия = УпаковкаПоКаталогу["Строка"+Строка.НомерИзделия];
				
				Если НЕ ДанныеИзделия.Сборка Тогда
					
					ПлощадьУпаковываемыхМатериалов = ПлощадьУпаковываемыхМатериалов + ВысотаДетали * ШиринаДетали * (Клееная + 1) * КоличествоДеталей / МетрКв;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		#КОНЕЦОБЛАСТИ
		
		#ОБЛАСТЬ ЯЩИКИ
		
		Для каждого Строка Из Объект.СписокЯщики Цикл
			
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.ИзготовлениеЯщика, Строка.КоличествоЯщиков, Строка.НомерИзделия,,,,,, МатериалЗаказчика);
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.НакручиваниеРучкиНаЛДСПФасадЯщика, Строка.КоличествоЯщиков * Строка.КоличествоРучек, Строка.НомерИзделия,,,,,, МатериалЗаказчика);
			
			НомерСтрокиЯщика = Строка.НомерСтроки;
			
			Для Каждого ДетальЯщика Из ТаблицаДеталиЯщиков Цикл
				
				Если ДетальЯщика.НомерСтроки = НомерСтрокиЯщика Тогда
					
					//Фасад распил
					Если ДетальЯщика.Тип = Перечисления.ВидыДеталейЯщиков.Фасад Тогда
						
						Если ДетальЯщика.КромкаНоменклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.АГТПрофиль Тогда
							
							ДобавитьСтроку(ТекущийОбъект, Номенклатура.СборкаАГТФасада, ДетальЯщика.Количество, ДетальЯщика.НомерИзделия,,,,,, МатериалЗаказчика);
							ДобавитьСтроку(ТекущийОбъект, Номенклатура.ИзготовлениеДеревяннойДеталиСтекольнаяЗона, ДетальЯщика.Количество, ДетальЯщика.НомерИзделия,,,,,, МатериалЗаказчика);
							
							ШиринаВставки = ДетальЯщика.Номенклатура.ГлубинаДетали;
							ШиринаПаза = ДетальЯщика.КромкаНоменклатура.ШиринаПаза;
							
							Если ШиринаПаза < ШиринаВставки Тогда
								
								ДобавитьСтроку(ТекущийОбъект, Номенклатура.ФрезеровкаДеталиЗонаКухонь, ДетальЯщика.Количество, ДетальЯщика.НомерИзделия,,,,,, МатериалЗаказчика);
								
							КонецЕсли;
							
						Иначе
							
							ДобавитьСтроку(ТекущийОбъект, Номенклатура.РаспилЗаДеталь, ДетальЯщика.Количество, ДетальЯщика.НомерИзделия,,,,,, МатериалЗаказчика);
							
						КонецЕсли;
						
					КонецЕсли;
					
					//Дно распил
					Если ДетальЯщика.Тип = Перечисления.ВидыДеталейЯщиков.Дно Тогда
						Если ДетальЯщика.Номенклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ЛДСП10 Тогда
							ДобавитьСтроку(ТекущийОбъект, Номенклатура.ИзготовлениеДеревяннойДеталиСтекольнаяЗона, ДетальЯщика.Количество, ДетальЯщика.НомерИзделия,,,,,, МатериалЗаказчика);
						Иначе
							ДобавитьСтроку(ТекущийОбъект, Номенклатура.РаспилЗаДеталь, ДетальЯщика.Количество, ДетальЯщика.НомерИзделия,,,,,, МатериалЗаказчика);
						КонецЕсли;
					КонецЕсли;
					
					//Корпус распил
					Если ДетальЯщика.НомерСтроки = НомерСтрокиЯщика
						И ДетальЯщика.Тип = Перечисления.ВидыДеталейЯщиков.Корпус Тогда
						ДобавитьСтроку(ТекущийОбъект, Номенклатура.РаспилЗаДеталь, ДетальЯщика.Количество, ДетальЯщика.НомерИзделия,,,,,, МатериалЗаказчика);
					КонецЕсли;
					
					//Кромление
					Если ДетальЯщика.КромкаНоменклатура.ГлубинаДетали >= 1 Тогда
						УслугаКромки = Номенклатура.КромлениеТолстойКромки;
					Иначе
						УслугаКромки = Номенклатура.КромлениеТонкойКромки;
					КонецЕсли;
					
					//Отверстия
					
					СтруктураОтверстийЯщик = ДетальЯщика.СтруктураОтверстий;
					
					Если ЗначениеЗаполнено(СтруктураОтверстийЯщик) Тогда
						
						ТаблицаОтверстийЯщик = ЗначениеИзСтрокиВнутр(СтруктураОтверстийЯщик);
						
						Для Каждого Элемент Из ТаблицаОтверстийЯщик Цикл
							
							Если Элемент.ВидОтверстий = Перечисления.ВидыОтверстий.Европаз Тогда
								Услуга = Номенклатура.УслугаЕвропаз;
							ИначеЕсли Элемент.ВидОтверстий=Перечисления.ВидыОтверстий.ОбратнаяПрисадка Тогда
								Услуга = Номенклатура.ОбратнаяПрисадка;
							ИначеЕсли Элемент.ВидОтверстий=Перечисления.ВидыОтверстий.ПрисадкаПодСтяжки Тогда
								Услуга = Номенклатура.ПрисадкаПодСтяжки;
							Иначе
								Услуга = Номенклатура.УслугаПрисадка;
							КонецЕсли;
							
							ДобавитьСтроку(ТекущийОбъект, Услуга, Элемент.Количество * ДетальЯщика.Количество, ДетальЯщика.НомерИзделия);
							
						КонецЦикла;
						
					КонецЕсли;
					
					ДлинаКромки = ?(ЗначениеЗаполнено(ДетальЯщика.ВыборМебельнойКромкиСверху), ДетальЯщика.ШиринаДетали, 0) +
					?(ЗначениеЗаполнено(ДетальЯщика.ВыборМебельнойКромкиСнизу), ДетальЯщика.ШиринаДетали,0) +
					?(ЗначениеЗаполнено(ДетальЯщика.ВыборМебельнойКромкиСлева), ДетальЯщика.ВысотаДетали,0) +
					?(ЗначениеЗаполнено(ДетальЯщика.ВыборМебельнойКромкиСправа), ДетальЯщика.ВысотаДетали,0);
					
					ДобавитьСтроку(ТекущийОбъект, УслугаКромки, ДетальЯщика.Количество * ДлинаКромки / 1000, ДетальЯщика.НомерИзделия);
					
					ПлощадьИзготавливаемыхМатериалов = ПлощадьИзготавливаемыхМатериалов + ДетальЯщика.Количество * (ДетальЯщика.ШиринаДетали * ДетальЯщика.ВысотаДетали) / 1000000;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		#КОНЕЦОБЛАСТИ
		
		Если ТекущийОбъект.ПакетУслуг = Перечисления.ПакетыУслуг.ДоставкаДоКлиентаИМонтаж Тогда
			
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.СборкаИзделия, ПлощадьИзготавливаемыхМатериалов, 0);
			
			Если НЕ ТекущийОбъект.Изделие.ВидИзделия = Перечисления.ВидыИзделий.Кухня Тогда
				
				УслугаТарифЗаСборку = Номенклатура.ТарифЗаСборку;
				
				БольшоеИзделие = Ложь;
				
				КоличествоМетров = ЛексСервер.ПолучитьНастройкуПодразделения(ТекущийОбъект.Подразделение, Перечисления.ВидыНастроекПодразделений.БольшойШкаф, ТекущийОбъект.Дата);
				
				Если ЗначениеЗаполнено(КоличествоМетров) Тогда
					
					БольшоеИзделие = ПлощадьИзготавливаемыхМатериалов > КоличествоМетров;
					
				КонецЕсли;
				
				Если БольшоеИзделие Тогда 
					ДобавитьСтроку(ТекущийОбъект, УслугаТарифЗаСборку, 1, 0);
				КонецЕсли;
				
			Иначе
				
				УслугаТарифЗаСборку = Номенклатура.ТарифЗаСборкуКухни;
				
			КонецЕсли;
			
			ДобавитьСтроку(ТекущийОбъект, УслугаТарифЗаСборку, 1, 0);
			
			Если ТекущийОбъект.Километраж > 0 Тогда
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.ПроездМонтажникаЗаГородом, Объект.Километраж, 0);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийОбъект.Упаковка Тогда
			
			ЛистГофрокартона = 2800 * 1000 / МетрКв;
			ПолЛистаГофрокартона = ЛистГофрокартона / 2;
			ЧетвертьЛистаГофрокартона = ПолЛистаГофрокартона / 2;
			
			//Упаковка отдельных деталей
			ДобавитьСтроку(ТекущийОбъект, Номенклатура.УпаковкаДеталей, ПлощадьУпаковываемыхМатериалов, 0);
			
			Если ПлощадьУпаковываемыхМатериалов > 0 Тогда
				
				КартонДляДеталей = ОкрВверх(ПлощадьУпаковываемыхМатериалов) * ЧетвертьЛистаГофрокартона;
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.Гофрокартон, КартонДляДеталей, 0);
				
			КонецЕсли;
			
			// Упаковка дверей
			КоличествоДверей = 0;
			Для каждого Дверь ИЗ ТекущийОбъект.СписокДверей Цикл
				КоличествоДверей = КоличествоДверей + ЛексСервер.ЗначениеРеквизитаОбъекта(Дверь.Двери, "Количество");
			КонецЦикла;
			
			Если КоличествоДверей > 0 Тогда
				
				КоличествоУпаковок = Окр(КоличествоДверей / 2 + 0.5, 0, РежимОкругления.Окр15как10);
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.УпаковкаДверей, КоличествоУпаковок, 0);
				
				КартонДляДверей = ?(КоличествоДверей < 3, ЛистГофрокартона * 3,ЛистГофрокартона * 4);
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.Гофрокартон, КартонДляДверей, 0);
				
			КонецЕсли;
			
			//Упаковка ящиков
			Для Каждого Строка Из ТекущийОбъект.СписокЯщики Цикл
				
				Если Строка.НомерИзделия = 0 Тогда
					
					ДобавитьСтроку(ТекущийОбъект, Номенклатура.Гофрокартон, ПолЛистаГофрокартона, 0);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Упаковка кухонных коробов.
			КоличествоКоробовДляУпаковки = 0;
			Для каждого Строка Из ТекущийОбъект.СписокИзделийПоКаталогу Цикл
				
				Если Строка.Сборка Тогда
					КоличествоКоробовДляУпаковки = КоличествоКоробовДляУпаковки + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоКоробовДляУпаковки > 0 Тогда
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.УпаковкаКороба, КоличествоКоробовДляУпаковки, 0);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийОбъект.ПакетУслуг <> Перечисления.ПакетыУслуг.СамовывозОтПроизводителя Тогда
			
			Если ТекущийОбъект.ПакетУслуг = Перечисления.ПакетыУслуг.ДоставкаДоТранспортнойКомпании Тогда
				
				Этаж = 1;
				
			Иначе
				
				АдресСтруктурой = ЛексСервер.ПолучитьСтруктуруИзАдреса(ТекущийОбъект.АдресМонтажа);
				
				Если ЗначениеЗаполнено(АдресСтруктурой.Этаж) Тогда
					Этаж = Число(АдресСтруктурой.Этаж);
				Иначе 
					Этаж = 1;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущийОбъект.ПакетУслуг = Перечисления.ПакетыУслуг.ДоставкаДоОфиса Тогда
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.ДоставкаДоОфиса, 1, 0);
			Иначе
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.ПодъемИзделияНаЭтаж, Этаж, 0);
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.ДоставкаПоГороду, 1, 0);
			КонецЕсли;
			
			РасстояниеДоЗавода = ТекущийОбъект.Офис.РасстояниеДоЗавода;
			
			Если ТекущийОбъект.ПакетУслуг <> Перечисления.ПакетыУслуг.ДоставкаДоТранспортнойКомпании
				И (ТекущийОбъект.Километраж > 0 ИЛИ РасстояниеДоЗавода > 0) Тогда
				ДобавитьСтроку(ТекущийОбъект, Номенклатура.ДоставкаЗаГородом, ТекущийОбъект.Километраж + РасстояниеДоЗавода, 0);
			КонецЕсли;
			
		КонецЕсли;
		
		Для каждого Строка Из ТекущийОбъект.СписокИзделийПоКаталогу Цикл
			Если Строка.Сборка И ЗначениеЗаполнено(Строка.Изделие.УслугаСборки) Тогда
				ДобавитьСтроку(ТекущийОбъект, Строка.Изделие.УслугаСборки, 1, Строка.НомерСтроки);
			КонецЕсли;
		КонецЦикла;
		
		ПодготовкаЛистовогоМатериала(ТекущийОбъект);
		
	КонецЕсли; // НЕ ТекущийОбъект.Изделие.Серийное
	
	ТекущийОбъект.ПлощадьСборкиИзделия = ПлощадьИзготавливаемыхМатериалов;
	
КонецФункции // ЗаполнитьУслуги()

&НаСервере
Функция ПодготовкаЛистовогоМатериала(фнОбъект)
	
	КоличествоЛистов = 0;
	КоличествоЛистовЗаказчика = 0;
	
	Для каждого Строка Из фнОбъект.СписокЛистовНоменклатуры Цикл
		
		Если Строка.ПредоставитЗаказчик Тогда
			КоличествоЛистовЗаказчика = КоличествоЛистовЗаказчика + Строка.Количество;
		Иначе
			КоличествоЛистов = КоличествоЛистов + Строка.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоЛистов > 0 Тогда
		ДобавитьСтроку(фнОбъект, Справочники.Номенклатура.ПодготовкаЛистовогоМатериала, КоличествоЛистов, 0);
	КонецЕсли;
	
	Если КоличествоЛистовЗаказчика > 0 Тогда
		ДобавитьСтроку(фнОбъект, Справочники.Номенклатура.ПодготовкаЛистовогоМатериала, КоличествоЛистовЗаказчика, 0,,,,,, Истина);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОкрВверх(Знч)
	
	Возврат Цел(Знч)+?(Знч % 1, 1, 0);
	
КонецФункции

&НаСервере
Функция ЗаполнитьФотопечать(ТекущийОбъект)
	
	// { Васильев Александр Леонидович [31.07.2014]
	// Пиздец конечно, что приходится так делать
	// но другого пути в одном месте это писать я не вижу
	// } Васильев Александр Леонидович [31.07.2014]
	
	МассивФотопечати = Новый Массив;
	МассивФотопечати.Добавить(Справочники.Номенклатура.СтеклоСФотопечатью4мм);
	МассивФотопечати.Добавить(Справочники.Номенклатура.СтеклоСФотопечатью6мм);
	
	Для каждого Фотопечать Из МассивФотопечати Цикл
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Номенклатура", Фотопечать);
		НайденныеСтроки = ТекущийОбъект.СписокНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		
		Для каждого СтрокаФотопечати Из НайденныеСтроки Цикл
			
			ДобавитьСтроку(ТекущийОбъект, Фотопечать.ДополнительнаяУслуга, СтрокаФотопечати.Количество, СтрокаФотопечати.НомерИзделия);
			ДобавитьСтроку(ТекущийОбъект, Фотопечать.ДополнительныйЭлемент, СтрокаФотопечати.Количество, СтрокаФотопечати.НомерИзделия);
			ДобавитьСтроку(ТекущийОбъект, Справочники.Номенклатура.ПленкаОракал, СтрокаФотопечати.Количество, СтрокаФотопечати.НомерИзделия);
			
			ИндексСтроки = ТекущийОбъект.СписокНоменклатуры.Индекс(СтрокаФотопечати);
			ТекущийОбъект.СписокНоменклатуры.Удалить(ИндексСтроки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЗаполнитьОсобыеУслуги(фнОбъект)
	
	// { Васильев Александр Леонидович [05.04.2016]
	// Сделать.
	// По хорошему бы запросом сделать.
	// Отобрать нужные строки и выбрать различные.
	// } Васильев Александр Леонидович [05.04.2016]
	
	МассивОсобыхУслуг = Новый Массив;
	
	Для Каждого Строка Из фнОбъект.СписокНоменклатуры Цикл
		Если Строка.Номенклатура.ВыделитьВНаряде Тогда
			
			Наименование = Строка.Номенклатура.Наименование;
			
			// Избавляемся от дублей
			
			Если МассивОсобыхУслуг.Найти(Наименование) = Неопределено Тогда
				МассивОсобыхУслуг.Добавить(Наименование);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если МассивОсобыхУслуг.Количество() > 0 Тогда
		фнОбъект.ОсобыеУслуги = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивОсобыхУслуг, ", ");
	Иначе
		фнОбъект.ОсобыеУслуги = "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОкруглитьКоличествоМатериаловПоНомГруппе(фнОбъект)
	
	// Округление по настройке в справочнике Номенклатурные группы.
	// Требовалось для кромки, но сделали универсальный механизм.
	
	ТаблицаСпискаНоменклатуры = фнОбъект.СписокНоменклатуры.Выгрузить();
	ТаблицаСпискаНоменклатуры.Свернуть("Номенклатура, ПредоставитЗаказчик", "Количество");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСпискаНоменклатуры", ТаблицаСпискаНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаСпискаНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаСпискаНоменклатуры.Количество,
	|	ТаблицаСпискаНоменклатуры.ПредоставитЗаказчик
	|ПОМЕСТИТЬ ТаблицаСпискаНоменклатуры
	|ИЗ
	|	&ТаблицаСпискаНоменклатуры КАК ТаблицаСпискаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСпискаНоменклатуры.Номенклатура,
	|	ТаблицаСпискаНоменклатуры.Количество,
	|	ТаблицаСпискаНоменклатуры.ПредоставитЗаказчик,
	|	НоменклатурныеГруппы.ОкруглятьДо,
	|	ВЫБОР
	|		КОГДА ТаблицаСпискаНоменклатуры.Номенклатура.НоменклатурнаяГруппа.ВидМатериала = ЗНАЧЕНИЕ(Перечисление.ВидыМатериалов.Листовой)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Листовой
	|ИЗ
	|	ТаблицаСпискаНоменклатуры КАК ТаблицаСпискаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|		ПО ТаблицаСпискаНоменклатуры.Номенклатура.НоменклатурнаяГруппа = НоменклатурныеГруппы.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ОкруглятьДо) И Выборка.ОкруглятьДо > 0 И не Выборка.Листовой Тогда
			
			Ы = Цел(Выборка.Количество / Выборка.ОкруглятьДо);
			
			Если Ы <> Выборка.Количество / Выборка.ОкруглятьДо Тогда
				
				Ы = Ы * Выборка.ОкруглятьДо;
				
				Пока Ы < Выборка.Количество Цикл
					
					Ы = Ы + Выборка.ОкруглятьДо;
					
				КонецЦикла;
				
				КоличествоДобавляемогоМатериала = Ы - Выборка.Количество;
				ДобавитьСтроку(фнОбъект, Выборка.Номенклатура, КоличествоДобавляемогоМатериала, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции // ОкруглитьКоличествоМатериаловПоНомГруппе()

&НаСервере
Функция УвеличитьКоличествоМатериаловНаПроцентОтхода(фнОбъект)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Подразделение", фнОбъект.Подразделение);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СформироватьВТНоменклатура(Запрос, фнОбъект);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втНоменклатура.Номенклатура,
	|	ВЫБОР
	|		КОГДА втНоменклатура.Номенклатура.МестоОбработки = ЗНАЧЕНИЕ(Перечисление.МестоОбработки.Цех)
	|					И втНоменклатура.ПоКаталогуМестоОбработки = ""Склад""
	|				ИЛИ втНоменклатура.Номенклатура.НоменклатурнаяГруппа.ВидМатериала = ЗНАЧЕНИЕ(Перечисление.ВидыМатериалов.Листовой)
	|			ТОГДА втНоменклатура.Количество
	|		ИНАЧЕ втНоменклатура.Количество + втНоменклатура.Количество * ВЫРАЗИТЬ(втНоменклатура.Номенклатура КАК Справочник.Номенклатура).ПроцентОтхода / 100
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА втНоменклатура.Номенклатура.НоменклатурнаяГруппа.ВидМатериала <> ЗНАЧЕНИЕ(Перечисление.ВидыМатериалов.Хлыстовой)
	|				И НЕ(втНоменклатура.Номенклатура.МестоОбработки = ЗНАЧЕНИЕ(Перечисление.МестоОбработки.Цех)
	|						И втНоменклатура.ПоКаталогуМестоОбработки = ""Склад"")
	|				И втНоменклатура.Номенклатура.НоменклатурнаяГруппа.ВидМатериала <> ЗНАЧЕНИЕ(Перечисление.ВидыМатериалов.Листовой)
	|			ТОГДА втНоменклатура.КоличествоТребуется + втНоменклатура.КоличествоТребуется * ВЫРАЗИТЬ(втНоменклатура.Номенклатура КАК Справочник.Номенклатура).ПроцентОтхода / 100
	|		ИНАЧЕ втНоменклатура.КоличествоТребуется
	|	КОНЕЦ КАК КоличествоТребуется,
	|	втНоменклатура.Цена,
	|	втНоменклатура.ЗарплатаЦеха,
	|	втНоменклатура.НомерИзделия,
	|	втНоменклатура.НомерСтроки,
	|	втНоменклатура.ИспользуетсяВКоробе,
	|	втНоменклатура.УслугаСМатериаломЗаказчика,
	|	втНоменклатура.ПредоставитЗаказчик,
	|	втНоменклатура.ЧерезСклад,
	|	втНоменклатура.РозничнаяСтоимость,
	|	втНоменклатура.ПоКаталогуМестоОбработки,
	|	втНоменклатура.Двери,
	|	ВЫРАЗИТЬ(втНоменклатура.Номенклатура КАК Справочник.Номенклатура).ПроцентОтхода КАК ПроцентОтхода
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений.СрезПоследних(, Подразделение = &Подразделение) КАК НоменклатураПодразделений
	|		ПО втНоменклатура.Номенклатура = НоменклатураПодразделений.Номенклатура";
	
	фнОбъект.СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецФункции // УвеличитьКоличествоМатериалаНаПроцентОтхода()

&НаСервере
Функция ЗаполнитьМатериалы(ТекущийОбъект, Ошибки, СоответствиеОбрезков)
	
	Метр = 1000;
	МетрКв = Метр * Метр;
	
	ТекущийОбъект.СписокНоменклатуры.Очистить();
	ТекущийОбъект.МерныйМатериал.Очистить();
	
	Изделие = ТекущийОбъект.Изделие;
	
	ПрипускККромке = ЛексСервер.ПолучитьНастройкуПодразделения(ТекущийОбъект.Подразделение, Перечисления.ВидыНастроекПодразделений.ПрипускККромке);
	
	Если НЕ ЗначениеЗаполнено(ПрипускККромке) Тогда
		ПрипускККромке = 0;	
	КонецЕсли;
	
	// { Васильев Александр Леонидович [08.07.2015]
	// Сделать.
	// Вынести заполнение зарплаты дизайнера в отдельную функцию.
	// Здесь коряво смотрится.
	// } Васильев Александр Леонидович [08.07.2015]
	
	// Табличная часть справочника Изделия
	МассивУслугСЗарплатойДизайнера = Новый Массив;
	
	Для каждого Строка Из Изделие.СписокНоменклатуры Цикл
		
		Если НЕ ТекущийОбъект.Дилерский ИЛИ Строка.ДобавлятьДилеру Тогда
			
			ДобавитьСтроку(ТекущийОбъект, Строка.Номенклатура, Строка.Количество, 0, Ошибки, "у изделия " + Изделие);
			
			Если Строка.ЗарплатаДизайнеру Тогда
				
				МассивУслугСЗарплатойДизайнера.Добавить(Строка.Номенклатура);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивУслугСЗарплатойДизайнера.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ЦеныНоменклатурыПоПодразделениямСрезПоследних.ПлановаяЗакупочная) КАК ЗарплатаДизайнера
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоПодразделениям.СрезПоследних(
		|			&МоментВремени,
		|			Подразделение = &Подразделение
		|				И Номенклатура В (&МассивУслугСЗарплатойДизайнера)) КАК ЦеныНоменклатурыПоПодразделениямСрезПоследних";
		
		Запрос.УстановитьПараметр("МассивУслугСЗарплатойДизайнера", МассивУслугСЗарплатойДизайнера);
		Запрос.УстановитьПараметр("МоментВремени", ТекущийОбъект.Дата);
		Запрос.УстановитьПараметр("Подразделение", ТекущийОбъект.Подразделение);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ТекущийОбъект.ЗарплатаДизайнера = ВыборкаДетальныеЗаписи.ЗарплатаДизайнера;
		
	КонецЕсли;
	
	#ОБЛАСТЬ Основной_цикл_заполнения_материалов
	
	Для Каждого Строка Из ТекущийОбъект.СписокДеталей Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.ВидДетали) Тогда
			Строка.ВидДетали = Справочники.ВидыДеталей.НайтиПоНаименованию(Строка.Материал);
		КонецЕсли;
		
		ДанныеДетали = ПолучитьДанныеДетали(Строка.ВидДетали);
		
		Клееная = ДанныеДетали.Клееная;
		
		СборныйРамочныйФасад = ЗначениеЗаполнено(Строка.КромкаДляСборнойРамки);
		
		Номенклатура = Строка.Номенклатура;
		НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
		НоменклатураДляСклеивания = Строка.НоменклатураДляСклеивания;
		КоличествоДеталей = Строка.Количество;
		ВысотаДетали = Строка.ВысотаДетали;
		ШиринаДетали = Строка.ШиринаДетали;
		НомерСтроки = Строка.НомерСтроки;
		НомерИзделия = Строка.НомерИзделия;
		Листовой = НоменклатурнаяГруппа.ВидМатериала = Перечисления.ВидыМатериалов.Листовой;
		
		УниверсальнаяКромка = Строка.УниверсальнаяКромка;
		ШиринаВставки = Номенклатура.ГлубинаДетали;
		ШиринаПаза = ?(ЗначениеЗаполнено(УниверсальнаяКромка),УниверсальнаяКромка.ШиринаПаза, 0);
		Петли = Строка.Петли;
		ДлинаКривогоПила = Число(Строка.ДлинаКривогоПила);
		Периметр = Число(Строка.Периметр);
		Обтачивать = Строка.Обтачивать;
		Постформинг = Строка.Постформинг;
		
		Площадь = 0;
		
		Если ДанныеДетали.УчитыватьКратность Тогда
			
			ПодЗаказ = ЛексСервер.НоменклатураПодЗаказ(Номенклатура, Объект.Подразделение);
			
			// { Васильев Александр Леонидович [13.10.2015]
			// Сомнительный момент
			// Зачем тут анализируем под заказ?
			// Округляем до листов мы позже
			// } Васильев Александр Леонидович [13.10.2015]
			
			Если ПодЗаказ Тогда
				
				Площадь = (ВысотаДетали / Метр) * КоличествоДеталей;
				
			Иначе
				
				СтруктураКратности = ЛексСервер.ПосчитатьКратность(Номенклатура, ВысотаДетали);
				
				Если СтруктураКратности.КоличествоМатериала = ВысотаДетали Тогда
					Площадь = (ВысотаДетали / Метр) * КоличествоДеталей;
				Иначе
					Площадь = СтруктураКратности.КоличествоМатериала / Метр * КоличествоДеталей;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ Листовой Тогда
				ДобавитьСтроку(ТекущийОбъект, Номенклатура, Площадь, НомерИзделия, Ошибки, "детали № " + НомерСтроки, "СписокДеталей", НомерСтроки);
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				Попытка
					Выполнить("Площадь = " + ДанныеДетали.РазмерТекстура);
					Площадь = Площадь * КоличествоДеталей;
					Если НЕ Листовой Тогда
						ДобавитьСтроку(ТекущийОбъект, Номенклатура, Площадь, НомерИзделия, Ошибки, "детали № " + НомерСтроки, "СписокДеталей", НомерСтроки);
					КонецЕсли;
				Исключение
					Сообщить("Ошибка при формировании формулы: №002");
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоменклатураДляСклеивания) Тогда
			Попытка
				Выполнить("Площадь = " + ДанныеДетали.РазмерДопНоменклатура);
				Площадь = Площадь * КоличествоДеталей;
				
				Если ТекущийОбъект.ЭтоКухня И НоменклатураДляСклеивания.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Ручка Тогда
					ДобавитьСтроку(ТекущийОбъект, НоменклатураДляСклеивания, Площадь, НомерИзделия, Ошибки, "детали № " + НомерСтроки, "СписокДеталей", НомерСтроки, Ложь, Ложь, -1, "Склад");	
				Иначе
					Если НоменклатураДляСклеивания.НоменклатурнаяГруппа.ВидМатериала <> Перечисления.ВидыМатериалов.Листовой Тогда
						ДобавитьСтроку(ТекущийОбъект, НоменклатураДляСклеивания, Площадь, НомерИзделия, Ошибки, "детали № " + НомерСтроки, "СписокДеталей", НомерСтроки);
					КонецЕсли;
				КонецЕсли;
				
			Исключение
				Сообщить("Ошибка при формировании формулы: №003");
			КонецПопытки;
		КонецЕсли;
		
		Для Каждого Эл Из ДанныеДетали.Комплектация Цикл
			
			Эл = Эл.Значение;
			Количество = 0;
			
			Попытка
				
				Выполнить("Количество = " + Эл.Количество);
				Количество = Количество * КоличествоДеталей;
				
				Если Количество > 0 Тогда
					ДобавитьСтроку(ТекущийОбъект, Эл.Номенклатура, Количество, НомерИзделия);
				КонецЕсли;
				
			Исключение
				Сообщить("Ошибка при формировании формулы: №004");
			КонецПопытки;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Петли) Тогда
			
			ДобавитьСтроку(ТекущийОбъект, Петли, Строка.КоличествоПетель * КоличествоДеталей, НомерИзделия, Ошибки);
			
		КонецЕсли;
		
		Если ДанныеДетали.СпецФасад Тогда
			
			Если СборныйРамочныйФасад Тогда
				
				Количество = ((ВысотаДетали + Строка.УниверсальнаяКромка.ГлубинаДетали * 2 + 50) * 4 + (ШиринаДетали + Строка.УниверсальнаяКромка.ГлубинаДетали * 2 + 50) *4) * КоличествоДеталей / МетрКв;
				ДобавитьСтроку(ТекущийОбъект, Строка.КромкаДляСборнойРамки, Количество, Строка.НомерИзделия, Ошибки, "кромки для сборной рамки у детали № " + Строка.НомерСтроки, "СписокДеталей", Строка.НомерСтроки);
				
				Площадь = (((ВысотаДетали + Строка.УниверсальнаяКромка.ГлубинаДетали * 2 + 50) * Строка.ШиринаСборнойРамки) * 2 + ((ШиринаДетали + Строка.УниверсальнаяКромка.ГлубинаДетали * 2 + 50) * Строка.ШиринаСборнойРамки) *2) * КоличествоДеталей / МетрКв;
				ДобавитьСтроку(ТекущийОбъект, Строка.УниверсальнаяКромка, Площадь, Строка.НомерИзделия, Ошибки, "обрамления фасада у детали № " + Строка.НомерСтроки, "СписокДеталей", Строка.НомерСтроки);
				
			Иначе
				
				Периметр = (ШиринаДетали + ВысотаДетали + 4 * Строка.УниверсальнаяКромка.ГлубинаДетали) * 2;
				ДлинаПрофиля = Периметр * КоличествоДеталей / Метр;
				ДобавитьСтроку(ТекущийОбъект, Строка.УниверсальнаяКромка, ДлинаПрофиля, Строка.НомерИзделия, Ошибки, "универсальной кромки у детали № " + Строка.НомерСтроки, "СписокДеталей", Строка.НомерСтроки);
				
			КонецЕсли;
			
		Иначе
			
			КромкиСлеваСправа = Новый Массив;
			КромкиСверхуСнизу = Новый Массив;
			
			Если ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСверху) Тогда
				Если Строка.ПереключательКромкаСверху = "Кант" 
					И Строка.ВыборМебельнойКромкиСверху.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга  Тогда
					
					ДобавитьСтроку(ТекущийОбъект, Строка.ВыборМебельнойКромкиСверху, ШиринаДетали * КоличествоДеталей / Метр, НомерИзделия, Ошибки);
					
				Иначе
					
					Стр = Новый Структура();
					Стр.Вставить("Кромка",Строка.ВыборМебельнойКромкиСверху);
					Стр.Вставить("Длина",ШиринаДетали - Строка.РадиусЛевоВерх - Строка.РадиусПравоВерх);
					
					КромкиСверхуСнизу.Добавить(Стр);
					
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСнизу) Тогда
				Если Строка.ПереключательКромкаСнизу = "Кант" 
					И Строка.ВыборМебельнойКромкиСнизу.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга  Тогда
					
					ДобавитьСтроку(ТекущийОбъект, Строка.ВыборМебельнойКромкиСнизу, ШиринаДетали * КоличествоДеталей / Метр, НомерИзделия, Ошибки);
					
				Иначе
					
					Стр = Новый Структура();
					Стр.Вставить("Кромка",Строка.ВыборМебельнойКромкиСнизу);
					Стр.Вставить("Длина",ШиринаДетали - Строка.РадиусЛевоНиз - Строка.РадиусПравоНиз);
					
					КромкиСверхуСнизу.Добавить(Стр);
					
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСлева) Тогда
				Если Строка.ПереключательКромкаСлева = "Кант" 
					И Строка.ВыборМебельнойКромкиСлева.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга  Тогда
					
					ДобавитьСтроку(ТекущийОбъект, Строка.ВыборМебельнойКромкиСлева, ВысотаДетали * КоличествоДеталей / Метр, НомерИзделия, Ошибки);
					
				Иначе
					
					Стр = Новый Структура();
					Стр.Вставить("Кромка",Строка.ВыборМебельнойКромкиСлева);
					Стр.Вставить("Длина",ВысотаДетали - Строка.РадиусЛевоНиз - Строка.РадиусЛевоВерх + ?(Строка.РадиусЛевоНиз>0, 3.141592*Строка.РадиусЛевоНиз/2, 0) + ?(Строка.РадиусЛевоВерх>0, 3.141592*Строка.РадиусЛевоВерх/2, 0));
					
					КромкиСлеваСправа.Добавить(Стр);
					
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ВыборМебельнойКромкиСправа) Тогда
				Если Строка.ПереключательКромкаСправа = "Кант" 
					И Строка.ВыборМебельнойКромкиСправа.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга  Тогда
					
					ДобавитьСтроку(ТекущийОбъект, Строка.ВыборМебельнойКромкиСправа, ВысотаДетали * КоличествоДеталей / Метр, НомерИзделия, Ошибки);
					
				Иначе
					
					Стр = Новый Структура();
					Стр.Вставить("Кромка",Строка.ВыборМебельнойКромкиСправа);
					
					
					Если Строка.Срез И Строка.РадиусПравоНиз > 0 Тогда
						Срез = Строка.РадиусПравоНиз;
						ДлинаРадиусаПравоНиз = ОКР(POW(Срез*Срез+Срез*Срез,0.5));
					Иначе
						ДлинаРадиусаПравоНиз = ?(Строка.РадиусПравоНиз>0, 3.141592*Строка.РадиусПравоНиз/2, 0);
					КонецЕсли;
					
					Стр.Вставить("Длина",ВысотаДетали - Строка.РадиусПравоНиз - Строка.РадиусПравоВерх + ДлинаРадиусаПравоНиз + ?(Строка.РадиусПравоВерх>0, 3.141592*Строка.РадиусПравоВерх/2, 0));
					
					КромкиСлеваСправа.Добавить(Стр);
					
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого Строчка Из КромкиСверхуСнизу Цикл
				
				
				Если Строчка.Кромка.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ТорцеваяРучка16мм или Строчка.Кромка.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ТорцеваяРучка18мм Тогда	
					Площадь = КоличествоДеталей;
				Иначе
					Площадь = (Строчка.Длина + ПрипускККромке) * КоличествоДеталей / Метр;
				КонецЕсли;
				
				Если Площадь > 0 Тогда
					ДобавитьСтроку(ТекущийОбъект, Строчка.Кромка, Площадь, НомерИзделия, Ошибки, "кромки у детали № " + НомерСтроки, "СписокДеталей", НомерСтроки);
				КонецЕсли;	
				
			КонецЦикла;
			
			Для Каждого Строчка Из КромкиСлеваСправа Цикл
				
				Если Строчка.Кромка.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ТорцеваяРучка16мм или Строчка.Кромка.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ТорцеваяРучка18мм Тогда
					Площадь = КоличествоДеталей;
				Иначе
					Площадь = (Строчка.Длина + ПрипускККромке) * КоличествоДеталей / Метр;
				КонецЕсли;
				
				Если Площадь > 0 Тогда
					ДобавитьСтроку(ТекущийОбъект, Строчка.Кромка, Площадь, НомерИзделия, Ошибки, "кромки у детали № " + НомерСтроки, "СписокДеталей", НомерСтроки);
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;
		
		КантыИзРедактора = Строка.КантыИзРедактора;
		
		Если ЗначениеЗаполнено(КантыИзРедактора) Тогда
			
			КантыИзРедактора = ЗначениеИзСтрокиВнутр(КантыИзРедактора);
			МассивКантов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КантыИзРедактора, "|");
			
			Для Каждого Кромка Из МассивКантов Цикл
				
				ПараметрыКанта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Кромка, "_");
				НоменклатурныйНомер = ПараметрыКанта[0];
				ДлинаКанта = Число(ПараметрыКанта[1]);
				НоменклатураКанта = Справочники.Номенклатура.НайтиПоКоду(НоменклатурныйНомер);
				ДлинаКромления = ДлинаКанта * КоличествоДеталей / 1000;
				
				// { Васильев Александр Леонидович [07.09.2015]
				// Распоряжение Лайн Д.В. от 2015.09.05
				ДлинаКромления = ДлинаКромления * 2;
				// } Васильев Александр Леонидович [07.09.2015]
				
				ДобавитьСтроку(ТекущийОбъект, НоменклатураКанта, ДлинаКромления, НомерИзделия, Ошибки, "канта из редактора у детали № " + НомерСтроки, "СписокДеталей", НомерСтроки);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	#КОНЕЦОБЛАСТИ
	
	#ОБЛАСТЬ Ящики
	
	ТаблицаМатериалыЯщиков = Документы.Спецификация.ПолучитьТаблицуМатериаловЯщики(ТаблицаДеталиЯщиков, ТекущийОбъект);
	
	Для Каждого МатериалЯщика Из ТаблицаМатериалыЯщиков Цикл
		Листовой = МатериалЯщика.Листовой;
		Если НЕ Листовой Тогда
			ДобавитьСтроку(ТекущийОбъект, МатериалЯщика.Номенклатура, МатериалЯщика.Количество, МатериалЯщика.НомерИзделия, Неопределено, "", Неопределено, 0, Ложь, Ложь, -1, МатериалЯщика.МестоОбработки);
		КонецЕсли;
	КонецЦикла;
	
	#КОНЕЦОБЛАСТИ
	
	// ключ шестигранный
	//Если ТекущийОбъект.СписокДверей.Количество() > 0 Тогда
	//	ДобавитьСтроку(ТекущийОбъект, Справочники.Номенклатура.КлючШестигранный, 1, 0, Ошибки);	
	//КонецЕсли;
	
	#Область Двери
	
	//Добавляем номенклатуру из дверей
	Для каждого Строка Из ТекущийОбъект.СписокДверей Цикл
		
		ТаблицаНоменклатурыДверей = Строка.Двери.СписокНоменклатуры;
		
		Для каждого СтрокаНоменклатуры Из ТаблицаНоменклатурыДверей Цикл
			
			ВидМатериала = СтрокаНоменклатуры.Номенклатура.НоменклатурнаяГруппа.ВидМатериала;
			
			Если ВидМатериала = Перечисления.ВидыМатериалов.Хлыстовой Тогда
				
				Для ъ = 1 по СтрокаНоменклатуры.Количество Цикл
					ТекстСообщения = "строки № " + СтрокаНоменклатуры.НомерСтроки + " у двери № " + Строка.НомерСтроки;
					ДобавитьСтроку(ТекущийОбъект, СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.Ширина / 1000, 0, Ошибки, ТекстСообщения, "СписокДверей", Строка.НомерСтроки, Ложь, Ложь, -1, "", Строка.Двери);
				КонецЦикла;
				
			ИначеЕсли НЕ ВидМатериала = Перечисления.ВидыМатериалов.Листовой Тогда
				
				КоличествоМатериала = ЛексСервер.ПосчитатьКратность(СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.КоличествоСОтходом).КоличествоМатериала;
				ТекстСообщения = "строки № " + СтрокаНоменклатуры.НомерСтроки + " у двери № " + Строка.НомерСтроки;
				ДобавитьСтроку(ТекущийОбъект, СтрокаНоменклатуры.Номенклатура, КоличествоМатериала, 0, Ошибки, ТекстСообщения, "СписокДверей", Строка.НомерСтроки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	// Добавление обрезков из раскроя.
	
	Если СоответствиеОбрезков <> Неопределено Тогда
		
		Для Каждого Строка Из СоответствиеОбрезков Цикл
			
			НоменклатураОбрезка = Строка.Ключ;
			Если НоменклатураОбрезка.НоменклатурнаяГруппа.КоличествоВПогонныхМетрах Тогда
				ПлощадьОбрезков = Окр(Строка.Значение / Метр, 3);
			Иначе
				ПлощадьОбрезков = Окр(Строка.Значение / МетрКв, 3);
			КонецЕсли;
			Если ПлощадьОбрезков > 0 Тогда
				
				ДобавитьСтроку(ТекущийОбъект, НоменклатураОбрезка, ПлощадьОбрезков, 0, Ошибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ЗаполнитьМатериалы()

// Устанавливает цену на материалы и услуги, 
// также проставляет флаг ПредоставитЗаказчик.
// Теперь без группировки строк
//
// Параметры
//  фнОбъект  - ДокументОбъект.Спецификация - Спецификация для заполнения цен
//                 в табилце СписокНоменклатуры
&НаСервере
Процедура ЗаполнитьСтоимость(фнОбъект)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СформироватьВТНоменклатура(Запрос, фнОбъект);
	
	Запрос.УстановитьПараметр("тзМатериалЗаказчика", фнОбъект.СписокМатериаловЗаказчика);
	Запрос.УстановитьПараметр("Подразделение", фнОбъект.Подразделение);
	Запрос.УстановитьПараметр("Период", фнОбъект.Дата);
	
	// { Васильев Александр Леонидович [08.10.2015]
	// Убираю группировку, больше проблем с ней чем выгоды.
	// Впоследствии можно будет более подробный комментарий
	// к каждой строке сделать. Например номер детали.
	// } Васильев Александр Леонидович [08.10.2015]
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(тзМатериалЗаказчика.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	0 КАК Цена
	|ПОМЕСТИТЬ втМатериалЗаказчика
	|ИЗ
	|	&тзМатериалЗаказчика КАК тзМатериалЗаказчика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНоменклатура.Номенклатура,
	|	втНоменклатура.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА втНоменклатура.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|			ТОГДА 0
	|		ИНАЧЕ втНоменклатура.КоличествоТребуется
	|	КОНЕЦ КАК КоличествоТребуется,
	|	втНоменклатура.ЧерезСклад КАК ЧерезСклад,
	|	втНоменклатура.УслугаСМатериаломЗаказчика КАК УслугаСМатериаломЗаказчика,
	|	ВЫБОР
	|		КОГДА втМатериалЗаказчика.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПредоставитЗаказчик,
	|	ВЫБОР
	|		КОГДА втНоменклатура.НомерИзделия = 0
	|				ИЛИ втНоменклатура.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК НомерИзделия,
	|	втНоменклатура.ИспользуетсяВКоробе КАК ИспользуетсяВКоробе,
	|	ВЫБОР
	|		КОГДА втНоменклатура.Номенклатура.НоменклатурнаяГруппа.ВидМатериала = ЗНАЧЕНИЕ(Перечисление.ВидыМатериалов.Хлыстовой)
	|				ИЛИ втНоменклатура.УслугаСМатериаломЗаказчика
	|			ТОГДА втНоменклатура.НомерСтроки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БезГруппировки,
	|	ЕСТЬNULL(втМатериалЗаказчика.Цена, ЕСТЬNULL(РозничныеЦеныСрез.Розничная, 0)) КАК Цена,
	|	ВЫБОР
	|		КОГДА втНоменклатура.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|			ТОГДА ЕСТЬNULL(РозничныеЦеныСрез.ПлановаяЗакупочная, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПлановаяЗакупочная,
	|	втНоменклатура.ПоКаталогуМестоОбработки КАК ПоКаталогуМестоОбработки,
	|	втНоменклатура.Двери КАК Двери
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоПодразделениям.СрезПоследних(
	|				&Период,
	|				Подразделение = &Подразделение
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							втНоменклатура.Номенклатура
	|						ИЗ
	|							втНоменклатура КАК втНоменклатура)) КАК РозничныеЦеныСрез
	|		ПО втНоменклатура.Номенклатура = РозничныеЦеныСрез.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМатериалЗаказчика КАК втМатериалЗаказчика
	|		ПО втНоменклатура.Номенклатура = втМатериалЗаказчика.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ПлановаяЗакупочная * втДанные.Количество КАК ЗарплатаЦеха,
	|	втДанные.Количество КАК Количество,
	|	втДанные.КоличествоТребуется КАК КоличествоТребуется,
	|	втДанные.Номенклатура,
	|	втДанные.НомерИзделия,
	|	втДанные.ИспользуетсяВКоробе,
	|	втДанные.ПредоставитЗаказчик,
	|	втДанные.УслугаСМатериаломЗаказчика,
	|	втДанные.Цена * втДанные.Количество КАК РозничнаяСтоимость,
	|	втДанные.Цена * втДанные.Количество КАК СуммаБезНаценкиОфиса,
	|	втДанные.Цена КАК Цена,
	|	втДанные.ЧерезСклад,
	|	втДанные.БезГруппировки,
	|	втДанные.ПоКаталогуМестоОбработки,
	|	втДанные.Двери
	|ИЗ
	|	втДанные КАК втДанные";
	
	фнОбъект.СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ЗаменитьЦенуМатериалаПодЗаказ(фнОбъект)
	
	Если фнОбъект.СписокМатериаловПодЗаказ.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СформироватьВТНоменклатура(Запрос, фнОбъект);
	
	Запрос.УстановитьПараметр("тзМатериалПодЗаказ", фнОбъект.СписокМатериаловПодЗаказ.Выгрузить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(тзМатериалПодЗаказ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	тзМатериалПодЗаказ.Цена
	|ПОМЕСТИТЬ втМатериалПодЗаказ
	|ИЗ
	|	&тзМатериалПодЗаказ КАК тзМатериалПодЗаказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.ЗарплатаЦеха,
	|	втНоменклатура.Количество,
	|	втНоменклатура.КоличествоТребуется,
	|	втНоменклатура.Номенклатура,
	|	втНоменклатура.НомерИзделия,
	|	втНоменклатура.ИспользуетсяВКоробе,
	|	втНоменклатура.УслугаСМатериаломЗаказчика,
	|	втНоменклатура.ПредоставитЗаказчик КАК ПредоставитЗаказчик,
	|	ВЫБОР
	|		КОГДА втМатериалПодЗаказ.Цена ЕСТЬ NULL 
	|			ТОГДА втНоменклатура.РозничнаяСтоимость
	|		ИНАЧЕ втМатериалПодЗаказ.Цена * втНоменклатура.Количество
	|	КОНЕЦ КАК РозничнаяСтоимость,
	|	ВЫБОР
	|		КОГДА втМатериалПодЗаказ.Цена ЕСТЬ NULL 
	|			ТОГДА втНоменклатура.РозничнаяСтоимость
	|		ИНАЧЕ втМатериалПодЗаказ.Цена * втНоменклатура.Количество
	|	КОНЕЦ КАК СуммаБезНаценкиОфиса,
	|	ЕСТЬNULL(втМатериалПодЗаказ.Цена, втНоменклатура.Цена) КАК Цена,
	|	втНоменклатура.ЧерезСклад,
	|	втНоменклатура.ПоКаталогуМестоОбработки,
	|	втНоменклатура.Двери КАК Двери
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМатериалПодЗаказ КАК втМатериалПодЗаказ
	|		ПО втНоменклатура.Номенклатура = втМатериалПодЗаказ.Номенклатура";
	
	фнОбъект.СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецФункции

&НаСервере
Функция УвеличитьСтоимостьЗаПредоставленныйМатериал(фнОбъект)
	
	Коэффициент = фнОбъект.Подразделение.МатериалЗаказчикаНаценка;
	
	Если Коэффициент = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("тзНоменклатура", фнОбъект.СписокНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тзНоменклатура.РозничнаяСтоимость
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	&тзНоменклатура КАК тзНоменклатура
	|ГДЕ
	|	тзНоменклатура.УслугаСМатериаломЗаказчика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.РозничнаяСтоимость КАК РозничнаяСтоимость
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|ИТОГИ
	|	СУММА(РозничнаяСтоимость)
	|ПО
	|	ОБЩИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Выборка.Следующий();
		Сумма = Выборка.РозничнаяСтоимость;
		
		Если Сумма > 0 Тогда
			
			Стоимость = Сумма * Коэффициент;
			
			НоваяСтрока = фнОбъект.СписокНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура = Справочники.Номенклатура.НадбавкаЗаМатериалЗаказчика;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.РозничнаяСтоимость = Стоимость;
			НоваяСтрока.СуммаБезНаценкиОфиса = Стоимость;
			НоваяСтрока.Цена = Стоимость;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПрименитьКоэффициентыОфиса(фнОбъект)
	
	Если фнОбъект.Дилерский Тогда
		Возврат Истина;
	КонецЕсли;
	
	СвойстваОфиса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(фнОбъект.Офис, "КоэффициентУслуги, КоэффициентМатериалы");
	
	Если НЕ ЗначениеЗаполнено(СвойстваОфиса.КоэффициентУслуги) Тогда
		СвойстваОфиса.КоэффициентУслуги = 1;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СвойстваОфиса.КоэффициентМатериалы) Тогда
		СвойстваОфиса.КоэффициентМатериалы = 1;
	КонецЕсли;
	
	Если СвойстваОфиса.КоэффициентУслуги + СвойстваОфиса.КоэффициентМатериалы = 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СформироватьВТНоменклатура(Запрос, фнОбъект);
	
	Запрос.УстановитьПараметр("КоэффициентМатериалы", СвойстваОфиса.КоэффициентМатериалы);
	Запрос.УстановитьПараметр("КоэффициентУслуги", СвойстваОфиса.КоэффициентУслуги);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втНоменклатура.Номенклатура,
	|	втНоменклатура.Количество,
	|	втНоменклатура.КоличествоТребуется,
	|	ВЫБОР
	|		КОГДА втНоменклатура.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|			ТОГДА втНоменклатура.Цена * &КоэффициентМатериалы
	|		ИНАЧЕ втНоменклатура.Цена * &КоэффициентУслуги
	|	КОНЕЦ КАК Цена,
	|	втНоменклатура.ЗарплатаЦеха,
	|	втНоменклатура.НомерИзделия,
	|	втНоменклатура.НомерСтроки,
	|	втНоменклатура.ИспользуетсяВКоробе,
	|	втНоменклатура.УслугаСМатериаломЗаказчика,
	|	втНоменклатура.ЧерезСклад,
	|	втНоменклатура.ПредоставитЗаказчик,
	|	ВЫБОР
	|		КОГДА втНоменклатура.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|			ТОГДА втНоменклатура.Цена * &КоэффициентМатериалы * втНоменклатура.Количество
	|		ИНАЧЕ втНоменклатура.Цена * &КоэффициентУслуги * втНоменклатура.Количество
	|	КОНЕЦ КАК РозничнаяСтоимость,
	|	втНоменклатура.СуммаБезНаценкиОфиса,
	|	втНоменклатура.ПоКаталогуМестоОбработки,
	|	втНоменклатура.Двери
	|ИЗ
	|	втНоменклатура КАК втНоменклатура";
	
	Результат = Запрос.Выполнить();
	фнОбъект.СписокНоменклатуры.Загрузить(Результат.Выгрузить());
	
КонецФункции

&НаСервере
Функция ЗаполнитьМатериалПодЗаказ(фнОбъект)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", фнОбъект.Подразделение);
	Запрос.УстановитьПараметр("тзНоменклатура", фнОбъект.СписокНоменклатуры);
	Запрос.УстановитьПараметр("тзМатериалПодЗаказ", фнОбъект.СписокМатериаловПодЗаказ);
	Запрос.УстановитьПараметр("тзМатериалЗаказчика", фнОбъект.СписокМатериаловЗаказчика);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тзНоменклатура.Количество,
	|	ВЫРАЗИТЬ(тзНоменклатура.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	&тзНоменклатура КАК тзНоменклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тзМатериалЗаказчика.Номенклатура
	|ПОМЕСТИТЬ втМатериалЗаказчика
	|ИЗ
	|	&тзМатериалЗаказчика КАК тзМатериалЗаказчика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втНоменклатура.Количество) КАК Количество,
	|	втНоменклатура.Номенклатура
	|ПОМЕСТИТЬ втПодЗаказ
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений.СрезПоследних(, Подразделение = &Подразделение) КАК НоменклатураПодразделений
	|		ПО втНоменклатура.Номенклатура = НоменклатураПодразделений.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМатериалЗаказчика КАК втМатериалЗаказчика
	|		ПО втНоменклатура.Номенклатура = втМатериалЗаказчика.Номенклатура
	|ГДЕ
	|	втМатериалЗаказчика.Номенклатура ЕСТЬ NULL 
	|	И ЕСТЬNULL(НоменклатураПодразделений.ПодЗаказ, ИСТИНА)
	|	И НЕ втНоменклатура.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	втНоменклатура.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(тзМатериалПодЗаказ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	тзМатериалПодЗаказ.Количество КАК Количество,
	|	тзМатериалПодЗаказ.Комментарий КАК Комментарий,
	|	тзМатериалПодЗаказ.Поставщик КАК Поставщик,
	|	тзМатериалПодЗаказ.Сумма КАК Сумма,
	|	тзМатериалПодЗаказ.Цена КАК Цена
	|ПОМЕСТИТЬ втМатериалПодЗаказ
	|ИЗ
	|	&тзМатериалПодЗаказ КАК тзМатериалПодЗаказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПодЗаказ.Количество КАК Количество,
	|	ЕСТЬNULL(втМатериалПодЗаказ.Номенклатура, втПодЗаказ.Номенклатура) КАК Номенклатура,
	|	втМатериалПодЗаказ.Комментарий,
	|	втМатериалПодЗаказ.Поставщик,
	|	ЕСТЬNULL(втМатериалПодЗаказ.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(втМатериалПодЗаказ.Цена, 0) * втПодЗаказ.Количество КАК Сумма
	|ИЗ
	|	втПодЗаказ КАК втПодЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМатериалПодЗаказ КАК втМатериалПодЗаказ
	|		ПО втПодЗаказ.Номенклатура = втМатериалПодЗаказ.Номенклатура";
	
	фнОбъект.СписокМатериаловПодЗаказ.Загрузить(Запрос.Выполнить().Выгрузить());
	фнОбъект.ЕстьМатериалПодЗаказ = фнОбъект.СписокМатериаловПодЗаказ.Количество() > 0;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

&НаСервере
Функция ОпределитьПлощадьЛиста(фнНоменклатура, фнПодразделение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", фнНоменклатура);
	Запрос.УстановитьПараметр("Подразделение", фнПодразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	спрНоменклатура.Ссылка КАК Номенклатура,
	|	спрНоменклатура.ШиринаДетали КАК ШиринаДетали,
	|	спрНоменклатура.ДлинаДетали КАК ДлинаДетали,
	|	ЕСТЬNULL(НомПодразделений.ОсновнаяПоСкладу.КоэффициентБазовых, 0) КАК КоэффициентБазовых
	|ИЗ
	|	Справочник.Номенклатура КАК спрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений.СрезПоследних(,Подразделение = &Подразделение) КАК НомПодразделений
	|		ПО спрНоменклатура.Ссылка = НомПодразделений.Номенклатура
	|ГДЕ
	|	спрНоменклатура.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 100500000000; // На всякий случай :)
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Если Выборка.Количество() = 1 И ЗначениеЗаполнено(Выборка.КоэффициентБазовых) Тогда
		Площадь = Выборка.КоэффициентБазовых;
	Иначе
		Площадь = Выборка.ШиринаДетали * Выборка.ДлинаДетали / 1000000;
	КонецЕсли;
	
	Возврат Площадь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДилерскуюСумма(СпецификацияСсылка)
	
	Возврат Документы.Спецификация.ПолучитьСуммаСДилерскимиНаценками(СпецификацияСсылка);
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммы()
	
	СтруктураСкидка = ЛексСервер.ПолучитьСкидкуДоговора(Объект.Подразделение, Объект.Дата, Объект.СуммаДокумента, ВидОплаты, Объект.Офис, Объект.Контрагент);
	
	ПроцентСкидки = СтруктураСкидка.РазмерСкидки;
	
	Если СтруктураСкидка.СуммаДокумента <> 0 Тогда		
		СуммаДокументаСоСкидкой = СтруктураСкидка.СуммаДокумента - (СтруктураСкидка.СуммаДокумента * ПроцентСкидки / 100);		
	Иначе	
		СуммаДокументаСоСкидкой = Объект.СуммаДокумента - (Объект.СуммаДокумента * ПроцентСкидки / 100);		
	КонецЕсли;
	
	Элементы.СкидкаПостоянномуКлиенту.Заголовок = "( Постоянному клиенту скидка " + СтруктураСкидка.РазмерСкидкиПостоянногоКлиента + "% )";
	Элементы.СкидкаПостоянномуКлиенту.Видимость = СтруктураСкидка.ЭтоПостоянныйКлиент;
	
	Если Объект.Дилерский Тогда
		фСуммаДокумента = ПолучитьДилерскуюСумма(Объект.Ссылка);
	Иначе
		фСуммаДокумента = Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьНужнуюТаблицуВХранилище(ТабличнаяЧасть)
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ДанныеФормыКоллекция") Тогда
		
		Адрес = ПоместитьВоВременноеХранилище(ТабличнаяЧасть.Выгрузить());
		Возврат Адрес;
		
	ИначеЕсли ТипЗнч(ТабличнаяЧасть) = Тип("Структура") Тогда
		
		Возврат ПоместитьВоВременноеХранилище(ТабличнаяЧасть);
		
	КонецЕсли;
	
КонецФункции 

&НаСервере
Процедура ЗагрузитьТабличнуюЧасть(АдресЗначения, ИмяТабличнойЧасти)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ПолучитьИзВременногоХранилища(АдресЗначения);
	
	Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		
		Объект[ИмяТабличнойЧасти].Загрузить(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		
		Если Значение.Свойство("Модифицированность") И НЕ Модифицированность Тогда
			Модифицированность = Значение.Модифицированность;	
		КонецЕсли;
		
		Если Значение.Свойство("Детали") И Значение.Свойство("Двери") Тогда
			
			Объект[ИмяТабличнойЧасти].Загрузить(Значение.Детали);
			
			Объект.СписокДверей.Очистить();
			
			Если ЗначениеЗаполнено(Значение.Двери) Тогда
				
				СтрокаДверей = Объект.СписокДверей.Добавить();
				СтрокаДверей.Двери = Значение.Двери;
				СтрокаДверей.ПоКаталогу = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьТаблицыПоКаталогу(Таблица, ТаблицаФасадов)
	
	Стр = Новый Структура;
	
	Стр.Вставить("АдресТаблицы", ПоместитьВоВременноеХранилище(Таблица.Выгрузить()));
	Стр.Вставить("АдресТаблицаФасадов", ПоместитьВоВременноеХранилище(ТаблицаФасадов.Выгрузить()));
	
	Возврат Стр;
	
КонецФункции

&НаКлиенте
Функция ОткрытьФормуПодбора(ИмяПодбора, ТаблицаДляФормы, СтрокаДанных, ВладелецПодобра, ПараметрыПодбора = Неопределено)
	
	Если ПараметрыПодбора = Неопределено ИЛИ ТипЗнч(ПараметрыПодбора) <> Тип("Структура") Тогда
		ПараметрыПодбора = Новый Структура;
	КонецЕсли;
	
	
	Если ПараметрыПодбора.Свойство("ТаблицаФасадов") Тогда
		
		АдресаТаблиц = ВыгрузитьТаблицыПоКаталогу(ТаблицаДляФормы, ПараметрыПодбора.ТаблицаФасадов);
		АдресТаблицы = АдресаТаблиц.АдресТаблицы;
		
		ПараметрыПодбора.Вставить("АдресТаблицаФасадов", АдресаТаблиц.АдресТаблицаФасадов);
		
	Иначе
		
		АдресТаблицы = ВыгрузитьНужнуюТаблицуВХранилище(ТаблицаДляФормы);
		
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("АдресТаблицы", АдресТаблицы);
	ПараметрыПодбора.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыПодбора.Вставить("Изделие", Объект.Изделие);
	ПараметрыПодбора.Вставить("Офис", Объект.ОФис);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыПодбора.Вставить("Спецификация", Объект.Ссылка);
		
	КонецЕсли;
	
	Если СтрокаДанных <> Неопределено Тогда
		
		ПараметрыПодбора.Вставить("Идентификатор", СтрокаДанных.НомерСтроки - 1);
		
	КонецЕсли;
	
	Если ИмяПодбора = "ФормаКомплектация" Тогда
		
		Пар = Новый Структура;
		Пар.Вставить("АдресТаблицы", АдресТаблицы);
		ПараметрыПодбора.Вставить("Комплектация", Пар);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, ВладелецПодобра);
		
	Иначе
		
		ОткрытьФорму("Документ.Спецификация.Форма." + ИмяПодбора, ПараметрыПодбора, ВладелецПодобра);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Собрать()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ПараметрыФормыПодбора = Новый Структура;
	ПараметрыФормыПодбора.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	Если ИмяТекущейСтраницы = "СтраницаМатериалы" Тогда
		
		ИмяПодбора = "ФормаДетали";
		ТаблицаДляФормы = Объект.СписокДеталей;
		СтрокаДанных = Элементы.СписокДеталей.ТекущиеДанные;
		ВладелецПодобра = Элементы.СписокДеталей;
		ПараметрыФормыПодбора.ТолькоПросмотр = ПараметрыФормыПодбора.ТолькоПросмотр ИЛИ Элементы.СтраницаМатериалы.ТолькоПросмотр;
		
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаЯщики" Тогда
		
		ИмяПодбора = "ФормаЯщики";
		ТаблицаДляФормы = Объект.СписокЯщики;
		СтрокаДанных = Элементы.СписокЯщики.ТекущиеДанные;
		ВладелецПодобра = Элементы.СписокЯщики;
		ПараметрыФормыПодбора.ТолькоПросмотр = ПараметрыФормыПодбора.ТолькоПросмотр ИЛИ Элементы.СтраницаЯщики.ТолькоПросмотр;
		
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаКомплектация" Тогда
		
		ИмяПодбора = "ФормаКомплектация";
		ТаблицаДляФормы = Объект.Комплектация;
		СтрокаДанных = Элементы.Комплектация.ТекущиеДанные;
		ВладелецПодобра = Элементы.Комплектация;
		ПараметрыФормыПодбора.ТолькоПросмотр = ПараметрыФормыПодбора.ТолькоПросмотр ИЛИ Элементы.СтраницаЯщики.ТолькоПросмотр;
		ПараметрыФормыПодбора.Вставить("НеПоказыватьЛистовой", Истина);
		
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаИзделияПоКаталогу" Тогда
		
		ИмяПодбора = ПолучитьФормуИзделияПоКаталогу(Объект.Изделие); //"ФормаИзделийПоКаталогу";
		
		Если ИмяПодбора = "ФормаИзделийПоКаталогу" Тогда
			
			ЗаписатьПустуюСпецификацию();
			
			ТаблицаДляФормы = Объект.СписокИзделийПоКаталогу;
			ПараметрыФормыПодбора.Вставить("ТаблицаФасадов", Объект.ФасадыКаталога); 
			
		ИначеЕсли ИмяПодбора = "ФормаШкафПоКаталогу" Тогда
			
			ЗаписатьПустуюСпецификацию();
			
			ТаблицаДляФормы = Новый Структура;
			ТаблицаДляФормы.Вставить("Детали", Объект.СписокИзделийПоКаталогу);
			ТаблицаДляФормы.Вставить("Двери", Неопределено);
			СтрокаДверей = Объект.СписокДверей.НайтиСтроки(Новый Структура("ПоКаталогу", Истина));
			
			Если СтрокаДверей.Количество() = 1 Тогда
				ТаблицаДляФормы.Вставить("Двери", СтрокаДверей[0].Двери);
			КонецЕсли;
			
			//при открытии формы, спец модифицированна даже если в форме ничего не поменяют
			//иначе есть вероятность не сохранить измененную дверь
			Модифицированность = НЕ ТолькоПросмотр;
			//_____________________________________
			
		КонецЕсли;
		
		СтрокаДанных = Элементы.СписокИзделийПоКаталогу.ТекущиеДанные;
		ВладелецПодобра = Элементы.СписокИзделийПоКаталогу;
		
	КонецЕсли;
	
	ОткрытьФормуПодбора(ИмяПодбора, ТаблицаДляФормы, СтрокаДанных, ВладелецПодобра, ПараметрыФормыПодбора);
	
КонецФункции // Собрать()

&НаСервереБезКонтекста
Функция ПолучитьФормуИзделияПоКаталогу(Изделие)
	
	Если Изделие.ВидИзделия = Перечисления.ВидыИзделий.ШкафКупе Тогда
		Форма = "ФормаШкафПоКаталогу";
	Иначе
		Форма = "ФормаИзделийПоКаталогу";
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции

&НаСервере
Функция ПолучитьАдресТаблицы()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ДлинаДетали", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Дробный", Новый ОписаниеТипов("Булево"));
	
	Для каждого Строка Из Объект.Комплектация Цикл
		
		НоменклатурнаяГруппа = Строка.Номенклатура.НоменклатурнаяГруппа;
		Дробный = Строка.Номенклатура.ЕдиницаИзмерения.Дробный;
		
		Если НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.СотовыеПолки 
			или НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Корзины 
			или НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.СотовыеЭлементы Тогда
			
			Если Дробный Тогда
				
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.Номенклатура = Строка.Номенклатура;
				НоваяСтрока.Количество = 1;
				НоваяСтрока.ДлинаДетали = Строка.Количество * 1000;
				НоваяСтрока.Дробный = Дробный;
				
			Иначе
				
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.Номенклатура = Строка.Номенклатура;
				НоваяСтрока.Количество = Строка.Количество;
				НоваяСтрока.ДлинаДетали = 0;
				НоваяСтрока.Дробный = Дробный;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	ТЗ.Свернуть("Номенклатура, ДлинаДетали, Дробный", "Количество");
	Возврат ПоместитьВоВременноеХранилище(ТЗ);
	
КонецФункции // ПолучитьАдресТаблицы()

// Добавляет строку в табличную часть документа
// "СписокНоменклатуры"
// Параметры
//  фнПараметры  - Структура - структура с параметрами функции
//                 <продолжение описания параметра>
&НаСервере
Функция ДобавитьСтрокуНоменклатуры(фнПараметры)
	
	// { Васильев Александр Леонидович [01.11.2015]
	// Сделать.
	// } Васильев Александр Леонидович [01.11.2015]
	
КонецФункции // ДобавитьСтроку()

&НаСервере
Функция ДобавитьСтроку(фнОбъект,
	Номенклатура,
	Количество = 0,
	НомерИзделия = 0,
	Ошибки = Неопределено,
	ВидНоменклатуры = "",
	Таблица = Неопределено,
	НомерСтроки = 0,
	ОтказОшибки = Ложь,
	МатериалЗаказчика = Ложь,
	КоличествоТребуется = -1,
	ПоКаталогуМестоОбработки = "",
	СсылкаДвери = Неопределено)
	
	Поле = Неопределено;
	
	Если Таблица <> Неопределено Тогда
		
		Если Таблица = "СписокДверей" Тогда
			ИмяПоля = "Двери";
		Иначе
			ИмяПоля = "Номенклатура";
		КонецЕсли;
		
		Поле = "Объект." + Таблица + "[" + (НомерСтроки - 1) + "]." + ИмяПоля;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Если Количество > 0 Тогда
			
			Структура = Новый Структура;
			Структура.Вставить("Объект", фнОбъект);
			Структура.Вставить("Номенклатура", Номенклатура);
			Структура.Вставить("Количество", Количество);
			Структура.Вставить("НомерИзделия", НомерИзделия);
			Структура.Вставить("МатериалЗаказчика", МатериалЗаказчика);
			Структура.Вставить("КоличествоТребуется", КоличествоТребуется);
			Структура.Вставить("ПоКаталогуМестоОбработки", ПоКаталогуМестоОбработки);
			Структура.Вставить("Двери", СсылкаДвери);
			
			ДобавитьСтрокуСписокНоменклатуры(Структура);
			
		Иначе
			
			Если НЕ ОтказОшибки Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Поле, "Не верно количество (площадь) " + ВидНоменклатуры);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ ОтказОшибки Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Поле, "Не заполнена номенклатура " + ВидНоменклатуры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ДобавитьСтроку()

&НаСервере
Функция ДобавитьСтрокуСписокНоменклатуры(фнПараметры)
	
	Если фнПараметры.КоличествоТребуется = -1 Тогда
		фнПараметры.КоличествоТребуется = фнПараметры.Количество;
	КонецЕсли;
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(фнПараметры.Номенклатура, "ВидНоменклатуры");
	
	Если ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Комплект Тогда
		
		Для Каждого СтрокаСостав Из фнПараметры.Номенклатура.Состав Цикл
			
			фнПараметры.КоличествоТребуется = СтрокаСостав.Количество * фнПараметры.Количество;
			НоваяСтрокаСписокНоменклатуры(фнПараметры, СтрокаСостав.Номенклатура, СтрокаСостав.Количество * фнПараметры.Количество);
		КонецЦикла;
		
	Иначе
		НоваяСтрокаСписокНоменклатуры(фнПараметры, фнПараметры.Номенклатура, фнПараметры.Количество);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НоваяСтрокаСписокНоменклатуры(фнПараметры, фнНоменклатура, фнКоличество)
	
	СвойстваНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(фнПараметры.Номенклатура, 
	"ВидНоменклатуры, ЕдиницаИзмерения, МестоОбработки, ВидНоменклатуры");
	
	ЭтоМатериал = СвойстваНоменклатуры.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал;
	
	НоваяСтрока = фнПараметры.Объект.СписокНоменклатуры.Добавить();
	НоваяСтрока.Номенклатура = фнНоменклатура;
	НоваяСтрока.Количество = (Цел(фнКоличество * 1000)) / 1000;
	НоваяСтрока.КоличествоТребуется = фнПараметры.КоличествоТребуется;
	НоваяСтрока.НомерИзделия = фнПараметры.НомерИзделия;
	НоваяСтрока.ИспользуетсяВКоробе = фнПараметры.НомерИзделия <> 0 И ЭтоМатериал;
	НоваяСтрока.УслугаСМатериаломЗаказчика = фнПараметры.МатериалЗаказчика;
	НоваяСтрока.Двери = фнПараметры.Двери;
	
	Если ЗначениеЗаполнено(фнПараметры.ПоКаталогуМестоОбработки) Тогда
		ЧерезСклад = фнПараметры.ПоКаталогуМестоОбработки = "Склад";
	Иначе
		ЧерезСклад = СвойстваНоменклатуры.МестоОбработки <> Перечисления.МестоОбработки.Цех;
	КонецЕсли;
	
	НоваяСтрока.ЧерезСклад = ЧерезСклад;
	НоваяСтрока.ПоКаталогуМестоОбработки = фнПараметры.ПоКаталогуМестоОбработки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьУслугуКромления(НоменклатураМебельнаяКромка)
	
	НоменклатурныеГруппы = Справочники.НоменклатурныеГруппы;
	ГруппаКромки = НоменклатураМебельнаяКромка.НоменклатурнаяГруппа;
	
	Если НоменклатураМебельнаяКромка.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
		// Для фрезеровки. Замена механизма "Кант по месту"
		Услуга = Справочники.Номенклатура.ПустаяСсылка();
	ИначеЕсли ГруппаКромки = НоменклатурныеГруппы.Кромка2_42
		ИЛИ ГруппаКромки = НоменклатурныеГруппы.Кромка2_45 Тогда
		Услуга = Справочники.Номенклатура.КромлениеСтолешницыПристенка;
	ИначеЕсли ГруппаКромки = НоменклатурныеГруппы.КантАлюминиевый Тогда
		Услуга = Справочники.Номенклатура.ОкантовкаАлюминием;
	ИначеЕсли ГруппаКромки = НоменклатурныеГруппы.КантТ
		ИЛИ ГруппаКромки = НоменклатурныеГруппы.КантП Тогда
		Услуга = Справочники.Номенклатура.Окантовка;
	ИначеЕсли ГруппаКромки = НоменклатурныеГруппы.ТорцеваяРучка16мм
		ИЛИ ГруппаКромки = НоменклатурныеГруппы.ТорцеваяРучка18мм Тогда
		Услуга = Справочники.Номенклатура.НаклейкаТорцевойРучки;
	Иначе
		Если НоменклатураМебельнаяКромка.ГлубинаДетали < 1 Тогда
			Услуга = Справочники.Номенклатура.КромлениеТонкойКромки;
		Иначе
			Услуга = Справочники.Номенклатура.КромлениеТолстойКромки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Услуга;
	
КонецФункции

&НаСервере
Функция РазложитьСтроку(Строка, Разделитель)
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, Разделитель);
	
КонецФункции

&НаСервере
Функция СобратьМассив(Массив, Разделитель)
	
	Возврат СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель);
	
КонецФункции

&НаСервере
Функция ПолучитьКромкуДляФлэшПоКаталогу(Кромка)
	
	Стр = Новый Структура;
	Стр.Вставить("Наименование", Кромка.КраткоеНаименование);
	Стр.Вставить("Код", Кромка.Код);
	
	Возврат Стр;
	
КонецФункции

&НаСервере
Процедура МасштабироватьИЗаполнитьПараметрыРедактированнойДетали(СтрокаФлэш, СтрокаТаблицы, СтрКромка)
	
	СтрокаТаблицы.ДетальРедактированная = Истина;
	
	МассивСимволов = РазложитьСтроку(СтрокаФлэш, "☻");
	СтрокаТаблицы.ДлинаКривогоПила = МассивСимволов[1];
	СтрокаТаблицы.Периметр = Число(МассивСимволов[0]);
	
	Если НЕ МассивСимволов[2] = "0" Тогда
		СтрокаТаблицы.КривойПилСверху = 1;
	Иначе
		СтрокаТаблицы.КривойПилСверху = 0;
	КонецЕсли;
	
	Если НЕ МассивСимволов[3] = "0" Тогда
		СтрокаТаблицы.КривойПилСнизу = 1;
	Иначе
		СтрокаТаблицы.КривойПилСнизу = 0;
	КонецЕсли;
	
	Если НЕ МассивСимволов[4] = "0" Тогда
		СтрокаТаблицы.КривойПилСлева = 1;
	Иначе
		СтрокаТаблицы.КривойПилСлева = 0;
	КонецЕсли;
	
	Если НЕ МассивСимволов[5] = "0" Тогда
		СтрокаТаблицы.КривойПилСправа = 1;
	Иначе
		СтрокаТаблицы.КривойПилСправа = 0;
	КонецЕсли;
	
	Если Найти(ВРег(СтрокаТаблицы.Комментарий), "ЧЕРТЕЖ") = 0 Тогда
		СтрокаТаблицы.Комментарий = "[По чертежу] " + СтрокаТаблицы.Комментарий;
	КонецЕсли;
	
	СтруктураКромка = ПолучитьКромкуДляФлэшПоКаталогу(СтрКромка.Кромка);
	
	// Замена кромки
	
	СтрокаКромка = Лев(МассивСимволов[9], СтрДлина(МассивСимволов[9]) - 1);
	
	Если ЗначениеЗаполнено(СтрокаКромка) Тогда
		
		МассивКромок = РазложитьСтроку(СтрокаКромка,"|");
		Сч = 0;
		
		Пока Сч < МассивКромок.Количество() Цикл
			
			КромМассив = РазложитьСтроку(МассивКромок[Сч], "_");
			КромМассив[0] = СтруктураКромка.Код;
			Кром = СобратьМассив(КромМассив,"_");
			МассивКромок[Сч] = Кром;
			Сч = Сч + 1;
			
		КонецЦикла;
		
		СтрокаКромка = СобратьМассив(МассивКромок,"|");
		
		СтрокаТаблицы.КантыИзРедактора = ЗначениеВСтрокуВнутр(СтрокаКромка);
		
	КонецЕсли;
	
	// Масштабирование
	
	НовРазмерY = Число(СтрокаТаблицы.ВысотаДетали);
	НовРазмерX = Число(СтрокаТаблицы.ШиринаДетали);
	
	СтрокаДляМасштабирования = МассивСимволов[8];
	
	Мас = РазложитьСтроку(СтрокаДляМасштабирования, "^");
	
	МассивЭлементов = РазложитьСтроку(Мас[1],"#");
	
	Размеры = РазложитьСтроку(Мас[0], "_");
	
	РазмерY = Число(Размеры[0])*2;
	РазмерX = Число(Размеры[1])*2;
	
	ScaleX = НовРазмерX/РазмерX;
	ScaleY = НовРазмерY/РазмерY;
	
	Размеры[0] = Формат(Число(НовРазмерY/2),"ЧДЦ=1; ЧРД=.; ЧГ=");
	Размеры[1] = Формат(Число(НовРазмерX/2),"ЧДЦ=1; ЧРД=.; ЧГ=");
	
	Мас[0] = СобратьМассив(Размеры,"_");
	
	МассивТочек = РазложитьСтроку(МассивЭлементов[0], "*");
	МассивЛиний = РазложитьСтроку(МассивЭлементов[1], "*");
	
	Сч = 0;
	Для каждого Точка Из МассивТочек Цикл
		Если Точка <> "" Тогда
			Координаты = РазложитьСтроку(Точка, "_");
			Координаты[0] = Формат(Окр(Число(Координаты[0])*ScaleX,2),"ЧДЦ=2; ЧРД=.; ЧГ=");
			Координаты[1] = Формат(Окр(Число(Координаты[1])*ScaleY,2),"ЧДЦ=2; ЧРД=.; ЧГ=");
			Точка = СобратьМассив(Координаты,"_");
			МассивТочек[Сч] = Точка;
		КонецЕсли;
		Сч=Сч+1;
	КонецЦикла;
	
	МассивЭлементов[0] = СобратьМассив(МассивТочек,"*");
	
	Сч = 0;
	Для каждого Линия Из МассивЛиний Цикл
		Если Линия <> "" Тогда
			Линия = РазложитьСтроку(Линия, "_");
			
			Если Число(Линия[0]) = 0 Тогда // прямая
				
				Если НЕ (Линия[3] = "") Тогда
					Линия[3] = СтруктураКромка.Наименование;
					Линия[4] = СтруктураКромка.Код;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Число(Линия[0]) = 1 Тогда // безье
				
				Если НЕ (Линия[7] = "") Тогда
					Линия[7] = СтруктураКромка.Наименование;
					Линия[8] = СтруктураКромка.Код;
				КонецЕсли;
				
				Линия[3] = Формат(Окр(Число(Линия[3])*ScaleX,2),"ЧДЦ=2; ЧРД=.; ЧГ=");
				Линия[4] = Формат(Окр(Число(Линия[4])*ScaleY,2),"ЧДЦ=2; ЧРД=.; ЧГ=");
				Линия[5] = Формат(Окр(Число(Линия[5])*ScaleX,2),"ЧДЦ=2; ЧРД=.; ЧГ=");
				Линия[6] = Формат(Окр(Число(Линия[6])*ScaleY,2),"ЧДЦ=2; ЧРД=.; ЧГ=");
			КонецЕсли;
			
			Если Число(Линия[0]) = 2 Тогда // дуга
				
				Если НЕ (Линия[5] = "") Тогда
					Линия[5] = СтруктураКромка.Наименование;
					Линия[6] = СтруктураКромка.Код;
				КонецЕсли;
				
				Линия[3] = Формат(Окр(Число(Линия[3])*ScaleX,2),"ЧДЦ=2; ЧРД=.; ЧГ=");
				Линия[4] = Формат(Окр(Число(Линия[4])*ScaleY,2),"ЧДЦ=2; ЧРД=.; ЧГ=");
			КонецЕсли;
			
			Линия = СобратьМассив(Линия,"_");
			МассивЛиний[Сч] = Линия;
		КонецЕсли;
		Сч=Сч+1;
	КонецЦикла;
	
	МассивЭлементов[1] = СобратьМассив(МассивЛиний,"*");
	Мас[1] = СобратьМассив(МассивЭлементов,"#");
	СтрокаДляФлэш = СобратьМассив(Мас,"^");
	
	СтрокаТаблицы.СтрокаДляФлэш = СтрокаДляФлэш;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаИзделийПоКаталогу()
	
	Об = РеквизитФормыВЗначение("Объект");
	С = Новый Структура;
	С.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	УстановитьСоответствиеОбъектаИФормы(Об, С);
	
	
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru = 'ккк'");
	Сообщение.Поле = "";
	Сообщение.УстановитьДанные(ПолучитьСоответствиеОбъектаИФормы(Об));
	Сообщение.Сообщить();
	
	//Определим вид изделия
	
	ИзделиеШкафКупе = Объект.Изделие.ВидИзделия = Перечисления.ВидыИзделий.ШкафКупе;
	КорпусныйШкафКупе = ИзделиеШкафКупе И Объект.Изделие = Справочники.Изделия.КорпусныйШкафКупеПоКаталогу;
	ИзделиеКухня = НЕ ИзделиеШкафКупе;
	ПрофильДвери = Неопределено;
	
	ВсеФормулы = НайтиВсеФормулы();
	
	//Пока переменные для всех, чтоб небыло ошибок в формулах
	
	Раздвижная = Истина;
	Распашная = Ложь;
	ВысотаПроема = 1;
	ШиринаПроема = 1;
	ВысотаПол = 1;
	ШиринаЛевый = 1;
	ШиринаПравый = 1;
	ВысотаПотолок = 1;
	ВысотаПолИтог = 1;
	ШиринаЛевыйИтог = 1;
	ШиринаПравыйИтог = 1;
	ПрипускСверху = 1;
	ПрипускСнизу = 1;
	ПрипускСлева = 1;
	ПрипускСправа = 1;
	ЗавалПол = 1;
	ЗавалЛевый = 1;
	ЗавалПравый = 1;
	ЗавалПотолок = 1;
	ЗавалСтенка = 1;
	Отсек1 = 0;
	Отсек2 = 0;
	Отсек3 = 0;
	Отсек4 = 0;
	Отсек5 = 0;
	Отсек6 = 0;
	РадиусЛ = 0;
	РадиусП = 0;
	КрышаЛ = 0;
	КрышаП = 0;
	ШиринаЛевоКухня = 0;
	ШиринаПравоКухня = 0;
	
	ТаблицаИзделийПоКаталогу = Объект.СписокИзделийПоКаталогу.Выгрузить();
	ТаблицаФасадовПоКаталогу = Объект.ФасадыКаталога.Выгрузить();
	
	Если ИзделиеШкафКупе Тогда
		
		СписокДверей = Объект.СписокДверей;
		СтрокаПол = ТаблицаИзделийПоКаталогу.Найти(Справочники.ВидыИзделийПоКаталогу.Пол,"ВидИзделия");
		СтрокаЛевыйЭлемент = ТаблицаИзделийПоКаталогу.Найти(Справочники.ВидыИзделийПоКаталогу.ЛевыйБоковойЭлемент,"ВидИзделия");
		СтрокаПравыйЭлемент = ТаблицаИзделийПоКаталогу.Найти(Справочники.ВидыИзделийПоКаталогу.ПравыйБоковойЭлемент,"ВидИзделия");
		СтрокаПотолок = ТаблицаИзделийПоКаталогу.Найти(Справочники.ВидыИзделийПоКаталогу.Потолок,"ВидИзделия");
		СтрокаОсновной = ТаблицаИзделийПоКаталогу.Найти(Справочники.ВидыИзделийПоКаталогу.ОсновнойЭлемент,"ВидИзделия");
		
		НоменклатураМатериала = СтрокаОсновной.НоменклатураЛДСП; // Используется для формул Отсеков, дальше переопределяется, для каждого элемента.
		
		ПолНеВлияет = СтрокаПол.Изделие.НеВлияетНаОсновной;
		ЛевыйНеВлияет = СтрокаЛевыйЭлемент.Изделие.НеВлияетНаОсновной;
		ПравыйНеВлияет = СтрокаПравыйЭлемент.Изделие.НеВлияетНаОсновной;
		ПотолокНеВлияет = СтрокаПотолок.Изделие.НеВлияетНаОсновной;
		
		// Определим переменные дверей
		Если СписокДверей.Количество() = 1 Тогда
			НашаДверь = СписокДверей[0].Двери;
			ВысотаПроема = НашаДверь.ВысотаПроема;
			ШиринаПроема = НашаДверь.ШиринаПроема;
			Раздвижная = НашаДверь.ВидДвери = Перечисления.ВидыДверей.Раздвижная;
			Распашная = НЕ Раздвижная;
			ПрофильДвери = НашаДверь.АлюминПрофиль;
		Иначе
			ВысотаПроема = СтрокаОсновной.ВысотаИзделия - ?(ПолНеВлияет, СтрокаПол.ВысотаИзделия, 0) - ?(ПотолокНеВлияет, СтрокаПотолок.ВысотаИзделия, 0);
			ШиринаПроема = СтрокаОсновной.ШиринаИзделия - ?(ЛевыйНеВлияет, СтрокаЛевыйЭлемент.ШиринаИзделия, 0) - ?(ПравыйНеВлияет, СтрокаПравыйЭлемент.ШиринаИзделия, 0);
		КонецЕсли;
		
		ВысотаПол = ?(ПолНеВлияет, СтрокаПол.ВысотаИзделия, 0);
		ШиринаЛевый = ?(ЛевыйНеВлияет, СтрокаЛевыйЭлемент.ШиринаИзделия, 0);
		ШиринаПравый = ?(ПравыйНеВлияет, СтрокаПравыйЭлемент.ШиринаИзделия, 0);
		ВысотаПотолок = ?(ПотолокНеВлияет, СтрокаПотолок.ВысотаИзделия, 0);
		
		ВысотаПолИтог = СтрокаПол.ВысотаИзделия;
		ШиринаЛевыйИтог = СтрокаЛевыйЭлемент.ШиринаИзделия;
		ШиринаПравыйИтог = СтрокаПравыйЭлемент.ШиринаИзделия;
		
		РадиусЛ = СтрокаЛевыйЭлемент.Изделие.РадиусЭлемента;
		РадиусП = СтрокаПравыйЭлемент.Изделие.РадиусЭлемента;
		
		КрышаЛ = СтрокаЛевыйЭлемент.Изделие.ШиринаКрыши;
		КрышаП = СтрокаПравыйЭлемент.Изделие.ШиринаКрыши;
		
		СвояКрышаЛ = СтрокаЛевыйЭлемент.Изделие.ЭлементСКрышей;
		СвояКрышаП = СтрокаПравыйЭлемент.Изделие.ЭлементСКрышей;
		
		Если НЕ КорпусныйШкафКупе Тогда
			
			//Если рассчитываем шкаф купе не корпусный, определим завалы
			СтруктураЗавалов = Новый Структура;
			
			СтруктураЗавалов.Вставить("ЗавалПол", Число(СтрокаПол.Завал));
			СтруктураЗавалов.Вставить("ЗавалЛевый", Число(СтрокаЛевыйЭлемент.Завал));
			СтруктураЗавалов.Вставить("ЗавалПравый", Число(СтрокаПравыйЭлемент.Завал));
			СтруктураЗавалов.Вставить("ЗавалПотолок", Число(СтрокаПотолок.Завал));
			СтруктураЗавалов.Вставить("ЗавалСтенка", Число(СтрокаОсновной.Завал));
			
			СтруктураСтен = Новый Структура;
			
			СтруктураСтен.Вставить("ГипсСлева", СтрокаЛевыйЭлемент.ВидСтены = "Гипс");
			СтруктураСтен.Вставить("ГипсСправа", СтрокаПравыйЭлемент.ВидСтены = "Гипс");
			СтруктураСтен.Вставить("ГипсПотолок", СтрокаПотолок.ВидСтены = "Гипс");
			СтруктураСтен.Вставить("ГипсЗадняяСтенка", СтрокаОсновной.ВидСтены = "Гипс");
			СтруктураСтен.Вставить("НатяжнойПотолок", СтрокаПотолок.ВидСтены = "Натяжной");
			СтруктураСтен.Вставить("ЛаминатПол", СтрокаПол.ВидСтены = "Ламинат");
			
			ГипсСлева = СтрокаЛевыйЭлемент.ВидСтены = "Гипс";
			ГипсСправа = СтрокаПравыйЭлемент.ВидСтены = "Гипс";
			ГипсПотолок = СтрокаПотолок.ВидСтены = "Гипс";
			ГипсЗадняяСтенка = СтрокаОсновной.ВидСтены = "Гипс";
			НатяжнойПотолок = СтрокаПотолок.ВидСтены = "Натяжной";
			ЛаминатПол = СтрокаПол.ВидСтены = "Ламинат";
			
		КонецЕсли;
		
		СписокОтсеков = СтрокаОсновной.Изделие.СписокОтсеков;
		
		Если СписокОтсеков.Количество() > 0 Тогда
			
			Для Каждого Отсек Из СписокОтсеков Цикл
				
				Попытка
					
					Выполнить("Отсек" + Отсек.НомерСтроки + " = " + Отсек.КоэффициентОтсека);
					
				Исключение
					
					Текст = "Ошибка при формировании формул из справочника. Отсек" + Отсек.НомерСтроки;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Элемент Из ТаблицаИзделийПоКаталогу Цикл
		
		НашеИзделие = Элемент.Изделие;
		СтруктураПодбираемойПоЦветуНоменклатуры = ЛексСервер.ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(Элемент.НоменклатураЛДСП, Объект.Подразделение);
		
		Если ЗначениеЗаполнено(ПрофильДвери) Тогда
			СтруктураПодбираемойПоЦветуНоменклатурыКПрофилю = ЛексСервер.ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(ПрофильДвери, Объект.Подразделение);
		КонецЕсли;
		
		//Размеры изделия
		ШиринаИзделия = Элемент.ШиринаИзделия;
		ВысотаИзделия = Элемент.ВысотаИзделия;
		ГлубинаИзделия = Элемент.ГлубинаИзделия;
		Европаз = Элемент.Европаз;
		Столешница = Элемент.Столешница;
		ГлубинаМатериала = Элемент.НоменклатураЛДСП.ГлубинаДетали;
		ГлубинаМатериалаДоп = Элемент.НоменклатураЛДСПДоп.ГлубинаДетали;
		ШиринаДоп = Элемент.ШиринаДоп;
		ГлубинаДоп = Элемент.ГлубинаДоп;
		
		Если ИзделиеШкафКупе И НЕ КорпусныйШкафКупе Тогда
			
			//Припуски, все равны одному припуску указанному в Каталоге изделия 
			//Припуски у ОсновногоЭлемента зависят от наличия других элементов с разных сторон
			
			Припуск = НашеИзделие.Припуск;
			
			ПрипускСверху = ?(Найти(Элемент.СтрокаПрипусков, "ПрипускСверху") <> 0, Припуск, 0);
			ПрипускСнизу = ?(Найти(Элемент.СтрокаПрипусков, "ПрипускСнизу") <> 0, Припуск, 0);
			ПрипускСлева = ?(Найти(Элемент.СтрокаПрипусков, "ПрипускСлева") <> 0, Припуск, 0);
			ПрипускСправа = ?(Найти(Элемент.СтрокаПрипусков, "ПрипускСправа") <> 0, Припуск, 0);
			
			//ЗавалПол = ?(Найти(Элемент.СтрокаЗавалов, "ЗавалПол") <> 0, СтруктураЗавалов.ЗавалПол, 0);
			//ЗавалЛевый = ?(Найти(Элемент.СтрокаЗавалов, "ЗавалЛевый") <> 0, СтруктураЗавалов.ЗавалЛевый, 0);
			//ЗавалПравый = ?(Найти(Элемент.СтрокаЗавалов, "ЗавалПравый") <> 0, СтруктураЗавалов.ЗавалПравый, 0);
			//ЗавалПотолок = ?(Найти(Элемент.СтрокаЗавалов, "ЗавалПотолок") <> 0, СтруктураЗавалов.ЗавалПотолок, 0);
			//ЗавалСтенка = ?(Найти(Элемент.СтрокаЗавалов, "ЗавалСтенка") <> 0, СтруктураЗавалов.ЗавалСтенка, 0);
			
			//RonEXI: Костя сказал что ему нужны все завалы.
			
			ЗавалПол = СтруктураЗавалов.ЗавалПол;
			ЗавалЛевый = СтруктураЗавалов.ЗавалЛевый;
			ЗавалПравый = СтруктураЗавалов.ЗавалПравый;
			ЗавалПотолок = СтруктураЗавалов.ЗавалПотолок;
			ЗавалСтенка = СтруктураЗавалов.ЗавалСтенка;
			
			ГипсСлева = СтруктураСтен.ГипсСлева;
			ГипсСправа = СтруктураСтен.ГипсСправа;
			ГипсПотолок = СтруктураСтен.ГипсПотолок;
			ГипсЗадняяСтенка = СтруктураСтен.ГипсЗадняяСтенка;
			НатяжнойПотолок = СтруктураСтен.НатяжнойПотолок;
			ЛаминатПол = СтруктураСтен.ЛаминатПол;
			
		КонецЕсли;
		
		//Расчет формул справочника
		Если ВсеФормулы.Количество() > 0 Тогда
			
			Фор = Новый Структура;
			
			Для Каждого ЭлементФормулы Из ВсеФормулы Цикл
				
				ЗначениФормулы = 0;
				
				Попытка
					Выполнить("ЗначениФормулы = " + ЭлементФормулы.Значение);
				Исключение
					Текст = "Ошибка при формировании формул из справочника. Наименование формулы - " + ЭлементФормулы.Ключ;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					
					
				КонецПопытки;
				
				Фор.Вставить(ЭлементФормулы.Ключ, ЗначениФормулы);
				
			КонецЦикла;
			
		КонецЕсли;
		///////////////////////////////////////////////Список Номенклатуры////////////////////////////////////////////////////////////////////////
		//Список номенклатуры Каталога изделий в ТЧ Комплектация
		
		НоменклатураМатериала = Справочники.Номенклатура.ПустаяСсылка();
		
		# Область ДобавлениеКомплектацииИДопЭлементов
		
		СписокНоменклатурыИзделия = НашеИзделие.СписокНоменклатуры;
		
		Для Каждого Строка Из СписокНоменклатурыИзделия Цикл
			
			Количество = 0;
			ДобавитьДопЭлементДляНожек = Ложь;
			
			Попытка
				
				Выполнить("Количество = " + Строка.Количество);
				
				Если Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					
					Номенклатура = Строка.Номенклатура;
					НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
					
					Если НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.МонтажныйУголок и ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры) Тогда
						
						Номенклатура = ?(ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры.ФурнитураКрепежная), СтруктураПодбираемойПоЦветуНоменклатуры.ФурнитураКрепежная, Номенклатура);
						
					ИначеЕсли НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Заглушка и ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры) Тогда
						
						Номенклатура = ?(ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры.Фурнитура), СтруктураПодбираемойПоЦветуНоменклатуры.Фурнитура, Номенклатура);
						
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					
					Если Строка.Номенклатура = Справочники.НоменклатурныеГруппы.КухонныеНожки Тогда
						
						Номенклатура = Элемент.Ножки;
						
						Если ЗначениеЗаполнено(Номенклатура.ДополнительныйЭлемент) Тогда
							ДобавитьДопЭлементДляНожек = Истина;
						КонецЕсли;
						
					ИначеЕсли Строка.Номенклатура = Справочники.НоменклатурныеГруппы.Крючок Тогда	
						
						Номенклатура = Элемент.Крючки;
						
					ИначеЕсли Строка.Номенклатура = Справочники.НоменклатурныеГруппы.ЗаглушкаПодЕвровинт Тогда	
						
						Номенклатура = ?(ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры.ЗаглушкаПодЕвровинт), СтруктураПодбираемойПоЦветуНоменклатуры.ЗаглушкаПодЕвровинт, Справочники.Номенклатура.ПустаяСсылка());
						
					ИначеЕсли Строка.Номенклатура = Справочники.НоменклатурныеГруппы.Профиль_П_образный Тогда	
						
						Если НЕ ЗначениеЗаполнено(ПрофильДвери) Тогда
							Продолжить;
						КонецЕсли;
						
						НоменклатурнаяГруппаСтрока = Справочники.НоменклатурныеГруппы.ПолучитьИмяПредопределенного(Строка.Номенклатура);
						Номенклатура = ?(ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатурыКПрофилю[НоменклатурнаяГруппаСтрока]),
						СтруктураПодбираемойПоЦветуНоменклатурыКПрофилю[НоменклатурнаяГруппаСтрока],
						?(ЗначениеЗаполнено(Строка.Номенклатура.ОсновнаяНоменклатура),
						Строка.Номенклатура.ОсновнаяНоменклатура,
						Неопределено));
						
					ИначеЕсли Строка.Номенклатура.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.Саморезы) Тогда
						
						Если НЕ ЗначениеЗаполнено(ПрофильДвери) Тогда
							Продолжить;
						КонецЕсли;
						
						НоменклатурнаяГруппаСтрока = Справочники.НоменклатурныеГруппы.ПолучитьИмяПредопределенного(Строка.Номенклатура);
						Номенклатура = ?(ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатурыКПрофилю[НоменклатурнаяГруппаСтрока]),
						СтруктураПодбираемойПоЦветуНоменклатурыКПрофилю[НоменклатурнаяГруппаСтрока], 
						?(ЗначениеЗаполнено(Строка.Номенклатура.ОсновнаяНоменклатура),
						Строка.Номенклатура.ОсновнаяНоменклатура,
						Неопределено));
						
					Иначе
						
						НоменклатурнаяГруппаСтрока = Справочники.НоменклатурныеГруппы.ПолучитьИмяПредопределенного(Строка.Номенклатура);
						Номенклатура = ?(ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры[НоменклатурнаяГруппаСтрока]), СтруктураПодбираемойПоЦветуНоменклатуры[НоменклатурнаяГруппаСтрока], Неопределено);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ПоКаталогуМестоОбработки = "";
				
				Если Номенклатура.МестоОбработки = Перечисления.МестоОбработки.ПоКаталогуВЦех Тогда
					
					Если Строка.ВСборе И Элемент.Сборка Тогда
						ПоКаталогуМестоОбработки = "Цех";
					Иначе
						ПоКаталогуМестоОбработки = "Склад";
					КонецЕсли;
					
				КонецЕсли;
				
				ДобавитьКомплектацию(Номенклатура, Количество, Элемент.НомерСтроки, ПоКаталогуМестоОбработки);
				
				Если ДобавитьДопЭлементДляНожек Тогда
					
					ДобавитьДопЭлементДляНожек = Ложь;
					КоличествоДоп = Цел(Количество / 2);
					ДобавитьКомплектацию(Номенклатура.ДополнительныйЭлемент, КоличествоДоп, Элемент.НомерСтроки, ПоКаталогуМестоОбработки);
					
				КонецЕсли;
				
			Исключение
				Текст = "Ошибка при формировании формул списка номенклатуры каталога изделий " + Элемент.Изделие;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			КонецПопытки;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Элемент.Мойка) Тогда
			ДобавитьКомплектацию(Элемент.Мойка, 1, Элемент.НомерСтроки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.Сушка) Тогда
			ДобавитьКомплектацию(Элемент.Сушка, 1, Элемент.НомерСтроки);
		КонецЕсли;
		
		#КонецОбласти
		
		ПараметрыТаблицаФасадов = ТаблицаФасадовПоКаталогу.НайтиСтроки(Новый Структура("sUID", Элемент.UID));
		
		///////////////////////////////////////////////////////////////////Материалы//////////////////////////////////////////////////////////////////////////////////////
		
		# Область ДобавлениеМатериалов
		
		СписокДеталейИзделия = НашеИзделие.СписокДеталей;
		
		Для Каждого Строка Из СписокДеталейИзделия Цикл
			
			ДанныеДетали = ПолучитьДанныеДетали(Строка.ВидДетали);
			
			ЭтоФасад = Ложь;
			
			Если ПараметрыТаблицаФасадов.Количество() > 0 Тогда
				
				СтрокаФасада = Неопределено;
				
				Для Каждого СтрокаФ Из ПараметрыТаблицаФасадов Цикл
					
					Если СтрокаФ.НомерДетали = Строка.НомерСтроки Тогда
						
						СтрокаФасада = СтрокаФ;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(СтрокаФасада) И СтрокаФасада.ВидЭлемента = "Фасад" Тогда
					
					Если ЗначениеЗаполнено(СтрокаФасада.ДопЭлемент) Тогда
						ДобавитьКомплектацию(СтрокаФасада.ДопЭлемент, 1, Элемент.НомерСтроки);
					КонецЕсли;
					
					Если СтрокаФасада.БезФасада Тогда
						Продолжить; // RonEXI: Если нажата галочка БезФасада, пропускаем этот элемент.	
					КонецЕсли;
					
					ЭтоФасад = Истина;
					
					ВидДеталиФасад = СтрокаФасада.ВидДеталиФасад;
					НоменклатураФасад = СтрокаФасада.НоменклатураФасада;
					Кромка = СтрокаФасада.ОбрамлениеФасада;
					РучкаФасада = СтрокаФасада.НоменклатураРучки;
					Петли = СтрокаФасада.Петли;
					КоличествоПетель = СтрокаФасада.КоличествоПетель;
					БезПетель = СтрокаФасада.БезПетель;
					
					РасположениеПазовИРучкиНаФасадах = СтрокаФасада.РасположениеПазовИРучкиНаФасадах;
					
					Если Элемент.Расположение = Перечисления.ВидыПрисоединенныхФайлов.КартинкаПравая Тогда
						РасположениеПазовИРучкиНаФасадах = РасположениеПазовИРучкиНаФасадах.ЗеркальноеПоложение;
					КонецЕсли;
					
					Если СтрокаФасада.ПовернутьФасад Тогда
						РасположениеПазовИРучкиНаФасадах = РасположениеПазовИРучкиНаФасадах.ПоворотВправо;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаФасада.МеханизмФасада) Тогда
						ДобавитьКомплектацию(СтрокаФасада.МеханизмФасада, СтрокаФасада.КоличествоМеханизмФасада, Элемент.НомерСтроки);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаФасада.Демпфер) Тогда
						ДобавитьКомплектацию(СтрокаФасада.Демпфер, СтрокаФасада.КоличествоДемпфер, Элемент.НомерСтроки);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ИзделиеШкафКупе И ДанныеДетали.ЭтоФасад Тогда
				
				ЭтоФасад = Истина;
				
				ВидДеталиФасад = Строка.ВидДетали;
				НоменклатураФасад = Элемент.НоменклатураЛДСП;
				Кромка = Элемент.КромкаЛДСП;
				РучкаФасада = Элемент.Ручка;
				Петли = Строка.Петли;
				КоличествоПетель = Строка.КоличествоПетель;
				РасположениеПазовИРучкиНаФасадах = Строка.РасположениеПазовИРучкиНаФасадах;
				
			КонецЕсли;
			
			Количество = 0;
			
			НоваяСтрока = Объект.СписокДеталей.Добавить();
			НоваяСтрока.ВидДетали = ?(ЭтоФасад, ВидДеталиФасад, Строка.ВидДетали);
			//НоваяСтрока.Материал = НоваяСтрока.ВидДетали.МатериалСтрока;
			
			ДанныеДетали = ПолучитьДанныеДетали(НоваяСтрока.ВидДетали);
			
			КромкаНоменклатуры = Неопределено;
			
			ЕстьЛДСП = Ложь;
			ЕстьДВП = Ложь;
			ЕстьМДФ = Ложь;
			ЕстьСтекло = Ложь;
			ЕстьСтолешница = Ложь;
			
			Для Каждого НомГруппа ИЗ ДанныеДетали.НомГруппы Цикл
				
				Знч = НомГруппа.Значение;
				
				Если Знч.ПолеВыбора = "Текстура" Тогда
					
					Если Знч.Группа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.ЛДСП) 
						ИЛИ Знч.Группа = Справочники.НоменклатурныеГруппы.ЛДСП Тогда
						
						ЕстьЛДСП = Истина;
						
					КонецЕсли;
					
					Если Знч.Группа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.ДВП) 
						ИЛИ Знч.Группа = Справочники.НоменклатурныеГруппы.ДВП Тогда
						
						ЕстьДВП = Истина;
						
					КонецЕсли;
					
					Если Знч.Группа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.МДФ) 
						ИЛИ Знч.Группа = Справочники.НоменклатурныеГруппы.МДФ Тогда
						
						ЕстьМДФ = Истина;
						
					КонецЕсли;
					
					Если Знч.Группа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.Стекло) 
						ИЛИ Знч.Группа = Справочники.НоменклатурныеГруппы.Стекло
						ИЛИ Знч.Группа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.Зеркало) 
						ИЛИ Знч.Группа = Справочники.НоменклатурныеГруппы.Зеркало Тогда
						
						ЕстьСтекло = Истина;
						
					КонецЕсли;
					
					Если Знч.Группа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.Столешница) 
						ИЛИ Знч.Группа = Справочники.НоменклатурныеГруппы.Столешница Тогда
						
						ЕстьСтолешница = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ДанныеДетали.ЭтоФасад Тогда
				
				Если ЕстьЛДСП Тогда
					
					Если Строка.ВторойЦвет Тогда
						НоваяСтрока.Номенклатура = Элемент.НоменклатураЛДСПДоп;
						КромкаНоменклатуры = Элемент.КромкаЛДСПДоп;
					Иначе
						НоваяСтрока.Номенклатура = Элемент.НоменклатураЛДСП;
						КромкаНоменклатуры = Элемент.КромкаЛДСП;
					КонецЕсли;
					
					Если ДанныеДетали.Клееная Тогда
						НоваяСтрока.НоменклатураДляСклеивания = Элемент.НоменклатураДляСклеивания;
					КонецЕсли;
					
				ИначеЕсли ЕстьДВП Тогда
					
					НоваяСтрока.Номенклатура = Элемент.НоменклатураДВП;
					
				ИначеЕсли ЕстьСтекло Тогда
					
					НоваяСтрока.Номенклатура = Элемент.НоменклатураСтекло;
					
				ИначеЕсли ЕстьМДФ Тогда
					
					НоваяСтрока.Номенклатура = Элемент.НоменклатураМДФ;
					КромкаНоменклатуры = Элемент.КромкаМДФ;
					
				ИначеЕсли ЕстьСтолешница Тогда
					
					НоваяСтрока.Номенклатура = Элемент.НоменклатураСтолешница;
					КромкаНоменклатуры = Элемент.КромкаСтолешница;
					
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока.Номенклатура = НоменклатураФасад;
				КромкаНоменклатуры = Кромка;
				
				НоваяСтрока.Петли = ?(ЗначениеЗаполнено(Петли), Петли, Неопределено);
				НоваяСтрока.КоличествоПетель = ?(ЗначениеЗаполнено(КоличествоПетель), КоличествоПетель, 0);
				НоваяСтрока.РасположениеПазовИРучкиНаФасадах = ?(ЗначениеЗаполнено(РасположениеПазовИРучкиНаФасадах), РасположениеПазовИРучкиНаФасадах, Неопределено);
				НоваяСтрока.ДиаметрПазов = Строка.ДиаметрПазов;
				НоваяСтрока.РасположениеФасада = Строка.РасположениеФасада;
				НоваяСтрока.БезПетель = БезПетель;
				
				Если ЗначениеЗаполнено(РасположениеПазовИРучкиНаФасадах) И КоличествоПетель > 0 Тогда
					
					ТаблицаОтверстийФасадыПоКаталогу.Очистить();
					
					тПоложениеПазов = РасположениеПазовИРучкиНаФасадах.ПоложениеПазов;
					
					Если тПоложениеПазов <> "Отсутствует" Тогда
						
						СтрокаОтв = ТаблицаОтверстийФасадыПоКаталогу.Добавить();
						СтрокаОтв.ВидОтверстий = Перечисления.ВидыОтверстий.ПазыПетель;
						СтрокаОтв.Количество = КоличествоПетель;
						СтрокаОтв.Смещение = 100;
						СтрокаОтв.ОтступСлева = 100;
						СтрокаОтв.ОтступСправа = 100;
						СтрокаОтв.РасположениеОтверстия = тПоложениеПазов;
						
						НоваяСтрока.СтруктураОтверстий = ЗначениеВСтрокуВнутр(РеквизитФормыВЗначение("ТаблицаОтверстийФасадыПоКаталогу"));
						
						Если ЗначениеЗаполнено(НоваяСтрока.СтруктураОтверстий) Тогда
							СписокОтверстий = ЗначениеИзСтрокиВнутр(НоваяСтрока.СтруктураОтверстий);
							
							Для каждого СтрокаОтверстий Из СписокОтверстий Цикл
								
								Если СтрокаОтверстий.ВидОтверстий = Перечисления.ВидыОтверстий.Европаз Тогда
									
									СтрокаОтверстий.Количество = Элемент.Европаз;
									
								КонецЕсли;
								
							КонецЦикла;
							НоваяСтруктураОтверстий = ЗначениеВСтрокуВнутр(СписокОтверстий);
							НоваяСтрока.СтруктураОтверстий = НоваяСтруктураОтверстий;
							
						КонецЕсли;
						
						
					КонецЕсли;
					
				КонецЕсли;
				
				НоваяСтрока.РадиусФасада = "";
				
				Если ЗначениеЗаполнено(РучкаФасада) Тогда
					НоваяСтрока.НоменклатураДляСклеивания = РучкаФасада;
				КонецЕсли;
				
			КонецЕсли;
			
			НоменклатураМатериала = НоваяСтрока.Номенклатура;
			
			Количество = 0;
			
			Попытка
				Выполнить("Количество = " + Строка.Количество);
			Исключение
				Текст = "Ошибка при формировании формул для Количество """ + Строка.ИмяДетали + """ каталога изделий " + Элемент.Изделие;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(Количество) Тогда
				
				Объект.СписокДеталей.Удалить(НоваяСтрока.НомерСтроки-1);
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока.Количество = Количество;
			
			Если ЗначениеЗаполнено(Строка.ВысотаДетали) И ЗначениеЗаполнено(Строка.ШиринаДетали) Тогда
				
				Попытка
					Выполнить("НоваяСтрока.ВысотаДетали = " + Строка.ВысотаДетали);
					Выполнить("НоваяСтрока.ШиринаДетали = " + Строка.ШиринаДетали);
				Исключение
					Текст = "Ошибка при формировании формул для """ + Строка.ИмяДетали + """ каталога изделий " + Элемент.Изделие;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки;
				
				Если ЭтоФасад И ЗначениеЗаполнено(СтрокаФасада) Тогда
					Если СтрокаФасада.ПовернутьФасад Тогда
						ВременноеЗначение = НоваяСтрока.ВысотаДетали;
						НоваяСтрока.ВысотаДетали = НоваяСтрока.ШиринаДетали;
						НоваяСтрока.ШиринаДетали = ВременноеЗначение;
					КонецЕсли;
				Иначе					
					//Рассчет коэффициента масштабирования криволинейной детали
					Если ЗначениеЗаполнено(Строка.СтрокаДляФлэш) Тогда
						МасштабироватьИЗаполнитьПараметрыРедактированнойДетали(Строка.СтрокаДляФлэш, НоваяСтрока, ОпределитьКромку(Строка.ВидКромкиРедактор, КромкаНоменклатуры));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) И ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Строка.Номенклатура;
			КонецЕсли;
			
			НоваяСтрока.СоблюдениеТекстуры = НоваяСтрока.Номенклатура.НаличиеТекстуры;
			
			Если Строка.КромкаСверху Тогда
				СтруктураКромки = ОпределитьКромку(Строка.ВидКромкиСверху, КромкаНоменклатуры);
				НоваяСтрока.ПереключательКромкаСверху = СтруктураКромки.ПереключательКромка;
				НоваяСтрока.ВыборМебельнойКромкиСверху = СтруктураКромки.Кромка;
				
				Если НЕ ЗначениеЗаполнено(СтруктураКромки.Кромка) Тогда
					Сообщить("Деталь: "+НоваяСтрока.НомерСтроки+".СВЕРХУ. Не найдена подходящая по цвету кромка. Заполните кромку вручную.");	
				КонецЕсли;
				
				ЗаполнитьКромки(НоваяСтрока, СтруктураКромки);
				
			КонецЕсли;
			
			Если Строка.КромкаСлева Тогда
				СтруктураКромки = ОпределитьКромку(Строка.ВидКромкиСлева, КромкаНоменклатуры);
				НоваяСтрока.ПереключательКромкаСлева = СтруктураКромки.ПереключательКромка;
				НоваяСтрока.ВыборМебельнойКромкиСлева = СтруктураКромки.Кромка;
				
				Если НЕ ЗначениеЗаполнено(СтруктураКромки.Кромка) Тогда
					Сообщить("Деталь: "+НоваяСтрока.НомерСтроки+".СЛЕВА. Не найдена подходящая по цвету кромка. Заполните кромку вручную.");	
				КонецЕсли;
				
				ЗаполнитьКромки(НоваяСтрока, СтруктураКромки);
				
			КонецЕсли;
			
			Если Строка.КромкаСнизу Тогда
				СтруктураКромки = ОпределитьКромку(Строка.ВидКромкиСнизу, КромкаНоменклатуры);
				НоваяСтрока.ПереключательКромкаСнизу = СтруктураКромки.ПереключательКромка;
				НоваяСтрока.ВыборМебельнойКромкиСнизу = СтруктураКромки.Кромка;
				
				Если НЕ ЗначениеЗаполнено(СтруктураКромки.Кромка) Тогда
					Сообщить("Деталь: "+НоваяСтрока.НомерСтроки+".СНИЗУ. Не найдена подходящая по цвету кромка. Заполните кромку вручную.");	
				КонецЕсли;
				
				ЗаполнитьКромки(НоваяСтрока, СтруктураКромки);
				
			КонецЕсли;
			
			Если Строка.КромкаСправа Тогда
				СтруктураКромки = ОпределитьКромку(Строка.ВидКромкиСправа, КромкаНоменклатуры);
				НоваяСтрока.ПереключательКромкаСправа = СтруктураКромки.ПереключательКромка;
				НоваяСтрока.ВыборМебельнойКромкиСправа = СтруктураКромки.Кромка;
				
				Если НЕ ЗначениеЗаполнено(СтруктураКромки.Кромка) Тогда
					Сообщить("Деталь: "+НоваяСтрока.НомерСтроки+".СПРАВА. Не найдена подходящая по цвету кромка. Заполните кромку вручную.");	
				КонецЕсли;
				
				ЗаполнитьКромки(НоваяСтрока, СтруктураКромки);
				
			КонецЕсли;
			
			Если ДанныеДетали.СпецФасад Тогда
				
				КромкиОдинаковые = ( НоваяСтрока.ВыборМебельнойКромкиСверху = НоваяСтрока.ВыборМебельнойКромкиСнизу )
				И ( НоваяСтрока.ВыборМебельнойКромкиСверху = НоваяСтрока.ВыборМебельнойКромкиСлева )
				И ( НоваяСтрока.ВыборМебельнойКромкиСверху = НоваяСтрока.ВыборМебельнойКромкиСправа );
				
				Если ЗначениеЗаполнено(НоваяСтрока.ВыборМебельнойКромкиСверху) И КромкиОдинаковые Тогда 
					НоваяСтрока.УниверсальнаяКромка = НоваяСтрока.ВыборМебельнойКромкиСверху;
				Иначе
					Сообщить("Разная кромка фасада. Ошибка: № 005.");
				КонецЕсли;
				
			КонецЕсли;
			
			ТорцеваяЛента = Новый Структура;
			ТорцеваяЛента.Вставить("ТорцеваяЛентаСверху", НоваяСтрока.ВыборМебельнойКромкиСверху);
			ТорцеваяЛента.Вставить("ТорцеваяЛентаСнизу", НоваяСтрока.ВыборМебельнойКромкиСнизу);
			ТорцеваяЛента.Вставить("ТорцеваяЛентаСлева", НоваяСтрока.ВыборМебельнойКромкиСлева);
			ТорцеваяЛента.Вставить("ТорцеваяЛентаСправа", НоваяСтрока.ВыборМебельнойКромкиСправа);
			
			// Размеры с учетом кромки
			СтруктураРазмеров = Документы.Спецификация.ПолучитьРазмерыМатериалов(НоваяСтрока.Номенклатура, ТорцеваяЛента);
			ВысотаДеталиБезКромки = НоваяСтрока.ВысотаДетали - СтруктураРазмеров.ВычитаемоеДляВысоты;
			ШиринаДеталиБезКромки = НоваяСтрока.ШиринаДетали - СтруктураРазмеров.ВычитаемоеДляШирины;
			
			НоваяСтрока.ВысотаДетали = ?(ВысотаДеталиБезКромки >= 0, ВысотаДеталиБезКромки, 0);
			НоваяСтрока.ШиринаДетали = ?(ШиринаДеталиБезКромки >= 0, ШиринаДеталиБезКромки, 0);
			
			Если ЗначениеЗаполнено(Строка.РадиусЛевоВерх)Тогда
				Попытка
					Выполнить("R1 = " + Строка.РадиусЛевоВерх);
				Исключение
					Текст = "Ошибка при формировании формул радиусов """ + Строка.ИмяДетали + """ каталога изделий " + Элемент.Изделие;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки;
			Иначе
				R1 = 0;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.РадиусПравоВерх)Тогда
				Попытка
					Выполнить("R2 = " + Строка.РадиусПравоВерх);
				Исключение
					Текст = "Ошибка при формировании формул радиусов """ + Строка.ИмяДетали + """ каталога изделий " + Элемент.Изделие;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки;
			Иначе
				R2 = 0;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.РадиусПравоНиз)Тогда
				Попытка
					Выполнить("R3 = " + Строка.РадиусПравоНиз);
				Исключение
					Текст = "Ошибка при формировании формул радиусов """ + Строка.ИмяДетали + """ каталога изделий " + Элемент.Изделие;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки;
			Иначе
				R3 = 0;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.РадиусЛевоНиз)Тогда
				Попытка
					Выполнить("R4 = " + Строка.РадиусЛевоНиз);
				Исключение
					Текст = "Ошибка при формировании формул радиусов """ + Строка.ИмяДетали + """ каталога изделий " + Элемент.Изделие;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки;
			Иначе
				R4 = 0;
			КонецЕсли;
			
			НоваяСтрока.РадиусЛевоВерх = R1 - (R1 % 50);
			НоваяСтрока.РадиусПравоВерх = R2 - (R2 % 50);
			НоваяСтрока.РадиусПравоНиз = ?(Строка.Срез, R3, R3 - (R3 % 50));
			НоваяСтрока.РадиусЛевоНиз = R4 - (R4 % 50);
			НоваяСтрока.Срез = Строка.Срез;
			
			Если НЕ ДанныеДетали.ЭтоФасад Тогда
				
				НоваяСтрока.СтруктураОтверстий = Строка.СтруктураОтверстий;
				
				Если ЗначениеЗаполнено(Строка.СтруктураОтверстий) Тогда
					СписокОтверстий = ЗначениеИзСтрокиВнутр(Строка.СтруктураОтверстий);
					
					Для каждого СтрокаОтверстий Из СписокОтверстий Цикл
						
						Если СтрокаОтверстий.ВидОтверстий = Перечисления.ВидыОтверстий.Европаз Тогда
							
							СтрокаОтверстий.Количество = Элемент.Европаз;
							
						КонецЕсли;
						
					КонецЦикла;
					НоваяСтруктураОтверстий = ЗначениеВСтрокуВнутр(СписокОтверстий);
					НоваяСтрока.СтруктураОтверстий = НоваяСтруктураОтверстий;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтрокаДляФлэш) Тогда 
				
				СтруктураПериметраИПила = ЛексКлиентСервер.ПосчитатьПериметрИКривойПил(НоваяСтрока.ВысотаДетали, НоваяСтрока.ШиринаДетали, R1 + R2 + ?(НоваяСтрока.Срез, 0, R3) + R4, ?(НоваяСтрока.Срез, R3, 0));
				НоваяСтрока.Периметр = СтруктураПериметраИПила.Периметр;
				НоваяСтрока.ДлинаКривогоПила = СтруктураПериметраИПила.ДлинаКривогоПила;
				НоваяСтрока.КосойПил = СтруктураПериметраИПила.КоличествоКосогоПила;
				
			КонецЕсли;
			
			НоваяСтрока.Обтачивать = Строка.Обтачивать;
			НоваяСтрока.Постформинг = Строка.Постформинг;
			НоваяСтрока.Идентификатор = Строка.Идентификатор;
			НоваяСтрока.НомерИзделия = Элемент.НомерСтроки;
			НоваяСтрока.НомерДеталиИзделия = Строка.НомерСтроки;
			
		КонецЦикла; // Строка Из СписокДеталейИзделия
		
		#КонецОбласти
		
		///////////////////////////////////////////////////////////////////ЯЩИКИ//////////////////////////////////////////////////////////////////////////////////////
		
		# Область ДобавлениеЯщиков
		
		СписокЯщикиИзделия = НашеИзделие.СписокЯщики;
		
		Для Каждого Строка Из СписокЯщикиИзделия Цикл
			
			СтрокаПоиска = Неопределено;
			НоваяСтрока = Объект.СписокЯщики.Добавить();
			
			Попытка
				Выполнить("НоваяСтрока.ГлубинаЯщика = " + Строка.ГлубинаЯщика);
				Выполнить("НоваяСтрока.ПроемЯщика = " + Строка.ПроемЯщика);
				Выполнить("НоваяСтрока.ВысотаЯщика = " + Строка.ВысотаЯщика);
			Исключение
				Текст = "Ошибка при формировании формул для ящиков каталога изделий " + Элемент.Изделие;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			КонецПопытки;
			
			Если ИзделиеШкафКупе Тогда
				
				НоваяСтрока.СхемаЯщика = Справочники.СхемыЯщиков.НайтиПоНаименованию("Обычный", Ложь);
				
				НоваяСтрока.НаправляющиеНоменклатура = НайтиНаправляющиеНоменклатура(Справочники.НоменклатурныеГруппы.НаправляющиеШариковые35, НоваяСтрока.ГлубинаЯщика);
				НоваяСтрока.ГлубинаЯщика = НоваяСтрока.НаправляющиеНоменклатура.ДлинаДетали;
				
				НоваяСтрока.Номенклатура = Элемент.НоменклатураЛДСП;
				
				Если ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры)
					И ЗначениеЗаполнено(СтруктураПодбираемойПоЦветуНоменклатуры.Кромка045_19) Тогда
					
					НоваяСтрока.КромкаНоменклатура = СтруктураПодбираемойПоЦветуНоменклатуры.Кромка045_19;
					
				ИначеЕсли Элемент.КромкаЛДСП.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.Кромка045_19 Тогда
					
					НоваяСтрока.КромкаНоменклатура = Элемент.КромкаЛДСП;
					
				Иначе
					Текст = "Внимание! Кромка для ящика не найдена (" + НашеИзделие + ")";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецЕсли;
				
			Иначе
				
				СтрокаПоиска = ПараметрыТаблицаФасадов.Получить(Строка.НомерСтроки - 1);
				
				Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
					
					НоваяСтрока.СхемаЯщика = СтрокаПоиска.СхемаЯщика;
					НоваяСтрока.НаправляющиеНоменклатура = НайтиНаправляющиеНоменклатура(СтрокаПоиска.МеханизмЭлемента, НоваяСтрока.ГлубинаЯщика);
					
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.НаправляющиеНоменклатура) Тогда
						Текст = "Внимание! Направляющая не найдена у " + НашеИзделие;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					КонецЕсли;
					
					НоваяСтрока.ГлубинаЯщика = НоваяСтрока.НаправляющиеНоменклатура.ДлинаДетали;
					
					Если ЗначениеЗаполнено(СтрокаПоиска.ДопЭлемент) Тогда
						ДобавитьКомплектацию(СтрокаПоиска.ДопЭлемент, 1, Элемент.НомерСтроки);
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.Номенклатура = СтрокаПоиска.НоменклатураЭлемента;
				НоваяСтрока.КромкаНоменклатура = СтрокаПоиска.ТорцовкаЭлемента;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ДноНоменклатура) Тогда
				НоваяСтрока.ДноНоменклатура = Строка.ДноНоменклатура;
			КонецЕсли;
			
			НоваяСтрока.ВидФасада = Строка.ВидФасада;
			
			Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
				Если СтрокаПоиска.БезФасада Тогда
					НоваяСтрока.ВидФасада = "Нет";	
				КонецЕсли;
			КонецЕсли;
			
			Если НоваяСтрока.ВидФасада <> "Нет" Тогда
				Попытка
					ШиринаФасад = 0;
					ВысотаФасад = 0;
					Выполнить("ШиринаФасад = " + Строка.ШиринаФасада);
					Выполнить("ВысотаФасад = " + Строка.ВысотаФасада);
					НоваяСтрока.ШиринаФасад = Окр(ШиринаФасад, 0, РежимОкругления.Окр15как10);
					НоваяСтрока.ВысотаФасад = Окр(ВысотаФасад, 0, РежимОкругления.Окр15как10);
				Исключение
					Текст = "Ошибка при формировании формул для фасадов ящика каталога изделий " + Элемент.Изделие;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки;
				
				НоваяСтрока.РасположениеФасада = Строка.РасположениеФасада;
				
				Если ИзделиеШкафКупе Тогда
					
					НоваяСтрока.ФасадНоменклатура = Элемент.НоменклатураЛДСП;
					НоваяСтрока.РучкаНоменклатура = Элемент.Ручка;
					НоваяСтрока.КоличествоРучек = 1;
					НоваяСтрока.КромкаФасадНоменклатура = Элемент.КромкаЛДСП;
					
				Иначе
					
					НоваяСтрока.ФасадНоменклатура = СтрокаПоиска.НоменклатураФасада;
					НоваяСтрока.РучкаНоменклатура = СтрокаПоиска.НоменклатураРучки;
					НоваяСтрока.КромкаФасадНоменклатура = СтрокаПоиска.ОбрамлениеФасада;
					
					КоличествоРучек = 0;
					Выполнить("КоличествоРучек = " + ?(ЗначениеЗаполнено(Строка.КоличествоРучек), Строка.КоличествоРучек, 0));
					НоваяСтрока.КоличествоРучек = Мин(Макс(КоличествоРучек, 1), 2);
					
					Если СтрокаПоиска.ПовернутьФасад Тогда
						ВременноеЗначение = НоваяСтрока.ШиринаФасад;
						НоваяСтрока.ШиринаФасад = НоваяСтрока.ВысотаФасад;
						НоваяСтрока.ВысотаФасад = ВременноеЗначение;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Выполнить("НоваяСтрока.ГлубинаЯщика = " + ЛексКлиентСервер.ПодставитьОбъектВФормулуЯщика("НоваяСтрока", НоваяСтрока.СхемаЯщика.ГлубинаЯщика));
			Выполнить("НоваяСтрока.ШиринаЯщика = " + ЛексКлиентСервер.ПодставитьОбъектВФормулуЯщика("НоваяСтрока", НоваяСтрока.СхемаЯщика.ШиринаЯщика));
			
			НоваяСтрока.НомерИзделия = Элемент.НомерСтроки;
			НоваяСтрока.КоличествоЯщиков = Строка.КоличествоЯщиков;
			НоваяСтрока.НомерЯщикаИзделия = Строка.НомерСтроки;
			
		КонецЦикла;
		
		#КонецОбласти
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомплектацию(Номенклатура, Количество, НомерИзделия, ПоКаталогуМестоОбработки = Неопределено)
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		НоваяСтрока = Объект.Комплектация.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.Количество = Количество;
		НоваяСтрока.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.НомерИзделия = НомерИзделия;
		НоваяСтрока.ПоКаталогуМестоОбработки = ПоКаталогуМестоОбработки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиНаправляющиеНоменклатура(НоменклатурнаяГруппа, ГлубинаЯщика, ПоВозрастания = Ложь)
	
	// { Васильев Александр Леонидович [23.02.2015]
	// Костыль
	// } Васильев Александр Леонидович [23.02.2015]
	
	// { Васильев Александр Леонидович [01.07.2015]
	// Што это млять за херня?
	// Неужели я сделал. Объединить запрос, да и вообще...
	// } Васильев Александр Леонидович [01.07.2015]
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("ДлинаДетали", ГлубинаЯщика);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Если ПоВозрастания Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	спрНоменклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК спрНоменклатура
		|ГДЕ
		|	спрНоменклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
		|	И спрНоменклатура.ДлинаДетали >= &ДлинаДетали
		|
		|УПОРЯДОЧИТЬ ПО
		|	спрНоменклатура.ДлинаДетали";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	спрНоменклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК спрНоменклатура
		|ГДЕ
		|	спрНоменклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
		|	И спрНоменклатура.ДлинаДетали <= &ДлинаДетали
		|
		|УПОРЯДОЧИТЬ ПО
		|	спрНоменклатура.ДлинаДетали УБЫВ";
		
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Если Выборка.Количество() > 0 Тогда
		Возврат Выборка[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НайтиВсеФормулы()
	
	ВсеФормулы = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФормулыКаталога.Наименование,
	|	ФормулыКаталога.РазвернутаяФормула
	|ИЗ
	|	Справочник.ФормулыКаталога КАК ФормулыКаталога
	|ГДЕ
	|	НЕ ФормулыКаталога.ПометкаУдаления
	|	И ФормулыКаталога.Активность";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВсеФормулы.Вставить(Выборка.Наименование, Выборка.РазвернутаяФормула);
		
	КонецЦикла;
	
	Возврат ВсеФормулы;
	
КонецФункции

&НаСервере
Функция ОпределитьКромку(ВидКромкиПоУмолчанию, Кромка)
	
	ВидКромки = ВидКромкиПоУмолчанию;
	Структура = Новый Структура;
	Структура.Вставить("ПереключательКромка", "Нет");
	Структура.Вставить("Кромка", Кромка);
	
	Структура.Вставить("ЭтоКант", Ложь);
	Структура.Вставить("ЭтоКромка045", Ложь);
	Структура.Вставить("ЭтоКромка2", Ложь);
	Структура.Вставить("ЭтоУниверсальнаяКромка", Ложь);
	
	НоменклатурнаяГруппаКромки = Кромка.НоменклатурнаяГруппа;
	
	Если НЕ ЗначениеЗаполнено(ВидКромки) Тогда
		ВидКромки = НоменклатурнаяГруппаКромки;
	КонецЕсли;
	
	ЭтоКантП = ВидКромки = Справочники.НоменклатурныеГруппы.КантП;
	ЭтоКантТ = ВидКромки = Справочники.НоменклатурныеГруппы.КантТ;
	ЭтоКромка2_19 = ВидКромки = Справочники.НоменклатурныеГруппы.Кромка2_19;
	ЭтоКромка2_35 = ВидКромки = Справочники.НоменклатурныеГруппы.Кромка2_35;
	ЭтоКромка045_19 = ВидКромки = Справочники.НоменклатурныеГруппы.Кромка045_19;
	
	ЭтоУниверсальнаяКромка = ВидКромки = Справочники.НоменклатурныеГруппы.АГТПрофиль
	ИЛИ ВидКромки = Справочники.НоменклатурныеГруппы.КромкаМДФ
	ИЛИ ВидКромки = Справочники.НоменклатурныеГруппы.РамочныйАлюминий;
	
	Если ВидКромки <> НоменклатурнаяГруппаКромки Тогда
		
		Если ЭтоКантТ Тогда
			Структура.Вставить("Кромка", СтруктураПодбираемойПоЦветуНоменклатуры.КантТ);
			Структура.Вставить("ПереключательКромка", "Кант");
			Структура.Вставить("ЭтоКант", Истина);
		ИначеЕсли ЭтоКромка2_19 Тогда
			Структура.Вставить("Кромка", СтруктураПодбираемойПоЦветуНоменклатуры.Кромка2_19);
			Структура.Вставить("ПереключательКромка", "2");
			Структура.Вставить("ЭтоКромка2", Истина);
		ИначеЕсли ЭтоКромка2_35 Тогда
			Структура.Вставить("Кромка", СтруктураПодбираемойПоЦветуНоменклатуры.Кромка2_35);
			Структура.Вставить("ПереключательКромка", "2");
			Структура.Вставить("ЭтоКромка2", Истина);
		ИначеЕсли ЭтоКромка045_19 Тогда
			Структура.Вставить("Кромка", СтруктураПодбираемойПоЦветуНоменклатуры.Кромка045_19);
			Структура.Вставить("ПереключательКромка", "0.45");
			Структура.Вставить("ЭтоКромка045", Истина);
		КонецЕсли;
		
	Иначе
		
		Если ЭтоКантП ИЛИ ЭтоКантТ Тогда
			Структура.Вставить("ПереключательКромка", "Кант");
			Структура.Вставить("ЭтоКант", Истина);
		ИначеЕсли ЭтоКромка2_19 ИЛИ ЭтоКромка2_35 Тогда
			Структура.Вставить("ПереключательКромка", "2");
			Структура.Вставить("ЭтоКромка2", Истина);
		ИначеЕсли ЭтоКромка045_19 Тогда
			Структура.Вставить("ПереключательКромка", "0.45");
			Структура.Вставить("ЭтоКромка045", Истина);
		ИначеЕсли ЭтоУниверсальнаяКромка Тогда
			Структура.Вставить("ПереключательКромка", "УниверсальнаяКромка");
			Структура.Вставить("ЭтоУниверсальнаяКромка", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКромки(НоваяСтрока, СтруктураКромки)
	
	Если СтруктураКромки.ЭтоКант И НЕ ЗначениеЗаполнено(НоваяСтрока.Кант) Тогда
		
		НоваяСтрока.Кант = СтруктураКромки.Кромка;
		
	КонецЕсли;
	
	Если СтруктураКромки.ЭтоКромка045 И НЕ ЗначениеЗаполнено(НоваяСтрока.Кромка045мм) Тогда
		
		НоваяСтрока.Кромка045мм = СтруктураКромки.Кромка;
		
	КонецЕсли;
	
	Если СтруктураКромки.ЭтоКромка2 И НЕ ЗначениеЗаполнено(НоваяСтрока.Кромка2мм) Тогда
		
		НоваяСтрока.Кромка2мм = СтруктураКромки.Кромка;
		
	КонецЕсли;
	
	Если СтруктураКромки.ЭтоУниверсальнаяКромка И НЕ ЗначениеЗаполнено(НоваяСтрока.УниверсальнаяКромка) Тогда
		
		НоваяСтрока.УниверсальнаяКромка = СтруктураКромки.Кромка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТаблицу(Таблица)
	
	Количество = Таблица.Количество();
	Если Количество > 0 Тогда
		Для Индекс = 1 По Количество Цикл
			Элемент = Таблица[Количество - Индекс];
			Если Элемент.НомерИзделия > 0 Тогда
				Таблица.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСвойстваИзделия(фнИзделие, фнКонтрагент)
	
	Структура = Новый Структура;
	Структура.Вставить("ЗапретРедактирования", фнИзделие.ЗапретРедактирования);
	Структура.Вставить("СерийноеИзделие", фнИзделие.Серийное);
	Структура.Вставить("Переделка", фнИзделие = Справочники.Изделия.Переделка);
	Структура.Вставить("ПоказатьТелефон", (фнИзделие = Справочники.Изделия.Детали И фнКонтрагент = Справочники.Контрагенты.ЧастноеЛицо));
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область Управление_внешним_видом

// Возвращает Строку для УведомлениеМатериалПодЗаказ
// в которой есть телефон ответственного из указанного подразделения.
//
// Параметры:
// Подразделение - СправочникСсылка.Подразделение, подразделение, в котором ищем ЗаведующегоСкладамиМатериалов
//
// Возвращаемое значение:
// ТекстУведомления - Строка
&НаСервереБезКонтекста
Функция ПолучитьУведомлениеМатериалПодЗаказ(Подразделение)
	
	ФизЛицо = ЛексСервер.ПолучитьНастройкуПодразделения(Подразделение, Перечисления.ВидыНастроекПодразделений.ФизЛицоДляСогласованияМатериала);
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Телефон = "8-962-285-73-98"; // телефон Гарбузова
		
	Иначе
		
		СвойстваФизлица = ЛексСервер.ЗначенияРеквизитовОбъекта(Физлицо, "ТелефонРабочий, Телефон");
		
		Если ЗначениеЗаполнено(СвойстваФизлица.ТелефонРабочий) Тогда
			Телефон = СвойстваФизлица.ТелефонРабочий;
		ИначеЕсли ЗначениеЗаполнено(СвойстваФизлица.Телефон) Тогда
			Телефон = СвойстваФизлица.Телефон;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстУведомления = "Заполните вкладку ""Под заказ"". Согласуйте по тел: " + Телефон;
	
	Возврат ТекстУведомления;
	
КонецФункции // ПолучитьУведомлениеМатериалПодЗаказ()

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьЭлементыФормы(фнФорма, лПараметры)
	
	Если ТипЗнч(лПараметры) <> Тип("Структура") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Элементы = фнФорма.Элементы;
	
	Если лПараметры.Свойство("ЕстьМатериалПодЗаказ") Тогда
		
		Элементы.УведомлениеМатериалПодЗаказ.Видимость = лПараметры.ЕстьМатериалПодЗаказ;
		
	КонецЕсли;
	
	Если лПараметры.Свойство("ТолькоПросмотр") Тогда
		
		фнФорма.ТолькоПросмотр = лПараметры.ТолькоПросмотр;
		
	КонецЕсли;
	
	Если лПараметры.Свойство("ЕстьМонтаж") Тогда
		
		Элементы.Монтажник.Доступность = лПараметры.ЕстьМонтаж;
		Доступность = лПараметры.ЕстьМонтаж;
		Элементы.ДатаОтгрузки.Доступность = НЕ лПараметры.ЕстьМонтаж;
		
	КонецЕсли;
	
	Если лПараметры.Свойство("Переделка") Тогда
		
		Элементы.СтраницаВиновные.Доступность = лПараметры.Переделка;
		Элементы.СтраницаВиновные.Видимость = лПараметры.Переделка;
		Элементы.ДовозОсуществил.Видимость = Ложь;
		
	КонецЕсли;
	
	Если лПараметры.Свойство("ПользовательАдминистратор") Тогда
		
		МассивЭлементовАдминистратора = Новый Массив;
		МассивЭлементовАдминистратора.Добавить(Элементы.СтраницаСписокНоменклатуры);
		МассивЭлементовАдминистратора.Добавить(Элементы.СтраницаСкладГотовойПродукции);
		МассивЭлементовАдминистратора.Добавить(Элементы.СтраницаСписокЛистовНоменклатуры);
		
		Если лПараметры.ПользовательАдминистратор Тогда
			Для каждого ЭлементовАдминистратора Из МассивЭлементовАдминистратора Цикл
				ЭлементовАдминистратора.Видимость = Истина;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если лПараметры.Свойство("Дилерский") Тогда
		
		НовыйМассив = Новый Массив;
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Активность", Истина);
		НовыйМассив.Добавить(НовыйПараметр);
		
		Если лПараметры.Дилерский Тогда
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ЗапрещеноДляДилеров", Ложь);
			НовыйМассив.Добавить(НовыйПараметр);
		КонецЕсли;
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		фнФорма.Элементы.Изделие.ПараметрыВыбора = НовыеПараметры;
		
		МассивДилерскихЭлементов = Новый Массив;
		МассивДилерскихЭлементов.Добавить(Элементы.Офис);
		МассивДилерскихЭлементов.Добавить(Элементы.Телефон);
		МассивДилерскихЭлементов.Добавить(Элементы.Технолог);
		МассивДилерскихЭлементов.Добавить(Элементы.Договор);
		МассивДилерскихЭлементов.Добавить(Элементы.ГруппаСкидкаДоговора);
		
		Если лПараметры.Дилерский Тогда
			
			Элементы.Контрагент.Доступность = Ложь;
			Элементы.Подразделение.Доступность = Ложь;
			
			Для каждого ДилерскийЭлемент Из МассивДилерскихЭлементов Цикл
				ДилерскийЭлемент.Видимость = Ложь;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если лПараметры.Свойство("ЗапретРедактирования") Тогда
		
		Элементы.СтраницаВиновные.ТолькоПросмотр = лПараметры.ЗапретРедактирования;
		Элементы.СтраницаМатериалы.ТолькоПросмотр = лПараметры.ЗапретРедактирования;
		Элементы.СтраницаЯщики.ТолькоПросмотр = лПараметры.ЗапретРедактирования;
		Элементы.СтраницаДвери.ТолькоПросмотр = лПараметры.ЗапретРедактирования;
		Элементы.СтраницаКомплектация.ТолькоПросмотр = лПараметры.ЗапретРедактирования;
		Элементы.КомплектацияПодбор.Доступность = НЕ лПараметры.ЗапретРедактирования;
		Элементы.КомплектацияФурнитура.Доступность = НЕ лПараметры.ЗапретРедактирования;
		Элементы.КомплектацияСотовыеЭлементы.Доступность = НЕ лПараметры.ЗапретРедактирования;
		Элементы.СписокДверейДобавитьДвери.Доступность = НЕ лПараметры.ЗапретРедактирования;
		Элементы.Двери.Доступность = НЕ лПараметры.ЗапретРедактирования;
		Элементы.Технолог.Видимость = НЕ лПараметры.ЗапретРедактирования;
		
	КонецЕсли;
	
	Если лПараметры.Свойство("ПоказатьТелефон") Тогда
		
		Элементы.Телефон.Видимость = лПараметры.ПоказатьТелефон;
		
	КонецЕсли;
	
	Если лПараметры.Свойство("СерийноеИзделие") Тогда
		
		Элементы.СтраницаСерийноеИзделие.Видимость = лПараметры.СерийноеИзделие;
		
	КонецЕсли;
	
	Если лПараметры.Свойство("Заблокировать") Тогда
		
		Элементы.КолонкаПроизводство.Доступность = НЕ лПараметры.Заблокировать;
		Элементы.КолонкаДаты.Доступность = НЕ лПараметры.Заблокировать;
		Элементы.ГруппаСтраницы.Доступность = НЕ лПараметры.Заблокировать;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	//Договор
	Договор = Документы.Спецификация.ПолучитьДоговор(Объект.Ссылка);
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = "Введите договор";
	КонецЕсли;
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ПользовательАдминистратор = УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.Администратор);
	СтруктураИзделия = ПолучитьСвойстваИзделия(Объект.Изделие, Объект.Контрагент);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дилерский", Объект.Дилерский);
	СтруктураПараметров.Вставить("ЕстьМонтаж", Объект.ПакетУслуг = Перечисления.ПакетыУслуг.ДоставкаДоКлиентаИМонтаж);
	СтруктураПараметров.Вставить("Переделка", Объект.Изделие = Справочники.Изделия.Переделка);
	СтруктураПараметров.Вставить("ПользовательАдминистратор", ПользовательАдминистратор);
	СтруктураПараметров.Вставить("ЕстьМатериалПодЗаказ", Объект.ЕстьМатериалПодЗаказ);
	СтруктураПараметров.Вставить("ЗапретРедактирования", СтруктураИзделия.ЗапретРедактирования);
	СтруктураПараметров.Вставить("ПоказатьТелефон", СтруктураИзделия.ПоказатьТелефон);
	СтруктураПараметров.Вставить("СерийноеИзделие", СтруктураИзделия.СерийноеИзделие);
	СтруктураПараметров.Вставить("ТолькоПросмотр", НЕ ЛексСервер.ДоступностьСпецификации(Объект.Ссылка));
	СтруктураПараметров.Вставить("Заблокировать", НЕ ЗначениеЗаполнено(Объект.Изделие));
	
	ОбновитьЭлементыФормы(ЭтаФорма, СтруктураПараметров);
	
	УведомлениеМатериалПодЗаказ = ПолучитьУведомлениеМатериалПодЗаказ(Объект.Подразделение);
	
	ОбновитьСписокНоменклатурыЗаказчика(Объект);
	
	Если Объект.БезОкругленияДоЛистов Тогда
		УведомлениеОкруглениеДоЛистов = "Материал не округляется до листов!";
	Иначе
		УведомлениеОкруглениеДоЛистов = "";
	КонецЕсли;
	
	// Проверка на устаревшую спецификацию
	
	Копирование = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатурныеГруппы.Ссылка КАК Группа
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ
	|	НоменклатурныеГруппы.ВидМатериала <> ЗНАЧЕНИЕ(Перечисление.ВидыМатериалов.Листовой)";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Массив = ТЗ.ВыгрузитьКолонку("Группа");
	СписокНоменклатурныхГрупп = Новый Структура;
	СписокНоменклатурныхГрупп.Вставить("Массив", Массив);
	// { Васильев Александр Леонидович [08.02.2016]
	// Отключаем пока. Напутано с этими датами.
	// } Васильев Александр Леонидович [08.02.2016]
	
	//Если ЗначениеЗаполнено(ЭтаФорма.Параметры.ЗначениеКопирования) Тогда
	//	
	//	СпецИсточник = ЭтаФорма.Параметры.ЗначениеКопирования;
	//	ДатаУстаревания = ДобавитьМесяц(СпецИсточник.ДатаСоздания,1);
	//	Копирование = Истина;
	//	
	//КонецЕсли;
	//
	//Если Копирование И НЕ ЗначениеЗаполнено(Объект.Ссылка) И ДатаУстаревания < ТекущаяДата() Тогда	
	//	
	//	Отказ = Истина;
	//	Сообщить("Спецификация устарела: " + ДатаУстаревания + ". Копирование не возможно.");
	//	
	//КонецЕсли;
	//
	//ДатаУстаревания = ДобавитьМесяц(Объект.ДатаСоздания,1);
	//
	//Если НЕ Копирование И ЗначениеЗаполнено(Объект.Ссылка) И ДатаУстаревания < ТекущаяДата() Тогда	
	//	
	//	ЭтаФорма.Доступность = Ложь;
	//	Сообщить("Спецификация устарела: " + ДатаУстаревания + ". Редактирование не возможно.");
	//	
	//КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	СтатусСпецификации = ПолучитьСтатусСпецификации(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПересчитатьСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Объект.Ссылка = Параметр Тогда
		
		Если ИмяСобытия = "ИзмененСтатусСпецификации" Тогда
			ТолькоПросмотр = НЕ ЛексСервер.ДоступностьСпецификации(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Состояние("Сохранение спецификации и формирование раскроя");
	ОчиститьСообщения();
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНоменклатуруИзКомплектации(фнОбъект)
	
	Для каждого Строка Из фнОбъект.Комплектация Цикл
		
		Если фнОбъект.Изделие.Серийное
			И Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
			Продолжить;
		КонецЕсли;
		
		НоменклатурнаяГруппа = Строка.Номенклатура.НоменклатурнаяГруппа;
		Если НоменклатурнаяГруппа.ВидМатериала <> Перечисления.ВидыМатериалов.Хлыстовой
			И Строка.Номенклатура.Кратность> 0 Тогда
			
			ОстатокОтКратности = Строка.Количество % Строка.Номенклатура.Кратность;
			Если ОстатокОтКратности > 0 Тогда
				Строка.Количество = Строка.Количество + (Строка.Номенклатура.Кратность - ОстатокОтКратности);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ПоКаталогуМестоОбработки) Тогда
			
			Место = Строка.ПоКаталогуМестоОбработки;
			
		Иначе
			
			Если Строка.Номенклатура.МестоОбработки = Перечисления.МестоОбработки.Цех Тогда
				Место = "Цех";
			КонецЕсли;
			
			Если Строка.Номенклатура.МестоОбработки = Перечисления.МестоОбработки.Отгрузка 
				ИЛИ Строка.Номенклатура.МестоОбработки = Перечисления.МестоОбработки.ПоКаталогуВЦех Тогда
				Место = "Склад";
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьСтроку(фнОбъект,
		Строка.Номенклатура,
		Строка.Количество,
		Строка.НомерИзделия,
		,
		"строки комплектации № " + Строка.НомерСтроки,
		"Комплектация",
		Строка.НомерСтроки,
		Ложь,
		Ложь,
		-1,
		Место);
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Перем Ошибки;
	
	ТекущийОбъект.Дата = ТекущаяДата();
	
	УбратьПроверкуПриМодифицированности();
	
	ПроставитьФлагЭтоКухня(ТекущийОбъект);
	
	ТаблицаДеталиЯщиков = Документы.Спецификация.РазложитьЯщикиНаДетали(ТекущийОбъект);
	
	СтруктураРаскроя = РегистрыСведений.РаскройДеталей.СформироватьРаскрой(ТекущийОбъект);
	
	СоответствиеОбрезков = Неопределено;
	
	Если ТипЗнч(СтруктураРаскроя) = Тип("Структура") Тогда
		
		ТекущийОбъект.СписокЛистовНоменклатуры.Загрузить(СтруктураРаскроя.ТаблицаЛистовНоменклатуры);
		СоответствиеОбрезков = СтруктураРаскроя.СоответствиеОбрезков;
		Для каждого Строка Из ТекущийОбъект.СписокЛистовНоменклатуры Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Строка.Номенклатура);
			МассивСтрок = ТекущийОбъект.СписокМатериаловЗаказчика.НайтиСтроки(ПараметрыОтбора);
			Строка.ПредоставитЗаказчик = МассивСтрок.Количество() > 0;
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = Строка(ТекущийОбъект.Ссылка) + " ";
		
		Если ТипЗнч(СтруктураРаскроя) = Тип("Строка")
			И ЗначениеЗаполнено(СтруктураРаскроя) Тогда
			ТекстСообщения = ТекстСообщения + СтруктураРаскроя;
		Иначе
			ТекстСообщения = ТекстСообщения + "ошибка раскроя.";
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения);
		
	КонецЕсли;
	
	/////////////////////////////////////////
	
	ЗаполнитьМатериалы(ТекущийОбъект, Ошибки, СоответствиеОбрезков);
	ЗаполнитьУслуги(ТекущийОбъект);
	ЗаполнитьФотопечать(ТекущийОбъект); // говно, но по другому не вижу способа :(
	ЗаполнитьОсобыеУслуги(ТекущийОбъект);
	ЗаполнитьОсновныеЦвета(ТекущийОбъект);
	ЗаполнитьКоличествоКоробов(ТекущийОбъект);
	
	ПроверитьМатериалЗаказчика(ТекущийОбъект);
	
	ЛексСервер.УстановитьДатуИзготовленияСпецификации(ТекущийОбъект);
	
	////////////////////////////////////////////////////////////////////
	// Граница проверок. После ОТКАЗ не трогать!!!
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	Если НЕ Отказ Тогда
		
		Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
			СпецификацияСсылка = ТекущийОбъект.Ссылка;
		Иначе
			СпецификацияСсылка = Документы.Спецификация.ПолучитьСсылку(Новый УникальныйИдентификатор);
			ТекущийОбъект.УстановитьСсылкуНового(СпецификацияСсылка);
		КонецЕсли;
		
		ЗаписатьСтрокуРаскроя(СпецификацияСсылка, СтруктураРаскроя);
		
		Если ТекущийОбъект.БезОкругленияДоЛистов Тогда
			УведомлениеОкруглениеДоЛистов = "Материал не округляется до листов!";
		Иначе
			УведомлениеОкруглениеДоЛистов = "";
		КонецЕсли;
		
		ДобавитьНоменклатуруИзКомплектации(ТекущийОбъект);
		ЗаполнитьХлыстовойМатериал(ТекущийОбъект);
		
		УвеличитьКоличествоМатериаловНаПроцентОтхода(ТекущийОбъект);
		ОкруглитьКоличествоМатериаловПоНомГруппе(ТекущийОбъект);
		
		ЗаполнитьМатериалПодЗаказ(ТекущийОбъект);
		
		// { Васильев Александр Леонидович [30.06.2015]
		// Исключение. Все остальные услуги добавляются в функции ЗаполнитьУслуги()
		// Если кто придумает клёвый способ перенести туда, сообщите, поставлю пива. :)
		Если ТекущийОбъект.ЕстьМатериалПодЗаказ
			И НЕ ТекущийОбъект.Изделие.Серийное Тогда
			ДобавитьСтроку(ТекущийОбъект, Справочники.Номенклатура.ДоставкаМатериала, 1, 0);
		КонецЕсли;
		// } Васильев Александр Леонидович [30.06.2015]
		
		ЗаполнитьСтоимость(ТекущийОбъект);
		УвеличитьСтоимостьЗаПредоставленныйМатериал(ТекущийОбъект);
		ЗаменитьЦенуМатериалаПодЗаказ(ТекущийОбъект);
		ПрименитьКоэффициентыОфиса(ТекущийОбъект);
		
		ЗаполнитьТаблицуСкладГотовойПродукции(ТекущийОбъект);
		
		ТекущийОбъект.ТребуетсяПриходМатериаловЗаказчика = ТекущийОбъект.СписокМатериаловЗаказчика.Количество() > 0;
		ТекущийОбъект.ДнейНаИзготовлениеПоНоменклатуре = Документы.Спецификация.ПолучитьКоличествоДнейНаИзготовление(ТекущийОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьМатериалЗаказчика(фнОбъект)
	
	Если фнОбъект.СписокМатериаловЗаказчика.Количество() > 0 Тогда
		
		ТаблицаМатериалЗаказчика = фнОбъект.СписокМатериаловЗаказчика.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
		Запрос.УстановитьПараметр("тзМатЗаказчика", ТаблицаМатериалЗаказчика);
		
		СформироватьВТНоменклатура(Запрос, фнОбъект);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Таб.Номенклатура
		|ПОМЕСТИТЬ втСписокНоменклатуры
		|ИЗ
		|	втНоменклатура КАК Таб
		|
		|СГРУППИРОВАТЬ ПО
		|	Таб.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тзМатЗаказчика.Номенклатура КАК Номенклатура,
		|	тзМатЗаказчика.Комментарий
		|ПОМЕСТИТЬ втМатЗаказчика
		|ИЗ
		|	&тзМатЗаказчика КАК тзМатЗаказчика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	матЗаказчика.Номенклатура КАК Номенклатура,
		|	матЗаказчика.Комментарий
		|ИЗ
		|	втМатЗаказчика КАК матЗаказчика
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСписокНоменклатуры КАК табНоменклатура
		|		ПО матЗаказчика.Номенклатура = табНоменклатура.Номенклатура
		|ГДЕ
		|	НЕ табНоменклатура.Номенклатура ЕСТЬ NULL ";
		
		фнОбъект.СписокМатериаловЗаказчика.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСписокНоменклатурыЗаказчика(ТекущийОбъект);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьМатериалПодЗаказ", ТекущийОбъект.ЕстьМатериалПодЗаказ);
	ОбновитьЭлементыФормы(ЭтаФорма, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СтатусСпецификации = ПолучитьСтатусСпецификации(Объект.Ссылка);
	ПересчитатьСуммы(); // СуммаДокумента обновляется только после записи объекта
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// { Васильев Александр Леонидович [12.12.2014]
	// Сделать.
	// Растащить по разным обработкам выбора.
	// У каждого элемента есть, нехуй в одном месте держать их.
	// } Васильев Александр Леонидович [12.12.2014]
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.Договор") Тогда
		
		Договор = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Двери") Тогда
		
		СтрокиДверей = Объект.СписокДверей.НайтиСтроки(Новый Структура("Двери", ВыбранноеЗначение));
		Если СтрокиДверей.Количество() = 0 Тогда
			НоваяСтрока = Объект.СписокДверей.Добавить();
			НоваяСтрока.Двери = ОпределитьДверь(ВыбранноеЗначение, Объект.Ссылка);
		КонецЕсли;
		
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Монтажник") Тогда
		
		Модифицированность = Истина;
		Объект.Монтажник = ВыбранноеЗначение.Монтажник;
		Объект.ДатаМонтажа = ВыбранноеЗначение.ДатаМонтажа;
		Объект.ДатаОтгрузки = ЛексКлиентСервер.ПолучитьДатуОтгрузки(Объект.ДатаМонтажа);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ОбновитьСтатус(Команда)
	
	СтатусСпецификации = ПолучитьСтатусСпецификации(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	Собрать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныефурнитура()
	
	Данные = Новый Структура();
	Данные.Вставить("СчетчикЛДСП", 0);
	Данные.Вставить("КоличествоНужныхРадиусов", 0);
	Данные.Вставить("Кухня", Ложь);
	
	Если Объект.Изделие.ВидИзделия = Перечисления.ВидыИзделий.Кухня Тогда
		Данные.Кухня = Истина;
	КонецЕсли;
	
	Если НЕ Данные.Кухня Тогда
		
		Для каждого Строка Из Объект.СписокДеталей Цикл
			
			ДанныеДеталиФурнитура = ПолучитьДанныеДетали(Строка.ВидДетали);
			
			ЛДСП = Ложь;
			
			Если НЕ ДанныеДеталиФурнитура.ЭтоФасад Тогда
				
				Для Каждого НомГруппа ИЗ ДанныеДеталиФурнитура.НомГруппы Цикл
					
					Знч = НомГруппа.Значение;
					
					Если Знч.ПолеВыбора = "Текстура" Тогда
						
						Если Знч.Группа.ПринадлежитЭлементу(Справочники.НоменклатурныеГруппы.ЛДСП) 
							ИЛИ Знч.Группа = Справочники.НоменклатурныеГруппы.ЛДСП Тогда
							
							ЛДСП = Истина;
							
						КонецЕсли;
					КонецЕсли;
					
					
				КонецЦикла;
				
			КонецЕсли;
			
			Данные.СчетчикЛДСП = Данные.СчетчикЛДСП + Строка.Количество * ЛДСП;
			
			РадиусовВДетали = Число(Строка.РадиусЛевоВерх >= 150)
			+ Число(Строка.РадиусЛевоНиз >= 150)
			+ Число(Строка.РадиусПравоВерх >= 150)
			+ Число(Строка.РадиусПравоНиз >= 150);
			
			Данные.КоличествоНужныхРадиусов = Данные.КоличествоНужныхРадиусов + Строка.Количество * ЛДСП * РадиусовВДетали;
			
		КонецЦикла;
		
		Данные.Вставить("ПараметрыФурнитуры",ПосчитатьКоличествоКрепежа());
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Процедура Фурнитура(Команда)
	
	Данные = ПолучитьДанныеФурнитура();
	
	Если НЕ Данные.Кухня Тогда
		
		КоличествоЯщиков = Объект.СписокЯщики.Итог("КоличествоЯщиков");
		
		ПараметрыФурнитуры = Данные.ПараметрыФурнитуры;
		ПараметрыФурнитуры.Вставить("КоличествоДеталейЛДСП", Данные.СчетчикЛДСП);
		ПараметрыФурнитуры.Вставить("КоличествоЯщиков", КоличествоЯщиков);
		ПараметрыФурнитуры.Вставить("Подразделение", Объект.Подразделение);
		ПараметрыФурнитуры.Вставить("КоличествоНужныхРадиусов", Данные.КоличествоНужныхРадиусов);
		
		ОткрытьФорму("Документ.Спецификация.Форма.ФормаФурнитура", ПараметрыФурнитуры, Элементы.Комплектация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПосчитатьКоличествоКрепежа()
	
	Шуруп16х35черный = 0;
	Шуруп40х35черный = 0;
	Дюбель6х40черный = 0;
	Шуруп30х35черный = 0;
	Шуруп16х35хром = 0;
	Шуруп40х35золото = 0;
	Шуруп16х35золото = 0;
	Шуруп40х35хром = 0;
	ФлянецХромированный = 0;
	Евровинт50 = 0;
	
	ТЗ = Объект.Комплектация.Выгрузить();
	ТЗ.Свернуть("Номенклатура", "Количество");
	
	Для каждого Строка Из ТЗ Цикл
		
		Номенклатура = Справочники.Номенклатура;
		Шуруп16х35черный = ?(Строка.Номенклатура = Номенклатура.Шуруп16х35черный, Строка.Количество, Шуруп16х35черный);
		Шуруп40х35черный = ?(Строка.Номенклатура = Номенклатура.Шуруп40х35черный, Строка.Количество, Шуруп40х35черный);
		Дюбель6х40черный = ?(Строка.Номенклатура = Номенклатура.Дюбель6х40черный, Строка.Количество, Дюбель6х40черный);
		Шуруп30х35черный = ?(Строка.Номенклатура = Номенклатура.Шуруп30х35черный, Строка.Количество, Шуруп30х35черный);
		Шуруп16х35хром = ?(Строка.Номенклатура = Номенклатура.Шуруп16х35хром, Строка.Количество, Шуруп16х35хром);
		Шуруп40х35золото = ?(Строка.Номенклатура = Номенклатура.Шуруп40х35золото, Строка.Количество, Шуруп40х35золото);
		Шуруп16х35золото = ?(Строка.Номенклатура = Номенклатура.Шуруп16х35золото, Строка.Количество, Шуруп16х35золото);
		Шуруп40х35хром = ?(Строка.Номенклатура = Номенклатура.Шуруп40х35хром, Строка.Количество, Шуруп40х35хром);
		Евровинт50 = ?(Строка.Номенклатура = Номенклатура.Евровинт50, Строка.Количество, Евровинт50);
		ФлянецХромированный = ?(Строка.Номенклатура = Номенклатура.ФлянецХромированный, Строка.Количество, ФлянецХромированный);
		
	КонецЦикла;
	
	ПараметрыФурнитуры = Новый Структура;
	
	ПараметрыФурнитуры.Вставить("Шуруп16х35черный", Шуруп16х35черный);
	ПараметрыФурнитуры.Вставить("Шуруп40х35черный", Шуруп40х35черный);
	ПараметрыФурнитуры.Вставить("Дюбель6х40черный", Дюбель6х40черный);
	ПараметрыФурнитуры.Вставить("Шуруп30х35черный", Шуруп30х35черный);
	ПараметрыФурнитуры.Вставить("Шуруп16х35хром", Шуруп16х35хром);
	ПараметрыФурнитуры.Вставить("Шуруп40х35золото", Шуруп40х35золото);
	ПараметрыФурнитуры.Вставить("Шуруп16х35золото", Шуруп16х35золото);
	ПараметрыФурнитуры.Вставить("Шуруп40х35хром", Шуруп40х35хром);
	ПараметрыФурнитуры.Вставить("Евровинт50", Евровинт50);
	ПараметрыФурнитуры.Вставить("ФлянецХромированный", ФлянецХромированный);
	
	Возврат ПараметрыФурнитуры;
	
КонецФункции // ПосчитатьКоличествоКрпежа()

&НаКлиенте
Процедура СотовыеЭлементы(Команда)
	
	АдресТаблицы = ПолучитьАдресТаблицы();
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресТаблицы", АдресТаблицы);
	ПараметрыПодбора.Вставить("Подразделение", Объект.Подразделение);
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаСотовыеЭлементы", ПараметрыПодбора, Элементы.Комплектация);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКаталогу(Команда = Неопределено)
	
	ПоказатьОповещениеПользователя("Табличные части изменены");
	
	//Очистка Табличных частей от данных полученных ранее
	ПерезаполнитьТаблицу(Объект.СписокДеталей);
	ПерезаполнитьТаблицу(Объект.СписокЯщики);
	ПерезаполнитьТаблицу(Объект.Комплектация);
	
	Объект.СписокНоменклатуры.Очистить();
	ОбработкаИзделийПоКаталогу();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтатусСпецификации(фнСпецификацияСсылка)
	
	Возврат Документы.Спецификация.ПолучитьСтатусСпецификации(фнСпецификацияСсылка);
	
КонецФункции

&НаКлиенте
Процедура ПодборКомплектации(Команда)
	
	Собрать();
	
КонецПроцедуры

#КонецОбласти

#Область События_реквизитов_шапки

&НаКлиенте
Процедура МонтажникОчистка(Элемент, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	Объект.ДатаОтгрузки = Неопределено;
	Объект.ДатаМонтажа = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетУслугПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура;
	ЕстьМонтаж = Объект.ПакетУслуг = ПредопределенноеЗначение("Перечисление.ПакетыУслуг.ДоставкаДоКлиентаИМонтаж");
	СтруктураПараметров.Вставить("ЕстьМонтаж", ЕстьМонтаж);
	ОбновитьЭлементыФормы(ЭтаФорма, СтруктураПараметров);
	
	Если НЕ ЕстьМонтаж Тогда
		
		Объект.Монтажник = Неопределено;
		Объект.ДатаМонтажа = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	ПересчитатьСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПересчитатьСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекущаяСтрокаКонтрагент = Объект.Контрагент;
	Иначе
		ТекущаяСтрокаКонтрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ЧастноеЛицо");
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущаяСтрокаКонтрагент);
	
	ВыбранныйКонтрагент = ОткрытьФормуМодально("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы);
	
	Если ВыбранныйКонтрагент <> Неопределено Тогда
		
		Объект.Контрагент = ВыбранныйКонтрагент;
		
		ПоказатьТелефон = Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ЧастноеЛицо") И Объект.Изделие = ПредопределенноеЗначение("Справочник.Изделия.Детали");
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПоказатьТелефон", ПоказатьТелефон);
		ОбновитьЭлементыФормы(ЭтаФорма, СтруктураПараметров);
		ПересчитатьСуммы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМонтажаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		ТекстСообщения = "Выберите подразделение!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Подразделение", "Объект");
		
	Иначе
		
		ПараметрыАдреса = Новый Структура;
		ПараметрыАдреса.Вставить("Подразделение", Объект.Подразделение);
		ПараметрыАдреса.Вставить("Километраж", Объект.Километраж);
		
		Если Объект.АдресМонтажа = "Введите адрес" Тогда
			
			СтарыйАдрес = "";
			
		Иначе
			
			СтарыйАдрес = Объект.АдресМонтажа;
			
		КонецЕсли;
		
		ПараметрыАдреса.Вставить("Офис", Объект.Офис);
		ПараметрыАдреса.Вставить("СтарыйАдрес", СтарыйАдрес);
		
		СтруктураАдреса = ОткрытьФормуМодально("ОбщаяФорма.ФормаВводаАдреса", ПараметрыАдреса, ЭтаФорма);
		
		Если ТипЗнч(СтруктураАдреса) = Тип("Структура") Тогда
			
			Объект.АдресМонтажа = СтруктураАдреса.Адрес;
			Объект.Километраж = СтруктураАдреса.Километраж;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНажатие(Элемент, СтандартнаяОбработка)
	
	Если Договор = "Введите договор" Тогда
		
		Записать();
		
		СтандартнаяОбработка = Ложь;
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.Договор.Форма.ФормаДокумента",ПараметрыЗаполнения, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	УведомлениеМатериалПодЗаказ = ПолучитьУведомлениеМатериалПодЗаказ(Объект.Подразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОфисОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИзмененГород = ПроверитьГородОфисаНаСервере(ВыбранноеЗначение, Объект.Офис);
	
	Если ИзмененГород Тогда
		
		Объект.АдресМонтажа = "Введите адрес";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьГородОфисаНаСервере(Офис1, Офис2)
	
	Город1 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Офис1, "Город");
	Город2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Офис2, "Город");
	
	Возврат Город1 <> Город2;
	
КонецФункции

&НаКлиенте
Процедура ИзделиеПриИзменении(Элемент)
	
	СтруктураИзделия = ПолучитьСвойстваИзделия(Объект.Изделие, Объект.Контрагент);
	
	Если СтруктураИзделия.ЗапретРедактирования
		И (Объект.СписокДеталей.Количество() > 0
		ИЛИ Объект.СписокЯщики.Количество() > 0
		ИЛИ Объект.Комплектация.Количество() > 0
		ИЛИ Объект.СписокДверей.Количество() > 0
		ИЛИ Объект.СписокИзделийПоКаталогу.Количество() > 0) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "Табличные части будут очищены." + Символы.ПС + "Продолжить?" + Символы.ПС + "(В случае отказа Изделие будет - Детали)";
		
		Если Вопрос(Текст, Режим, 0) = КодВозвратаДиалога.Нет Тогда
			Объект.Изделие = ПредопределенноеЗначение("Справочник.Изделия.Детали");
		Иначе
			Объект.СписокДеталей.Очистить();
			Объект.СписокЯщики.Очистить();
			Объект.Комплектация.Очистить();
			Объект.СписокДверей.Очистить();
			Объект.СписокИзделийПоКаталогу.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗапретРедактирования", СтруктураИзделия.ЗапретРедактирования);
	СтруктураПараметров.Вставить("Переделка", СтруктураИзделия.Переделка);
	СтруктураПараметров.Вставить("ПоказатьТелефон", СтруктураИзделия.ПоказатьТелефон);
	СтруктураПараметров.Вставить("СерийноеИзделие", СтруктураИзделия.СерийноеИзделие);
	СтруктураПараметров.Вставить("Заблокировать", НЕ ЗначениеЗаполнено(Объект.Изделие));
	
	ОбновитьЭлементыФормы(ЭтаФорма, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура МонтажникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// RonEXI edit: У дилеров всеравно нет прав на РабочиеДниМонтажников, поэтому отключаю выбор монтажника.
	Если Объект.Дилерский Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ Объект.Дилерский) И (НЕ ЗначениеЗаполнено(Объект.Офис)) Тогда
		Сообщить("Выберите офис");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Спецификация",Объект.Ссылка);
	ПараметрыФормы.Вставить("Город",ЛексСервер.ЗначениеРеквизитаОбъекта(Объект.Офис, "Город"));
	
	Если ЗначениеЗаполнено(Объект.Монтажник) Тогда
		ПараметрыФормы.Вставить("Монтажник",Объект.Монтажник);
		ПараметрыФормы.Вставить("ДатаМонтажа",Объект.ДатаМонтажа);
	КонецЕсли;
	
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаВыбораМонтажника", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область События_таблицы_Материалы

&НаКлиенте
Процедура СписокДеталейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИзменитьБезОкругленияДоЛистов(Ложь);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("АдресХранилища")
			И ЭтоАдресВременногоХранилища(ВыбранноеЗначение.АдресХранилища) Тогда
			
			Если ВыбранноеЗначение.Свойство("Модифицированность") И НЕ Модифицированность Тогда
				Модифицированность = ВыбранноеЗначение.Модифицированность;	
			КонецЕсли;
			
			ЗагрузитьТабличнуюЧасть(ВыбранноеЗначение.АдресХранилища, Элемент.Имя);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		ЗагрузитьТабличнуюЧасть(ВыбранноеЗначение, Элемент.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДеталейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Собрать();
	
КонецПроцедуры

#КонецОбласти

#Область События_таблицы_Ящики

&НаКлиенте
Процедура СписокЯщикиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИзменитьБезОкругленияДоЛистов(Ложь);
	
	Если ВыбранноеЗначение.Свойство("АдресХранилища")
		И ЭтоАдресВременногоХранилища(ВыбранноеЗначение.АдресХранилища) Тогда
		
		Если ВыбранноеЗначение.Свойство("Модифицированность") И НЕ Модифицированность Тогда
			Модифицированность = ВыбранноеЗначение.Модифицированность;	
		КонецЕсли;
		
		ЗагрузитьТабличнуюЧасть(ВыбранноеЗначение.АдресХранилища, Элемент.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЯщикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Собрать();
	
КонецПроцедуры

#КонецОбласти

#Область События_таблицы_Двери

&НаКлиенте
Процедура ДобавитьНовуюДверь(Команда)
	
	ЗаписатьПустуюСпецификацию();
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Спецификация", Объект.Ссылка));
	Форма = ПолучитьФорму("Справочник.Двери.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДвериСоСпецификации(Команда)
	
	Форма = ПолучитьФорму("Справочник.Двери.Форма.ФормаВыбора", , ЭтаФорма);
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДверейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СсылкаНаДверь = Элемент.ТекущиеДанные.Двери;
	ТолькоПросмотрФормы = ТолькоПросмотр ИЛИ Элементы.СтраницаДвери.ТолькоПросмотр;
	ПараметрыФормы = Новый Структура("Ключ", СсылкаНаДверь);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотрФормы);
	ОткрытьФорму("Справочник.Двери.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьДверь(Дверь, Спецификация)
	
	Если Дверь.Спецификация <> Спецификация Тогда
		
		ОбъектДвери = Дверь.ПолучитьОбъект();
		НашаДверь = ОбъектДвери.Скопировать();
		НашаДверь.Спецификация = Спецификация;
		НашаДверь.Записать();
		
		Дверь = НашаДверь.Ссылка;
		
	КонецЕсли;
	
	Возврат Дверь;
	
КонецФункции 

#КонецОбласти

#Область События_таблицы_ИзделияПоКаталогу

&НаКлиенте
Процедура ИзделияПоКаталогуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Собрать();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзделияПоКаталогуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИзменитьБезОкругленияДоЛистов(Ложь);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("Модифицированность") И НЕ Модифицированность Тогда
			Модифицированность = ВыбранноеЗначение.Модифицированность;
		КонецЕсли;
		
		ЗагрузитьИзФормыИзделийПоКаталогу(ВыбранноеЗначение);
		
	Иначе
		
		ЗагрузитьТабличнуюЧасть(ВыбранноеЗначение, Элемент.Имя);
		
	КонецЕсли;
	
	ЗаполнитьПоКаталогу();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФормыИзделийПоКаталогу(Данные)
	
	ЗначениеДетали = ПолучитьИзВременногоХранилища(Данные.Детали);
	ЗначениеФасады = ПолучитьИзВременногоХранилища(Данные.Фасады);
	
	Объект["СписокИзделийПоКаталогу"].Загрузить(ЗначениеДетали);
	Объект["ФасадыКаталога"].Загрузить(ЗначениеФасады);
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	Если ВыбранноеЗначение.Таблица = "Комплектация" Тогда
		ЗагрузитьТабличнуюЧасть(ВыбранноеЗначение.АдресТаблицы, ВыбранноеЗначение.Таблица);
	Иначе
		ДобавитьТабЧасть(ВыбранноеЗначение.АдресТаблицы, ВыбранноеЗначение.Таблица);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьТабЧасть(АдресТаблицы, Таблица)
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТаблицы);
	СправочникНоменклатуры = Справочники.Номенклатура;
	СправочникГрупп = Справочники.НоменклатурныеГруппы;
	МассивСтрок = Новый Массив;
	
	Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого Строка Из Объект.Комплектация Цикл
			
			НужнаяНоменклатурнаяГруппа = Ложь;
			Номенклатура = Строка.Номенклатура;
			Группа = Номенклатура.НоменклатурнаяГруппа;
			
			Если ЗначениеЗаполнено(Группа) Тогда
				
				Если Таблица = "СотовыеЭлементы" Тогда
					
					НужнаяНоменклатурнаяГруппа = Группа = СправочникГрупп.СотовыеПолки 
					ИЛИ Группа = СправочникГрупп.СотовыеЭлементы
					ИЛИ Группа = СправочникГрупп.Корзины 
					ИЛИ Группа.ПринадлежитЭлементу(СправочникГрупп.Направляющие);
					
				ИначеЕсли Таблица = "Фурнитура" Тогда
					
					//Можно будет внести уголки, подумаем
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Таблица = "СотовыеЭлементы" Тогда
				
				Предопределенный = Номенклатура = СправочникНоменклатуры.Прищепки
				ИЛИ Номенклатура = СправочникНоменклатуры.Наконечник
				ИЛИ Номенклатура = СправочникНоменклатуры.Клипсы
				ИЛИ Номенклатура = СправочникНоменклатуры.Карманы
				ИЛИ Номенклатура = СправочникНоменклатуры.КронштейнДляСотовойПолки;
				
			ИначеЕсли Таблица = "Фурнитура" Тогда
				
				Предопределенный = Номенклатура = СправочникНоменклатуры.Шуруп40х35золото
				ИЛИ Номенклатура = СправочникНоменклатуры.Шуруп16х35золото
				ИЛИ Номенклатура = СправочникНоменклатуры.Шуруп40х35хром
				ИЛИ Номенклатура = СправочникНоменклатуры.Шуруп16х35хром
				ИЛИ Номенклатура = СправочникНоменклатуры.Евровинт50
				ИЛИ Номенклатура = СправочникНоменклатуры.ФлянецХромированный
				ИЛИ Номенклатура = СправочникНоменклатуры.Шуруп16х35черный
				ИЛИ Номенклатура = СправочникНоменклатуры.Шуруп30х35черный
				ИЛИ Номенклатура = СправочникНоменклатуры.Шуруп30х35черный
				ИЛИ Номенклатура = СправочникНоменклатуры.Дюбель6х40черный;
				
			КонецЕсли;
			
			Если НужнаяНоменклатурнаяГруппа ИЛИ Предопределенный Тогда
				
				МассивСтрок.Добавить(Строка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого Элемент Из МассивСтрок Цикл
			
			Объект.Комплектация.Удалить(Элемент);
			
		КонецЦикла;
		
		Для каждого Строчка Из ТЗ Цикл
			
			НоваяСтрока = Объект.Комплектация.Добавить();
			НоваяСтрока.Номенклатура = Строчка.Номенклатура;
			НоваяСтрока.Количество = Строчка.Количество;
			НоваяСтрока.ЕдиницаИзмерения = Строчка.ЕдиницаИзмерения;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ДобавитьТабЧасть()

#КонецОбласти

#Область События_таблицы_МатериалЗаказчика

&НаКлиенте
Процедура СписокМатериаловЗаказчикаНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		СписокВыбора = Элементы.СписокМатериаловЗаказчикаНоменклатура.СписокВыбора;
		
		НайденныйЭлемент = СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		
		Если НайденныйЭлемент <> Неопределено Тогда
			
			СписокВыбора.Удалить(НайденныйЭлемент);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМатериаловЗаказчикаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМатериаловЗаказчикаПередУдалением(Элемент, Отказ)
	
	Номенклатура = Элементы.СписокМатериаловЗаказчика.ТекущиеДанные.Номенклатура;
	СписокВыбора = Элементы.СписокМатериаловЗаказчикаНоменклатура.СписокВыбора;
	СписокВыбора.Добавить(Номенклатура);
	
КонецПроцедуры

#КонецОбласти

#Область События_таблицы_ПодЗаказ

&НаКлиенте
Процедура СписокМатериаловПодЗаказПоставщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
	МассивОтбора.Добавить(Новый ПараметрВыбора("Отбор.Подразделение", Объект.Подразделение));
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМатериаловПоЗаказЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокМатериаловПодЗаказ.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НоменклатурнаяГруппа", ПолучитьНомГруппыНеЛистовойМатериал());
	Отбор.Вставить("Базовый", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ТекущиеДанные = Элементы.Комплектация.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомГруппыНеЛистовойМатериал()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидМатериала", Перечисления.ВидыМатериалов.Листовой);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатурныеГруппы.Ссылка
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ
	|	НЕ (НоменклатурныеГруппы.ВидМатериала = &ВидМатериала)";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Группы = Новый СписокЗначений;
	
	Для Каждого Стр Из ТЗ Цикл
		Группы.Добавить(Стр.Ссылка);
	КонецЦикла;
	
	Возврат Группы;
	
КонецФункции

&НаКлиенте
Процедура КомплектацияНоменклатураНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБезОкругленияДоЛистов(Команда)
	
	ИзменитьБезОкругленияДоЛистов(НЕ Объект.БезОкругленияДоЛистов);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьБезОкругленияДоЛистов(Значение)
	
	Объект.БезОкругленияДоЛистов = Значение;
	
	Если Объект.БезОкругленияДоЛистов Тогда
		УведомлениеОкруглениеДоЛистов = "Материал не округляется до листов!";
	Иначе
		УведомлениеОкруглениеДоЛистов = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ФиксМассивчик = Новый ФиксированныйМассив(СписокНоменклатурныхГрупп.Массив);
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Базовый", Истина));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЗапретИспользования", Ложь));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.НоменклатурнаяГруппа", ФиксМассивчик));
	ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Элементы.КомплектацияНоменклатура.ПараметрыВыбора = ПараметрыВыбора;
	
КонецПроцедуры


#КонецОбласти
