////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция ПолучитьКодНоменклатуры(Номенклатура)
	Если Лев(Номенклатура.Код,3) = "ЦБ-" Тогда
		Возврат Прав(Номенклатура.Код,СтрДлина(Номенклатура.Код)-3)
	Иначе
		Возврат СокрЛП(Номенклатура.Код);
	КонецЕсли;
КонецФункции

&НаСервере
Функция ВыгрузкаОднойТекстуры(Текстура)
	
	Попытка
		
		Хранилище = Текстура.Изображение.Получить();
		
		Если Хранилище <> Неопределено Тогда
			
			Хранилище = ПоместитьВоВременноеХранилище(Хранилище,ЭтаФорма.УникальныйИдентификатор);
			Текстура = Новый Структура("Номер,Хранилище",Текстура.Код,Хранилище);
			Возврат Текстура;
			
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция СформироватьСтрокуФлэш()
	
	ДобавитьГравировку = "";
	КодНоменклатуры = "";
		
	КаталогВременныхФайлов = ЛексКлиент.ПолучитьКаталогВременныхФайлов();
	Если Элементы.Детали.ТекущиеДанные.Гравировка Тогда
		
		КодНоменклатуры = ПолучитьКодНоменклатуры(Элементы.Детали.ТекущиеДанные.ТекстураГравировки)+".jpg";
		ДобавитьГравировку = КаталогВременныхФайлов+КодНоменклатуры;
		ВыбранныйФайл = Новый Файл(ДобавитьГравировку);
		ТекстураГравировки = Элементы.Детали.ТекущиеДанные.ТекстураГравировки;
		Если НЕ ВыбранныйФайл.Существует() Тогда
			
			Элемент = ВыгрузкаОднойТекстуры(ТекстураГравировки);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(Элемент.Хранилище);	
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				ДвоичныеДанные.Записать(КаталогВременныхФайлов+СокрЛП(Элемент.Номер)+".jpg");
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ПоложениеТекстуры = Элементы.Детали.ТекущиеДанные.ПоложениеТекстуры;
	Если НЕ ЗначениеЗаполнено(ПоложениеТекстуры) Тогда
		ПоложениеТекстуры = "";
	КонецЕсли;
		
	Подписи = Число(Элементы.Детали.ТекущиеДанные.ОтображениеПодписей);
	R1 = Элементы.Детали.ТекущиеДанные.РадиусЛевоВерх;
	R2 = Элементы.Детали.ТекущиеДанные.РадиусПравоВерх;
	R3 = Элементы.Детали.ТекущиеДанные.РадиусПравоНиз;
	R4 = Элементы.Детали.ТекущиеДанные.РадиусЛевоНиз;
	ДанныеДляФайла = Строка(Формат(Элементы.Детали.ТекущиеДанные.ДлинаДетали,"ЧГ=0"))+"#"
	+Строка(Формат(Элементы.Детали.ТекущиеДанные.ШиринаДетали,"ЧГ=0"))
	+"#2500#2500#"+R1+"#"+R2+"#"+R3+"#"+R4+"#" + Подписи + "#"+ ДобавитьГравировку + ПоложениеТекстуры; 

	ДанныеДляФайла = ЛексКлиентСервер.ПеревестиСтрокуВКодыСимволов(ДанныеДляФайла);

	Элементы.Детали.ТекущиеДанные.ДанныеДляФлэшПоГравировке = КодНоменклатуры;
	
	Возврат ДанныеДляФайла;
	
КонецФункции

&НаКлиенте
Функция ОбновитьФлэш()
	
	ЭлементФлэш = Элементы.флэш.Документ.getElementById("back");
	
	Если ЭлементФлэш <> Неопределено И Элементы.Детали.ТекущиеДанные <> Неопределено Тогда
		ЭлементФлэш.tag = СформироватьСтрокуФлэш();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаСервере
Функция ПолучитьАдресХранилища()
	
	Возврат ПоместитьВоВременноеХранилище(Детали.Выгрузить());
	
КонецФункции

&НаКлиенте
Функция ОбновитьДоступность()
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Длина");
	МассивЭлементов.Добавить("Ширина");
	МассивЭлементов.Добавить("РадиусЛевоВерх");
	МассивЭлементов.Добавить("РадиусЛевоНиз");
	МассивЭлементов.Добавить("РадиусПравоВерх");
	МассивЭлементов.Добавить("РадиусПравоНиз");
	МассивЭлементов.Добавить("Гравировка");
	
	ДетальРедактирована = ЗначениеЗаполнено(Элементы.Детали.ТекущиеДанные.СтрокаДляФлэшСтекла);
	
	Для каждого Элемент Из МассивЭлементов Цикл
		Элементы[Элемент].Доступность = НЕ ДетальРедактирована;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ПроверитьОбточку()

	 Если Элементы.Детали.ТекущиеДанные.Обтачивать Тогда
	
		 Элементы.Детали.ТекущиеДанные.Комментарий = ""
	
	Иначе
	
		 Элементы.Детали.ТекущиеДанные.Комментарий = "Без обточки"
	
	КонецЕсли;

КонецФункции // ПроверитьОбточку()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов	
	Детали.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицы));
	
	Если ЗначениеЗаполнено(Детали) Тогда
		
		Если Параметры.Свойство("Идентификатор")  Тогда
			Элементы.Детали.ТекущаяСтрока = Параметры.Идентификатор;
			Детали[Параметры.Идентификатор].ОтображениеПодписей = Истина;
		Иначе
			Детали[0].ОтображениеПодписей = Истина;
		КонецЕсли;
		
	Иначе
		
		НоваяДеталь = Детали.Добавить();
		НоваяДеталь.Обтачивать = Истина;
		НоваяДеталь.ОтображениеПодписей = Истина;
		
	КонецЕсли;	
	
	ХранимыйФайлСтекла = ПредопределенноеЗначение("Справочник.ХранимыеФайлы.Стекла");
	ХранимыйФайлHTML = ПредопределенноеЗначение("Справочник.ХранимыеФайлы.СтеклаHTML");
	
	СписокНоменклатурныхГрупп = Новый СписокЗначений;
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Гравировка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Зеркало);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Стекло);

	МассивыНоменклатурныхГрупп = ЛексСервер.ОтборНоменклатурныхГрупп(СписокНоменклатурныхГрупп);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Попытка
		Элементы.Флэш.Документ.url = "file://" + ЛексКлиент.ПолучитьПутьHTML(ХранимыйФайлСтекла, ХранимыйФайлHTML);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Режим = РежимДиалогаВопрос.ДаНетОтмена;
		Ответ = Вопрос("Данные изменены. Сохранить изменения?",Режим);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Если НЕ ПроверитьПередСохранением() Тогда
				Отказ = Истина;
			Иначе
				
				Модифицированность = Ложь;
				ОповеститьОВыборе(ПолучитьАдресХранилища());
				
			КонецЕсли;
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры


&НаКлиенте
Процедура ДлинаПриИзменении(Элемент)
	
	Если  Элементы.Детали.ТекущиеДанные.ДлинаДетали > 2500 Тогда
		
		Элементы.Детали.ТекущиеДанные.ДлинаДетали = 2500;
		
	КонецЕсли;
	
	ПосчитатьКривойПилИПериметр();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ПроверкаКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	
	Если  Элементы.Детали.ТекущиеДанные.ШиринаДетали > 2500 Тогда
		
		Элементы.Детали.ТекущиеДанные.ШиринаДетали = 2500;
		
		ПосчитатьКривойПилИПериметр();
		
	КонецЕсли;
	
	ПосчитатьКривойПилИПериметр();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусЛевоВерхПриИзменении(Элемент)
	
	ПосчитатьКривойПилИПериметр();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусПравоВерхПриИзменении(Элемент)
	
	ПосчитатьКривойПилИПериметр();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусПравоНизПриИзменении(Элемент)
	
	ПосчитатьКривойПилИПериметр();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусЛевоНизПриИзменении(Элемент)
	
	ПосчитатьКривойПилИПериметр();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеПодписейПриИзменении(Элемент)
	
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ГравировкаПриИзменении(Элемент)
	
	Если Элементы.Детали.ТекущиеДанные.Гравировка Тогда
		
		Элементы.ТекстураГравировки.Доступность = Истина;
		
	Иначе
		
		Элементы.ТекстураГравировки.Доступность = Ложь;
		Элементы.Детали.ТекущиеДанные.ТекстураГравировки = Неопределено;
		Элементы.Детали.ТекущиеДанные.ДанныеДляФлэшПоГравировке = Неопределено;
		ОбновитьФлэш();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстураГравировкиПриИзменении(Элемент)
	
	ОбновитьФлэш();
	
	ПоложениеТекстуры = Элементы.Детали.ТекущиеДанные.ПоложениеТекстуры;
	ТекстураГравировки = Элементы.Детали.ТекущиеДанные.ТекстураГравировки;
	ДанныеДляФлэшПоГравировке = Элементы.Детали.ТекущиеДанные.ДанныеДляФлэшПоГравировке;
	Элементы.Детали.ТекущиеДанные.ДанныеДляФлэшПоГравировке = ДанныеДляФлэшПоГравировке + ПоложениеТекстуры + "*" + ТекстураГравировки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбтачиватьПриИзменении(Элемент)
	
	ПроверитьОбточку();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДобавитьКДокументу(Команда)
	
	Если ПроверитьПередСохранением() Тогда
		
		Модифицированность = Ложь;
		ОповеститьОВыборе(ПолучитьАдресХранилища());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Детали.ТекущиеДанные <> Неопределено Тогда
		
		ПроверкаКоличество(); 
		
	КонецЕсли;
	
	Если Элементы.Детали.ТекущиеДанные.Гравировка Тогда
	
		Элементы.ТекстураГравировки.Доступность = Истина;
	
	Иначе
	
		Элементы.ТекстураГравировки.Доступность = Ложь;
	
	КонецЕсли;
	
	ОбновитьДоступность();
	ПроверитьОбточку();
	ОбновитьФлэш();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

&НаКлиенте
Функция ПроверкаКоличество()
	
	//Количество всегда должно быть > 0
	Если Элементы.Детали.ТекущиеДанные.Количество = 0 Тогда
		
		Элементы.Детали.ТекущиеДанные.Количество = 1;
		
	КонецЕсли;
	
КонецФункции // ПроверкаКоличество()

&НаКлиенте
Функция ПосчитатьКривойПилИПериметр()
	
	ДлинаДетали = Элементы.Детали.ТекущиеДанные.ДлинаДетали;
	ШиринаДетали = Элементы.Детали.ТекущиеДанные.ШиринаДетали;
	R1 = Элементы.Детали.ТекущиеДанные.РадиусЛевоВерх;
	R2 = Элементы.Детали.ТекущиеДанные.РадиусПравоВерх;
	R3 = Элементы.Детали.ТекущиеДанные.РадиусПравоНиз;
	R4 = Элементы.Детали.ТекущиеДанные.РадиусЛевоНиз;
	Элементы.Детали.ТекущиеДанные.Периметр = 2*(ДлинаДетали+ШиринаДетали-R1-R2-R3-R4)+Окр(3.14159*(R1+R2+R3+R4)/2);
	Элементы.Детали.ТекущиеДанные.ДлинаКривогоПила = Окр(3.14159*(R1+R2+R3+R4)/2);
	
КонецФункции // ПосчитатьКривойПилИПериметр()

&НаКлиенте
Функция ПроверитьПередСохранением()
	
	Элементы.Детали.ТекущиеДанные.ПоложениеТекстуры = "*" + Элементы.Флэш.Документ.getElementById("str").tag;
	ПоложениеТекстуры = Элементы.Детали.ТекущиеДанные.ПоложениеТекстуры;
	
	Если ПоложениеТекстуры <> "*" Тогда
			Элементы.Детали.ТекущиеДанные.РазмерГравировки = Число(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоложениеТекстуры, "*")[5])/1000000;
	КонецЕсли;
	
	Результат = Истина;

	Для каждого Строка Из Детали Цикл
		
		Если Строка.ДлинаДетали = 0 Тогда
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Длина детали не может быть равна 0";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.ДлинаДетали";
			Сообщение.Сообщить();
			Вариант = "Оставить";
			Результат = Ложь;
						
		ИначеЕсли Строка.ШиринаДетали = 0 Тогда 
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Ширина детали не может быть равна 0";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.ШиринаДетали";
			Сообщение.Сообщить();
			Вариант = "Оставить";
			Результат = Ложь;
			
		ИначеЕсли ЗначениеЗаполнено(Строка.Номенклатура) = Ложь Тогда
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Не заполнена текстура детали";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.Номенклатура";
			Сообщение.Сообщить();			
			Вариант = "Оставить";
			Результат = Ложь;

		ИначеЕсли Строка.Гравировка и НЕ ЗначениеЗаполнено(Строка.ТекстураГравировки) Тогда 
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Не заполнена текстура гравировки";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.ТекстураГравировки";
			Сообщение.Сообщить();
			Вариант = "Оставить";
			Результат = Ложь;

		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции // Сохранить()

&НаКлиенте
Процедура ФлэшДокументСформирован(Элемент)
	
	ОбновитьФлэш();
	Стекло_И_Зеркало = Новый Массив;
	
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Зеркало Цикл
		
		Стекло_И_Зеркало.Добавить(Элемент);
		
	КонецЦикла;
	
	Для каждого Элемент Из МассивыНоменклатурныхГрупп.Стекло Цикл
		
		Стекло_И_Зеркало.Добавить(Элемент);
		
	КонецЦикла;
	
	МассивыНоменклатурныхГрупп.Вставить("Стекло_И_Зеркало", Стекло_И_Зеркало);
	Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Стекло_И_Зеркало);
	Элементы.ТекстураГравировки.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Гравировка);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДеталь(Команда)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтрокаДляФлэшСтекла) Тогда
		ДлинаДетали = ТекущиеДанные.ДлинаДетали;
		ШиринаДетали = ТекущиеДанные.ШиринаДетали;
		//СтрокаДляРедактирования = ЛексКлиентСервер.ПеревестиСтрокуВКодыСимволов("new☻"+Строка(ДлинаДетали)+"☻"+Строка(ШиринаДетали));
		СтрокаДляРедактирования = "new☻"+Строка(ДлинаДетали)+"☻"+Строка(ШиринаДетали);
	Иначе
		СтрокаДляРедактирования = "old☻"+ТекущиеДанные.СтрокаДляФлэшСтекла;
		//СтрокаДляРедактирования = ЛексКлиентСервер.ПеревестиСтрокуВКодыСимволов("old☻"+ТекущиеДанные.СтрокаДляФлэшСтекла);
	КонецЕсли;
	
	Параметр = Новый Структура;
	Параметр.Вставить("СтрокаДляРедактирования", СтрокаДляРедактирования);
	//Параметр.Вставить("АдресТаблицы", ФормированиеТаблицыДеталей()); 
	
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаРедактированиеДеталей", Параметр, Элементы.Детали);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	СтрокаОтФлэш = ВыбранноеЗначение;
	МассивСимволов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтФлэш, "☻");
	ТекущиеДанные.ДлинаКривогоПила	= МассивСимволов[1];
	ФлэшДляРасчетов = МассивСимволов[8];
	ТекущиеДанные.СтрокаДляФлэшСтекла = ФлэшДляРасчетов;
	
	ОбновитьДоступность();
	ОбновитьФлэш();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуДляФлэш(Команда)
	
	Элементы.Детали.ТекущиеДанные.СтрокаДляФлэшСтекла = Неопределено;
	ОбновитьДоступность();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ <Наименование>



