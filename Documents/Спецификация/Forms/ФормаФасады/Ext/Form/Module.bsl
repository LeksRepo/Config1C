////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ПолучитьАдресХранилища()
	
	Возврат ПоместитьВоВременноеХранилище(Детали.Выгрузить());
	
КонецФункции

&НаКлиенте
Функция УточнитьРазмеры()
	
	ВидПрофиля = Элементы.Детали.ТекущиеДанные.ВидПрофиля;
	Рама = Элементы.Детали.ТекущиеДанные.ПрофильКромка;
	Наполнение = Элементы.Детали.ТекущиеДанные.Наполнение;
	Элементы.Детали.ТекущиеДанные.ШиринаДеталиМинусПаз = УточнитьРазмерыНаСервере(ВидПрофиля, Рама, Наполнение);
	ШиринаДеталиМинусПаз = Элементы.Детали.ТекущиеДанные.ШиринаДеталиМинусПаз;
	ДлинаДетали = Элементы.Детали.ТекущиеДанные.ДлинаДетали;
	ШиринаДетали = Элементы.Детали.ТекущиеДанные.ШиринаДетали;
	Элементы.Детали.ТекущиеДанные.ДлинаНаполнения = ДлинаДетали - 2 * Строка(?(ШиринаДеталиМинусПаз=Неопределено,0,ШиринаДеталиМинусПаз));
	Элементы.Детали.ТекущиеДанные.ШиринаНаполнения = ШиринаДетали - 2 * Строка(?(ШиринаДеталиМинусПаз=Неопределено,0,ШиринаДеталиМинусПаз));
	
КонецФункции // УточнитьРазмеры()

&НаСервере
Функция УточнитьРазмерыНаСервере(ВидПрофиля, Рама, Наполнение)
	
	Если ВидПрофиля = "АГТ" Или ВидПрофиля = "Фасадный алюминий" Тогда
		
		СтрокаПаз = Рама.ШиринаДетали - Рама.ШиринаПаза;
		
	ИначеЕсли ВидПрофиля = "МДФ" ИЛИ ВидПрофиля = "ЛДСП" Тогда
		
		Если ЗначениеЗаполнено(Наполнение) Тогда
			
			СтрокаПаз = Наполнение.ГлубинаДетали;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ШиринаДеталиМинусПаз = ?(СтрокаПаз=Неопределено,0,СтрокаПаз);
	
	Возврат ШиринаДеталиМинусПаз;
	
КонецФункции // УточнитьРазмеры()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Функция ОпределитьДоступность()
	
	МассивОбычногоФасада = Новый Массив;
	МассивОбычногоФасада.Добавить("ВидПрофиля");
	МассивОбычногоФасада.Добавить("ПрофильКромка");
	МассивОбычногоФасада.Добавить("КоличествоПетель");
	МассивОбычногоФасада.Добавить("РасположениеПетель");
	
	МассивСтеклянногоФасада= Новый Массив;
	МассивСтеклянногоФасада.Добавить("ПетлиДляСтеклянногоФасада");
	МассивСтеклянногоФасада.Добавить("ДиаметрОтверстийПодПетли");
	МассивСтеклянногоФасада.Добавить("КоличествоОтверстийПодПетли");
	МассивСтеклянногоФасада.Добавить("Радиус");
	МассивСтеклянногоФасада.Добавить("Ручка");
	МассивСтеклянногоФасада.Добавить("ПоложениеРучки");
	МассивСтеклянногоФасада.Добавить("ОтверстийПодРучку");
	
	Фасад = Элементы.Детали.ТекущиеДанные.ВидФасада;
	
	Если Фасад = ПредопределенноеЗначение("Перечисление.ВидыФасадов.Обычный") Тогда
		
		ОбычныйФасад = Истина;
		СтеклянныйФасад = Ложь;
		
	ИначеЕсли  Фасад = ПредопределенноеЗначение("Перечисление.ВидыФасадов.Стеклянный") Тогда
		
		ОбычныйФасад = Ложь;
		СтеклянныйФасад = Истина;
		Элементы.Наполнение.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Стекло);
		Элементы.Ручка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Ручка);
		Элементы.ПетлиДляСтеклянногоФасада.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.Петли);
		Элементы.Наполнение.КнопкаВыбора = Ложь;
		Элементы.Наполнение.КнопкаСпискаВыбора = Истина;
		
	КонецЕсли;
	
	Для каждого Элемент Из МассивОбычногоФасада Цикл
		
		Элементы[Элемент].Доступность = ОбычныйФасад;
		
		Если НЕ ОбычныйФасад Тогда
			
			Элементы.Детали.ТекущиеДанные[Элемент] = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Элемент Из МассивСтеклянногоФасада Цикл
		
		Если НЕ СтеклянныйФасад Тогда
			
			Элементы.Детали.ТекущиеДанные[Элемент] = Неопределено;
			
		КонецЕсли;
		
		Элементы[Элемент].Доступность = СтеклянныйФасад;
		
	КонецЦикла;
	
КонецФункции // ОпределитьДоступность()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	Детали.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицы));
	
	Если ЗначениеЗаполнено(Детали) Тогда
		Если Параметры.Свойство("Идентификатор")  Тогда
			Элементы.Детали.ТекущаяСтрока = Параметры.Идентификатор;
		КонецЕсли;
	Иначе
		
		Стр = Детали.Добавить();
		
	КонецЕсли;
	
	СписокНоменклатурныхГрупп = Новый СписокЗначений;
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП16);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.АГТПрофиль);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.АГТПанель);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП10);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Зеркало);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Стекло);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КромкаМДФ);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ФасадныйАлюминий);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.МДФ);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Петли);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Ручка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_19);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_35);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Стекло);

	МассивыНоменклатурныхГрупп = ЛексСервер.ОтборНоменклатурныхГрупп(СписокНоменклатурныхГрупп);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Режим = РежимДиалогаВопрос.ДаНетОтмена;
		Ответ = Вопрос("Данные изменены. Сохранить изменения?",Режим);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Если НЕ ПроверитьПередСохранением() Тогда
				Отказ = Истина;
			Иначе
				
				Модифицированность = Ложь;
				ОповеститьОВыборе(ПолучитьАдресХранилища());
				
			КонецЕсли;
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли; 	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДобавитьКДокументу(Команда)
	
	Если ПроверитьПередСохранением() Тогда
		
		Модифицированность = Ложь;
		ОповеститьОВыборе(ПолучитьАдресХранилища());
		
	КонецЕсли;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ
//Проверки

&НаКлиенте
Функция ПроверитьПередСохранением()
	
	Результат = Истина;
	
	Для каждого Строка Из Детали Цикл
		
		Если Строка.ДлинаДетали = 0 Тогда
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Не укаана длина детали";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.ДлинаДетали";
			Сообщение.Сообщить();
			Результат = Ложь;
			
		ИначеЕсли Строка.ШиринаДетали = 0 Тогда
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Не укаана ширина детали";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.ШиринаДетали";
			Сообщение.Сообщить();
			Результат = Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Строка.Наполнение) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Не заполнено значение";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.Наполнение";
			Сообщение.Сообщить();
			Результат = Ложь;
			
		ИначеЕсли Строка.ВидФасада = "Обычный" И НЕ ЗначениеЗаполнено(Строка.ВидПрофиля) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Не заполнено значение";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.ВидПрофиля";
			Сообщение.Сообщить();
			Результат = Ложь;
			
		ИначеЕсли Строка.ВидФасада = "Обычный" И НЕ ЗначениеЗаполнено(Строка.ПрофильКромка) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Не заполнено значение";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.ПрофильКромка";
			Сообщение.Сообщить();
			Результат = Ложь;
			
		ИначеЕсли Строка.ВидФасада = "Стеклянный" И НЕ ЗначениеЗаполнено(Строка.Радиус) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Не заполнено значение";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.Радиус";
			Сообщение.Сообщить();
			Результат = Ложь;
			
		ИначеЕсли Строка.Радиус = "300" И НЕ ЗначениеЗаполнено(Строка.СторонаРадиуса) ИЛИ Строка.Радиус = "400" И НЕ ЗначениеЗаполнено(Строка.СторонаРадиуса) Тогда
			
			Элементы.Детали.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Сообщение=Новый СообщениеПользователю();
			Сообщение.Текст="Не заполнено значение";
			Сообщение.Поле="Элементы.Детали.ТекущиеДанные.СторонаРадиуса";
			Сообщение.Сообщить();
			Результат = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверкаКоличество()
	
	//Количество всегда должно быть > 0
	Если Элементы.Детали.ТекущиеДанные.Количество = 0 Тогда
		
		Элементы.Детали.ТекущиеДанные.Количество = 1;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элементы.Детали.ТекущиеДанные.ВидФасада) Тогда 
		
		Элементы.Детали.ТекущиеДанные.ВидФасада = ПредопределенноеЗначение("Перечисление.ВидыФасадов.Обычный");
		
	КонецЕсли;
	
КонецФункции // ПроверкаКоличество()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ 

&НаКлиенте
Процедура ДеталиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Детали.ТекущиеДанные <> Неопределено Тогда
		
		ПроверкаКоличество();
		ОпределитьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидФасадаПриИзменении(Элемент)
	
	ОпределитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ПроверкаКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура РадиусПриИзменении(Элемент)
	
	Если Элементы.Детали.ТекущиеДанные.Радиус = "Без радиуса" Тогда
		
		Элементы.СторонаРадиуса.Доступность = Ложь;
		Элементы.Детали.ТекущиеДанные.СторонаРадиуса = Неопределено;
		
	ИначеЕсли Элементы.Детали.ТекущиеДанные.Радиус = "300" Тогда
		
		Элементы.СторонаРадиуса.Доступность = Истина;
		Элементы.Детали.ТекущиеДанные.ШиринаДетали = 436;
		
	ИначеЕсли Элементы.Детали.ТекущиеДанные.Радиус = "400" Тогда
		
		Элементы.СторонаРадиуса.Доступность = Истина;
		Элементы.Детали.ТекущиеДанные.ШиринаДетали = 551;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильКромкаПриИзменении(Элемент)
	
	УточнитьРазмеры();
	
КонецПроцедуры

&НаКлиенте
Процедура ДлинаПриИзменении(Элемент)
	
	ШиринаДеталиМинусПаз = Элементы.Детали.ТекущиеДанные.ШиринаДеталиМинусПаз;
	ДлинаДетали = Элементы.Детали.ТекущиеДанные.ДлинаДетали;
	Элементы.Детали.ТекущиеДанные.ДлинаНаполнения = ДлинаДетали - 2 * Строка(?(ШиринаДеталиМинусПаз=Неопределено,0,ШиринаДеталиМинусПаз));
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	
	ШиринаДеталиМинусПаз = Элементы.Детали.ТекущиеДанные.ШиринаДеталиМинусПаз;
	ШиринаДетали = Элементы.Детали.ТекущиеДанные.ШиринаДетали;
	Элементы.Детали.ТекущиеДанные.ШиринаНаполнения = ШиринаДетали - 2 * Строка(?(ШиринаДеталиМинусПаз=Неопределено,0,ШиринаДеталиМинусПаз));
	
КонецПроцедуры

&НаКлиенте
Процедура НаполнениеПриИзменении(Элемент)
	
	УточнитьРазмеры();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПрофиляПриИзменении(Элемент)
	
	Элементы.Детали.ТекущиеДанные.Наполнение = Неопределено;
	ВидПрофиля = Элементы.Детали.ТекущиеДанные.ВидПрофиля;
	Если ВидПрофиля = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.АГТПрофиль") Тогда
		
		Элементы.ПрофильКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.АГТПрофиль);
		Элементы.Наполнение.КнопкаВыбора = Истина;
		Элементы.Наполнение.КнопкаСпискаВыбора = Ложь;
		
	ИначеЕсли ВидПрофиля = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ФасадныйАлюминий") Тогда
		
		Элементы.ПрофильКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ФасадныйАлюминий);
		Элементы.Наполнение.КнопкаВыбора = Истина;
		Элементы.Наполнение.КнопкаСпискаВыбора = Ложь;
		
	ИначеЕсли ВидПрофиля = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.МДФ") Тогда
		
		Элементы.ПрофильКромка.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.КромкаМДФ);
		Элементы.Наполнение.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.МДФ);
		Элементы.Наполнение.КнопкаВыбора = Ложь;
		Элементы.Наполнение.КнопкаСпискаВыбора = Истина;
		
	ИначеЕсли ВидПрофиля = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ЛДСП16") Тогда
		
		Элементы.Наполнение.КнопкаВыбора = Ложь;
		Элементы.Наполнение.КнопкаСпискаВыбора = Истина;
		МассивФасадныхКромокЛДСП = Новый Массив;
		
		Для каждого ЭлементМассива Из МассивыНоменклатурныхГрупп.КромкаМДФ Цикл
			МассивФасадныхКромокЛДСП.Добавить(ЭлементМассива);
		КонецЦикла;	
		
		Для каждого ЭлементМассива Из МассивыНоменклатурныхГрупп.Кромка2_19 Цикл
			МассивФасадныхКромокЛДСП.Добавить(ЭлементМассива);
		КонецЦикла;	
		
		Для каждого ЭлементМассива Из МассивыНоменклатурныхГрупп.Кромка2_35 Цикл
			МассивФасадныхКромокЛДСП.Добавить(ЭлементМассива);
		КонецЦикла;	
		
		Элементы.ПрофильКромка.СписокВыбора.ЗагрузитьЗначения(МассивФасадныхКромокЛДСП);
		Элементы.Наполнение.СписокВыбора.ЗагрузитьЗначения(МассивыНоменклатурныхГрупп.ЛДСП16);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаполнениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//ЗначениеОтбора  = Новый Структура("Код", "0000375");
	//ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора"); // , ПараметрыВыбора
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
