
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Движения.Управленческий.Записать();
	
	Для каждого Строка Из СписокНоменклатуры Цикл
	
		Проводка 							= Движения.Управленческий.Добавить();
		Проводка.Подразделение 	= Подразделение;
		Проводка.Период 				= Дата;
		Проводка.СчетКт 				= ПланыСчетов.Управленческий.ВзаиморасчетыСПодразделениями;
		Проводка.КоличествоКт 		= Строка.Количество;
		Проводка.Сумма 				= Строка.Сумма;
		Проводка.Регистратор 		= Ссылка;
	
	КонецЦикла;
	
	// установить блокировку
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(РеализацияМатериаловСписокНоменклатуры.НомерСтроки) КАК НомерСтроки,
	|	РеализацияМатериаловСписокНоменклатуры.Номенклатура,
	|	РеализацияМатериаловСписокНоменклатуры.ЕдиницаХранения,
	|	СУММА(РеализацияМатериаловСписокНоменклатуры.Количество) КАК Количество,
	|	СУММА(РеализацияМатериаловСписокНоменклатуры.Сумма) КАК Сумма
	|ПОМЕСТИТЬ тчДок
	|ИЗ
	|	Документ.РеализацияМатериалов.СписокНоменклатуры КАК РеализацияМатериаловСписокНоменклатуры
	|ГДЕ
	|	РеализацияМатериаловСписокНоменклатуры.Ссылка = &Ссылка
	|	И (РеализацияМатериаловСписокНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|			ИЛИ РеализацияМатериаловСписокНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Комплект))
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияМатериаловСписокНоменклатуры.Номенклатура,
	|	РеализацияМатериаловСписокНоменклатуры.ЕдиницаХранения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тчДок.НомерСтроки,
	|	тчДок.Номенклатура,
	|	тчДок.ЕдиницаХранения,
	|	тчДок.Количество,
	|	тчДок.Сумма КАК Сумма,
	|	ЕСТЬNULL(УправленческийОстатки.СуммаОстаток, 0) КАК СтоимостьОстаток,
	|	ЕСТЬNULL(УправленческийОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	тчДок КАК тчДок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(
	|				&МоментВремени,
	|				,
	|				,
	|				Субконто1 = &Склад
	|					И Субконто2 В
	|						(ВЫБРАТЬ
	|							т.Номенклатура
	|						ИЗ
	|							тчДок КАК т)) КАК УправленческийОстатки
	|		ПО тчДок.Номенклатура = УправленческийОстатки.Субконто2
	|ИТОГИ ПО
	|	ОБЩИЕ,
	|	Сумма";
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	// списываем материал со склада
	Пока Выборка.Следующий() Цикл
		
		СуммаПоДокументу = Выборка.Сумма;
		
		
		//Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
		//	СуммаПоДокументу = Выборка.Сумма;
		//	Продолжить;
		//КонецЕсли;
		//
		//Если Выборка.Количество > Выборка.КоличествоОстаток Тогда
		//	
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст ="На складе """ + Склад + """ недостаточно свободного товара """ + Выборка.Номенклатура + 
		//	""". Из требуемых " + Выборка.Количество + " есть только " + Выборка.КоличествоОстаток;
		//	Сообщение.Поле = "СписокНоменклатуры[" + (Выборка.НомерСтроки-1) + "].Количество";
		//	Сообщение.УстановитьДанные(ЭтотОбъект);
		//	Сообщение.Сообщить();
		//	
		//	Отказ = Истина;
		//	Продолжить;
		//КонецЕсли;
		//
		//Если Выборка.КоличествоОстаток <> 0 Тогда
		//	Себестоимость = Выборка.Количество / Выборка.КоличествоОстаток * Выборка.СтоимостьОстаток;
		//Иначе
		//	Себестоимость = 0;
		//КонецЕсли;
		//
		//Проводки = Движения.МатериалыНаСкладах.ДобавитьРасход();
		//Проводки.Период = Дата;
		//Проводки.Номенклатура = Выборка.Номенклатура;
		//Проводки.ЕдиницаХранения = Выборка.ЕдиницаХранения;
		//Проводки.Склад = Склад;
		//Проводки.Количество = Выборка.Количество;
		//Проводки.Стоимость = Себестоимость;
		//
		//
		//// увеличим расходы
		//Проводки = Движения.ОборотыПоСтатьям.Добавить();
		//Проводки.Период = Дата;
		//Проводки.Подразделение = Подразделение;
		//Проводки.Статья = Выборка.Номенклатура.СтатьяРасхода;
		//Проводки.Факт = Себестоимость;

	КонецЦикла;
	
	//// приходуем долг на контрагента
	//Проводки = Движения.ВзаиморасчетыСКонтрагентами.ДобавитьПриход();
	//Проводки.Период = Дата;
	//Проводки.Подразделение = Подразделение;
	//Проводки.Контрагент = Контрагент;
	//Проводки.Сумма = СуммаДокумента;
	//
	//// увеличим обороты по статьям
	//Проводки = Движения.ОборотыПоСтатьям.Добавить();
	//Проводки.Период = Дата;
	//Проводки.Подразделение = Подразделение;
	//Проводки.Статья = Справочники.Статьи.Выручка;
	//Проводки.Факт = СуммаДокумента;
	//Проводки.Касса = СуммаДокумента;
	//
	//Проводки = Движения.ОборотыПоСтатьям.Добавить();
	//Проводки.Период = Дата;
	//Проводки.Подразделение = Подразделение;
	//Проводки.Статья = Справочники.Статьи.РеализацияМатериалов;
	//Проводки.Факт = СуммаДокумента;	
	//Проводки.Касса = СуммаДокумента;
	//
	//Если РеализацияВДолг Тогда
	//	// реализовать проверку на кредитный лимит
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ISNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток
	//	|ИЗ
	//	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	//	|			&Период,
	//	|			Подразделение = &Подразделение
	//	|				И Контрагент = &Контрагент) КАК ВзаиморасчетыСКонтрагентамиОстатки";
	//	
	//	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//	Запрос.УстановитьПараметр("Период", МоментВремени());
	//	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//	
	//	Результат = Запрос.Выполнить();
	//	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		Если ВыборкаДетальныеЗаписи.СуммаОстаток + СуммаДокумента > Контрагент.КредитныйЛимит Тогда
	//			Отказ = Истина;
	//			Сообщение = Новый СообщениеПользователю;
	//			Сообщение.Текст = "Превышен кредитный лимит";
	//			Сообщение.Поле = "Контрагент";
	//			Сообщение.УстановитьДанные(ЭтотОбъект);
	//			Сообщение.Сообщить();
	//		КонецЕсли;
	//	КонецЦикла;
	//Иначе
	//	// приходуем деньги на автора
	//	Проводки = Движения.ОперационнаяКасса.ДобавитьПриход();
	//	Проводки.Период = Дата;
	//	Проводки.Подразделение = Подразделение;
	//	Проводки.Сотрудник = Автор.ФизЛицо;
	//	Проводки.Сумма = СуммаДокумента;
	//	
	//	// спишем долг с контрагента
	//	Проводки = Движения.ВзаиморасчетыСКонтрагентами.ДобавитьРасход();
	//	Проводки.Период = Дата;
	//	Проводки.Подразделение = Подразделение;
	//	Проводки.Контрагент = Контрагент;
	//	Проводки.Сумма = СуммаДокумента;
	//КонецЕсли;
	//
	//Если не Отказ Тогда
	//	Движения.ВзаиморасчетыСКонтрагентами.Записывать = Истина;
	//	Движения.МатериалыНаСкладах.Записывать = Истина;
	//	Движения.ОперационнаяКасса.Записывать = Истина;
	//	Движения.ОборотыПоСтатьям.Записывать = Истина;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СуммаДокумента = СписокНоменклатуры.Итог("Сумма");
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// очистим контрагента
	// чтобы пользователь его выбрал
	// и обновились отображения долга
	// и заново заполнились скидки
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	
	
КонецПроцедуры

