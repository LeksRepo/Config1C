
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем Ошибки;
	
	// { Васильев Александр Леонидович [16.10.2013]
	// блокировку бы...
	// } Васильев Александр Леонидович [16.10.2013]
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(РеализацияМатериаловСписокНоменклатуры.НомерСтроки - 1) КАК НомерСтроки,
	|	РеализацияМатериаловСписокНоменклатуры.Номенклатура,
	|	СУММА(РеализацияМатериаловСписокНоменклатуры.Количество) КАК Количество,
	|	СУММА(РеализацияМатериаловСписокНоменклатуры.Сумма) КАК Сумма
	|ПОМЕСТИТЬ тчДок
	|ИЗ
	|	Документ.РеализацияМатериалов.СписокНоменклатуры КАК РеализацияМатериаловСписокНоменклатуры
	|ГДЕ
	|	РеализацияМатериаловСписокНоменклатуры.Ссылка = &Ссылка
	|	И (РеализацияМатериаловСписокНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|			ИЛИ РеализацияМатериаловСписокНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Комплект))
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияМатериаловСписокНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тчДок.НомерСтроки,
	|	тчДок.Номенклатура,
	|	тчДок.Количество,
	|	тчДок.Сумма КАК Сумма,
	|	ЕСТЬNULL(УправленческийОстатки.СуммаОстаток, 0) КАК СтоимостьОстаток,
	|	ЕСТЬNULL(УправленческийОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	тчДок КАК тчДок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(
	|				&МоментВремени,
	|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.МатериалыНаСкладе),
	|				,
	|				Подразделение = &Подразделение
	|					И Субконто1 = &Склад
	|					И Субконто2 В
	|						(ВЫБРАТЬ
	|							т.Номенклатура
	|						ИЗ
	|							тчДок КАК т)) КАК УправленческийОстатки
	|		ПО тчДок.Номенклатура = УправленческийОстатки.Субконто2";
	
	ДетальныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ДетальныеЗаписи.Следующий() Цикл
		
		Если ДетальныеЗаписи.Количество > ДетальныеЗаписи.КоличествоОстаток Тогда
			
			ПолеОшибки = "Объект.СписокНоменклатуры[%1].Количество";
			
			ТекстСообщения = "На складе '%1' недостаточно товара '%2'%3 Из требуемых %4 есть только %5";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Склад,
			ДетальныеЗаписи.Номенклатура,
			Символы.ПС,
			ДетальныеЗаписи.Количество,
			ДетальныеЗаписи.КоличествоОстаток);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстСообщения, , ДетальныеЗаписи.НомерСтроки);
			
			Отказ = Истина;
			
		КонецЕсли;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДетальныеЗаписи.КоличествоОстаток > 0 Тогда
			Себестоимость = ДетальныеЗаписи.Количество / ДетальныеЗаписи.КоличествоОстаток * ДетальныеЗаписи.СтоимостьОстаток;
		Иначе
			Себестоимость = 0;
		КонецЕсли;
		
		Проводки = Движения.Управленческий.Добавить();
		Проводки.Период = Дата;
		Проводки.Подразделение = Подразделение;
		
		Счет = ПланыСчетов.Управленческий.Расходы;
		Проводки.СчетДт =Счет;
		Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Справочники.СтатьиДоходовРасходов.РасходыСебестоимостьРеализованногоМатериала;
		Проводки.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = ДетальныеЗаписи.Номенклатура;
		Проводки.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Склады] = Ссылка.Склад;
		
		Проводки.СчетКт = ПланыСчетов.Управленческий.МатериалыНаСкладе;
		Проводки.КоличествоКт = ДетальныеЗаписи.Количество;
		Проводки.Сумма = Себестоимость;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ДвиженияВзаиморасчеты(Отказ);
	
	Если НЕ Отказ Тогда
		
		// Показатели сотрудника
		Проводка = Движения.Управленческий.Добавить();
		Проводка.Период = Дата;
		Проводка.Подразделение = Подразделение;
		Проводка.СчетДт = ПланыСчетов.Управленческий.ПоказателиСотрудника;
		Проводка.Содержание = "";
		Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ВидыПоказателейСотрудников] = Перечисления.ВидыПоказателейСотрудников.ВыручкаЗаДетали;
		Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФизическиеЛица] = Автор.ФизическоеЛицо;
		Проводка.Сумма = СуммаДокумента;
		
		Проводка = Движения.Управленческий.Добавить();
		Проводка.Период = Дата;
		Проводка.Подразделение = Подразделение;
		Проводка.СчетДт = ПланыСчетов.Управленческий.ПоказателиСотрудника;
		Проводка.Содержание = "";
		Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ВидыПоказателейСотрудников] = Перечисления.ВидыПоказателейСотрудников.Выручка;
		Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФизическиеЛица] = Автор.ФизическоеЛицо;
		Проводка.Сумма = СуммаДокумента;
		
		// Доходы от реализации материалов
		Проводки = Движения.Управленческий.Добавить();
		Проводки.Период = Дата;
		Проводки.Подразделение = Подразделение;
		Проводки.СчетДт = ПланыСчетов.Управленческий.ВзаиморасчетыСПокупателями;
		Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагенты] = Контрагент;
		Проводки.СчетКт = ПланыСчетов.Управленческий.Доходы;
		Проводки.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Справочники.СтатьиДоходовРасходов.ДоходыОтРеализацииМатериаловПроизводству;
		Проводки.Сумма = СуммаДокумента;
		
		Движения.Управленческий.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДвиженияВзаиморасчеты(Отказ)
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПроведениеСПКО = Дата > '2016.02.01'; //Проставить дату обновления
	
	Если ПроведениеСПКО Тогда
		
		СуммаОплаты = 0;
		
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагенты);
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.ДокументВзаиморасчетов);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("РеализацияМатериалов", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УправленческийОстатки.СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Управленческий.Остатки(
		|			&МоментВремени,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВзаиморасчетыСПокупателями),
		|			&ВидыСубконто,
		|			Подразделение = &Подразделение
		|				И Субконто1 = &Контрагент
		|				И Субконто2 = &РеализацияМатериалов) КАК УправленческийОстатки";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			СуммаОплаты = Выборка.СуммаОстаток;
		КонецЕсли;
		
		Если СуммаОплаты <> СуммаДокумента Тогда
			
			Отказ = Истина;
			
			Если СуммаОплаты = 0 Тогда
				
				ТекстСообщения = "Примите предоплату в сумме " + СуммаДокумента;
				
			Иначе
				
				ТекстСообщения = "Сумма предоплаты %1 не совпадает с суммой документа %2";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				СуммаОплаты, СуммаДокумента);
				
			КонецЕсли;
			
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//"Сообщение об ошибке", ,
			//"ПолеВРеквизитеФормыОбъект",
			//"Объект");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Офис" , "Объект");
			
		КонецЕсли;
		
	Иначе
		
		// Приходуем деньги в операцинную кассу (Автор документа)
		Проводки = Движения.Управленческий.Добавить();
		Проводки.Период = Дата;
		Проводки.Подразделение = Подразделение;
		Проводки.СчетДт = ПланыСчетов.Управленческий.ОперационнаяКасса;
		Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФизическиеЛица] = Автор.ФизическоеЛицо;
		Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = Справочники.СтатьиДвиженияДенежныхСредств.ПоступленияОтРеализацииМатериалов;
		Проводки.СчетКт = ПланыСчетов.Управленческий.ВзаиморасчетыСПокупателями;
		Проводки.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагенты] = Контрагент;
		Проводки.Сумма = СуммаДокумента;
		
	КонецЕсли;
	
КонецФункции


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	СуммаДокумента = СписокНоменклатуры.Итог("Сумма");
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры
