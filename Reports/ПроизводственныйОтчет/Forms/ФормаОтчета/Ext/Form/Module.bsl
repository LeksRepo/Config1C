
&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
	Макет = Отчеты.ПроизводственныйОтчет.ПолучитьМакет("Макет");
	СпецификацииШапка = Макет.ПроизводственныйОтчет("СпецификацииШапка");
	СпецификацииСтрока = Макет.ПроизводственныйОтчет("СпецификацииСтрока");
	СтрокаЗаметка = Макет.ПолучитьОбласть("СтрокаЗаметка");
	ТабДок.Вывести(СпецификацииШапка);
		
	//////////////////////////////// ПРОСРОЧЕННОЕ ИЗГОТОВЛЕНИЕ
	ВывестиПросроченноеИзготовление(ТабДок);
	
	//////////////////////////////// ИЗДЕЛИЯ НА СКЛАДЕ ГОТОВОЙ ПРОДУКЦИИ
	ВывестиИзделияНаСкладеГотовойПродукции(ТабДок);
	
	//////////////////////////////// ГРАФИК ОТГРУЗОК
	ВывестиГрафикОтгрузок(ТабДок);
		
	//////////////////////////////// ГРАФИК ДОСТАВОК
	ВывестиГрафикДоставок(ТабДок);
		
	//////////////////////////////// ГРАФИК МОНТАЖЕЙ
	Попытка
		ВывестиГрафикМонтажей(ТабДок);
	Исключение
	КонецПопытки;
		
	ВставлятьРазделительСтраниц = Истина;
	
КонецПроцедуры

&НаСервере
Функция ВывестиГрафикДоставок(ТабДок)
	
	//Получаем схему из макета
	СхемаКомпоновкиДанных = Отчеты.ГрафикДоставок.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Настройки.Отбор.Элементы[0].ПравоеЗначение = Подразделение;
	Настройки.ПараметрыДанных.Элементы[0].Значение = Новый СтандартныйПериод(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	//Очищаем поле табличного документа
	Результат = Новый ТабличныйДокумент;
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТабДок.Вывести(Результат);
	
КонецФункции

&НаСервере
Функция ВывестиГрафикМонтажей(ТабДок)
	
	//Получаем схему из макета
	СхемаКомпоновкиДанных = Отчеты.ГрафикМонтажей.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Настройки.ПараметрыДанных.Элементы[0].Значение = Подразделение;
	Настройки.ПараметрыДанных.Элементы[0].Использование = Истина;
	Настройки.ПараметрыДанных.Элементы[1].Значение = НачалоДня(ТекущаяДата());
	Настройки.ПараметрыДанных.Элементы[1].Использование = Истина;
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	//Очищаем поле табличного документа
	Результат = Новый ТабличныйДокумент;
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТабДок.Вывести(Результат);
	
КонецФункции

&НаСервере
Функция ВывестиГрафикОтгрузок(ТабДок)
	
	//Получаем схему из макета
	СхемаКомпоновкиДанных = Отчеты.ГрафикОтгрузок.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Настройки.Отбор.Элементы[0].ПравоеЗначение = Подразделение;
	Настройки.ПараметрыДанных.Элементы[0].Значение = КонецДня(ТекущаяДата());
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	//Очищаем поле табличного документа
	Результат = Новый ТабличныйДокумент;
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТабДок.Вывести(Результат);
	
КонецФункции

&НаСервере
Функция ВывестиПросроченноеИзготовление(ТабДок)
	
	Макет = Отчеты.ОтчетРуководителя.ПолучитьМакет("Макет");
	ПросроченныеСпецификации = Макет.ПолучитьОбласть("ПросроченныеСпецификации");
	СпецификацииСтрока = Макет.ПолучитьОбласть("СпецификацииСтрока");
	СтрокаЗаметка = Макет.ПолучитьОбласть("СтрокаЗаметка");
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
	//Запрос.Параметры.Вставить("МассивСсылок", МассивСсылок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокСпецификация.Ссылка КАК Спецификация,
	|	ДокСпецификация.Номер КАК НомерСпецификации,
	|	ДокСпецификация.Изделие,
	|	ДокСпецификация.ДатаИзготовления КАК ДатаИзготовления,
	|	ДокСпецификация.Срочный,
	|	ДокСпецификация.СуммаНарядаСпецификации КАК СуммаНаряда,
	|	ДокСпецификация.ДатаОтгрузки,
	|	НарядЗаданиеСписокСпецификаций.Ссылка КАК НарядЗадание,
	|	спрЗаметки.ТекстСодержания КАК Заметка
	|ИЗ
	|	Документ.Спецификация КАК ДокСпецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусСпецификации.СрезПоследних КАК СтатусСпецификацииСрезПоследних
	|		ПО (СтатусСпецификацииСрезПоследних.Спецификация = ДокСпецификация.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Заметки КАК спрЗаметки
	|		ПО ДокСпецификация.Ссылка = спрЗаметки.Предмет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НарядЗадание.СписокСпецификаций КАК НарядЗаданиеСписокСпецификаций
	|		ПО (НарядЗаданиеСписокСпецификаций.Спецификация = ДокСпецификация.Ссылка)
	|ГДЕ
	|	СтатусСпецификацииСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.ПереданВЦех)
	|	И ДокСпецификация.Производство = &Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НарядЗаданиеСписокСпецификаций.Ссылка.Дата УБЫВ,
	|	ДатаИзготовления
	|ИТОГИ ПО
	|	НарядЗадание";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		НомерСтроки = 1;
		
		ВыборкаНаряды = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНаряды.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаНаряды.НарядЗадание) Тогда
				СтрокаНаряда = ВыборкаНаряды.НарядЗадание;
			Иначе
				СтрокаНаряда = "Без наряда (срочные)";
			КонецЕсли;
			
			ПросроченныеСпецификации.Параметры.Наряд = СтрокаНаряда;
			ТабДок.Вывести(ПросроченныеСпецификации);
			
			Выборка = ВыборкаНаряды.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				
				СпецификацииСтрока.Параметры.Заполнить(Выборка);
				СпецификацииСтрока.Параметры.Изделие = Выборка.Изделие;
				СпецификацииСтрока.Параметры.НомерСтроки = НомерСтроки;
				СпецификацииСтрока.Параметры.НомерСпецификации = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Выборка.НомерСпецификации, "0");
				СпецификацииСтрока.Параметры.КоличествоДверей = ПосчитатьКоличествоДверей(Выборка.Спецификация);
				
				Комплектации = ЕстьКомплектации(Выборка.Спецификация);
				СпецификацииСтрока.Параметры.КомплектацияЦех = Комплектации.Цех;
				СпецификацииСтрока.Параметры.КомплектацияСклад = Комплектации.Склад;
				
				ТабДок.Вывести(СпецификацииСтрока);
				
				Если ЗначениеЗаполнено(Выборка.Заметка) Тогда
					СтрокаЗаметка.Параметры.Заметка = Выборка.Заметка;
					СтрокаЗаметка.Параметры.НомерСпецификации = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Выборка.НомерСпецификации, "0");
					ТабДок.Вывести(СтрокаЗаметка);
				КонецЕсли;
				
				НомерСтроки = 1 + НомерСтроки;
				
			КонецЦикла; // выборка по спецификациям
			
		КонецЦикла; // выборка по нарядам
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЕстьКомплектации(СпецификацияСсылка)
	
	Результат = Новый Структура("Цех, Склад", Ложь, Ложь);
	
	Для каждого Строка Из СпецификацияСсылка.СкладГотовойПродукции Цикл
		
		Если Строка.КоличествоЦех > 0 Тогда
			Результат.Цех = Истина;
		КонецЕсли;
		
		Если Строка.КоличествоСклад > 0 Тогда
			Результат.Склад = Истина;
		КонецЕсли;
		
		Если Результат.Склад И Результат.Цех Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВывестиИзделияНаСкладеГотовойПродукции(ТабДок)
	
	Макет = Отчеты.ОтчетРуководителя.ПолучитьМакет("Макет");
	Шапка = Макет.ПолучитьОбласть("ИзделияНаСкладеШапка");
	Строка = Макет.ПолучитьОбласть("ИзделияНаСкладеСтрока");
	СтрокаЗаметка = Макет.ПолучитьОбласть("СтрокаЗаметка");
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Производство", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	докСпецификация.АдресМонтажа КАК Адрес,
	|	докСпецификация.Контрагент КАК Контрагент,
	|	докСпецификация.Изделие,
	|	докСпецификация.Номер,
	|	докСпецификация.СуммаДокумента КАК СуммаДокумента,
	|	докСпецификация.ДатаОтгрузки КАК ДатаОтгрузки,
	|	докСпецификация.ПакетУслуг,
	|	спрЗаметки.ТекстСодержания КАК Заметка
	|ИЗ
	|	Документ.Спецификация КАК докСпецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусСпецификации.СрезПоследних КАК СтатусСпецификацииСрезПоследних
	|		ПО (СтатусСпецификацииСрезПоследних.Спецификация = докСпецификация.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Заметки КАК спрЗаметки
	|		ПО докСпецификация.Ссылка = спрЗаметки.Предмет
	|ГДЕ
	|	СтатусСпецификацииСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.Изготовлен)
	|	И докСпецификация.Производство = &Производство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОтгрузки
	|ИТОГИ
	|	СУММА(СуммаДокумента)
	|ПО
	|	ОБЩИЕ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаИтоги.Следующий();
		Шапка.Параметры.СуммаИтог = ВыборкаИтоги.СуммаДокумента;
		ТабДок.Вывести(Шапка);
		
		НомерСтроки = 1;
		
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			Строка.Параметры.Заполнить(Выборка);
			Строка.Параметры.НомерСтроки = НомерСтроки;
			Строка.Параметры.НомерСпецификации = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Выборка.Номер, "0");
			Строка.Параметры.ЕстьДоставка = Выборка.ПакетУслуг <> Перечисления.ПакетыУслуг.СамовывозОтПроизводителя;
			ТабДок.Вывести(Строка);
			НомерСтроки = 1 + НомерСтроки;
			
			Если ЗначениеЗаполнено(Выборка.Заметка) Тогда
				СтрокаЗаметка.Параметры.Заметка = Выборка.Заметка;
				СтрокаЗаметка.Параметры.НомерСпецификации = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Выборка.Номер, "0");
				ТабДок.Вывести(СтрокаЗаметка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПосчитатьКоличествоДверей(СпецификацияСсылка)
	
	ФормСтрока = "Л = ru_RU; ДП = Истина";
	ПарПредмета="дверь, двери, двери, ж, копейка, копейки, копеек, ж, 0";
	
	КоличествоДверейПрописью = "";
	КоличествоДверей = 0;
	Для каждого СтрокаДверь Из СпецификацияСсылка.СписокДверей Цикл
		КоличествоДверей = КоличествоДверей + СтрокаДверь.Двери.Количество;
	КонецЦикла;
	
	Если КоличествоДверей > 0 Тогда
		КоличествоДверейПрописью = ЧислоПрописью(КоличествоДверей, ФормСтрока, ПарПредмета);
	КонецЕсли;
	
	Возврат КоличествоДверейПрописью ;
	
КонецФункции

&НаСервере
Функция СформироватьНомераСпецификаций(Ссылка)
	
	Результат = "";
	
	Для каждого Строка Из Ссылка.СписокСпецификаций Цикл
		
		Номер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Строка.Спецификация, "Номер");
		Результат = Результат + СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Номер, "0") + ", ";
		
	КонецЦикла;
	
	Если Результат <> "" Тогда
		Результат = Лев(Результат, СтрДлина(Результат) - 2) + "." ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//ТабДокРасшифровка = ТабДокОбработкаРасшифровкиНаСервере(Расшифровка);
	
	
КонецПроцедуры

&НаСервере
Функция ТабДокОбработкаРасшифровкиНаСервере(Расшифровка)
	
	Перем Поле, Группировка;
	
	Данные = ПолучитьИзВременногоХранилища(СтрокаРасшифровки);
	ЭлементыРасшифровки = Данные.Элементы.Получить(Расшифровка);
	Поля = ЭлементыРасшифровки.ПолучитьПоля();
	
	Если Поля.Количество() = 1 Тогда
		Поле = Поля[0].Поле;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТабДокОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры
