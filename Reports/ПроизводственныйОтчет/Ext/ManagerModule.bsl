
Функция ЕстьКомплектации(СпецификацияСсылка) Экспорт
	
	Результат = Новый Структура("Цех, Склад", Ложь, Ложь);
	
	Для каждого Строка Из СпецификацияСсылка.СкладГотовойПродукции Цикл
		
		Если Строка.КоличествоЦех > 0 Тогда
			Результат.Цех = Истина;
		КонецЕсли;
		
		Если Строка.КоличествоСклад > 0 Тогда
			Результат.Склад = Истина;
		КонецЕсли;
		
		Если Результат.Склад И Результат.Цех Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВывестиПроизводственныйОтчет(ТабДок, Подразделение, МассивСсылок, Состав = Неопределено) Экспорт
	
	ТабДок.АвтоМасштаб = Истина;

	Если Состав = Неопределено Тогда
		Состав = Новый Структура;
		Состав.Вставить("ГрафикОтгрузок");
		Состав.Вставить("ГрафикДоставок");
		Состав.Вставить("ГрафикМонтажей");
	КонецЕсли;
	
	Макет = Документы.НарядЗадание.ПолучитьМакет("ПечатьНарядЗадания");
	ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ШапкаОтчета = Макет.ПолучитьОбласть("ШапкаОтчета");
	ШапкаОтчета.Параметры.Дата = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	ШапкаОтчета.Параметры.Подразделение = Подразделение;
	
	ТабДок.Вывести(ШапкаОтчета);
	
	//Не проведенные, но оплаченные
	
	Шапка = Макет.ПолучитьОбласть("ИзделияНеПроведенные");
	Строка = Макет.ПолучитьОбласть("ИзделияНеПроведенныеСтрока");

	НомерСтроки = 1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спец.Ссылка КАК Спецификация,
	|	ЕСТЬNULL(Остатки.СуммаОстатокКт, 0) КАК Сумма
	|ИЗ
	|	Документ.Спецификация КАК Спец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(&ТекущаяДата, Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВзаиморасчетыСПокупателями), , Подразделение = &Подразделение) КАК Остатки
	|		ПО (Остатки.Субконто2 = Спец.Ссылка)
	|ГДЕ
	|	Спец.Подразделение = &Подразделение
	|	И НЕ Спец.Проведен
	|	И ЕСТЬNULL(Остатки.СуммаОстатокКт, 0) > 0
	|	И Спец.СуммаДокумента > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спец.Номер УБЫВ";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Шапка.Параметры.НаименованиеТаблицы = "Не проведенные, но оплаченные спецификации.";
		ТабДок.Вывести(Шапка);
		
		Пока Выборка.Следующий() Цикл
			
			Строка.Параметры.НомерСтроки = НомерСтроки;
			Строка.Параметры.НомерСпецификации = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Выборка.Спецификация.Номер, "0");
			Строка.Параметры.ДатаИзготовления = Выборка.Спецификация.ДатаИзготовления;
			Строка.Параметры.Изделие = Выборка.Спецификация.Изделие;
			Строка.Параметры.Адрес = Выборка.Спецификация.АдресМонтажа;
			Строка.Параметры.СуммаДокумента = Выборка.Спецификация.СуммаДокумента;
			Строка.Параметры.СпецРасшифровка = Выборка.Спецификация;
			
			ТабДок.Вывести(Строка);
			
			НомерСтроки = 1 + НомерСтроки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Спецификации на проверке и размещенные
	Шапка = Макет.ПолучитьОбласть("ИзделияНеПроведенные");
	Строка = Макет.ПолучитьОбласть("ИзделияНеПроведенныеСтрока");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спец.Ссылка КАК Спецификация,
	|	Статусы.Статус КАК Статус
	|ИЗ
	|	Документ.Спецификация КАК Спец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусСпецификации.СрезПоследних(&ТекущаяДата, ) КАК Статусы
	|		ПО Спец.Ссылка = Статусы.Спецификация
	|ГДЕ
	|	Спец.Подразделение = &Подразделение
	|	И (Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.ПроверяетсяМатериал)
	|			ИЛИ Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.Размещен))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статусы.Статус,
	|	Спец.Номер УБЫВ
	|ИТОГИ ПО
	|	Статус";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ВыборкаСтатус = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Статус");
		
		Пока ВыборкаСтатус.Следующий() Цикл
			
			Если ВыборкаСтатус.Статус = Перечисления.СтатусыСпецификации.ПроверяетсяМатериал Тогда
				Шапка.Параметры.НаименованиеТаблицы = "Спецификации на проверке материала.";				
			Иначе
				Шапка.Параметры.НаименованиеТаблицы = "Размещенные спецификации.";
			КонецЕсли;
			
			ТабДок.Вывести(Шапка);
			
			ВыборкаСпец = ВыборкаСтатус.Выбрать();
			
			НомерСтроки = 1;
			
			Пока ВыборкаСпец.Следующий() Цикл 

				Строка.Параметры.НомерСтроки = НомерСтроки;
				Строка.Параметры.НомерСпецификации = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ВыборкаСпец.Спецификация.Номер, "0");
				Строка.Параметры.ДатаИзготовления = ВыборкаСпец.Спецификация.ДатаИзготовления;
				Строка.Параметры.Изделие = ВыборкаСпец.Спецификация.Изделие;
				Строка.Параметры.Адрес = ВыборкаСпец.Спецификация.АдресМонтажа;
				Строка.Параметры.СуммаДокумента = ВыборкаСпец.Спецификация.СуммаДокумента;
				Строка.Параметры.СпецРасшифровка = ВыборкаСпец.Спецификация;
				
				ТабДок.Вывести(Строка);
				
				НомерСтроки = 1 + НомерСтроки;
				
			КонецЦикла;	
						
		КонецЦикла;
	
	КонецЕсли;
	
	//Просроченное изготовление
	Макет = Документы.НарядЗадание.ПолучитьМакет("ПечатьНарядЗадания");
	ПросроченныеСпецификации = Макет.ПолучитьОбласть("ПросроченныеСпецификации");
	СпецификацииШапка = Макет.ПолучитьОбласть("СпецификацииШапка");
	СпецификацииСтрока = Макет.ПолучитьОбласть("СпецификацииСтрока");
	СтрокаЗаметка = Макет.ПолучитьОбласть("СтрокаЗаметка");
	ЗаголовокВЦеху = Макет.ПолучитьОбласть("СпецВЦеху");
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
	Запрос.Параметры.Вставить("МассивСсылок", МассивСсылок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НарядЗаданиеСписокСпецификаций.Спецификация КАК Спецификация
	|ПОМЕСТИТЬ втСписокСпецификаций
	|ИЗ
	|	Документ.НарядЗадание.СписокСпецификаций КАК НарядЗаданиеСписокСпецификаций
	|ГДЕ
	|	НарядЗаданиеСписокСпецификаций.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокСпецификация.Ссылка КАК Спецификация,
	|	ДокСпецификация.Номер КАК НомерСпецификации,
	|	ДокСпецификация.Изделие,
	|	ДокСпецификация.ДатаИзготовления КАК ДатаИзготовления,
	|	ДокСпецификация.Срочный,
	|	ДокСпецификация.СуммаНарядаСпецификации КАК СуммаНаряда,
	|	ДокСпецификация.ДатаОтгрузки,
	|	НарядЗаданиеСписокСпецификаций.Ссылка КАК НарядЗадание,
	|	спрЗаметки.ТекстСодержания КАК Заметка,
	|	ВЫБОР
	|		КОГДА Комплект.Ссылка ЕСТЬ NULL 
	|				ИЛИ НЕ Комплект.Проведен
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПроведеннаяКомплектация
	|ИЗ
	|	Документ.Спецификация КАК ДокСпецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусСпецификации.СрезПоследних КАК СтатусСпецификацииСрезПоследних
	|		ПО (СтатусСпецификацииСрезПоследних.Спецификация = ДокСпецификация.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Заметки КАК спрЗаметки
	|		ПО ДокСпецификация.Ссылка = спрЗаметки.Предмет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НарядЗадание.СписокСпецификаций КАК НарядЗаданиеСписокСпецификаций
	|		ПО (НарядЗаданиеСписокСпецификаций.Спецификация = ДокСпецификация.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Комплектация КАК Комплект
	|		ПО Комплект.Спецификация = ДокСпецификация.Ссылка
	|ГДЕ
	|	СтатусСпецификацииСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.ПереданВЦех)
	|	И ДокСпецификация.Подразделение = &Подразделение
	|	И НЕ ДокСпецификация.Ссылка В
	|				(ВЫБРАТЬ
	|					втСписокСпецификаций.Спецификация
	|				ИЗ
	|					втСписокСпецификаций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НарядЗаданиеСписокСпецификаций.Ссылка.Дата УБЫВ,
	|	ДатаИзготовления
	|ИТОГИ ПО
	|	НарядЗадание";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ТабДок.Вывести(ЗаголовокВЦеху);
		ТабДок.Вывести(СпецификацииШапка);
		
		НомерСтроки = 1;
		
		ВыборкаНаряды = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНаряды.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаНаряды.НарядЗадание) Тогда
				НомерНаряда =  ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаНаряды.НарядЗадание.Номер);
				ДатаИзготовления = Формат(ВыборкаНаряды.НарядЗадание.ДатаИзготовления, "ДЛФ=DD");
				
				СтрокаНаряда = "Наряд № %1 на %2";
				СтрокаНаряда = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаряда, НомерНаряда, ДатаИзготовления);
			Иначе
				СтрокаНаряда = "Без наряда (срочные)";
			КонецЕсли;
			
			ПросроченныеСпецификации.Параметры.Наряд = СтрокаНаряда;
			ТабДок.Вывести(ПросроченныеСпецификации);
			
			Выборка = ВыборкаНаряды.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока Выборка.Следующий() Цикл
				
				СпецификацииСтрока.Параметры.Заполнить(Выборка);
				СпецификацииСтрока.Параметры.Изделие = Выборка.Изделие;
				СпецификацииСтрока.Параметры.НомерСтроки = НомерСтроки;
				СпецификацииСтрока.Параметры.НомерСпецификации = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Выборка.НомерСпецификации, "0");
				СпецификацииСтрока.Параметры.КоличествоДверей = ПосчитатьКоличествоДверей(Выборка.Спецификация);
				СпецификацииСтрока.Параметры.СпецРасшифровка = Выборка.Спецификация;
				
				Комплектации = ЕстьКомплектации(Выборка.Спецификация);
				СпецификацииСтрока.Параметры.КомплектацияЦех = Комплектации.Цех;
				СпецификацииСтрока.Параметры.КомплектацияСклад = Комплектации.Склад;
				
				ТабДок.Вывести(СпецификацииСтрока);
				
				Если ЗначениеЗаполнено(Выборка.Заметка) Тогда
					
					СтрокаЗаметка.Параметры.Заметка = Выборка.Заметка;
					СтрокаЗаметка.Параметры.НомерСпецификации = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Выборка.НомерСпецификации, "0");
					ТабДок.Вывести(СтрокаЗаметка);
					
				КонецЕсли;
				
				НомерСтроки = 1 + НомерСтроки;
				
			КонецЦикла; // выборка по спецификациям
			
		КонецЦикла; // выборка по нарядам
		
	КонецЕсли;
	
	//Изделия на складе готовой прдукции
	Шапка = Макет.ПолучитьОбласть("ИзделияНаСкладеШапка");
	Строка = Макет.ПолучитьОбласть("ИзделияНаСкладеСтрока");
	СтрокаЗаметка = Макет.ПолучитьОбласть("СтрокаЗаметка");
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	докСпецификация.Ссылка КАК Спецификация,
	|	докСпецификация.АдресМонтажа КАК Адрес,
	|	докСпецификация.Контрагент КАК Контрагент,
	|	докСпецификация.Изделие,
	|	докСпецификация.Номер,
	|	докСпецификация.СуммаДокумента КАК СуммаДокумента,
	|	докСпецификация.ДатаОтгрузки КАК ДатаОтгрузки,
	|	докСпецификация.ПакетУслуг,
	|	спрЗаметки.ТекстСодержания КАК Заметка
	|ИЗ
	|	Документ.Спецификация КАК докСпецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусСпецификации.СрезПоследних КАК СтатусСпецификацииСрезПоследних
	|		ПО (СтатусСпецификацииСрезПоследних.Спецификация = докСпецификация.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Заметки КАК спрЗаметки
	|		ПО докСпецификация.Ссылка = спрЗаметки.Предмет
	|ГДЕ
	|	СтатусСпецификацииСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.Изготовлен)
	|	И докСпецификация.Подразделение = &Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОтгрузки
	|ИТОГИ
	|	СУММА(СуммаДокумента)
	|ПО
	|	ОБЩИЕ";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаИтоги.Следующий();
		Шапка.Параметры.СуммаИтог = ВыборкаИтоги.СуммаДокумента;
		ТабДок.Вывести(Шапка);
		
		НомерСтроки = 1;
		
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			Строка.Параметры.Заполнить(Выборка);
			Строка.Параметры.НомерСтроки = НомерСтроки;
			Строка.Параметры.НомерСпецификации = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Выборка.Номер, "0");
			Строка.Параметры.ЕстьДоставка = Выборка.ПакетУслуг <> Перечисления.ПакетыУслуг.СамовывозОтПроизводителя;
			Строка.Параметры.СпецРасшифровка = Выборка.Спецификация;
			
			ТабДок.Вывести(Строка);
			
			НомерСтроки = 1 + НомерСтроки;
			
			Если ЗначениеЗаполнено(Выборка.Заметка) Тогда
				
				СтрокаЗаметка.Параметры.Заметка = Выборка.Заметка;
				СтрокаЗаметка.Параметры.НомерСпецификации = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Выборка.Номер, "0");
				ТабДок.Вывести(СтрокаЗаметка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Состав.Свойство("ГрафикОтгрузок") Тогда
		
		//RonEXI: Тут что-то не работает.
		
		//График отгрузок
		//СхемаКомпоновкиДанных = Отчеты.ГрафикОтгрузок.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		//
		//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		//Настройки.Отбор.Элементы[0].ПравоеЗначение = Подразделение;
		//Настройки.ПараметрыДанных.Элементы[0].Значение = КонецДня(ТекущаяДата());
		//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		//ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
		//Результат = Новый ТабличныйДокумент;
		//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		//ПроцессорВывода.УстановитьДокумент(Результат);
		//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		//
		//ТабДок.Вывести(Результат);
		
	КонецЕсли;
	
	Если Состав.Свойство("ГрафикДоставок") Тогда
		
		//RonEXI: Тут что-то не работает.
		
		//График доставок
		//СхемаКомпоновкиДанных = Отчеты.ГрафикДоставок.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		//Настройки.Отбор.Элементы[0].ПравоеЗначение = Подразделение;
		//Настройки.ПараметрыДанных.Элементы[0].Значение = ТекущаяДата();
		//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		//ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
		//Результат = Новый ТабличныйДокумент;
		//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		//ПроцессорВывода.УстановитьДокумент(Результат);
		//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		//ТабДок.Вывести(Результат);
		
	КонецЕсли;
	
	Если Состав.Свойство("ГрафикМонтажей") Тогда
		
		Попытка
			
			//RonEXI: Тут что-то не работает.
			
			//СхемаКомпоновкиДанных = Отчеты.ГрафикМонтажей.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
			//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
			//Настройки.ПараметрыДанных.Элементы[0].Значение = Подразделение;
			//Настройки.ПараметрыДанных.Элементы[0].Использование = Истина;
			//Настройки.ПараметрыДанных.Элементы[1].Значение = ТекущаяДата();
			//Настройки.ПараметрыДанных.Элементы[1].Использование = Истина;
			//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
			//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
			//ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
			//Результат = Новый ТабличныйДокумент;
			//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			//ПроцессорВывода.УстановитьДокумент(Результат);
			//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			//ТабДок.Вывести(Результат);
			
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
	////Контроль оперативного закупа
	//СхемаКомпоновкиДанных = Отчеты.КонтрольОперативногоЗакупа.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	//Настройки.ПараметрыДанных.Элементы[1].Значение = Подразделение.Регион;
	//Настройки.ПараметрыДанных.Элементы[0].Значение = Новый СтандартныйПериод(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	//ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	//Результат = Новый ТабличныйДокумент;
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(Результат);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	//ТабДок.Вывести(Результат);
	//
	////Контроль расхода материалов
	//СхемаКомпоновкиДанных = Отчеты.КонтрольРасходаМатериалов.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	//Настройки.ПараметрыДанных.Элементы[0].Значение = Подразделение.Регион;
	//Настройки.ПараметрыДанных.Элементы[2].Значение = Новый СтандартныйПериод(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	//ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	//Результат = Новый ТабличныйДокумент;
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(Результат);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	//ТабДок.Вывести(Результат);
	
КонецФункции

Функция ПосчитатьКоличествоДверей(СпецификацияСсылка) Экспорт
	
	ФормСтрока = "Л = ru_RU; ДП = Истина";
	ПарПредмета="дверь, двери, двери, ж, копейка, копейки, копеек, ж, 0";
	
	КоличествоДверейПрописью = "";
	КоличествоДверей = 0;
	Для каждого СтрокаДверь Из СпецификацияСсылка.СписокДверей Цикл
		КоличествоДверей = КоличествоДверей + СтрокаДверь.Двери.Количество;
	КонецЦикла;
	
	Если КоличествоДверей > 0 Тогда
		КоличествоДверейПрописью = ЧислоПрописью(КоличествоДверей, ФормСтрока, ПарПредмета);
	КонецЕсли;
	
	Возврат КоличествоДверейПрописью ;
	
КонецФункции

Функция СформироватьНомераСпецификаций(Ссылка) Экспорт
	
	Результат = "";
	
	Для каждого Строка Из Ссылка.СписокСпецификаций Цикл
		
		Номер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Строка.Спецификация, "Номер");
		Результат = Результат + СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Номер, "0") + ", ";
		
	КонецЦикла;
	
	Если Результат <> "" Тогда
		Результат = Лев(Результат, СтрДлина(Результат) - 2) + "." ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
