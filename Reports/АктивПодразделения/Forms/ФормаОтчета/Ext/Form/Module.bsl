Перем ТабДок,ОблСтрока,ОблСтрока2,ОблСтрока3;
Перем ФинПрибыль;

&НаКлиенте
Процедура СформироватьОтчет(Команда) Экспорт
	
	ТабличныйДокумент = СформироватьТабличныйДокумент();
	
КонецПроцедуры

&НаСервере
Функция СформироватьТабличныйДокумент()
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ТабДок.Защита=Истина;
	
	Макет = Отчеты.АктивПодразделения.ПолучитьМакет("МакетАктивОбороты");
	
	ОблШапка = Макет.ПолучитьОбласть("Шапка");
	ОблСтрока = Макет.ПолучитьОбласть("Строка");
	ОблСтрока2 = Макет.ПолучитьОбласть("Строка2");
	ОблСтрока3 = Макет.ПолучитьОбласть("Строка3");
	ОблПодвал = Макет.ПолучитьОбласть("Подвал");
	ОблПодвалПрибыль = Макет.ПолучитьОбласть("ПодвалПрибыль");
	ОблШапкаЗабалансовые = Макет.ПолучитьОбласть("ШапкаЗабалансовые");
	
	ОблШапка.Параметры.ПредставлениеПериода = Формат(Отчет.НачалоПериода, "ДЛФ=DD")+" - "+Формат(Отчет.КонецПериода, "ДЛФ=DD");
	ОблШапка.Параметры.Подразделение = Отчет.СписокПодразделений;
	ТабДок.Вывести(ОблШапка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Отчет.СписокПодразделений);
	Запрос.УстановитьПараметр("НачалоПериода", Отчет.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Отчет.КонецПериода));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиИОбороты.Счет КАК Счет,
	|	ОстаткиИОбороты.Счет.Код КАК Код,
	|	ОстаткиИОбороты.Счет.Порядок КАК Порядок,
	|	ОстаткиИОбороты.СуммаОборотДт КАК Приход,
	|	ОстаткиИОбороты.СуммаОборотКт КАК Расход,
	|	ОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК ОстатокДебетНач,
	|	ОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК ОстатокКредитНач,
	|	ОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК ОстатокДебетКон,
	|	ОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК ОстатокКредитКон,
	|	ОстаткиИОбороты.Субконто1,
	|	ОстаткиИОбороты.Субконто2,
	|	ОстаткиИОбороты.Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , , , Подразделение В (&Подразделение)) КАК ОстаткиИОбороты
	|ГДЕ
	|	(НЕ ОстаткиИОбороты.Счет.Забалансовый
	|			ИЛИ (ОстаткиИОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.СкладГотовойПродукции)
	|				ИЛИ ОстаткиИОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ИзделияУКлиента)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ
	|	СУММА(Приход),
	|	СУММА(Расход),
	|	СУММА(ОстатокДебетНач),
	|	СУММА(ОстатокКредитНач),
	|	СУММА(ОстатокДебетКон),
	|	СУММА(ОстатокКредитКон)
	|ПО
	|	ОБЩИЕ,
	|	Счет ИЕРАРХИЯ";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Выборка.Следующий();
		
		ОблПодвал.Параметры.Заполнить(Выборка);
		
		ТабДок.НачатьАвтоГруппировкуСтрок();
		
		Выборка2 = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОбходИерархии(Выборка2, Ложь);
		
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		
		ТабДок.Вывести(ОблПодвал);
		
		Выборка2.Сбросить();
			
		ТабДок.Вывести(ОблШапкаЗабалансовые);
		
		ТабДок.НачатьАвтоГруппировкуСтрок();
		
		ОбходИерархии(Выборка2, Истина);
		
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
				
		ОблПодвалПрибыль.Параметры.Прибыль = Формат(ФинПрибыль, "ЧДЦ=");
		ТабДок.Вывести(ОблПодвалПрибыль);
		
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Процедура ОбходИерархии(Выборка, Забалансовый)
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Забалансовый 
			 И (Выборка.Счет = ПланыСчетов.Управленческий.СкладГотовойПродукции ИЛИ Выборка.Счет = ПланыСчетов.Управленческий.ИзделияУКлиента) Тогда
		 	Продолжить;	
		КонецЕсли;
		
		Если Забалансовый 
			 И НЕ (Выборка.Счет = ПланыСчетов.Управленческий.СкладГотовойПродукции ИЛИ Выборка.Счет = ПланыСчетов.Управленческий.ИзделияУКлиента) Тогда
		 	Продолжить;	
		КонецЕсли;
		
		Ур=Выборка.Уровень()-1;
		
		Если Ур = 0 Тогда Область = ОблСтрока; КонецЕсли;		
		Если Ур = 1 Тогда Область = ОблСтрока2; КонецЕсли;
		Если Ур > 1 Тогда Область = ОблСтрока3; КонецЕсли;		 
		
		Область.Параметры.Заполнить(Выборка);
		Область.Параметры.РасПарам = Выборка.Счет;
		
		Если Выборка.ТипЗаписи() <> ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			Если ЗначениеЗаполнено(Выборка.Счет) Тогда
				
				ТабДок.Вывести(Область,Ур);
				
				Если Выборка.Счет = ПредопределенноеЗначение("ПланСчетов.Управленческий.ФинансовыйРезультат") Тогда
					ФинПрибыль = Выборка.Расход - ?(ЗначениеЗаполнено(Выборка.Приход),Выборка.Приход,0);
				КонецЕсли;
	
			КонецЕсли;
			
			Выборка2=Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ОбходИерархии(Выборка2,Забалансовый);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		Отчет.СписокПодразделений.Очистить();
		Для каждого Знч Из ВыбранноеЗначение Цикл
			Отчет.СписокПодразделений.Добавить(Знч.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ТабличныйДокумент = СформироватьТабличныйДокумент();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("НачалоПериода") Тогда
		 Отчет.НачалоПериода = Параметры.НачалоПериода;
		 Отчет.КонецПериода =  Параметры.КонецПериода;
	КонецЕсли;
	 
	Если Параметры.Свойство("Подразделение") Тогда
		 Отчет.СписокПодразделений = Параметры.Подразделение;
	КонецЕсли; 
	
	
	Если НЕ ЗначениеЗаполнено(Отчет.СписокПодразделений) Тогда
		Если НЕ ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
			Отчет.СписокПодразделений.Добавить(ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо.Подразделение);
		КонецЕсли;  
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Отчет.НачалоПериода)
		или НЕ ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
		Отчет.НачалоПериода = НачалоМесяца(ТекущаяДата());
		Отчет.КонецПериода = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНазад(Команда)
	
	УстановитьМесяц(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцВперед(Команда)
	
	УстановитьМесяц(1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМесяц(КоличествоМесяцев)
	
	Отчет.НачалоПериода = ДобавитьМесяц(Отчет.НачалоПериода, КоличествоМесяцев);
	Отчет.КонецПериода = КонецМесяца(Отчет.НачалоПериода);
	ТабличныйДокумент = СформироватьТабличныйДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТабличныйДокумент = СформироватьТабличныйДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыРасшифровки = Новый Структура();
	ПараметрыРасшифровки.Вставить("Счет",Расшифровка);
	ПараметрыРасшифровки.Вставить("Подразделение",Отчет.СписокПодразделений);
	ПараметрыРасшифровки.Вставить("НачалоПериода",Отчет.НачалоПериода);
	ПараметрыРасшифровки.Вставить("КонецПериода",КонецДня(Отчет.КонецПериода));
	
	
	ОткрытьФорму("Отчет.АктивПодразделения.Форма.ФормаРасшифровки", ПараметрыРасшифровки, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(0);
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(10);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДаты()
	Если Отчет.НачалоПериода > Отчет.КонецПериода Тогда
		Отчет.НачалоПериода = НачалоМесяца(Отчет.КонецПериода);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	ПроверитьДаты();
	ТабличныйДокумент = СформироватьТабличныйДокумент();
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	ПроверитьДаты();
	ТабличныйДокумент = СформироватьТабличныйДокумент();
КонецПроцедуры

&НаКлиенте
Процедура СписокПодразделенийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПодбора = Новый Структура("ОригинальныйСписок", Отчет.СписокПодразделений);
	ОткрытьФорму("Справочник.Подразделения.Форма.ФормаВыбораНескольких", ПараметрыПодбора, ЭтаФорма);
	
КонецПроцедуры


