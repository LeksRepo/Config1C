
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

&НаКлиенте
Перем ДанныеДетали;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ОтборНоменклатурныхГрупп(СписокНоменклатурныхГрупп)
	
	СтруктураМассивов = Новый Структура;
	Для каждого НоменклатурнаяГруппа Из СписокНоменклатурныхГрупп Цикл
		ИмяГруппы = Справочники.НоменклатурныеГруппы.ПолучитьИмяПредопределенного(НоменклатурнаяГруппа.Значение);
		СтруктураМассивов.Вставить(ИмяГруппы, Новый Массив);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатурныхГрупп", СписокНоменклатурныхГрупп);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)
	|	И СпрНоменклатура.Базовый
	|ИТОГИ ПО
	|	НоменклатурнаяГруппа";
	
	Результат = Запрос.Выполнить();
	ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИтоги.Следующий() Цикл
		
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ИмяГруппы = Справочники.НоменклатурныеГруппы.ПолучитьИмяПредопределенного(ВыборкаИтоги.НоменклатурнаяГруппа);
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураМассивов[ИмяГруппы].Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтруктураМассивов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Функция ПолучитьНомГруппы(МассивВидов)
	
	МассивГрупп = Новый Массив;
	
	Для Каждого Поле Из МассивВидов Цикл
		Для Каждого Стр Из ДанныеДетали.НомГруппы Цикл
			Если Стр.Значение.ПолеВыбора = Поле Тогда
			 	МассивГрупп.Добавить(Стр.Значение.Группа);
		 	КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивГрупп;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступность()
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
				
		Дос = ДанныеДетали.ДоступностьПолей;
				
		Если НЕ (ДанныеДетали.ЭтоФасад ИЛИ ДанныеДетали.ЭтоСтолешница ИЛИ ДанныеДетали.ЭтоСтекло) Тогда
			Элементы.ДеталиВторойЦвет.Доступность = Истина;
		Иначе
			Элементы.ДеталиВторойЦвет.Доступность = Ложь;
		КонецЕсли;
		
		//Элементы.ЗаполнитьОтверстия.Доступность = Дос.ДоступностьПоляЗаполнитьОтверстия; 

		Элементы.ДеталиКромкаСверху.Доступность = Дос.ДоступностьПоляКромкаВерх;
		Элементы.ДеталиКромкаСнизу.Доступность = Дос.ДоступностьПоляКромкаНиз;
		Элементы.ДеталиКромкаСлева.Доступность = Дос.ДоступностьПоляКромкаЛево;
		Элементы.ДеталиКромкаСправа.Доступность = Дос.ДоступностьПоляКромкаПраво;
		
		Элементы.РадиусЛевоВерх.Доступность = Дос.ДоступностьПоляR1;
		Элементы.РадиусЛевоНиз.Доступность = Дос.ДоступностьПоляR4;
		Элементы.РадиусПравоВерх.Доступность = Дос.ДоступностьПоляR2;
		Элементы.РадиусПравоНиз.Доступность = Дос.ДоступностьПоляR3;
		Элементы.Срез.Доступность = Дос.ДоступностьПоляСрез;
		
		Элементы.ДеталиРасположениеПазовИРучкиНаФасадах.Доступность = Дос.ДоступностьПоляРасположениеПазов;

		Элементы.Петли.Доступность = Дос.ДоступностьПоляПетли;
		
		Для Сч = 1 По 5 Цикл
			Элементы["ДеталиФормулаПетли" + Сч].Доступность = Ложь;
		КонецЦикла;
		
		Если Дос.ДоступностьПоляПетли Тогда
			Для Сч = 1 По ТекущиеДанные.КоличествоПетель Цикл
				Элементы["ДеталиФормулаПетли" + Сч].Доступность = Истина;
			КонецЦикла;
		КонецЕсли;
		
		Элементы.ДеталиКоличествоПетель.Доступность = Дос.ДоступностьПоляКоличествоПетель;
		Элементы.ДеталиДиаметрПазов.Доступность = Дос.ДоступностьПоляДиаметрПазов;
		
		Элементы.ДеталиДемпфер.Доступность = ДанныеДетали.ЭтоФасад;
		Элементы.ДеталиМеханизмФасада.Доступность = ДанныеДетали.ЭтоФасад;
		Элементы.ДеталиКоличествоДемпфер.Доступность = ДанныеДетали.ЭтоФасад;
		Элементы.ДеталиКоличествоМеханизмФасада.Доступность = ДанныеДетали.ЭтоФасад;
		
		Элементы.ДеталиОбтачивать.Доступность = ДанныеДетали.ЭтоСтекло;
		Элементы.ДеталиПостформинг.Доступность = ДанныеДетали.ЭтоСтолешница;

		ПустаяСсылка = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ПустаяСсылка");
		
		Если ЗначениеЗаполнено(ТекущиеДанные.СтрокаДляФлэш) Тогда
			
			ТекущиеДанные.РадиусЛевоВерх = "";
			ТекущиеДанные.РадиусПравоВерх = "";
			ТекущиеДанные.РадиусЛевоНиз = "";
			ТекущиеДанные.РадиусПравоНиз = "";
			ТекущиеДанные.Срез = Ложь;
			
			ТекущиеДанные.КромкаСверху = Ложь;
			ТекущиеДанные.КромкаСнизу = Ложь;
			ТекущиеДанные.КромкаСлева = Ложь;
			ТекущиеДанные.КромкаСправа = Ложь;	
			
			ТекущиеДанные.ВидКромкиСверху = ПустаяСсылка;
			ТекущиеДанные.ВидКромкиСнизу = ПустаяСсылка;
			ТекущиеДанные.ВидКромкиСлева = ПустаяСсылка;
			ТекущиеДанные.ВидКромкиСправа = ПустаяСсылка;
			
			Элементы.Кромки.Доступность = Ложь;
			Элементы.Радиусы.Доступность = Ложь;
			Элементы.ГруппаКромкаРедактор.Доступность = Истина;
			
			Элементы.ДеталиВидКромкиРедактор.Доступность = Дос.ДоступностьПоляРедактироватьДеталь И ТекущиеДанные.КромкаРедактор;
	
		Иначе
			
			ТекущиеДанные.КромкаРедактор = Ложь;
			
			Элементы.Кромки.Доступность = Истина;
			Элементы.Радиусы.Доступность = Истина;
			Элементы.ГруппаКромкаРедактор.Доступность = Ложь;
			
			Элементы.ДеталиВидКромкиРедактор.Доступность = Ложь;
			Элементы.ДеталиВидКромкиСверху.Доступность = Дос.ДоступностьПоляКромкаВерх И ТекущиеДанные.КромкаСверху;		
			Элементы.ДеталиВидКромкиСлева.Доступность = Дос.ДоступностьПоляКромкаЛево И ТекущиеДанные.КромкаСлева;			
			Элементы.ДеталиВидКромкиСнизу.Доступность = Дос.ДоступностьПоляКромкаНиз И ТекущиеДанные.КромкаСнизу;
			Элементы.ДеталиВидКромкиСправа.Доступность = Дос.ДоступностьПоляКромкаПраво И ТекущиеДанные.КромкаСправа;
						
		КонецЕсли; 
				
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДобавитьКДокументу(Команда)
	
	Модифицированность = Ложь;
	ЗаполнитьИдентификатор();
	ОповеститьОВыборе(ПолучитьАдресХранилища());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИдентификатор()
	
		
	Для Каждого Дет ИЗ Детали Цикл
		
		Мас = Новый Массив();
		
		Для Каждого Стр ИЗ Присадки Цикл
			
			Если Дет.ИдентификаторПрисадок = Стр.ИдентификаторПрисадок Тогда
			
				Оп = Стр.Операция;
				Существует = Ложь;
				
				Для Каждого Эл ИЗ Мас Цикл
					
					Если Оп = Эл Тогда
						Существует = Истина;	
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ Существует Тогда
					Мас.Добавить(Оп);	
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Дет.Идентификатор = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Мас, ",")
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресХранилища()
	
	Стр = Новый Структура();
	Стр.Вставить("Детали", ПоместитьВоВременноеХранилище(Детали.Выгрузить())); 
	Стр.Вставить("Присадки", ПоместитьВоВременноеХранилище(Присадки.Выгрузить()));
	
	Возврат Стр;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОтверстия(Команда)
	
	Данные = Элементы.Детали.ТекущиеДанные;
	
	Структура = Новый Структура;
	Структура.Вставить("ТаблицаОтверстий", Данные.СтруктураОтверстий);
	Структура.Вставить("Обновлять", Ложь);
	
	АдресСтруктурыОтверстий = ОткрытьФормуМодально("ОбщаяФорма.ФормаРедактораОтверстий", Структура, ЭтаФорма);
	Если АдресСтруктурыОтверстий <> Неопределено Тогда
		Данные.СтруктураОтверстий = АдресСтруктурыОтверстий;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

&НаКлиенте
Процедура ДеталиПриАктивизацииСтроки(Элемент)
	
	Данные = Элементы.Детали.ТекущиеДанные;
	
	Если Данные <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(Данные.ВидДетали) И ЗначениеЗаполнено(ШапкаОсновныхНастроек.ВидДетали) Тогда			
			Данные.ВидДетали = ШапкаОсновныхНастроек.ВидДетали;		
		ИначеЕсли ЗначениеЗаполнено(Данные.ВидДетали) Тогда
			ШапкаОсновныхНастроек.Вставить("ВидДетали", Данные.ВидДетали);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Данные.ИдентификаторПрисадок) Тогда
			Данные.ИдентификаторПрисадок = УстановитьИдентификаторПрисадок();	
		КонецЕсли;
		
		УстановитьОтборТаблицаПрисадок(Данные.ИдентификаторПрисадок);
		
		ДанныеДетали = ПолучитьДанныеДетали(Данные.ВидДетали);
		
		МасТипов = Новый Массив();
		МасТипов.Добавить("КантК");
		МасТипов.Добавить("Кромка045");
		МасТипов.Добавить("Кромка2");
		МасТипов.Добавить("Окантовка");
		
		МассивГрупп = ПолучитьНомГруппы(МасТипов);
			
		Элементы.ДеталиВидКромкиСверху.СписокВыбора.ЗагрузитьЗначения(МассивГрупп);
		Элементы.ДеталиВидКромкиСнизу.СписокВыбора.ЗагрузитьЗначения(МассивГрупп);
		Элементы.ДеталиВидКромкиСлева.СписокВыбора.ЗагрузитьЗначения(МассивГрупп);
		Элементы.ДеталиВидКромкиСправа.СписокВыбора.ЗагрузитьЗначения(МассивГрупп);
		
		ЗагрузитьНомГруппыНоменклатура();
		
	КонецЕсли;
	
	ОбновитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьОтборТаблицаПрисадок(Инд)
	
	ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторПрисадок", Инд);
	Элементы.Присадки.ОтборСтрок = ОтборСтрок;
	
КонецФункции

&НаКлиенте
Функция УстановитьИдентификаторПрисадок()
	
	МаксИнд = 0;
	
	Для Каждого Строка ИЗ Детали Цикл
		Если Строка.ИдентификаторПрисадок > МаксИнд Тогда
			МаксИнд = Строка.ИдентификаторПрисадок; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат (МаксИнд+1); 
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Детали.Загрузить(ПолучитьИзВременногоХранилища(Параметры.Детали));
	Присадки.Загрузить(ПолучитьИзВременногоХранилища(Параметры.Присадки)); 
	
	Если ЗначениеЗаполнено(Детали) Тогда
		Если Параметры.Свойство("Идентификатор")  Тогда
			Элементы.Детали.ТекущаяСтрока = Параметры.Идентификатор;
		КонецЕсли;
		
		Для каждого Строка Из Детали Цикл
		 	Если ЗначениеЗаполнено(Строка.СтрокаДляФлэш) Тогда
				Строка.Редактированная = Истина;
			КонецЕсли; 
		КонецЦикла;
		
	Иначе
		Стр = Детали.Добавить();
	КонецЕсли;
	
	Для Каждого Строка Из Детали Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.ВидДетали) И ЗначениеЗаполнено(Строка.Материал) Тогда
			Строка.ВидДетали = Справочники.ВидыДеталей.НайтиПоНаименованию(Строка.Материал);
		КонецЕсли;
		
	КонецЦикла;
	
	ШапкаОсновныхНастроек = Новый Структура;
	ШапкаОсновныхНастроек.Вставить("ВидДетали", Справочники.ВидыДеталей.НайтиПоКоду("000000005"));
	
	СписокНоменклатурныхГрупп = Новый СписокЗначений;
	
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ГазовыйЛифт);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кронштейн);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Демпфер);
	
	МассивНоменклатурыПоГруппам = ОтборНоменклатурныхГрупп(СписокНоменклатурныхГрупп);
	
	Механизм = Новый Массив;
	Для каждого Элемент Из МассивНоменклатурыПоГруппам.ГазовыйЛифт Цикл
		Механизм.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из МассивНоменклатурыПоГруппам.Кронштейн Цикл
		Механизм.Добавить(Элемент);
	КонецЦикла;	
	МассивНоменклатурыПоГруппам.Вставить("Механизм", Механизм);
	
	//Элементы.ДеталиМеханизмФасада.СписокВыбора.ЗагрузитьЗначения(МассивНоменклатурыПоГруппам.Механизм);
	//Элементы.ДеталиДемпфер.СписокВыбора.ЗагрузитьЗначения(МассивНоменклатурыПоГруппам.Демпфер);
	
	//Мас = ОтборНоменклатурныхГрупп(ПолучитьНомГруппыПетли());
	//МасЗнч = Новый Массив;
	//
	//Для Каждого Гр Из Мас Цикл
	//	Для Каждого Стр Из Гр.Значение Цикл
	//		МасЗнч.Добавить(Стр);
	//	КонецЦикла;
	//КонецЦикла;
	//
	//Элементы.Петли.СписокВыбора.ЗагрузитьЗначения(МасЗнч);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеталиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	ВидДетали = ТекущиеДанные.ВидДетали;
	ШапкаОсновныхНастроек.Вставить("ВидДетали", ВидДетали);
	ДанныеДетали = ПолучитьДанныеДетали(ВидДетали);
	Фасад = ДанныеДетали.ЭтоФасад;

	ТекущиеДанные.ВысотаДетали	= "";
	ТекущиеДанные.ШиринаДетали = "";
	ТекущиеДанные.Демпфер = Неопределено;
	ТекущиеДанные.МеханизмФасада = Неопределено;
	ТекущиеДанные.КоличествоДемпфер = 0;
	ТекущиеДанные.КоличествоМеханизмФасада = 0;
	ТекущиеДанные.Номенклатура	= Неопределено;
	ТекущиеДанные.РасположениеПазовИРучкиНаФасадах = Неопределено;
	ТекущиеДанные.Петли	= Неопределено;
	ТекущиеДанные.КоличествоПетель = 0;
	ТекущиеДанные.ДиаметрПазов	= 0;
	ТекущиеДанные.РадиусЛевоВерх = 0;
	ТекущиеДанные.РадиусЛевоНиз = 0;
	ТекущиеДанные.РадиусПравоВерх = 0;
	ТекущиеДанные.РадиусПравоНиз = 0;
	ТекущиеДанные.Срез = Ложь;
	ТекущиеДанные.Обтачивать = Ложь;
	ТекущиеДанные.Постформинг = Ложь;
	ТекущиеДанные.СтруктураОтверстий = "";
	ТекущиеДанные.КромкаСверху = Фасад;
	ТекущиеДанные.КромкаСлева = Фасад;
	ТекущиеДанные.КромкаСнизу = Фасад;
	ТекущиеДанные.КромкаСправа = Фасад;
	ТекущиеДанные.ВидКромкиСверху = Неопределено;
	ТекущиеДанные.ВидКромкиСлева = Неопределено;
	ТекущиеДанные.ВидКромкиСнизу = Неопределено;
	ТекущиеДанные.ВидКромкиСправа = Неопределено;
	
	ОбновитьДоступность();
		
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКромкаПриИзменении(Элемент)
	
	ТекущиеДанные	= Элементы.Детали.ТекущиеДанные;
	Дос = ДанныеДетали.ДоступностьПолей;
	
	Если Элемент = Элементы.ДеталиКромкаСверху Тогда
		Элементы.ДеталиВидКромкиСверху.Доступность = Дос.ДоступностьПоляКромкаВерх И ТекущиеДанные.КромкаСверху;	
	ИначеЕсли Элемент = Элементы.ДеталиКромкаСлева Тогда
		Элементы.ДеталиВидКромкиСлева.Доступность = Дос.ДоступностьПоляКромкаЛево И ТекущиеДанные.КромкаСлева;	
	ИначеЕсли Элемент = Элементы.ДеталиКромкаСнизу Тогда
		Элементы.ДеталиВидКромкиСнизу.Доступность = Дос.ДоступностьПоляКромкаНиз И ТекущиеДанные.КромкаСнизу;	
	ИначеЕсли Элемент = Элементы.ДеталиКромкаСправа Тогда
		Элементы.ДеталиВидКромкиСправа.Доступность = Дос.ДоступностьПоляКромкаПраво И ТекущиеДанные.КромкаСправа;
	ИначеЕсли Элемент = Элементы.ДеталиКромкаРедактор Тогда
		Элементы.ДеталиВидКромкиРедактор.Доступность = Дос.ДоступностьПоляРедактироватьДеталь И ТекущиеДанные.КромкаРедактор
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДеталь(Команда)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтрокаДляФлэш) Тогда
		
		СтрокаДляРедактирования = "newcat☻";
		
	Иначе
		
		СтрокаДляФлэш = ТекущиеДанные.СтрокаДляФлэш;
		МассивСимволов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаДляФлэш, "☻");
		СтрокаДляФлэш = МассивСимволов[8];
		
		СтрокаДляРедактирования = "oldcat☻"+СтрокаДляФлэш;
		
	КонецЕсли;
	
	Параметр = Новый Структура;
	
	Параметр.Вставить("СтрокаДляРедактирования", СтрокаДляРедактирования);
	Параметр.Вставить("Подразделение", Неопределено);
	Параметр.Вставить("ВидДетали", ДанныеДетали.ВидДетали);
	Параметр.Вставить("АдресТаблицы", Неопределено);
	ОткрытьФорму("Документ.Спецификация.Форма.ФормаРедактированиеДеталей", Параметр, Элементы.Детали);

КонецПроцедуры

&НаКлиенте
Процедура ДеталиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элементы.Детали.ТекущиеДанные.Редактированная = Истина;
	Элементы.Детали.ТекущиеДанные.СтрокаДляФлэш = ВыбранноеЗначение;
	
	ОбновитьДоступность();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьРедактированность(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Редактированный шаблон детали будет удалён." + Символы.ПС + "Продолжить?" ;
	
	Если Вопрос(Текст, Режим, 0) = КодВозвратаДиалога.Да Тогда
		
		ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
		ТекущиеДанные.СтрокаДляФлэш = "";
		ТекущиеДанные.Редактированная = Ложь;
		
		ОбновитьДоступность();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеталиРасположениеПазовИРучкиНаФасадахОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураРасположенияПазовИРучки = ДеталиРасположениеПазовОбработкаВыбораНаСервере(ВыбранноеЗначение);
	ТекущиеДанные= Элементы.Детали.ТекущиеДанные;
	ТекущиеДанные.РасположениеПазовИРучкиНаФасадах = СтруктураРасположенияПазовИРучки.ЭлементСправочника;
	
КонецПроцедуры

&НаСервере
Функция ДеталиРасположениеПазовОбработкаВыбораНаСервере(ЗначениеСправочника)
	
	СтруктураРасположенияПазовИРучки = Новый Структура;
	ЭлементСправочника = Справочники.РасположениеПазовИРучкиНаФасадах.НайтиПоРеквизиту("ИмяКартинки", ЗначениеСправочника);
	СтруктураРасположенияПазовИРучки.Вставить("ЭлементСправочника", ЭлементСправочника);
	Возврат СтруктураРасположенияПазовИРучки;
	
КонецФункции

&НаКлиенте
Процедура ФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	ОткрытьРедакторФормул(Элемент.ТекстРедактирования, Элемент, "Каталог");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

&НаСервереБезКонтекста
Функция ПолучитьДанныеДетали(ТипДетали)
	
	Стр = Новый Структура;
	
	НомГруппы = Новый СписокЗначений;
	
	Для Каждого Эл Из ТипДетали.НоменклатурныеГруппы Цикл
		
		Стр2 = Новый Структура;
		Стр2.Вставить("ПолеВыбора", Эл.ПолеВыбора);
		Стр2.Вставить("Группа", Эл.Группа);

		НомГруппы.Добавить(Стр2);	
		
	КонецЦикла;
	
	Стр.Вставить("НомГруппы", НомГруппы);
	
	СтрДоступность = Новый Структура;
	
	Для Каждого Рек Из Метаданные.Справочники.ВидыДеталей.Реквизиты Цикл

		Если Лев(Рек.Имя,15) = "ДоступностьПоля" Тогда
			
			СтрДоступность.Вставить(Рек.Имя,ТипДетали[Рек.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;

	Стр.Вставить("ДоступностьПолей", СтрДоступность);
	
	СтрОбязательныеПоля = Новый Структура;
	
	Стр.Вставить("ВидДетали", ТипДетали);
	Стр.Вставить("Клееная", ТипДетали.Клееная);
	Стр.Вставить("ОбтачиватьПоУмолчанию", ТипДетали.ОбтачиватьПоУмолчанию);
	Стр.Вставить("СпецФасад", ТипДетали.СпецФасад);
	Стр.Вставить("ПрипускСклейка", ТипДетали.ПрипускСклейка);
	Стр.Вставить("ПрипускПостформинг", ТипДетали.ПрипускПостформинг);
	Стр.Вставить("ЭтоФасад", ТипДетали.ЭтоФасад);
	Стр.Вставить("ЭтоСтолешница", ТипДетали.ЭтоСтолешница);
	Стр.Вставить("ЭтоСтекло", ТипДетали.ЭтоСтекло);

	Возврат Стр;
	
КонецФункции

&НаКлиенте
Процедура ДеталиВидКромкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Элементы.Детали.ТекущиеДанные.СтрокаДляФлэш) Тогда
	
		МасТипов = Новый Массив();
		МасТипов.Добавить("КантК");
		МасТипов.Добавить("Кромка045");
		МасТипов.Добавить("Кромка2");
		МасТипов.Добавить("Окантовка");
		
		МассивГрупп = ПолучитьНомГруппы(МасТипов);
			
		Элемент.СписокВыбора.ЗагрузитьЗначения(МассивГрупп);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗагрузитьНомГруппыНоменклатура();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНомГруппыНоменклатура()
	
	МасТипов = Новый Массив();
	МасТипов.Добавить("Текстура");
	МассивГрупп = ПолучитьНомГруппы(МасТипов);
	
	СписокГрупп = Новый СписокЗначений;
	
	Для Каждого Гр Из МассивГрупп Цикл
		СписокГрупп.Добавить(Гр);	
	КонецЦикла;
		
	Мас = ОтборНоменклатурныхГрупп(СписокГрупп);
	МасЗнч = Новый Массив;
	
	Для Каждого Гр Из Мас Цикл
		Для Каждого Стр Из Гр.Значение Цикл
			МасЗнч.Добавить(Стр);	
		КонецЦикла;
	КонецЦикла;
	
	Элементы.ДеталиНоменклатура.СписокВыбора.ЗагрузитьЗначения(МасЗнч);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиВидКромкиРедакторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	МасТипов = Новый Массив();
	МасТипов.Добавить("КантК");
	МасТипов.Добавить("Кромка045");
	МасТипов.Добавить("Кромка2");
	МасТипов.Добавить("Окантовка");
	
	МассивГрупп = ПолучитьНомГруппы(МасТипов);
		
	Элемент.СписокВыбора.ЗагрузитьЗначения(МассивГрупп);

КонецПроцедуры

&НаСервере
Функция ПолучитьНомГруппыПетли()
	
	Мас = Новый СписокЗначений;
	Мас.Добавить(Справочники.НоменклатурныеГруппы.Петли);
	Мас.Добавить(Справочники.НоменклатурныеГруппы.ПетлиБезДоводчика);
	Мас.Добавить(Справочники.НоменклатурныеГруппы.ПетлиДляСтеколБезДоводчика);
	Мас.Добавить(Справочники.НоменклатурныеГруппы.ПетлиДляСтеколСДоводчиком);
	Мас.Добавить(Справочники.НоменклатурныеГруппы.ПетлиПоворотные);
	Мас.Добавить(Справочники.НоменклатурныеГруппы.ПетлиСДоводчиком);
	
	Возврат Мас;
	
КонецФункции

&НаКлиенте
Процедура ПрисадкиПриАктивизацииСтроки(Элемент)
	
	Данные = Элементы.Присадки.ТекущиеДанные;
	
	Если Данные <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(Данные.ИдентификаторПрисадок) Тогда
			Данные.ИдентификаторПрисадок = Элементы.Детали.ТекущиеДанные.ИдентификаторПрисадок;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисадкиЛинейкаВерхНизФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьРедакторФормул(Элемент.ТекстРедактирования, Элемент, "Присадки");
КонецПроцедуры

&НаКлиенте
Процедура ПрисадкиЛинейкаЛевоПравоФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьРедакторФормул(Элемент.ТекстРедактирования, Элемент, "Присадки");	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПередУдалением(Элемент, Отказ)
	
	Данные = Элемент.ТекущиеДанные;
	УдалитьСтрокиПрисадки(Данные.ИдентификаторПрисадок);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиПрисадки(Инд)
	
	Строки = Присадки.НайтиСтроки(Новый Структура("ИдентификаторПрисадок", Инд));
		
	Для каждого Строка Из Строки Цикл
	 	Присадки.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		НовыйИдентификатор = УстановитьИдентификаторПрисадок();
		
		Отбор = Новый Структура();
		Отбор.Вставить("ИдентификаторПрисадок", Элемент.ТекущиеДанные.ИдентификаторПрисадок);
		
		Строки = Присадки.НайтиСтроки(Отбор);
		
		Для Каждого Стр ИЗ Строки Цикл
			
			НоваяПрисадка = Присадки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПрисадка,Стр);
			НоваяПрисадка.ИдентификаторПрисадок = НовыйИдентификатор;
			
		КонецЦикла;
		
		Элемент.ТекущиеДанные.ИдентификаторПрисадок = НовыйИдентификатор;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисадкиДетальПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Присадки.ТекущиеДанные; 
	ДанныеШаблона = ПолучитьДанныеШаблона(ТекущиеДанные.Операция);
	
	Если ЗначениеЗаполнено(ДанныеШаблона) Тогда		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,ДанныеШаблона); 		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеШаблона(Операция)
	
	Данные = Неопределено;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныПрисадок.ЛинейкаВерхНиз,
	|	ШаблоныПрисадок.ЛинейкаВерхНизФормула,
	|	ШаблоныПрисадок.ЛинейкаЛевоПраво,
	|	ШаблоныПрисадок.ЛинейкаЛевоПравоФормула,
	|	ШаблоныПрисадок.Перевернуть,
	|	ШаблоныПрисадок.Развернуть,
	|	ШаблоныПрисадок.СверлоЛево,
	|	ШаблоныПрисадок.СверлоПраво,
	|	ШаблоныПрисадок.ТипСверла
	|ИЗ
	|	Справочник.ШаблоныПрисадок КАК ШаблоныПрисадок
	|ГДЕ
	|	ШаблоныПрисадок.Наименование = &Операция
	|	И НЕ ШаблоныПрисадок.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Данные = Новый Структура();
		Данные.Вставить("ЛинейкаВерхНиз", Выборка.ЛинейкаВерхНиз);
		Данные.Вставить("ЛинейкаВерхНизФормула", Выборка.ЛинейкаВерхНизФормула);
		Данные.Вставить("ЛинейкаЛевоПраво", Выборка.ЛинейкаЛевоПраво);
		Данные.Вставить("ЛинейкаЛевоПравоФормула", Выборка.ЛинейкаЛевоПравоФормула);
		Данные.Вставить("Перевернуть", Выборка.Перевернуть);
		Данные.Вставить("Развернуть", Выборка.Развернуть);
		Данные.Вставить("СверлоЛево", Выборка.СверлоЛево);
		Данные.Вставить("СверлоПраво", Выборка.СверлоПраво);
		Данные.Вставить("ТипСверла", Выборка.ТипСверла);
		
	КонецЕсли;
	
	Возврат Данные; 
	
КонецФункции

&НаКлиенте
Процедура ПрисадкиСверлоПравоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьРедакторФормул(Элемент.ТекстРедактирования, Элемент, "Присадки");
КонецПроцедуры

&НаКлиенте
Процедура ПрисадкиСверлоЛевоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьРедакторФормул(Элемент.ТекстРедактирования, Элемент, "Присадки");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторФормул(Формула, Элемент, Режим)
	
	ПараметрыФормы = Новый Структура("Формула, ИмяПеременной, Режим", Формула, Элемент.Имя, Режим);
	Форма = ПолучитьФорму("ОбщаяФорма.РедакторФомул", ПараметрыФормы, Элемент);
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиФормулаПетли1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьРедакторФормул(Элемент.ТекстРедактирования, Элемент, "Каталог");
КонецПроцедуры

&НаКлиенте
Процедура ДеталиФормулаПетли2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьРедакторФормул(Элемент.ТекстРедактирования, Элемент, "Каталог");
КонецПроцедуры

&НаКлиенте
Процедура ДеталиФормулаПетли3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьРедакторФормул(Элемент.ТекстРедактирования, Элемент, "Каталог");
КонецПроцедуры

&НаКлиенте
Процедура ДеталиФормулаПетли4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьРедакторФормул(Элемент.ТекстРедактирования, Элемент, "Каталог");
КонецПроцедуры

&НаКлиенте
Процедура ДеталиФормулаПетли5НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьРедакторФормул(Элемент.ТекстРедактирования, Элемент, "Каталог");
КонецПроцедуры

&НаКлиенте
Процедура ДеталиКоличествоПетельПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	Если ТекущиеДанные.КоличествоПетель > 5 Тогда
		 ТекущиеДанные.КоличествоПетель = 5;
	КонецЕсли;
	 
	Если ТекущиеДанные.КоличествоПетель < 0 Тогда
		 ТекущиеДанные.КоличествоПетель = 0;
	КонецЕсли; 
	
	Для Сч = 1 По 5 Цикл
		Элементы["ДеталиФормулаПетли" + Сч].Доступность = Ложь;
	КонецЦикла;
	
	Для Сч = 1 По ТекущиеДанные.КоличествоПетель Цикл
		Элементы["ДеталиФормулаПетли" + Сч].Доступность = Истина;
	КонецЦикла;
	
КонецПроцедуры
