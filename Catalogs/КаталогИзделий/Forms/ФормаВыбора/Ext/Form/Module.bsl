
&НаКлиенте
Процедура ОпределитьРабочийКаталог()
	
	Если НЕ ЗначениеЗаполнено(РабочийКаталог) Тогда
		РабочийКаталог = ФайловыеФункцииСлужебныйКлиент.ВыбратьПутьККаталогуДанныхПользователя();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКартинку(Код)
	
	ОпределитьРабочийКаталог();
	
	АдресКартинки = "";
	
	Код = СокрЛП(Код);
	ПутьКИзображению = РабочийКаталог + РасположениеКартинки + Код;
	ФайлНаДиске = Новый Файл(ПутьКИзображению);
	
	Если ФайлНаДиске.Существует() Тогда
		АдресКартинки = ПутьКИзображению;
	Иначе
		ПутьКИзображению = РабочийКаталог + ПредопределенноеЗначение("Перечисление.ВидыПрисоединенныхФайлов.КартинкаПравая") + Код;
		ФайлНаДиске = Новый Файл(ПутьКИзображению);
		Если ФайлНаДиске.Существует() Тогда
			АдресКартинки  = ПутьКИзображению;
		Иначе
			ПутьКИзображению = РабочийКаталог + ПредопределенноеЗначение("Перечисление.ВидыПрисоединенныхФайлов.КартинкаЛевая") + Код;
			ФайлНаДиске = Новый Файл(ПутьКИзображению);
			Если ФайлНаДиске.Существует() Тогда
				АдресКартинки  = ПутьКИзображению;
			Иначе
				ПутьКИзображению = РабочийКаталог + ПредопределенноеЗначение("Перечисление.ВидыПрисоединенныхФайлов.ОсновнаяКартинка") + Код;
				ФайлНаДиске = Новый Файл(ПутьКИзображению);
				Если ФайлНаДиске.Существует() Тогда
					АдресКартинки  = ПутьКИзображению;
				Иначе
					АдресКартинки  = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОпределитьРабочийКаталог();
					
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокДопИзделий.Параметры.УстановитьЗначениеПараметра("Базовый", Элементы.Список.ТекущиеДанные.Ссылка);
	
	ОтобразитьКартинку(Элементы.Список.ТекущиеДанные.Код);
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтборФормы = Параметры.Отбор;
	РасположениеКартинки = Перечисления.ВидыПрисоединенныхФайлов.ОсновнаяКартинка;
		
	Если Параметры.Свойство("ВидИзделияПоКаталогу") И ТипЗнч(Параметры.ВидИзделияПоКаталогу) = Тип("СправочникСсылка.ВидыИзделийПоКаталогу") Тогда
		
		//Определение расположения картинки бокового элемента и смена ВидаИзделия у ПравыйБоковойЭлемент на ЛевыйБоковойЭлемент
		//т.к. в справочнике КаталогИзделий короба только ЛевыйБоковойЭлемент
		
		ВидИзделияПоКаталогу = Параметры.ВидИзделияПоКаталогу;
		
		Элементы.ГруппаОтбора.Видимость = ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.ОсновнойЭлемент;
		
		Если Параметры.Свойство("МассивИзделий") Тогда
			
			//Используется при выборе изделия из формы ШкафПоКаталогу, 
			//для уже имеющегося списка изделий, исключаем короба несовместимые с ними
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МассивИзделий", Параметры.МассивИзделий);
			Запрос.УстановитьПараметр("ВидИзделия", ВидИзделияПоКаталогу);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА НесовместимостьИзделийПоКаталогу.НесовместимостимоеИзделие = ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.ПравыйБоковойЭлемент)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.ЛевыйБоковойЭлемент)
			|		КОГДА НесовместимостьИзделийПоКаталогу.НесовместимостимоеИзделие = ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.БоковаяПанельСправа)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.БоковаяПанельСлева)
			|		КОГДА НесовместимостьИзделийПоКаталогу.НесовместимостимоеИзделие = ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.БоковаяПанельЧерезОтбойнуюПланкуСправа)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.БоковаяПанельЧерезОтбойнуюПланкуСлева)
			|		КОГДА НесовместимостьИзделийПоКаталогу.НесовместимостимоеИзделие = ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.КоробБоковойСправа)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.КоробБоковойСлева)
			|		КОГДА НесовместимостьИзделийПоКаталогу.НесовместимостимоеИзделие = ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.ОтбойнаяПланкаСправа)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.ОтбойнаяПланкаСлева)
			|		КОГДА НесовместимостьИзделийПоКаталогу.НесовместимостимоеИзделие = ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.ФальшПанельСправа)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.ФальшПанельСлева)
			|		ИНАЧЕ НесовместимостьИзделийПоКаталогу.НесовместимостимоеИзделие
			|	КОНЕЦ КАК НесовместимостимоеИзделие
			|ИЗ
			|	РегистрСведений.НесовместимостьИзделийПоКаталогу КАК НесовместимостьИзделийПоКаталогу
			|ГДЕ
			|	НесовместимостьИзделийПоКаталогу.Изделие В(&МассивИзделий)
			|	И ВЫБОР
			|			КОГДА НесовместимостьИзделийПоКаталогу.НесовместимостимоеИзделие ССЫЛКА Справочник.ВидыИзделийПоКаталогу
			|				ТОГДА НесовместимостьИзделийПоКаталогу.НесовместимостимоеИзделие В ИЕРАРХИИ (&ВидИзделия)
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ";
			
			МассивНесовместимых = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НесовместимостимоеИзделие");
			
			//Исключаем конкретные короба
			ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
			ЭлементОтбора.ПравоеЗначение = МассивНесовместимых;
			ЭлементОтбора.Использование = Истина;
			
			//Исключаем группу коробов по виду изделия
			ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидИзделияПоКаталогу");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии;
			ЭлементОтбора.ПравоеЗначение = МассивНесовместимых;
			ЭлементОтбора.Использование = Истина;
			
		КонецЕсли;
		
		Если ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.ПравыйБоковойЭлемент Тогда
			ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.ЛевыйБоковойЭлемент;
			РасположениеКартинки = Перечисления.ВидыПрисоединенныхФайлов.КартинкаПравая;
		ИначеЕсли ВидИзделияПоКаталогу = Справочники.ВидыИзделийПоКаталогу.ЛевыйБоковойЭлемент Тогда
			РасположениеКартинки = Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая;
		КонецЕсли;
		
		//Отбор по виду изделия в иерархии
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидИзделияПоКаталогу");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.ПравоеЗначение = ВидИзделияПоКаталогу;
		ЭлементОтбора.Использование = Истина;
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ОповеститьОВыборе(Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДопИзделийПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокДопИзделий.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьКартинку(Элементы.СписокДопИзделий.ТекущиеДанные.Код);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДопИзделийВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ОповеститьОВыборе(Значение);

КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	ОчиститьФильтр();
	
	ПоискНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоискНаСервере()
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЕстьПолки", Полки);	
	Запрос.УстановитьПараметр("ВидОсновногоЭлемента", ВидОсновногоЭлемента);
	Запрос.УстановитьПараметр("ЕстьГладильнаяДоска", ГладильнаяДоска);
	Запрос.УстановитьПараметр("КоличествоДверей", КоличествоДверей);
	Запрос.УстановитьПараметр("ЕстьКорзина", Корзина);
	Запрос.УстановитьПараметр("ЕстьПантограф", Пантограф);
	Запрос.УстановитьПараметр("ЕстьПылесосЧемодан", ПылесосЧемодан);
	Запрос.УстановитьПараметр("ЕстьСотоваяПолка", СотоваяПолка);
	Запрос.УстановитьПараметр("ЕстьТорцевоеВешало", ТорцевоеВешало);
	Запрос.УстановитьПараметр("ЕстьШтанга", Штанга);
	Запрос.УстановитьПараметр("ЕстьЯщики", Ящики);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КаталогИзделийСписокЯщики.Ссылка,
	|	КОЛИЧЕСТВО(КаталогИзделийСписокЯщики.ИмяЯщика) КАК КоличествоЯщиков
	|ПОМЕСТИТЬ ВТ_Ящики
	|ИЗ
	|	Справочник.КаталогИзделий.СписокЯщики КАК КаталогИзделийСписокЯщики
	|
	|СГРУППИРОВАТЬ ПО
	|	КаталогИзделийСписокЯщики.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КаталогИзделий.Ссылка,
	|	ВТ_Ящики.КоличествоЯщиков
	|ИЗ
	|	Справочник.КаталогИзделий КАК КаталогИзделий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Ящики КАК ВТ_Ящики
	|		ПО (ВТ_Ящики.Ссылка = КаталогИзделий.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогИзделий.СписокХарактеристик КАК КаталогИзделийСписокХарактеристик
	|		ПО КаталогИзделий.Ссылка = КаталогИзделийСписокХарактеристик.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ЕстьЯщики
	|				ТОГДА ВТ_Ящики.КоличествоЯщиков > 0
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ЕстьПолки
	|				ТОГДА КаталогИзделийСписокХарактеристик.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ХарактеристикиШкафовКупе.Полки)
	|						И КаталогИзделийСписокХарактеристик.ЗначениеХарактеристики = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ	
	|	И ВЫБОР
	|			КОГДА &ЕстьГладильнаяДоска
	|				ТОГДА КаталогИзделийСписокХарактеристик.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ХарактеристикиШкафовКупе.ГладильнаяДоска)
	|						И КаталогИзделийСписокХарактеристик.ЗначениеХарактеристики = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ	
	|	И ВЫБОР
	|			КОГДА &ЕстьКорзина
	|				ТОГДА КаталогИзделийСписокХарактеристик.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ХарактеристикиШкафовКупе.Корзина)
	|						И КаталогИзделийСписокХарактеристик.ЗначениеХарактеристики = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ	
	|	И ВЫБОР
	|			КОГДА &ЕстьПантограф
	|				ТОГДА КаталогИзделийСписокХарактеристик.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ХарактеристикиШкафовКупе.Пантограф)
	|						И КаталогИзделийСписокХарактеристик.ЗначениеХарактеристики = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ	
	|	И ВЫБОР
	|			КОГДА &ЕстьПылесосЧемодан
	|				ТОГДА КаталогИзделийСписокХарактеристик.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ХарактеристикиШкафовКупе.ПылесосЧемодан)
	|						И КаталогИзделийСписокХарактеристик.ЗначениеХарактеристики = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ	
	|	И ВЫБОР
	|			КОГДА &ЕстьСотоваяПолка
	|				ТОГДА КаталогИзделийСписокХарактеристик.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ХарактеристикиШкафовКупе.СотоваяПолка)
	|						И КаталогИзделийСписокХарактеристик.ЗначениеХарактеристики = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ	
	|	И ВЫБОР
	|			КОГДА &ЕстьТорцевоеВешало
	|				ТОГДА КаталогИзделийСписокХарактеристик.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ХарактеристикиШкафовКупе.ТорцевоеВешало)
	|						И КаталогИзделийСписокХарактеристик.ЗначениеХарактеристики = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ	
	|	И ВЫБОР
	|			КОГДА &ЕстьШтанга
	|				ТОГДА КаталогИзделийСписокХарактеристик.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ХарактеристикиШкафовКупе.Штанга)
	|						И КаталогИзделийСписокХарактеристик.ЗначениеХарактеристики = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ	
	|	И ВЫБОР
	|			КОГДА &КоличествоДверей > 0
	|				ТОГДА КаталогИзделийСписокХарактеристик.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ХарактеристикиШкафовКупе.КоличествоДверей)
	|						И КаталогИзделийСписокХарактеристик.ЗначениеХарактеристики = &КоличествоДверей
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВидОсновногоЭлемента <> Значение(Перечисление.ВидыШкафовКупе.ПустаяСсылка)
	|				ТОГДА КаталогИзделийСписокХарактеристик.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ХарактеристикиШкафовКупе.ВидОсновногоЭлемента)
	|						И КаталогИзделийСписокХарактеристик.ЗначениеХарактеристики = &ВидОсновногоЭлемента
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И КаталогИзделий.ВидИзделияПоКаталогу = ЗНАЧЕНИЕ(Справочник.ВидыИзделийПоКаталогу.ОсновнойЭлемент)";
	
	МассивИзделий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");    
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = МассивИзделий;
	ЭлементОтбора.Использование = Истина;	
	ЭлементОтбора.Представление = "Фильтр";

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоиск(Команда)
	
	Полки = Ложь;	
	ВидОсновногоЭлемента = ПредопределенноеЗначение("Перечисление.ВидыШкафовКупе.ПустаяСсылка");
	ГладильнаяДоска = Ложь;
	КоличествоДверей = 0;
	Корзина = Ложь;
	Пантограф = Ложь;
	ПылесосЧемодан = Ложь;
	СотоваяПолка = Ложь;
	ТорцевоеВешало = Ложь;
	Штанга = Ложь;
	Ящики = Ложь;
	
	ОчиститьФильтр();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФильтр()
	
	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "Фильтр" Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

