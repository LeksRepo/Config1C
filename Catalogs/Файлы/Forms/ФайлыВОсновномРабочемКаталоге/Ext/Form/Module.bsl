////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьСписокФайловВФорме();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СписокФайлов

&НаКлиенте
Процедура СписокФайловПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		ДоступностьКоманд = Ложь;
	Иначе
		ДоступностьКоманд = Истина;
	КонецЕсли;
	
	Элементы.УдалитьИзЛокальногоКэшаФайлов.Доступность = ДоступностьКоманд;
	Элементы.КонтекстноеМенюСписокФайловУдалитьИзЛокальногоКэшаФайлов.Доступность = ДоступностьКоманд;
	
	Элементы.ЗакончитьРедактирование.Доступность = ДоступностьКоманд;
	Элементы.КонтекстноеМенюСписокФайловЗакончитьРедактирование.Доступность = ДоступностьКоманд;
	
	Элементы.Освободить.Доступность = ДоступностьКоманд;
	Элементы.КонтекстноеМенюСписокФайловОсвободить.Доступность = ДоступностьКоманд;
	
	Элементы.ОткрытьКаталогФайла.Доступность = ДоступностьКоманд;
	Элементы.КонтекстноеМенюСписокФайловОткрытьКаталогФайла.Доступность = ДоступностьКоманд;
	
	Элементы.ФормаОткрытьКарточку.Доступность = ДоступностьКоманд;
	Элементы.СписокФайловКонтекстноеМенюОткрытьКарточку.Доступность = ДоступностьКоманд;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьКарточкуВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьИзЛокальногоКэшаФайловВыполнить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УдалитьИзЛокальногоКэшаФайлов(Команда)
	УдалитьИзЛокальногоКэшаФайловВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.СписокФайлов.ТекущиеДанные <> Неопределено Тогда
		Ссылка = Элементы.СписокФайлов.ТекущиеДанные.Версия;
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Неопределено, Ссылка);
		РаботаСФайламиКлиент.ЗакончитьРедактирование(ДанныеФайла.Ссылка, УникальныйИдентификатор);
		ЗаполнитьСписокФайлов();
		ЗаполнитьСписокФайловВФорме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	ОткрытьКарточкуВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьВыполнить()
	
	МассивСсылок = Новый Массив;
	Для Каждого Элемент Из Элементы.СписокФайлов.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.СписокФайлов.ДанныеСтроки(Элемент);
		Ссылка = ДанныеСтроки.Версия;
		МассивСсылок.Добавить(Ссылка);
	КонецЦикла;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Неопределено, Ссылка);
		
		// Проверяем возможность освобождения
		СтрокаОшибки = "";
		Если Не РаботаСФайламиСлужебныйКлиент.ВозможностьОсвободитьФайл(
					ДанныеФайла.Ссылка,
					ДанныеФайла.РедактируетТекущийПользователь,
					ДанныеФайла.Редактирует,
					СтрокаОшибки) Тогда
			
			Предупреждение(СтрокаОшибки);
			Продолжить;
		КонецЕсли;
		
		РаботаСФайламиСлужебныйКлиент.ОсвободитьФайл(ДанныеФайла.Ссылка);
	КонецЦикла;
	
	ЗаполнитьСписокФайлов();
	ЗаполнитьСписокФайловВФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайлаВыполнить()
	Если Элементы.СписокФайлов.ТекущиеДанные <> Неопределено Тогда
		Ссылка = Элементы.СписокФайлов.ТекущиеДанные.Версия;
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Неопределено, Ссылка);
		РаботаСФайламиСлужебныйКлиент.КаталогФайла(ДанныеФайла);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ЗаполнитьСписокФайловВФорме()
	
	РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	СписокФайлов.Очистить();
	
	Для Каждого Строка Из СписокЗначенийФайловВРегистре Цикл
		
		ПолныйПуть = РабочийКаталогПользователя + Строка.Значение.ЧастичныйПуть;
		Файл = Новый Файл(ПолныйПуть);
		Если Файл.Существует() Тогда
			НоваяСтрока = СписокФайлов.Добавить();
			НоваяСтрока.ДатаИзмененияФайла = МестноеВремя(Строка.Значение.ДатаМодификацииУниверсальная);
			НоваяСтрока.ИмяФайла           = Строка.Значение.ПолноеНаименование;
			НоваяСтрока.ИндексКартинки     = Строка.Значение.ИндексКартинки;
			НоваяСтрока.Размер             = Формат(Строка.Значение.Размер / 1024, "ЧЦ=10; ЧН=0"); // в КБ
			НоваяСтрока.Версия             = Строка.Значение.Ссылка;
			НоваяСтрока.Редактирует        = Строка.Значение.Редактирует;
			НоваяСтрока.НаРедактирование   = ЗначениеЗаполнено(Строка.Значение.Редактирует);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоСсылке(СсылкаДляУдаления)
	
	КоличествоЭлементов = СписокФайлов.Количество();
	
	Для Номер = 0 По КоличествоЭлементов - 1 Цикл
		Строка = СписокФайлов[Номер];
		Ссылка = Строка.Версия;
		Если Ссылка = СсылкаДляУдаления Тогда
			СписокФайлов.Удалить(Номер);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокФайлов()
	
	СписокФайловВРегистре = СписокФайловВРегистре();
	СписокЗначенийФайловВРегистре.Очистить();
	
	Для Каждого Строка Из СписокФайловВРегистре Цикл
		СписокЗначенийФайловВРегистре.Добавить(Строка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзЛокальногоКэшаФайловВыполнить()
	
	Текст = НСтр("ru = 'Удалить выбранные файлы из основного рабочего каталога?'");
	Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для Каждого НомерЦикла Из Элементы.СписокФайлов.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.СписокФайлов.ДанныеСтроки(НомерЦикла);
		МассивСсылок.Добавить(ДанныеСтроки.Версия);
	КонецЦикла;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	ЕстьЗанятыеФайлы = Ложь;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		Если ФайлЗанят(Ссылка) Тогда
			Строки = СписокФайлов.НайтиСтроки(Новый Структура("Версия", Ссылка));
			Строки[0].НаРедактирование = Истина;
			ЕстьЗанятыеФайлы = Истина;
			Продолжить;
		КонецЕсли;
		
		ИмяФайлаСПутем = РаботаСФайламиСлужебныйВызовСервера.ПолучитьИмяФайлаСПутемИзРегистра(
			Ссылка, ИмяКаталога, Ложь, Ложь);
		
		РаботаСФайламиСлужебныйКлиент.УдалитьФайлИзРабочегоКаталога(Ссылка);
		
		Если ИмяФайлаСПутем <> "" Тогда
			ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
			Если НЕ ФайлНаДиске.Существует() Тогда
				УдалитьПоСсылке(Ссылка);
			КонецЕсли;
		Иначе
			УдалитьПоСсылке(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.СписокФайлов.Обновить();
	
	Если ЕстьЗанятыеФайлы Тогда
		Предупреждение(НСтр("ru = 'Нельзя удалять из основного рабочего каталога файлы,
		                          |занятые для редактирования.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуВыполнить()
	
	Если Элементы.СписокФайлов.ТекущиеДанные <> Неопределено Тогда
		Ссылка = Элементы.СписокФайлов.ТекущиеДанные.Версия;
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Неопределено, Ссылка);
		ОткрытьЗначение(ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокФайловВРегистре()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗначений = Новый Массив;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ТекущийПользователь);
	ЗапросВРегистр.Текст =
	"ВЫБРАТЬ
	|	ФайлыВРабочемКаталоге.Версия КАК Ссылка,
	|	ФайлыВРабочемКаталоге.НаЧтение КАК НаЧтение,
	|	ФайлыВРабочемКаталоге.Размер КАК Размер,
	|	ФайлыВРабочемКаталоге.Путь КАК Путь,
	|	ФайлыВРабочемКаталоге.Версия.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	|	ФайлыВРабочемКаталоге.Версия.ПолноеНаименование КАК ПолноеНаименование,
	|	ФайлыВРабочемКаталоге.Версия.ИндексКартинки КАК ИндексКартинки,
	|	ФайлыВРабочемКаталоге.Версия.Владелец.Редактирует КАК Редактирует
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	|ГДЕ
	|	ФайлыВРабочемКаталоге.Пользователь = &Пользователь
	|	И ФайлыВРабочемКаталоге.ВРабочемКаталогеВладельца = ЛОЖЬ";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Запись = Новый Структура;
			Запись.Вставить("ДатаМодификацииУниверсальная", Выборка.ДатаМодификацииУниверсальная);
			Запись.Вставить("ПолноеНаименование",           Выборка.ПолноеНаименование);
			Запись.Вставить("ИндексКартинки",               Выборка.ИндексКартинки);
			Запись.Вставить("Размер",                       Выборка.Размер);
			Запись.Вставить("Ссылка",                       Выборка.Ссылка);
			Запись.Вставить("Редактирует",                  Выборка.Редактирует);
			Запись.Вставить("НаЧтение",                     Выборка.НаЧтение);
			Запись.Вставить("ЧастичныйПуть",                Выборка.Путь);
			
			СписокЗначений.Добавить(Запись);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокЗначений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФайлЗанят(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.Ссылка = &Ссылка
	|	И ВерсииФайлов.Владелец.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции
