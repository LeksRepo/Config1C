////////////////////////////////////////////////////////////////////////////////
// Подсистема "Получение файлов из Интернета"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает объект ИнтернетПрокси для доступа в Интернет.
//
// Параметры:
//   URLИлиПротокол - Строка - url в формате [Протокол://]<Сервер>/<Путь к файлу на сервере>,
//                             либо идентификатор протокола (http, ftp, ...)
//
// Возвращаемое значение:
//   ИнтернетПрокси
//
Функция ПолучитьПрокси(Знач URLИлиПротокол) Экспорт
	
#Если Клиент Тогда
	НастройкаПроксиСервера = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиПроксиСервера;
#Иначе
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
#КонецЕсли
	Если Найти(URLИлиПротокол, "://") > 0 Тогда
		Протокол = РазделитьURL(URLИлиПротокол).Протокол;
	Иначе
		Протокол = НРег(URLИлиПротокол);
	КонецЕсли;
	Возврат СформироватьИнтернетПрокси(НастройкаПроксиСервера, Протокол);
	
КонецФункции

// Разделяет URL по составным частям: протокол, сервер, путь к ресурсу.
//
// Параметры:
//  URL - Строка - ссылка на ресурс в сети Интернет
//
// Возвращаемое значение:
//  Структура:
//             Протокол            - Строка - протокол доступа к ресурсу
//             ИмяСервера          - Строка - сервер, на котором располагается ресурс
//             ПутьКФайлуНаСервере - Строка - путь к ресурсу на сервере
//
Функция РазделитьURL(Знач URL) Экспорт
	
	СтруктураURL = СтруктураURI(URL);
	
	Результат = Новый Структура;
	Результат.Вставить("Протокол", ?(ПустаяСтрока(СтруктураURL.Схема), "http", СтруктураURL.Схема));
	Результат.Вставить("ИмяСервера", СтруктураURL.ИмяСервера);
	Результат.Вставить("ПутьКФайлуНаСервере", СтруктураURL.ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//    
//     <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>
//               \______________/ \___________/
//                      |               |
//           	   авторизация     имя сервера
//               \____________________________/ \________________________/
//                              |                            |
//                       строка соединения            путь на сервере
//
// Возвращаемое значение:
//  Структура:
//             Схема         - Строка;
//             Логин         - Строка; 
//             Пароль        - Строка;
//             ИмяСервера    - Строка;
//             Хост          - Строка; 
//             Порт          - Строка; 
//             ПутьНаСервере - Строка;
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", Порт);
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Функция для получения файла из сети Интернет.
//
// Параметры:
// URL           - строка - url файла в формате:
//                 [Протокол://]<Сервер>/<Путь к файлу на сервере>
// Пользователь  - строка - пользователь от имени которого установлено соединение
// Пароль        - строка - пароль пользователя от которого установлено соединение
// Порт          - число  - порт сервера с которым установлено соединение
// ЗащищенноеПассивноеСоединение
//
// НастройкаСохранения - соответствие - содержит параметры для сохранения скачанного файла
//                 ключи:
//                 МестоХранения - строка - может содержать 
//                        "Клиент" - клиент,
//                        "Сервер" - сервер,
//                        "ВременноеХранилище" - временное хранилище
//                 Путь - строка (необязательный параметр) - 
//                        путь к каталогу на клиенте либо на сервере либо адрес во временном хранилище
//                        если не задано будет сгенерировано автоматически
//
// Возвращаемое значение:
// структура
// успех  - булево - успех или неудача операции
// строка - строка - в случае успеха либо строка-путь сохранения файла
//                   либо адрес во временном хранилище
//                   в случае неуспеха сообщение об ошибке
//
Функция ПодготовитьПолучениеФайла(Знач URL, Знач Пользователь = Неопределено, Знач Пароль = Неопределено,
	Знач Порт = Неопределено, Знач Таймаут, Знач ЗащищенноеСоединение = Ложь, Знач ПассивноеСоединение = Ложь, 
	Знач НастройкаСохранения, Знач ЗаписыватьОшибку = Истина) Экспорт
	
	НастройкаСоединения = Новый Соответствие;
	НастройкаСоединения.Вставить("Пользователь", Пользователь);
	НастройкаСоединения.Вставить("Пароль",       Пароль);
	НастройкаСоединения.Вставить("Порт",         Порт);
	НастройкаСоединения.Вставить("Таймаут",      Таймаут);
	
	Протокол = РазделитьURL(URL).Протокол;
	
	Если Протокол = "ftp" Тогда
		НастройкаСоединения.Вставить("ПассивноеСоединение", ПассивноеСоединение);
	Иначе
		НастройкаСоединения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	КонецЕсли;
	
#Если Клиент Тогда
	НастройкаПроксиСервера = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиПроксиСервера;
#Иначе
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
#КонецЕсли
	
	Результат = ПолучитьФайлИзИнтернет(URL, НастройкаСохранения, НастройкаСоединения, НастройкаПроксиСервера, ЗаписыватьОшибку);
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Функция для получения файла из сети Интернет.
//
// Параметры:
// URL - строка - url файла в формате: [Протокол://]<Сервер>/<Путь к файлу на сервере>
//
// НастройкаСоединения - Соответствие -
//		ЗащищенноеСоединение* - булево - соединение защищенное
//		ПассивноеСоединение*  - булево - соединение защищенное
//		Пользователь - строка - пользователь от имени которого установлено соединение
//		Пароль       - строка - пароль пользователя от которого установлено соединение
//		Порт         - число  - порт сервера с которым установлено соединение
//		* - взаимоисключающие ключи
//
// НастройкиПрокси - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//		Сервер       - адрес прокси-сервера
//		Порт         - порт прокси-сервера
//		Пользователь - имя пользователя для авторизации на прокси-сервере
//		Пароль       - пароль пользователя
//
// НастройкаСохранения - соответствие - содержит параметры для сохранения скачанного файла
//		МестоХранения - строка - может содержать 
//			"Клиент" - клиент,
//			"Сервер" - сервер,
//			"ВременноеХранилище" - временное хранилище
//		Путь - строка (необязательный параметр) - путь к каталогу на клиенте либо на сервере, 
//			либо адрес во временном хранилище,  если не задано будет сгенерировано автоматически
//
// Возвращаемое значение:
// структура
// успех  - булево - успех или неудача операции
// строка - строка - в случае успеха либо строка-путь сохранения файла
//                   либо адрес во временном хранилище
//                   в случае неуспеха сообщение об ошибке
//
Функция ПолучитьФайлИзИнтернет(Знач URL, Знач НастройкаСохранения, Знач НастройкаСоединения = Неопределено,
	Знач НастройкиПрокси = Неопределено, Знач ЗаписыватьОшибку = Истина)
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство, при анализе параметров получения файлов
	// из ПараметрыПолучения. Содержат значения переданных параметров получения файла
	Перем ИмяСервера, ИмяПользователя, Пароль, Порт,
	      ЗащищенноеСоединение,ПассивноеСоединение,
	      ПутьКФайлуНаСервере, Протокол;
	
	URLРазделенный = РазделитьURL(URL);
	
	ИмяСервера           = URLРазделенный.ИмяСервера;
	ПутьКФайлуНаСервере  = URLРазделенный.ПутьКФайлуНаСервере;
	Протокол             = URLРазделенный.Протокол;
	
	ЗащищенноеСоединение = НастройкаСоединения.Получить("ЗащищенноеСоединение");
	ПассивноеСоединение  = НастройкаСоединения.Получить("ПассивноеСоединение");
	
	ИмяПользователя      = НастройкаСоединения.Получить("Пользователь");
	ПарольПользователя   = НастройкаСоединения.Получить("Пароль");
	Порт                 = НастройкаСоединения.Получить("Порт");
	Таймаут              = НастройкаСоединения.Получить("Таймаут");
	
	Если Протокол = "https" Тогда
		ЗащищенноеСоединение = Истина;
	КонецЕсли;
	
	Если Порт = Неопределено Тогда
		ПолнаяСтруктураURL = СтруктураURI(URL);
		
		Если НЕ ПустаяСтрока(ПолнаяСтруктураURL.Порт) Тогда
			ИмяСервера = ПолнаяСтруктураURL.Хост;
			Порт = ПолнаяСтруктураURL.Порт;
		КонецЕсли;
	КонецЕсли;
	
	Прокси = ?(Прокси <> Неопределено, СформироватьИнтернетПрокси(НастройкиПрокси, Протокол), Неопределено);
	
	Если Протокол = "ftp" Тогда
		Попытка
			Соединение = Новый FTPСоединение(ИмяСервера, Порт, ИмяПользователя, ПарольПользователя, Прокси, ПассивноеСоединение, Таймаут);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			СообщениеОбОшибке = НСтр("ru = 'Ошибка при создании FTP-соединения с сервером %1:'") + Символы.ПС + "%2";
			
			ЗаписатьОшибкуВЖурналРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СообщениеОбОшибке, ИмяСервера, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат СформироватьРезультат(Ложь, СообщениеОбОшибке);
		КонецПопытки;
		
	Иначе
		Если ЗащищенноеСоединение = Истина Тогда
			ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
		Иначе
			ЗащищенноеСоединение = Неопределено;
		КонецЕсли;
		
		Попытка
			Соединение = Новый HTTPСоединение(ИмяСервера, Порт, ИмяПользователя, ПарольПользователя, Прокси, Таймаут, ЗащищенноеСоединение);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			СообщениеОбОшибке = НСтр("ru = 'Ошибка при создании HTTP-соединения с сервером %1:'") + Символы.ПС + "%2";
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера, 
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат СформироватьРезультат(Ложь, СообщениеОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	Если НастройкаСохранения["Путь"] <> Неопределено Тогда
		ПутьДляСохранения = НастройкаСохранения["Путь"];
	Иначе
		#Если НЕ ВебКлиент Тогда
			ПутьДляСохранения = ПолучитьИмяВременногоФайла();
		#КонецЕсли
	КонецЕсли;
	
	Попытка
		Соединение.Получить(ПутьКФайлуНаСервере, ПутьДляСохранения);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СообщениеОбОшибке = НСтр("ru = 'Ошибка при получении файла с сервера %1:'") + Символы.ПС + "%2";
		Если ЗаписыватьОшибку Тогда
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		КонецЕсли;
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера, 
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат СформироватьРезультат(Ложь, СообщениеОбОшибке);
	КонецПопытки;
	
	// Если сохраняем файл в соответствии с настройкой 
	Если НастройкаСохранения["МестоХранения"] = "ВременноеХранилище" Тогда
		КлючУникальности = Новый УникальныйИдентификатор;
		Адрес = ПоместитьВоВременноеХранилище (Новый ДвоичныеДанные(ПутьДляСохранения), КлючУникальности);
		Возврат СформироватьРезультат(Истина, Адрес);
	ИначеЕсли НастройкаСохранения["МестоХранения"] = "Клиент"
	      ИЛИ НастройкаСохранения["МестоХранения"] = "Сервер" Тогда
		Возврат СформироватьРезультат(Истина, ПутьДляСохранения);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает прокси по настройкам НастройкаПроксиСервера для заданного протокола Протокол.
//
// Параметры:
//   НастройкаПроксиСервера - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//		Сервер       - адрес прокси-сервера
//		Порт         - порт прокси-сервера
//		Пользователь - имя пользователя для авторизации на прокси-сервере
//		Пароль       - пароль пользователя
//   Протокол - строка - протокол для которого устанавливаются параметры прокси сервера, например "http", "https", "ftp"
// 
// Возвращаемое значение:
//   ИнтернетПрокси
// 
Функция СформироватьИнтернетПрокси(НастройкаПроксиСервера, Протокол)
	
	Если НастройкаПроксиСервера = Неопределено Тогда
		// Системные установки прокси-сервера
		Возврат Неопределено;
	КонецЕсли;	
	
	ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
	Если Не ИспользоватьПрокси Тогда
		// Не использовать прокси-сервер
		Возврат Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
	Если ИспользоватьСистемныеНастройки Тогда
		// Системные настройки прокси-сервера
		Возврат Новый ИнтернетПрокси(Истина);
	КонецЕсли;
			
	// Настройки прокси-сервера, заданные вручную
	Прокси = Новый ИнтернетПрокси;
	
	// Определение адреса и порта прокси-сервера
	ДополнительныеНастройки = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
	ПроксиПоПротоколу = Неопределено;
	Если ТипЗнч(ДополнительныеНастройки) = Тип("Соответствие") Тогда
		ПроксиПоПротоколу = ДополнительныеНастройки.Получить(Протокол);
	КонецЕсли;
	
	Если ТипЗнч(ПроксиПоПротоколу) = Тип("Структура") Тогда
		Прокси.Установить(Протокол, ПроксиПоПротоколу.Адрес, ПроксиПоПротоколу.Порт);
	Иначе
		Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
	КонецЕсли;
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
	Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
	Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
	
	АдресаИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
	Если ТипЗнч(АдресаИсключений) = Тип("Массив") Тогда
		Для каждого АдресИсключения Из АдресаИсключений Цикл
			Прокси.НеИспользоватьПроксиДляАдресов.Добавить(АдресИсключения);
		КонецЦикла;
	КонецЕсли;
			
	Возврат Прокси;
	
КонецФункции

// Функция, заполняющая структуру по параметрам.
//
// Параметры:
// УспехОперации - булево - успех или неуспех операции
// СообщениеПуть - строка - 
//
// Возвращаемое значение - структура:
//          поле успех - булево
//          поле путь  - строка
//
Функция СформироватьРезультат(Знач Статус, Знач СообщениеПуть)
	
	Результат = Новый Структура("Статус");
	
	Результат.Статус = Статус;

	Если Статус Тогда
		Результат.Вставить("Путь", СообщениеПуть);
	Иначе
		Результат.Вставить("СообщениеОбОшибке", СообщениеПуть);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает событие-ошибку в журнал регистрации. Имя события
// "Получение файлов из Интернета".
// Параметры
//   СообщениеОбОшибке - строка сообщение об ошибке
// 
Процедура ЗаписатьОшибкуВЖурналРегистрации(Знач СообщениеОбОшибке) Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка, , ,
		СообщениеОбОшибке);
#Иначе
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		"Ошибка", СообщениеОбОшибке,,Истина);
#КонецЕсли
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Получение файлов из Интернета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

