
Процедура ДокументПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Источник.Автор) Тогда
		
		Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
			Источник.Автор = ПользователиКлиентСервер.ТекущийВнешнийПользователь();
		Иначе
			Источник.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	МетаданныеДокумента = Источник.Метаданные();
	
	ИмяРеквизита = "Автор";
	Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		Источник.Автор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект   - <ДокументОбъект> - документ, реквизиты которого необходимо заполнить
//  ДанныеЗаполнения - <Структура> или <Неопределено> - одноименный параметр обработчика ОбработкаЗаполнения документа
//
Процедура ДокументОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Пользователь = ПараметрыСеанса.ТекущийВнешнийПользователь;
	Иначе
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	МетаданныеДокумента = Источник.Метаданные();
	
	Выборка = ПланыВидовХарактеристик.НастройкиПользователей.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяРеквизита = Выборка.Наименование;
		Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено
			И НЕ ЗначениеЗаполнено(Источник[ИмяРеквизита]) Тогда
			Источник[Выборка.Наименование] = ЛексСервер.ПолучитьЗначениеНастройкиПользователя(Пользователь, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Источник.Дата = ЛексСервер.ПолучитьВремяНовогоДокумента(Источник);
	
КонецПроцедуры

Функция ПометкаУдаленияИзменена(фнОбъект)
	
	Результат = Новый Структура;
	Результат.Вставить("ПометкаИзменена", Ложь);
	Результат.Вставить("НоваяПометка");
	
	Если НЕ ЗначениеЗаполнено(фнОбъект.Ссылка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если фнОбъект.ПометкаУдаления
		И НЕ фнОбъект.Ссылка.ПометкаУдаления Тогда
		Результат.Вставить("ПометкаИзменена", Истина);
		Результат.НоваяПометка = Истина;
	КонецЕсли;
	
	Если НЕ фнОбъект.ПометкаУдаления
		И фнОбъект.Ссылка.ПометкаУдаления Тогда
		Результат.Вставить("ПометкаИзменена", Истина);
		Результат.НоваяПометка = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПометкаНаУдалениеСлужебныхЗаписок(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	СтруктураПометка = ПометкаУдаленияИзменена(Источник);
	
	Если СтруктураПометка.ПометкаИзменена Тогда
		ОбработатьПометкуУдаленияСлужебныхЗаписок(Источник.Ссылка, СтруктураПометка.НоваяПометка);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьПометкуУдаленияСлужебныхЗаписок(ДокументОснование, НоваяПометка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НоваяПометка", НоваяПометка);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СлужебнаяЗаписка.Ссылка
	|ИЗ
	|	Документ.СлужебнаяЗаписка КАК СлужебнаяЗаписка
	|ГДЕ
	|	СлужебнаяЗаписка.Документ = &ДокументОснование
	|	И НЕ СлужебнаяЗаписка.ПометкаУдаления = &НоваяПометка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СлужебнаяЗапискаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СлужебнаяЗапискаОбъект.УстановитьПометкуУдаления(НоваяПометка);
			СлужебнаяЗапискаОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Процедура ПометкаНаУдалениеЗаметок(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
		СтруктураПометка = ПометкаУдаленияИзменена(Источник);
	
	Если СтруктураПометка.ПометкаИзменена Тогда
		ОбработатьПометкуУдаленияЗаметок(Источник.Ссылка, СтруктураПометка.НоваяПометка);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьПометкуУдаленияЗаметок(ПредметСсылка, НоваяПометка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НоваяПометка", НоваяПометка);
	Запрос.УстановитьПараметр("ПредметСсылка", ПредметСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заметки.Ссылка,
	|	Заметки.Предмет
	|ИЗ
	|	Справочник.Заметки КАК Заметки
	|ГДЕ
	|	НЕ Заметки.ПометкаУдаления = &НоваяПометка
	|	И Заметки.Предмет = &ПредметСсылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаметкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаметкаОбъект.УстановитьПометкуУдаления(НоваяПометка);
			ЗаметкаОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Процедура ПометкаНаУдалениеФайлыЛекс(Источник, Отказ) Экспорт
	
	ОбработатьПометкуУдаленияФайлыЛекс(Источник.Ссылка, Источник.ПометкаУдаления);
	
КонецПроцедуры

Функция ОбработатьПометкуУдаленияФайлыЛекс(ВладелецСсылка, НоваяПометка) Экспорт
	
	//RonEXI: Применяем пометку удаления для файлов только если владелец помечен на удаление, если владелец не помечен с файлов пометку не снимаем.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НоваяПометка", НоваяПометка);
	Запрос.УстановитьПараметр("ВладелецСсылка", ВладелецСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФайлыЛекс.Ссылка
	|ИЗ
	|	Справочник.ФайлыЛекс КАК ФайлыЛекс
	|ГДЕ
	|	ФайлыЛекс.ВладелецФайла = &ВладелецСсылка
	|	И ФайлыЛекс.ВладелецФайла.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ФайлОбъект.УстановитьПометкуУдаления(Истина);
			ФайлОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции
