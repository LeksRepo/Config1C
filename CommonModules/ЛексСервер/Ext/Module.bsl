
//{ Васильев Александр Леонидович [27.08.2013]
// тут проёб. судя по названию модуля он должен быть ТОЛЬКО серверным
// у нас же стоит флаг Вызов сервера :(
// } Васильев Александр Леонидович [27.08.2013]

Функция НетПользователейВБазе() Экспорт
	
	Массив = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Возврат Массив.Количество()=0;
	
КонецФункции

// Возвращает массив документов
// подвязанных к указанному
// dmn 2011_11_01
Функция НайтиПодчиненныеДокументы(ОснованиеСсылка, СтрокаМетаданные, ИмяРеквизита) Экспорт
	
	Если ОснованиеСсылка.Пустая() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	" + СтрокаМетаданные + " КАК Таблица
	|ГДЕ
	|	Таблица."+ИмяРеквизита+" = &ОснованиеСсылка";
	Запрос.УстановитьПараметр("ОснованиеСсылка", ОснованиеСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // НайтиПодчиненныеДокументы()

// Формирует реквизиты организации.
// В основном для печатных форм
//
// Параметры
//  Организация  - СправочникСсылкаОрганизация - организация
//                 реквизиты которой получаем
//
// Возвращаемое значение:
//   Структура   - структура с реквизитами организации
//
Функция ПолучитьРеквизитыОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Справочник.Организации
	|ГДЕ
	|	Ссылка = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Результат.Вставить("ОГРН", Выборка.ОГРН);
	Результат.Вставить("ДействуетНаОсновании", Выборка.ДействуетНаОсновании);
	Результат.Вставить("ДатаВыдачиОГРН", Формат(Выборка.ДатаВыдачиОГРН, "ДЛФ=DD"));
	Результат.Вставить("ИНН", Выборка.ИНН);
	Результат.Вставить("КПП", Выборка.КПП);
	Результат.Вставить("БИК", Выборка.БИК);
	Результат.Вставить("РасчетныйСчет", Выборка.РасчетныйСчет);
	Результат.Вставить("КорреспондирующийСчет", Выборка.КорреспондирующийСчет);
	Результат.Вставить("ПочтовыйИндекс", Выборка.ПочтовыйИндекс);
	Результат.Вставить("ЮридическийАдрес", Выборка.ЮридическийАдрес);
	Результат.Вставить("Банк", Выборка.Банк);
	Результат.Вставить("ПолноеНаименованиеОрганизации", Выборка.ПолноеНаименование);
	Результат.Вставить("КраткоеНаименование", Выборка.Наименование);
	Результат.Вставить("НаселенныйПункт", Выборка.НаселенныйПункт);
	Результат.Вставить("ТелефонОрганизации", Выборка.ТелефонОфиса);
	
	Возврат Результат;
	
КонецФункции // ПолучитьРеквизитыОрганизации()

Функция НастройкаПользователя(Пользователь, ИмяПараметра) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Значения.Значение,
	|	Настройки.ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК Значения
	|		ПО (Значения.Настройка = Настройки.Ссылка)
	|ГДЕ
	|	Значения.Пользователь = &Пользователь
	|	И Настройки.Наименование = &ИмяПараметра";
	Запрос.Параметры.Вставить("Пользователь",Пользователь);
	Запрос.Параметры.Вставить("ИмяПараметра",ИмяПараметра);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Если ТаблицаЗначений.Количество()>0 Тогда
		СтрокаТаблицы = ТаблицаЗначений[0];
		Если СтрокаТаблицы.Значение = Null ИЛИ СтрокаТаблицы.Значение = Неопределено Тогда
			Значение = СтрокаТаблицы.ТипЗначения.ПривестиЗначение(Значение);
		Иначе
			Значение = СтрокаТаблицы.Значение;
		КонецЕсли;
	Иначе
		Значение = Неопределено;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьДолгКонтрагентаНаДату(Контрагент, Период, СписокПодразделений) Экспорт
	
	Ответ = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			&Период,
	|			Контрагент = &Контрагент
	|				И Подразделение В (&СписокПодразделений)) КАК ВзаиморасчетыСКонтрагентамиОстатки";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Ответ = Выборка.СуммаОстаток;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции // ПолучитьДолгКонтрагентаНаДату()

Функция УстановитьНастройкуПользователя(Пользователь, ИмяНастройки, Значение) Экспорт
	
	Настройка = ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию(ИмяНастройки);
	Если Настройка <> ПланыВидовХарактеристик.НастройкиПользователей.ПустаяСсылка() Тогда
		
		Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
		Набор.Отбор.Пользователь.Установить(Пользователь);
		Набор.Отбор.Настройка.Установить(Настройка);
		Запись = Набор.Добавить();
		Запись.Пользователь = Пользователь;
		Запись.Настройка = Настройка;
		Запись.Значение = Значение;
		Набор.Записать();
		
	КонецЕсли;
	
КонецФункции // УстановитьНастройкуПользователя()

Функция ПолучитьДоверенностьСотрудника(Сотрудник, Организация) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НомерДоверенности", "Нет");
	Результат.Вставить("ДатаДоверенности", "Нет");
	
	СтрокаДоверенность = Сотрудник.Доверенности.Найти(Организация);
	Если НЕ СтрокаДоверенность = Неопределено Тогда
		Результат.НомерДоверенности = СтрокаДоверенность.НомерДоверенности;
		Результат.ДатаДоверенности = Формат(СтрокаДоверенность.ДатаДоверенности, "ДЛФ=D");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьДоверенностьСотрудника()

Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции

Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	Возврат Результат;
	
КонецФункции

// Формирует структуру со списоком всей доступной номенклатуры для деталей и 3д редактора
Функция ОтборФиксированныхНоменклатурныхГрупп(Подразделение) Экспорт
	
	СписокНоменклатурныхГрупп = Новый СписокЗначений;
	
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП26);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП22);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП16);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП10);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КантТ);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка045_19);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_19);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_35);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ДВП);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Столешница);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_45);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_42);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Гравировка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Зеркало);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Стекло);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиБезДоводчика);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиДляСтеколБезДоводчика);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиДляСтеколСДоводчиком);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиСДоводчиком);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Ручка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.АГТПрофиль);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КромкаМДФ);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КантАлюминиевый);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.МДФ8);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.МДФ18);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.АГТПанель);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЩитМебельный);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кожа);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.РамочныйАлюминий);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Пристенок);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиПоворотные);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.СтеклоДляСкругляемогоФасада);
	
	МассивыНоменклатурныхГрупп = ОтборНоменклатурныхГрупп(СписокНоменклатурныхГрупп, Подразделение);
	
	Возврат МассивыНоменклатурныхГрупп;
	
КонецФункции // ОтборФиксированныхНоменклатурныхГрупп()

// Формирует структуру со списоком доступной номенклатуры
// Параметры
// СписокНоменклатурныхГрупп  - СписокЗначений
// Подразделение  - Справочник.Подразделение
Функция ОтборНоменклатурныхГрупп(СписокНоменклатурныхГрупп, Подразделение) Экспорт
	
	СтруктураМассивов = Новый Структура;
	Для каждого НоменклатурнаяГруппа Из СписокНоменклатурныхГрупп Цикл
		ИмяГруппы = Справочники.НоменклатурныеГруппы.ПолучитьИмяПредопределенного(НоменклатурнаяГруппа.Значение);
		СтруктураМассивов.Вставить(ИмяГруппы, Новый Массив);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатурныхГрупп", СписокНоменклатурныхГрупп);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.Текст =    
	"ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.НоменклатурнаяГруппа В(&СписокНоменклатурныхГрупп)
	|	И СпрНоменклатура.Базовый
	|	И СпрНоменклатура.Подразделение = &Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпрНоменклатура.Наименование
	|ИТОГИ ПО
	|	НоменклатурнаяГруппа";
	
	Результат = Запрос.Выполнить();
	ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИтоги.Следующий() Цикл
		
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ИмяГруппы = Справочники.НоменклатурныеГруппы.ПолучитьИмяПредопределенного(ВыборкаИтоги.НоменклатурнаяГруппа);
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураМассивов[ИмяГруппы].Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтруктураМассивов;
	
КонецФункции // ОтборНоменклатурныхГрупп()

Функция ОтборНоменклатурныхГруппРедактор(СписокНоменклатурныхГрупп, Подразделение) Экспорт
	
	МассивЭлементов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатурныхГрупп", СписокНоменклатурныхГрупп);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(НастройкиНоменклатуры.ПодЗаказ, 0) КАК ПодЗаказ
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиНоменклатуры.СрезПоследних(&Период, Подразделение = &Подразделение) КАК НастройкиНоменклатуры
	|		ПО (НастройкиНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка)
	|ГДЕ
	|	СпрНоменклатура.НоменклатурнаяГруппа В ИЕРАРХИИ(&СписокНоменклатурныхГрупп)
	|	И СпрНоменклатура.Базовый
	|	И СпрНоменклатура.Подразделение = &Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодЗаказ,
	|	СпрНоменклатура.НоменклатурнаяГруппа,
	|	СпрНоменклатура.Наименование
	|ИТОГИ ПО
	|	НоменклатурнаяГруппа";
	
	Результат = Запрос.Выполнить();
	ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИтоги.Следующий() Цикл
		
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			Стр = Новый Структура();
			Стр.Вставить("Ссылка",Выборка.Ссылка);
			Стр.Вставить("ПодЗаказ",Выборка.ПодЗаказ);
			
			МассивЭлементов.Добавить(Стр);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивЭлементов;
	
КонецФункции

Функция ПолучитьИмяХТМЛ (Файл) Экспорт
	
	ПутьХТМЛ = Файл.Наименование + Файл.Расширение;
	
	Возврат ПутьХТМЛ;
	
КонецФункции

Функция ПолучитьПредставлениеДокумента(Данные, Представление, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Данные.Номер);
	Дата = Формат(Данные.Дата, "ДФ=dd.MM.yy");
	ИмяДокумента = Данные.Ссылка.Метаданные().Синоним;
	Представление = ИмяДокумента + " № " + Номер + " от " + Дата;
	
КонецФункции

Функция ПолучитьОстатокОперационнойКассыНаДату(Период, ОперационнаяКасса, Подразделение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат 0;
	КонецЕсли;
	
	Ответ = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ОперационнаяКасса", ОперационнаяКасса);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УправленческийОстатки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ОперационнаяКасса),
	|			,
	|			Субконто2 = &ОперационнаяКасса
	|				И Подразделение = &Подразделение) КАК УправленческийОстатки";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Ответ = Выборка.СуммаОстаток;
	КонецЕсли;
	
	Возврат Ответ;
	
	
КонецФункции

// Перемещает материалы со склада в производство, и тут же принимает расходы
//
// Параметры
//  <ТаблицаМатериалов>  - <ТаблицаЗначений> - <материалы для перемещения>
//  <Подразделение>  - <СправочникСсылка.Подразделения> - <подразделение>
//  <Склад>  - <СправочникСсылка.Склады> - <склад>
//  <Движения>  - <КоллекцияДвижений> - <коллекция движений регистратор>
//  <МоментВремени>  - <МоментВремени> - <момент времени регистратора>
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   - <таблица с недостающими материалами>
//
Функция ПеремещениеМатериаловВПроизводство(ТаблицаМатериалов, Подразделение, Склад, Движения, МоментВремени) Экспорт
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Себестоимость", 0);
	
	Отказ = Ложь;
	
	НехваткаМатериалов = Новый ТаблицаЗначений;
	НехваткаМатериалов.Колонки.Добавить("Номенклатура");
	НехваткаМатериалов.Колонки.Добавить("КоличествоТребуется");
	НехваткаМатериалов.Колонки.Добавить("КоличествоОстаток");
	НехваткаМатериалов.Колонки.Добавить("НомерСтроки");
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Склады);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Управленческий");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Период", МоментВремени.Дата);
	ЭлементБлокировки.УстановитьЗначение("Подразделение", Подразделение);
	ЭлементБлокировки.УстановитьЗначение("Счет", ПланыСчетов.Управленческий.МатериалыНаСкладе);
	ЭлементБлокировки.УстановитьЗначение(ПланыВидовХарактеристик.ВидыСубконто.Склады, Склад);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ТЗ", ТаблицаМатериалов);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СписокМатериалов.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	СписокМатериалов.Количество,
	|	СписокМатериалов.НомерСтроки
	|ПОМЕСТИТЬ СписокМатериалов
	|ИЗ
	|	&ТЗ КАК СписокМатериалов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокМатериалов.Номенклатура,
	|	СписокМатериалов.Количество,
	|	СписокМатериалов.НомерСтроки,
	|	ЕСТЬNULL(УправленческийОстатки.СуммаОстаток, 0) КАК СтоимостьОстаток,
	|	ЕСТЬNULL(УправленческийОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	СписокМатериалов.Номенклатура.БазоваяНоменклатура КАК БазоваяНоменклатура,
	|	СписокМатериалов.Номенклатура.Базовый КАК Базовый,
	|	СписокМатериалов.Номенклатура.КоэффициентБазовых КАК КоэффициентБазовых
	|ИЗ
	|	СписокМатериалов КАК СписокМатериалов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(
	|				&МоментВремени,
	|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.МатериалыНаСкладе),
	|				&ВидыСубконто,
	|				Подразделение = &Подразделение
	|					И Субконто2 = &Склад
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							т.Номенклатура
	|						ИЗ
	|							СписокМатериалов КАК т)) КАК УправленческийОстатки
	|		ПО СписокМатериалов.Номенклатура = УправленческийОстатки.Субконто1
	|ГДЕ
	|	НЕ СписокМатериалов.Номенклатура.Неноменклатурный";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоОстаток < Выборка.Количество Тогда
			
			НоваяСтрока = НехваткаМатериалов.Добавить();
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.НомерСтроки = Выборка.НомерСтроки;
			НоваяСтрока.КоличествоТребуется = Выборка.Количество;
			НоваяСтрока.КоличествоОстаток = Выборка.КоличествоОстаток;
			
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			Если Выборка.КоличествоОстаток <> 0 Тогда
				Себестоимость = Выборка.Количество / Выборка.КоличествоОстаток * Выборка.СтоимостьОстаток;
			Иначе
				Себестоимость = 0;
			КонецЕсли;
			
			Если Выборка.Базовый Тогда
				Номенклатура = Выборка.Номенклатура;
				Количество = Выборка.Количество;
			Иначе
				Номенклатура = Выборка.БазоваяНоменклатура;
				Количество = Выборка.Количество * Выборка.КоэффициентБазовых;
			КонецЕсли;
			
			// перевод на основное производство
			
			Проводка = Движения.Управленческий.Добавить();
			Проводка.Подразделение = Подразделение;
			Проводка.Период = МоментВремени.Дата;
			
			Проводка.СчетДт = ПланыСчетов.Управленческий.ОсновноеПроизводство;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = Номенклатура;
			Проводка.КоличествоДт = Количество;
			
			Проводка.СчетКт = ПланыСчетов.Управленческий.МатериалыНаСкладе;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = Выборка.Номенклатура;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Склады] = Склад;
			Проводка.КоличествоКт = Выборка.Количество;
			
			Проводка.Сумма = Себестоимость;
			
			// и сразу же расходы, но без количества
			
			Проводка = Движения.Управленческий.Добавить();
			
			Проводка.Подразделение = Подразделение;
			Проводка.Период = МоментВремени.Дата;
			
			Проводка.СчетДт = ПланыСчетов.Управленческий.Расходы;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Справочники.СтатьиДоходовРасходов.РасходыСебестоимостьМатериалаПроизводство;
			
			Проводка.СчетКт = ПланыСчетов.Управленческий.ОсновноеПроизводство;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = Номенклатура;
			
			Проводка.Сумма = Себестоимость;
			
			СтруктураРезультат.Себестоимость = СтруктураРезультат.Себестоимость + Себестоимость;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРезультат.Вставить("тзНехватка", НехваткаМатериалов);
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Добавление показателей сотрудникам за договоры
//
// Параметры:
//  Движение  - РегистрБухгалтерииНаборЗаписей.Управленческий
//
//  Договор  - Документ.Договор - Если проводится договор - то ссылка на него, если соглашение - реквизит "договор"
//
//  Сумма  - Число - Сумма проводимого документа
//
//  Коментарий  - Строка - Коментарий проводимого документа
//
Процедура СформироватьПоказателиСотрудников(Движения, Ссылка) Экспорт
	
	Дата = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Дата");
	Сумма = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "СуммаДокумента");
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Договор") Тогда
		
		Договор = Ссылка;
		Соглашение = Ложь;
		
	Иначе
		
		Договор = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Договор");
		Соглашение = Истина;
		
	КонецЕсли;
	
	СвойстваДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Договор, "Подразделение, Автор, Поделиться, Комментарий, Спецификация");
	
	ДобавитьПоказательСотрудника(СвойстваДокумента.Подразделение, Договор.Автор.ФизическоеЛицо, Движения, Дата, Сумма, 1, Соглашение);
	
КонецПроцедуры // ПроведениеДоговораИлиДопСоглашения()

// <Описание процедуры>
//
// Параметры:
//  Ссылка  - Документы.Договор, Документы.ДополнительноеСоглашение
//
//  СвойстваДокумента  - Структура - Значения реквизитов передаваемого документа
//
//  Проводки  - РегистрБухгалтерииНаборЗаписей.Управленческий - новая строка
//
//  Дата  - Дата - Дата проводимого документа
//
// Соглашение  - Булево - Договор или ДопСоглашение
//
Процедура ДобавитьПоказательСотрудника(Подразделение, ФизическоеЛицо, Движения, Дата, Сумма, Количество, Соглашение)
	
	// { Васильев Александр Леонидович [21.10.2013]
	// изменилась логика
	// Количество заключенных договоров отдельно, стоимость отдельно (разные показатели)
	// значение показателя -- ресурс регистра Сумма
	// } Васильев Александр Леонидович [21.10.2013]
	
	Если НЕ Соглашение Тогда
		Проводки = Движения.Управленческий.Добавить();
		Проводки.Период = Дата;
		Проводки.Подразделение = Подразделение;
		Проводки.СчетДт = ПланыСчетов.Управленческий.ПоказателиСотрудника;
		
		Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ВидыПоказателейСотрудников] = Перечисления.ВидыПоказателейСотрудников.КоличествоЗаключенныхДоговоров;
		Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФизическиеЛица] = ФизическоеЛицо;
		
		Проводки.Сумма = Количество;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПроведениеДоговора()

Функция ЗаполнитьРеквизитОтверстиями(Данные, СтрокаОтверстий, ШиринаДетали, ВысотаДетали, ПоворотДетали = Неопределено) Экспорт 
	
	Если (ПоворотДетали <> Неопределено) И ПоворотДетали Тогда
		ТаблицаОтверстий = ОпределитьШагОтверстия(ЗначениеИзСтрокиВнутр(СтрокаОтверстий), ВысотаДетали, ШиринаДетали);
	Иначе
		ТаблицаОтверстий = ОпределитьШагОтверстия(ЗначениеИзСтрокиВнутр(СтрокаОтверстий), ШиринаДетали, ВысотаДетали);
	КонецЕсли;
	
	Если ТаблицаОтверстий.Количество() = 0 Тогда
		Возврат Данные;
	КонецЕсли;
	
	СтрокаСверху = ТаблицаОтверстий.Найти("Сверху", "РасположениеОтверстия");
	СтрокаСнизу = ТаблицаОтверстий.Найти("Снизу", "РасположениеОтверстия");
	СтрокаСлева = ТаблицаОтверстий.Найти("Слева", "РасположениеОтверстия");
	СтрокаСправа = ТаблицаОтверстий.Найти("Справа", "РасположениеОтверстия");
	СтрокаЦентр = ТаблицаОтверстий.Найти("Центр", "РасположениеОтверстия");
	СтрокаЦентр7 = ТаблицаОтверстий.Найти("Центр7", "РасположениеОтверстия");
	СтрокаЦентр8 = ТаблицаОтверстий.Найти("Центр8", "РасположениеОтверстия");
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Данные.Вставить("Разделитель", "☻");
		ЭтоСтруктура = Истина;
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		Данные = "";
		ЭтоСтруктура = Ложь;
	КонецЕсли;
	
	Европаз = ТаблицаОтверстий.НайтиСтроки(Новый Структура ("ВидОтверстий", Перечисления.ВидыОтверстий.Европаз));
	Для Каждого Строка Из Европаз Цикл
		Если Строка.РасположениеОтверстия = "Сверху" Тогда
			Если ЭтоСтруктура Тогда
				Данные.ЕвроПазВерх = "1";
			Иначе
				Данные = "";
			КонецЕсли;
			СтрокаСверху = Неопределено;
		ИначеЕсли Строка.РасположениеОтверстия = "Снизу" Тогда
			Если ЭтоСтруктура Тогда
				Данные.ЕвроПазНиз = "1";
			Иначе
				Данные = "";
			КонецЕсли;	
			СтрокаСнизу = Неопределено;
		ИначеЕсли Строка.РасположениеОтверстия = "Слева" Тогда
			Если ЭтоСтруктура Тогда
				Данные.ЕвроПазЛево = "1";
			Иначе
				Данные = "";
			КонецЕсли;
			СтрокаСлева = Неопределено;
		ИначеЕсли Строка.РасположениеОтверстия = "Справа" Тогда
			Если ЭтоСтруктура Тогда
				Данные.ЕвроПазПраво = "1";
			Иначе
				Данные = "";
			КонецЕсли;
			СтрокаСправа = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаСверху) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаСверху.ВидОтверстий);
		Если ЭтоСтруктура Тогда
			Данные.Вставить("Сторона1", ВидОтверстийЗначение + "_1_" + СтрокаСверху.Количество + "_" + СтрокаСверху.Смещение + "_" + СтрокаСверху.Шаг + "_" + СтрокаСверху.Отступ);	
		Иначе
			Данные = Данные + ВидОтверстийЗначение + "_1_" + СтрокаСверху.Количество + "_" + СтрокаСверху.Смещение + "_" + СтрокаСверху.Шаг + "_" + СтрокаСверху.Отступ + "#";	
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаСнизу) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаСнизу.ВидОтверстий);
		Если ЭтоСтруктура Тогда
			Данные.Вставить("Сторона2", ВидОтверстийЗначение + "_2_" + СтрокаСнизу.Количество + "_" + СтрокаСнизу.Смещение + "_" + СтрокаСнизу.Шаг + "_" + СтрокаСнизу.Отступ);	
		Иначе
			Данные = Данные + ВидОтверстийЗначение + "_2_" + СтрокаСнизу.Количество + "_" + СтрокаСнизу.Смещение + "_" + СтрокаСнизу.Шаг + "_" + СтрокаСнизу.Отступ + "#";	
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаСлева) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаСлева.ВидОтверстий);
		Если ЭтоСтруктура Тогда
			Данные.Вставить("Сторона3", ВидОтверстийЗначение + "_3_" + СтрокаСлева.Количество + "_" + СтрокаСлева.Смещение + "_" + СтрокаСлева.Шаг + "_" + СтрокаСлева.Отступ);	
		Иначе
			Данные = Данные + ВидОтверстийЗначение + "_3_" + СтрокаСлева.Количество + "_" + СтрокаСлева.Смещение + "_" + СтрокаСлева.Шаг + "_" + СтрокаСлева.Отступ + "#";	
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаСправа) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаСправа.ВидОтверстий);
		Если ЭтоСтруктура Тогда
			Данные.Вставить("Сторона4", ВидОтверстийЗначение + "_4_" + СтрокаСправа.Количество + "_" + СтрокаСправа.Смещение + "_" + СтрокаСправа.Шаг + "_" + СтрокаСправа.Отступ);	
		Иначе
			Данные = Данные + ВидОтверстийЗначение + "_4_" + СтрокаСправа.Количество + "_" + СтрокаСправа.Смещение + "_" + СтрокаСправа.Шаг + "_" + СтрокаСправа.Отступ + "#";	
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЦентр) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаЦентр.ВидОтверстий);
		ДопСтрока = Строка(СтрокаЦентр.ВысотаПервойЛинии);
		Если ВидОтверстийЗначение = "1" Тогда
			Если СтрокаЦентр.ВысотаВторойЛинии > 0 Тогда
				ДопСтрока = ДопСтрока + "_" + Строка(СтрокаЦентр.ВысотаВторойЛинии);
			КонецЕсли;
		ИначеЕсли ВидОтверстийЗначение = "5" Тогда
			ДопСтрока = ДопСтрока + "_" + Строка(СтрокаЦентр.КоличествоКолонок);
		КонецЕсли;
		Если ЭтоСтруктура Тогда
			Данные.Вставить("Сторона5", ВидОтверстийЗначение + "_5_" + СтрокаЦентр.Количество + "_" + СтрокаЦентр.Смещение + "_" + СтрокаЦентр.Шаг + "_" + ДопСтрока + "_" + СтрокаЦентр.Отступ);
		Иначе
			Данные = Данные + ВидОтверстийЗначение + "_5_" + СтрокаЦентр.Количество + "_" + СтрокаЦентр.Смещение + "_" + СтрокаЦентр.Шаг + "_" + ДопСтрока + "_" + СтрокаЦентр.Отступ + "#";
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЦентр7) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаЦентр7.ВидОтверстий);
		Если СтрокаЦентр7.ВысотаПервойЛинии > 0 Тогда
			Если ЭтоСтруктура Тогда
				Данные.Вставить("Сторона6", ВидОтверстийЗначение + "_5_" + СтрокаЦентр7.Количество + "_" + СтрокаЦентр7.Смещение + "_" + СтрокаЦентр7.Шаг + "_" + СтрокаЦентр7.ВысотаПервойЛинии + "_1_" + СтрокаЦентр7.Отступ);
			Иначе
				Данные = Данные + ВидОтверстийЗначение + "_5_" + СтрокаЦентр7.Количество + "_" + СтрокаЦентр7.Смещение + "_" + СтрокаЦентр7.Шаг + "_" + СтрокаЦентр7.ВысотаПервойЛинии + "_1_" + СтрокаЦентр7.Отступ + "#";
			КонецЕсли;
		КонецЕсли;
		Если СтрокаЦентр7.ВысотаВторойЛинии > 0 Тогда
			Если ЭтоСтруктура Тогда
				Данные.Вставить("Сторона7", ВидОтверстийЗначение + "_5_" + СтрокаЦентр7.Количество + "_" + СтрокаЦентр7.Смещение + "_" + СтрокаЦентр7.Шаг + "_" + СтрокаЦентр7.ВысотаВторойЛинии + "_1_" + СтрокаЦентр7.Отступ);
			Иначе
				Данные = Данные + ВидОтверстийЗначение + "_5_" + СтрокаЦентр7.Количество + "_" + СтрокаЦентр7.Смещение + "_" + СтрокаЦентр7.Шаг + "_" + СтрокаЦентр7.ВысотаВторойЛинии + "_1_" + СтрокаЦентр7.Отступ + "#";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЦентр8) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаЦентр8.ВидОтверстий);
		Если СтрокаЦентр8.ВысотаПервойЛинии > 0 Тогда
			Если ЭтоСтруктура Тогда
				Данные.Вставить("Сторона8", ВидОтверстийЗначение + "_5_" + СтрокаЦентр8.Количество + "_" + СтрокаЦентр8.Смещение + "_" + СтрокаЦентр8.Шаг + "_" + СтрокаЦентр8.ВысотаПервойЛинии + "_1_" + СтрокаЦентр8.Отступ);
			Иначе
				Данные = Данные + ВидОтверстийЗначение + "_5_" + СтрокаЦентр8.Количество + "_" + СтрокаЦентр8.Смещение + "_" + СтрокаЦентр8.Шаг + "_" + СтрокаЦентр8.ВысотаПервойЛинии + "_1_" + СтрокаЦентр8.Отступ + "#";
			КонецЕсли;
		КонецЕсли;
		Если СтрокаЦентр8.ВысотаВторойЛинии > 0 Тогда
			Если ЭтоСтруктура Тогда
				Данные.Вставить("Сторона9", ВидОтверстийЗначение + "_5_" + СтрокаЦентр8.Количество + "_" + СтрокаЦентр8.Смещение + "_" + СтрокаЦентр8.Шаг + "_" + СтрокаЦентр8.ВысотаВторойЛинии + "_1_" + СтрокаЦентр8.Отступ);
			Иначе
				Данные = Данные + ВидОтверстийЗначение + "_5_" + СтрокаЦентр8.Количество + "_" + СтрокаЦентр8.Смещение + "_" + СтрокаЦентр8.Шаг + "_" + СтрокаЦентр8.ВысотаВторойЛинии + "_1_" + СтрокаЦентр8.Отступ + "#";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьСтруктуруЕвропазов(СтруктураОтверстий) Экспорт
	
	ТаблицаОтверстий = ЗначениеИзСтрокиВнутр(СтруктураОтверстий);
	
	СтруктураПоиска = Новый Структура("ВидОтверстий", Перечисления.ВидыОтверстий.Европаз);
	Европаз = ТаблицаОтверстий.НайтиСтроки(СтруктураПоиска);
	
	СтруктураЕвропазов = Новый Структура;
	СтруктураЕвропазов.Вставить("Сверху","0");
	СтруктураЕвропазов.Вставить("Снизу","0");
	СтруктураЕвропазов.Вставить("Слева","0");
	СтруктураЕвропазов.Вставить("Справа","0");
	
	Для Каждого Элемент Из Европаз Цикл
		Если Элемент.РасположениеОтверстия = "Сверху" Тогда
			СтруктураЕвропазов.Удалить("Сверху");
			СтруктураЕвропазов.Вставить("Сверху", Элемент.Количество);
		ИначеЕсли Элемент.РасположениеОтверстия = "Снизу" Тогда
			СтруктураЕвропазов.Удалить("Снизу");
			СтруктураЕвропазов.Вставить("Снизу", Элемент.Количество);
		ИначеЕсли Элемент.РасположениеОтверстия = "Слева" Тогда
			СтруктураЕвропазов.Удалить("Слева");
			СтруктураЕвропазов.Вставить("Слева", Элемент.Количество);
		ИначеЕсли Элемент.РасположениеОтверстия = "Справа" Тогда
			СтруктураЕвропазов.Удалить("Справа");
			СтруктураЕвропазов.Вставить("Справа", Элемент.Количество);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураЕвропазов;
	
КонецФункции

Функция ПолучитьВидОтверстийЗначение(ВидОтверстий)
	
	Если ВидОтверстий = Перечисления.ВидыОтверстий.ПазыПетель Тогда Возврат "3";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.ТорцеваяПрисадка Тогда Возврат "2";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.ПрисадкаПодЕвровинт Тогда Возврат "1";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.ПрисадкаПодСтяжки Тогда Возврат "4";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.ПрисадкаПодПолкодержательАвто Тогда Возврат "5";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.Европаз Тогда Возврат "6";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.ПрисадкаПодПолкодержатель Тогда Возврат "7";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.ОбратнаяПрисадка Тогда Возврат "8";
	КонецЕсли;
	
КонецФункции

Функция ОпределитьШагОтверстия(ТаблицаОтверстий, ШиринаДетали, ВысотаДетали) 
	
	Для Каждого СтрокаОтверстий Из ТаблицаОтверстий Цикл
		
		РасположениеОтверстия = СтрокаОтверстий.РасположениеОтверстия;
		
		Если РасположениеОтверстия = "Слева"
			ИЛИ РасположениеОтверстия = "Справа" Тогда
			Размер = ВысотаДетали;
		КонецЕсли;
		
		Если РасположениеОтверстия = "Сверху"
			ИЛИ РасположениеОтверстия = "Снизу"
			ИЛИ РасположениеОтверстия = "Центр"
			ИЛИ РасположениеОтверстия = "Центр7"
			ИЛИ РасположениеОтверстия = "Центр8" Тогда
			Размер = ШиринаДетали;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Размер) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ПазыПетель")  
			ИЛИ СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ТорцеваяПрисадка") Тогда 
			
			Если СтрокаОтверстий.Количество > 0 И СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ПазыПетель") Тогда
				СреднийИнтервал = 100000; // код определения шага ниже
			ИначеЕсли СтрокаОтверстий.Количество > 1 И СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ТорцеваяПрисадка") Тогда	
				СреднийИнтервал = Цел((Размер - (СтрокаОтверстий.Смещение + СтрокаОтверстий.Смещение)) / (СтрокаОтверстий.Количество - 1));
			Иначе
				СреднийИнтервал = ?(СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ТорцеваяПрисадка"), 32, 0);
			КонецЕсли;
			
			//RonEXI: Эту проверку пока убрал, нужно перенести в "Перед сохранением спецификации".
			//Если СреднийИнтервал < 32 Тогда
			//	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Нет возможности расположить количество отверстий равное - %1 на стороне размером - %2 и смещением - %3", СтрокаОтверстий.Количество, Размер, СтрокаОтверстий.Смещение);
			//	ВызватьИсключение Текст;
			//	ТаблицаОтверстий.Удалить(СтрокаОтверстий);
			//Иначе
			Шаг = Цел(СреднийИнтервал / 32);
			СтрокаОтверстий.Шаг = Шаг * 32;
			////КонецЕсли;
			
			//Новый Шаг для петель.
			
			ЕстьКолонкаОтступа = ТаблицаОтверстий.Колонки.Найти("ОтступСлева") <> Неопределено;
			
			Если СтрокаОтверстий.Количество > 0 И СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ПазыПетель") Тогда
				
				Если СтрокаОтверстий.Количество > 1 Тогда
					
					Если ЕстьКолонкаОтступа И (СтрокаОтверстий.ОтступСлева > 0 ИЛИ СтрокаОтверстий.ОтступСправа > 0) Тогда
						СтрокаОтверстий.Шаг = Окр((Размер - (СтрокаОтверстий.ОтступСлева+СтрокаОтверстий.ОтступСправа))/(СтрокаОтверстий.Количество-1));
						СтрокаОтверстий.Смещение = СтрокаОтверстий.ОтступСлева;
					Иначе
						СтрокаОтверстий.Шаг = Окр((Размер - 200)/(СтрокаОтверстий.Количество-1));
					КонецЕсли;
					
				Иначе
					Если ЕстьКолонкаОтступа И СтрокаОтверстий.ОтступСлева > 0 Тогда
						СтрокаОтверстий.Шаг = 0;
					Иначе
						СтрокаОтверстий.Смещение = 100;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ПрисадкаПодЕвровинт") 
			ИЛИ СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ПрисадкаПодСтяжки") Тогда
			СтрокаОтверстий.Смещение = ВернутьСмещение(Размер);
			Если СтрокаОтверстий.Количество > 1 Тогда
				СтрокаОтверстий.Шаг = Окр((Размер - 2 * СтрокаОтверстий.Смещение) / (СтрокаОтверстий.Количество - 1), 0);
			Иначе
				СтрокаОтверстий.Шаг = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если РасположениеОтверстия = "Центр"
			И СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ПрисадкаПодПолкодержательАвто") Тогда
			Если СтрокаОтверстий.Количество > Цел((ВысотаДетали - 200) / 50) + 1 Тогда
				СтрокаОтверстий.Количество = Цел((ВысотаДетали - 200) / 50) + 1;
			КонецЕсли;
			СтрокаОтверстий.КоличествоКолонок = СтрокаОтверстий.Количество;
			СтрокаОтверстий.ВысотаПервойЛинии = ВысотаДетали - 50 - СтрокаОтверстий.КоличествоКолонок * 50;
			СтрокаОтверстий.Смещение = 64;
			// { Васильев Александр Леонидович [25.09.2015]
			// Решение Жульдикова Констатнита.
			// Он предложил такие габариты и координаты ответрстий. :)
			Если Размер >= 186 И Размер <= 215 Тогда СтрокаОтверстий.Шаг = 96; СтрокаОтверстий.Количество = 2;
			ИначеЕсли Размер >= 216 И Размер <= 250 Тогда СтрокаОтверстий.Шаг = 128; СтрокаОтверстий.Количество = 2;
			ИначеЕсли Размер >= 251 И Размер <= 285 Тогда СтрокаОтверстий.Шаг = 160; СтрокаОтверстий.Количество = 2;
			ИначеЕсли Размер >= 286 И Размер <= 320 Тогда СтрокаОтверстий.Шаг = 192; СтрокаОтверстий.Количество = 2;
			ИначеЕсли Размер >= 321 И Размер <= 350 Тогда СтрокаОтверстий.Шаг = 224; СтрокаОтверстий.Количество = 2;
			ИначеЕсли Размер >= 351 И Размер <= 384 Тогда СтрокаОтверстий.Шаг = 256; СтрокаОтверстий.Количество = 2;
			ИначеЕсли Размер >= 385 И Размер <= 416 Тогда СтрокаОтверстий.Шаг = 288; СтрокаОтверстий.Количество = 2;
			ИначеЕсли Размер >= 417 И Размер <= 477 Тогда СтрокаОтверстий.Шаг = 160; СтрокаОтверстий.Количество = 3;
			ИначеЕсли Размер >= 478 И Размер <= 541 Тогда СтрокаОтверстий.Шаг = 192; СтрокаОтверстий.Количество = 3;
			ИначеЕсли Размер >= 542 И Размер <= 605 Тогда СтрокаОтверстий.Шаг = 224; СтрокаОтверстий.Количество = 3;
			ИначеЕсли Размер >= 606 И Размер <= 650 Тогда СтрокаОтверстий.Шаг = 256; СтрокаОтверстий.Количество = 3;
				// } Васильев Александр Леонидович [25.09.2015]
			Иначе
				ТекстСообщения = "Ошибка автоматического размещения присадок под полкодержатели"
				+ Символы.ПС + "Измените размер детали или проставьте присадки вручную";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Элементы.Детали.ТекущиеДанные.ВысотаДетали");
				СтрокаОтверстий.Шаг = 0;
				СтрокаОтверстий.Количество = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ПрисадкаПодПолкодержатель")
			ИЛИ СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ОбратнаяПрисадка") Тогда
			Если СтрокаОтверстий.Количество > 1 Тогда
				СтрокаОтверстий.Шаг = Окр((Размер - 2 * СтрокаОтверстий.Смещение) / (СтрокаОтверстий.Количество - 1), 0);
			Иначе
				СтрокаОтверстий.Шаг = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОтверстий;
	
КонецФункции

Функция ВернутьСмещение(Размер)
	
	Если Размер > 1800 Тогда Возврат 150;
	ИначеЕсли Размер > 900 Тогда Возврат 120;
	ИначеЕсли Размер > 600 Тогда Возврат 70;
	ИначеЕсли Размер > 300 Тогда Возврат 64;
	ИначеЕсли Размер > 200 Тогда Возврат 50;
	Иначе Возврат 45;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОборотДилераЗаМесяц(Период, Контрагент, Подразделение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Оборот = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УправленческийОбороты.СуммаОборотКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Месяц,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВзаиморасчетыСПокупателями),
	|			,
	|			Подразделение = &Подразделение
	|				И Субконто1 = &Контрагент,
	|			,
	|			) КАК УправленческийОбороты";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Оборот = Выборка.Сумма;
	КонецЕсли;
	
	Возврат Оборот;
	
КонецФункции

Функция ПолучитьСпецификацииПоСтатусу (Подразделение, Статус) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусСпецификацииСрезПоследних.Спецификация
	|ИЗ
	|	РегистрСведений.СтатусСпецификации.СрезПоследних(, ) КАК СтатусСпецификацииСрезПоследних
	|ГДЕ
	|	СтатусСпецификацииСрезПоследних.Спецификация.Проведен
	|	И СтатусСпецификацииСрезПоследних.Спецификация.Подразделение = &Подразделение
	|	И СтатусСпецификацииСрезПоследних.Статус = &Статус
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусСпецификацииСрезПоследних.Спецификация.ДатаИзготовления";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Статус", Статус);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура Регламентного задания
//
// перепроведение всех проведенных документов
// 
Процедура Перепроведение() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ИсточникиДанныхТаблиц = ДатыЗапретаИзмененияПовтИсп.ИсточникиДанныхДляПроверкиЗапретаИзменения();
	ИсточникиДанныхТаблиц.Колонки.Добавить("ПланыВидовХарактеристик", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.РазделыДатЗапретаИзменения"));
	
	Для Каждого Элемент Из ИсточникиДанныхТаблиц Цикл
		
		Элемент.ПланыВидовХарактеристик = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения[Элемент.Раздел]
		
	КонецЦикла;
	
	НоваяДатаЗапрета = НачалоДня(ТекущаяДата()) - 4 * 86400;
	
	ЗапросНаДатыЗапрета = Новый Запрос;
	ЗапросНаДатыЗапрета.УстановитьПараметр("ИсточникиДанныхТаблиц", ИсточникиДанныхТаблиц);
	ЗапросНаДатыЗапрета.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
	ЗапросНаДатыЗапрета.УстановитьПараметр("НоваяДатаЗапрета", НоваяДатаЗапрета);
	ЗапросНаДатыЗапрета.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ИсточникиДанныхТаблиц.ПланыВидовХарактеристик КАК ПланВидовХарактеристик.РазделыДатЗапретаИзменения) КАК Объект,
	|	ИсточникиДанныхТаблиц.Раздел,
	|	ИсточникиДанныхТаблиц.Таблица КАК Имя
	|ПОМЕСТИТЬ ИсточникиДанныхТаблиц
	|ИЗ
	|	&ИсточникиДанныхТаблиц КАК ИсточникиДанныхТаблиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникиДанныхТаблиц.Объект,
	|	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета,
	|	&НоваяДатаЗапрета,
	|	ИсточникиДанныхТаблиц.Имя
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсточникиДанныхТаблиц КАК ИсточникиДанныхТаблиц
	|		ПО ИсточникиДанныхТаблиц.Объект = ДатыЗапретаИзменения.Раздел
	|ГДЕ
	|	(ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
	|			ИЛИ (ВЫРАЗИТЬ(ДатыЗапретаИзменения.Пользователь КАК Справочник.Пользователи)) = &ТекущийПользователь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗапрета";
	
	ТаблицаДатЗапрета = ЗапросНаДатыЗапрета.Выполнить().Выгрузить();
	МассивОбщейДатыЗпарета = ТаблицаДатЗапрета.НайтиСтроки(Новый Структура("Объект", null));
	
	ДатаЗапретаРедактирования = ?(МассивОбщейДатыЗпарета.Количество() = 1, МассивОбщейДатыЗпарета[0].ДатаЗапрета, Дата(1,1,1));
	
	Запрос = Новый Запрос;
	Текст = "";
	Для Каждого Документ Из Метаданные.Документы Цикл
		
		// { Васильев Александр Леонидович [03.08.2016]
		// Эта строка нужна для перепроведения документов без даты закрытия.
		// Пока много старых документов не проводятся, после свёртки базы в 2015 году.
		//ДатаЗапретаРедактирования = Дата("00000000000000");
		// } Васильев Александр Леонидович [03.08.2016]
		
		МассивДатЗапрета = ТаблицаДатЗапрета.НайтиСтроки(Новый Структура("Имя", Документ.ПолноеИмя()));
		Если МассивДатЗапрета.Количество() > 0 Тогда
			ДатаЗапретаРедактирования = МассивДатЗапрета[0].ДатаЗапрета + 86400;
		КонецЕсли;
		
		УсловиеНаДату = " ДАТАВРЕМЯ(" + Формат(Год(ДатаЗапретаРедактирования), "ЧГ=0") + "," + Месяц(ДатаЗапретаРедактирования) + "," + День(ДатаЗапретаРедактирования) + ")";
		
		Текст = Текст + "ВЫБРАТЬ
		|	нДокумент.Ссылка,
		|	нДокумент.Дата
		|ИЗ
		|	Документ." + Документ.Имя + " КАК нДокумент
		|ГДЕ
		|	нДокумент.Проведен
		|	И нДокумент.Дата >=" + УсловиеНаДату + "
		|
		|ОБЪЕДИНИТЬ ВСЕ ";
		
	КонецЦикла;
	Запрос.Текст = Лев(Текст,СтрДлина(Текст) - СтрДлина(" ОБЪЕДИНИТЬ ВСЕ "));
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстПроведения = "Всего документов: " + Выборка.Количество() + ", Непроведенных документов: КоличествоНепроведенныхДокументов";
	КоличествоСОшибками = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Док = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			
			Док.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			
			МассивОшибки = ПолучитьСообщенияПользователю();
			
			Если ТипЗнч(МассивОшибки) = Тип("ФиксированныйМассив") Тогда
				Если МассивОшибки.Количество() > 0 Тогда
					
					КоличествоСОшибками = КоличествоСОшибками + 1;
					ТекстПроведения = СокрЛП(ТекстПроведения) + Символы.ПС + Символы.ВК + Док + " - " + МассивОшибки[0].Текст;
					
					СтрокаПоиска = ТаблицаДатЗапрета.Найти(Док.Метаданные().Полноеимя(), "Имя");
					
					Если (СтрокаПоиска <> Неопределено) И (Выборка.Дата <= СтрокаПоиска.НоваяДатаЗапрета) Тогда
						
						СтрокаПоиска.НоваяДатаЗапрета = НачалоДня(Выборка.Дата) - 86400;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			ПолучитьСообщенияПользователю(Истина);
			
		КонецПопытки;
		
	КонецЦикла;
	
	ТекстПроведения = СтрЗаменить(ТекстПроведения, "КоличествоНепроведенныхДокументов", КоличествоСОшибками);
	
	НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если Запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка() 
			ИЛИ Запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.Спецификация
			ИЛИ Запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.СлужебнаяЗаписка Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПоиска = ТаблицаДатЗапрета.Найти(Запись.Объект, "Объект");
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
			
			Запись.ДатаЗапрета = СтрокаПоиска.НоваяДатаЗапрета;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	Если ЗначениеЗаполнено(ТекстПроведения) Тогда
		
		ПараметрыПисьма = Новый Структура;
		
		СтрокаБазы = СтрокаСоединенияИнформационнойБазы();
		
		Адресаты = ПолучитьАдресаСтатистикаПерепроведения();
		
		ТемаПисьма = "Ошибки при перепроведении документа за " + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") + " (" + СтрокаБазы + ")";
		ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
		ПараметрыПисьма.Вставить("Тело", ТекстПроведения);
		ПараметрыПисьма.Вставить("Кому");
		Для Каждого Адрес ИЗ Адресаты Цикл
			ПараметрыПисьма.Кому = Адрес;
			УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
			РаботаСПочтовымиСообщениями.ОтправитьСообщение(УчетнаяЗапись, ПараметрыПисьма);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьАдресаСтатистикаПерепроведения()
	
	Мас = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст=
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК Адрес
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ОтправлятьСтатистикуПроведения
	|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Мас.Добавить(Выборка.Адрес);	
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Мас;
	
КонецФункции

Функция ПолучитьСписокНеОзнакомленныхСлужебок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Записка.Ссылка КАК СлужебнаяЗаписка
	|ИЗ
	|	Документ.СлужебнаяЗаписка КАК Записка
	|ГДЕ
	|	НЕ Записка.Проведен
	|	И НЕ Записка.Ознакомлен
	|	И Записка.Адресат = &Пользователь";
	
	МассивСлужебок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СлужебнаяЗаписка");
	
	Возврат МассивСлужебок;	
	
КонецФункции

Функция ПолучитьСписокНеОзнакомленныхСообщенийДилерам() Экспорт
	
	Если ПараметрыСеанса.ТекущийВнешнийПользователь.ОбъектАвторизации.Дилер Тогда
		
		Дилер = ПользователиКлиентСервер.ТекущийВнешнийПользователь();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дилер", Дилер);
		Запрос.УстановитьПараметр("Подразделение", Дилер.ОбъектАвторизации.Подразделение);
		Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(ТекущаяДата(),-1) );
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеДилеру.Ссылка,
		|	СообщениеДилеру.Номер,
		|	СообщениеДилеру.Тема,
		|	СообщениеДилеру.Дата,
		|	ОзнакомленСообщенияДилеру.Дилер,
		|	ОзнакомленСообщенияДилеру.Ознакомлен
		|ИЗ
		|	Документ.СообщениеДилеру КАК СообщениеДилеру
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОзнакомленСообщенияДилеру КАК ОзнакомленСообщенияДилеру
		|		ПО СообщениеДилеру.Ссылка = ОзнакомленСообщенияДилеру.Сообщение
		|			И (ОзнакомленСообщенияДилеру.Дилер = &Дилер)
		|			И (ОзнакомленСообщенияДилеру.Ознакомлен)
		|ГДЕ
		|	ОзнакомленСообщенияДилеру.Дилер ЕСТЬ NULL 
		|	И СообщениеДилеру.Дата > &Дата
		|	И СообщениеДилеру.Подразделение = &Подразделение";
		
		МассивСообщений = Запрос.Выполнить().Выгрузить();
		Количество = МассивСообщений.Количество();
		АдресТаблицы = ПоместитьВоВременноеХранилище(МассивСообщений);
		
		Параметры = Новый Структура;
		Параметры.Вставить("АдресТаблицы", АдресТаблицы);
		Параметры.Вставить("Количество", Количество);
	Иначе
		Параметры = Новый Структура;
		Параметры.Вставить("Количество", 0);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Формирует структуру из строки адреса
Функция ПолучитьСтруктуруИзАдреса(Адрес) Экспорт
	
	СтруктураАдреса = Новый Структура;
	
	СтруктураАдреса.Вставить("НаселенныйПункт", "");
	СтруктураАдреса.Вставить("Улица", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Подъезд", "");
	СтруктураАдреса.Вставить("КодПодъезда", "");
	СтруктураАдреса.Вставить("Этаж", "");
	СтруктураАдреса.Вставить("Квартира", "");
	
	//Разбираем старый адрес на сотовляющие и определяем город или населенный пункт
	Если ЗначениеЗаполнено(Адрес) Тогда
		СтарыйАдрес = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Адрес, ", ");
		
		Для каждого Элемент Из СтарыйАдрес Цикл
			
			СтруктураАдреса.Вставить("Улица", ?( Найти(Элемент, "ул. ") > 0, СтрЗаменить(Элемент, "ул. ",""),СтруктураАдреса.Улица));
			СтруктураАдреса.Вставить("Дом", ?( Найти(Элемент, "дом. ") > 0, СтрЗаменить(Элемент, "дом. ",""),СтруктураАдреса.Дом));
			СтруктураАдреса.Вставить("Подъезд", ?( Найти(Элемент, "подъезд. ") > 0, СтрЗаменить(Элемент, "подъезд. ",""),СтруктураАдреса.Подъезд));
			СтруктураАдреса.Вставить("КодПодъезда", ?( Найти(Элемент, "код подъезда. ") > 0, СтрЗаменить(Элемент, "код подъезда. ",""),СтруктураАдреса.КодПодъезда));
			СтруктураАдреса.Вставить("Этаж", ?( Найти(Элемент, "этаж. ") > 0, СтрЗаменить(Элемент, "этаж. ",""),СтруктураАдреса.Этаж));
			СтруктураАдреса.Вставить("Квартира", ?( Найти(Элемент, "кв. ") > 0, СтрЗаменить(Элемент, "кв. ",""),СтруктураАдреса.Квартира));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Функция возвращает скидку договора
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   Структура.РазмерСкидки - размер скидки в процентах (прим. 22)
//
Функция ПолучитьСкидкуДоговора(Сумма, ВидОплаты) Экспорт
	
	СтруктураСкидка = Новый Структура("РазмерСкидки, СуммаДокумента", 0, 0);
	
	Если ТипЗнч(ВидОплаты) = Тип("СправочникСсылка.ВидыОплаты") И НЕ ВидОплаты = Справочники.ВидыОплаты.ПустаяСсылка()  Тогда 
		
		Если ЗначениеЗаполнено(ВидОплаты.Формула) Тогда
			
			Попытка
				
				Выполнить("СтруктураСкидка.СуммаДокумента = " + ВидОплаты.Формула);
				
			Исключение
				
				Сообщить("Не верная формула вида оплаты.");
				
			КонецПопытки;
			
		Иначе
			
			СтруктураСкидка.РазмерСкидки = ВидОплаты.Скидка;
			
		КонецЕсли;
		
	Иначе
		
	КонецЕсли;
	
	Возврат СтруктураСкидка;
	
КонецФункции

// Возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - Справочник.Пользователи - пользователь, значение по умолчанию для которого необходимо получить
//  Настройка    - ПВХ.Настройки пользователей - вид настройки, значение по умолчанию которой необходимо получить
//
// Возвращаемое значение:
//  Как повезёт, там разные настройки.
//
Функция ПолучитьЗначениеНастройкиПользователя(Пользователь, Настройка) Экспорт
	
	Результат = Неопределено;
	
	Если (ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи"))
		И ТипЗнч(Настройка) = Тип("ПланВидовХарактеристикСсылка.НастройкиПользователей") Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Пользователь", Пользователь);
		Отбор.Вставить("Настройка", Настройка);
		
		Запись = РегистрыСведений.НастройкиПользователей.Получить(Отбор);
		
		Если Запись.Свойство("Значение") Тогда
			Результат = Запись.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройку подразделения из регистра НастройкиПодразделений
//
// Параметры
//  Подразделение  - СправочникСсылка.Подразделения - подразделение для которого получаем настройку
//  ВидНастройки  - ПеречислениеСсылка.ВидыНастроекПодразделений - вид получаемой настройки
//
// Возвращаемое значение:
//   число   - значение настройки (пока требуется только число, возможно в будущем понадобится ПВХ)
//
Функция ПолучитьНастройкуПодразделения(Подразделение, ВидНастройки, Период = '3999.11.01') Экспорт
	
	Значение = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ВидНастройки", ВидНастройки);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиПодразделенийСрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПодразделений.СрезПоследних(
	|			&Период,
	|			Подразделение = &Подразделение
	|				И ВидНастройки = &ВидНастройки) КАК НастройкиПодразделенийСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Значение = ВыборкаДетальныеЗаписи.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Двигает взаиморасчеты между подразделением и управлением.
// По отгрузке изделий или после установки акта о выполнении.
//
// Параметры
//  Регистратор  - ДокументСсылка.РеализацияГотовойПродукции, ДокументСсылка.АктВыполненияДоговора  - ссылка на документ регистратор
//
//  Движения  - КоллекцияДвижений  - коллекция движений документа
//
//  Сумма  - Число - сумма начисляемая управлению
//
// Возвращаемое значение:
//   Булево   - всегда истина
//
Функция НачислитьСуммуУправлению(Подразделение, Движения, Сумма, Дата, Комментарий = "") Экспорт
	
	// Костыль.
	Если Дата > '2016.04.01' Тогда
		
		ПодразделениеУправление = Константы.ГлавноеПодразделение.Получить();
		
	Иначе
		
		ЗапросПодразделение = Новый Запрос;
		ЗапросПодразделение.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подразделения.Ссылка
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	Подразделения.Активность";
		
		РезультатЗапроса = ЗапросПодразделение.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ПодразделениеУправление = ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	
	Если Подразделение <> ПодразделениеУправление Тогда
		
		СоздатьПроводкуВзаиморасчетыСПодразделением(Движения,
		ПодразделениеУправление,
		Подразделение,
		Справочники.СтатьиДоходовРасходов.ДоходыПроцентСЗаказа,
		ВидДвиженияБухгалтерии.Дебет,
		Дата,
		Сумма,
		Комментарий);
		
		СоздатьПроводкуВзаиморасчетыСПодразделением(Движения,
		Подразделение,
		ПодразделениеУправление,
		Справочники.СтатьиДоходовРасходов.РасходыНаСопровождениеТехнологии,
		ВидДвиженияБухгалтерии.Кредит,
		Дата,
		Сумма,
		Комментарий);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьПроводкуВзаиморасчетыСПодразделением(Движения, ИзмерениеПодразделение, СубконтоПодразделение, Статья, ДебетКредит, Дата, Сумма, Содержание = "")
	
	Проводка = Движения.Управленческий.Добавить();
	Проводка.Период = Дата;
	Проводка.Сумма = Сумма;
	Проводка.Подразделение = ИзмерениеПодразделение;
	Проводка.Содержание = Содержание;
	
	Если ВидДвиженияБухгалтерии.Дебет = ДебетКредит Тогда
		
		Проводка.СчетДт = ПланыСчетов.Управленческий.ВзаиморасчетыСПодразделениями;
		Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = СубконтоПодразделение;
		
		Проводка.СчетКт = ПланыСчетов.Управленческий.Доходы;
		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Статья;
		
	ИначеЕсли ВидДвиженияБухгалтерии.Кредит = ДебетКредит Тогда
		
		Проводка.СчетКт = ПланыСчетов.Управленческий.ВзаиморасчетыСПодразделениями;
		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = СубконтоПодразделение;
		
		Проводка.СчетДт = ПланыСчетов.Управленческий.Расходы;
		Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Статья;
		
	КонецЕсли;
	
	Возврат Проводка;
	
КонецФункции

Функция ПосчитатьКратность(Номенклатура, Количество) Экспорт
	
	Кратность = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Номенклатура, "Кратность");
	КоличествоМатериала = Количество;
	
	Если ТипЗнч(Кратность) = Тип("Число") и Кратность > 0 Тогда
		
		КоличествоМатериала = Кратность * Окр(КоличествоМатериала / Кратность + 0.5, 0, РежимОкругления.Окр15как10);
		
	КонецЕсли;
	
	СтруктураКратности = Новый Структура;
	СтруктураКратности.Вставить("Кратность", Кратность);
	СтруктураКратности.Вставить("КоличествоМатериала", КоличествоМатериала);
	
	Возврат СтруктураКратности;
	
КонецФункции

// Функция определяет, можно ли редактировать
// спецификацию текущему пользователю.
Функция ДоступностьСпецификации(Спецификация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Спецификация) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтатусСпецификации = Документы.Спецификация.ПолучитьСтатусСпецификации(Спецификация);
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.Сохранен);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.Проверяется);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.Рассчитывается);
	
	СпецификацияДоступна = Ложь;
	
	Для каждого Статус Из МассивСтатусов Цикл
		
		Если СтатусСпецификации = Статус Тогда
			СпецификацияДоступна = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СпецификацияДоступна;
	
КонецФункции // ДоступностьСпецификации()

Функция ПечататьТорг12(МассивДокументов, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_РеализацияМатериалов";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = ПолучитьОбщийМакет("ТОРГ12");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовокТаб = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьВсего = Макет.ПолучитьОбласть("Всего");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("МассивДокументов", МассивДокументов);
	Спецификация = ТипЗнч(МассивДокументов[0].Ссылка) = Тип("ДокументСсылка.Спецификация");
	
	Если Спецификация Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Спецификация.Автор,
		|	Спецификация.Дата КАК ДатаДокумента,
		|	Спецификация.Контрагент,
		|	Спецификация.Номер КАК НомерДокумента,
		|	Спецификация.Подразделение,
		|	Спецификация.Подразделение.ОсновнойСклад,
		|	Спецификация.СуммаДокумента,
		|	1 КАК Номер,
		|	""Мебельный комплект"" КАК Номенклатура,
		|	Спецификация.Контрагент.ПолноеНаименование КАК ПолноеНаименование,
		|	"""" КАК АдресДоставки,
		|	Спецификация.Контрагент.Телефон КАК Телефон,
		|	Спецификация.Контрагент.БанковскиеРеквизиты КАК БанковскиеРеквизиты,
		|	1 КАК Количество,
		|	Спецификация.СуммаДокумента КАК Цена,
		|	Спецификация.СуммаДокумента КАК СуммаБезНДС,
		|	Спецификация.СуммаДокумента КАК СуммаСНДС,
		|	""Шт."" КАК ЕдиницаИзмерения,
		|	""Шт."" КАК ЕдиницаНаименование,
		|	""Без НДС"" КАК СтавкаНДС,
		|	0 КАК СуммаНДС,
		|	Спецификация.Подразделение.ФактическийАдрес КАК ФактическийАдрес,
		|	Спецификация.Подразделение.Организация.ЮридическийАдрес КАК ПодразделениеЮридическийАдресОрганизации,
		|	Спецификация.Подразделение.Организация КАК Организация,
		|	Спецификация.Подразделение.Организация.ОКПО КАК ОрганизацияПоОКПО
		|ИЗ
		|	Документ.Спецификация КАК Спецификация
		|ГДЕ
		|	Спецификация.Ссылка В(&МассивДокументов)"
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияМатериалов.Автор,
		|	РеализацияМатериалов.Дата КАК ДатаДокумента,
		|	РеализацияМатериалов.Контрагент,
		|	РеализацияМатериалов.Номер КАК НомерДокумента,
		|	РеализацияМатериалов.Подразделение,
		|	РеализацияМатериалов.Склад,
		|	РеализацияМатериалов.СуммаДокумента,
		|	РеализацияМатериалов.СписокНоменклатуры.(
		|		НомерСтроки КАК Номер,
		|		Номенклатура,
		|		Номенклатура.КоэффициентБазовых КАК Коэффициент,
		|		Номенклатура.Код КАК ТоварКод,
		|		Количество,
		|		Цена,
		|		Сумма КАК СуммаБезНДС,
		|		Сумма КАК СуммаСНДС,
		|		""Без НДС"" КАК СтавкаНДС,
		|		0 КАК СуммаНДС,
		|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаНаименование,
		|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаКодПоОКЕИ
		|	),
		|	РеализацияМатериалов.Подразделение.Организация.ПолноеНаименование + "", ИНН "" + РеализацияМатериалов.Подразделение.Организация.ИНН + "", "" + РеализацияМатериалов.Подразделение.Организация.ЮридическийАдрес + "", р/с "" + РеализацияМатериалов.Подразделение.Организация.РасчетныйСчет + "", БИК "" + РеализацияМатериалов.Подразделение.Организация.БИК + "", корр/с "" + РеализацияМатериалов.Подразделение.Организация.КорреспондирующийСчет КАК ПредставлениеПоставщика,
		|	РеализацияМатериалов.Подразделение.Организация.ПолноеНаименование + "", ИНН "" + РеализацияМатериалов.Подразделение.Организация.ИНН + "", "" + РеализацияМатериалов.Подразделение.Организация.ЮридическийАдрес + "", р/с "" + РеализацияМатериалов.Подразделение.Организация.РасчетныйСчет + "", БИК "" + РеализацияМатериалов.Подразделение.Организация.БИК + "", корр/с "" + РеализацияМатериалов.Подразделение.Организация.КорреспондирующийСчет КАК ПредставлениеОрганизации,
		|	РеализацияМатериалов.Контрагент.ПолноеНаименование КАК ПолноеНаименование,
		|	РеализацияМатериалов.Контрагент.ЮридическийАдрес КАК АдресДоставки,
		|	РеализацияМатериалов.Контрагент.Телефон КАК Телефон,
		|	РеализацияМатериалов.Контрагент.БанковскиеРеквизиты КАК БанковскиеРеквизиты
		|ИЗ
		|	Документ.РеализацияМатериалов КАК РеализацияМатериалов
		|ГДЕ
		|	РеализацияМатериалов.Ссылка В(&МассивДокументов)
		|	И РеализацияМатериалов.Проведен";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВставлятьРазделительСтраниц = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		ВсегоКоличество = 0;
		ВсегоСумма = 0;
		
		Если ВставлятьРазделительСтраниц Тогда
			
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		Если Спецификация Тогда
			
			Вяс = Выборка.Организация;
			СтруктураРеквизитовВяса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Вяс, "ПолноеНаименование, ИНН, РасчетныйСчет, БИК, КорреспондирующийСчет, Банк");
			ЧастноеЛицо = Справочники.Контрагенты.ЧастноеЛицо;
			ПредставлениеОрганизации = СтруктураРеквизитовВяса.ПолноеНаименование + ", ИНН " + СтруктураРеквизитовВяса.ИНН + ", " + Выборка.ФактическийАдрес + ", р/с " + СтруктураРеквизитовВяса.РасчетныйСчет + ", Банк/БИК " +СтруктураРеквизитовВяса.Банк + "/"+ СтруктураРеквизитовВяса.БИК + ", корр/с " + СтруктураРеквизитовВяса.КорреспондирующийСчет;
			ПредставлениеГрузоотпрвителя = СтруктураРеквизитовВяса.ПолноеНаименование + ", ИНН " + СтруктураРеквизитовВяса.ИНН + ", " + Выборка.ПодразделениеЮридическийАдресОрганизации + ", р/с " + СтруктураРеквизитовВяса.РасчетныйСчет + ", Банк/БИК " +СтруктураРеквизитовВяса.Банк + "/"+ СтруктураРеквизитовВяса.БИК + ", корр/с " + СтруктураРеквизитовВяса.КорреспондирующийСчет;
			ОбластьШапка.Параметры.Заполнить(Выборка);
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.НомерДокумента);
			ОбластьШапка.Параметры.НомерДокумента = НомерДокумента;
			ОбластьШапка.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
			ОбластьШапка.Параметры.Основание = "Заказ №" + НомерДокумента + " от " + Формат(Выборка.ДатаДокумента,"ДЛФ=Д");
			ОбластьШапка.Параметры.ПредставлениеПоставщика = ПредставлениеГрузоотпрвителя;
			ОбластьШапка.Параметры.ПредставлениеПлательщика = ЧастноеЛицо;
			ОбластьШапка.Параметры.ПредставлениеГрузополучателя = ЧастноеЛицо;
			ТабДок.Вывести(ОбластьШапка);
			ТабДок.Вывести(ОбластьЗаголовокТаб);
			ВсегоКоличество = 1;
			ВсегоСумма = Выборка.СуммаДокумента;
			ОбластьСтрока.Параметры.Заполнить(Выборка);
			ТабДок.Вывести(ОбластьСтрока);
			
		Иначе
			
			ПредставлениеГрузополучателя = "" + Выборка.ПолноеНаименование + ?(ЗначениеЗаполнено(Выборка.АдресДоставки), ", адрес: " + Выборка.АдресДоставки, "") 
			+ ?(ЗначениеЗаполнено(Выборка.Телефон), ", тел: " + Выборка.Телефон, "") + ?(ЗначениеЗаполнено(Выборка.БанковскиеРеквизиты), ", " + Выборка.БанковскиеРеквизиты, "");
			ОбластьШапка.Параметры.Заполнить(Выборка);
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.НомерДокумента);
			ОбластьШапка.Параметры.НомерДокумента = НомерДокумента;
			ОбластьШапка.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
			ТабДок.Вывести(ОбластьШапка);
			ТабДок.Вывести(ОбластьЗаголовокТаб);
			ВыборкаСписокНоменклатуры = Выборка.СписокНоменклатуры.Выбрать();
			
			Пока ВыборкаСписокНоменклатуры.Следующий() Цикл
				
				ВсегоКоличество = ВыборкаСписокНоменклатуры.Количество + ВсегоКоличество;
				ВсегоСумма = ВыборкаСписокНоменклатуры.СуммаБезНДС + ВсегоСумма;;
				
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьВсего.Параметры.Заполнить(Выборка);
		ОбластьВсего.Параметры.ИтогКоличество = ВсегоКоличество;
		ОбластьВсего.Параметры.ИтогСуммыСНДС = ВсегоСумма;
		ОбластьВсего.Параметры.ИтогСуммы = ВсегоСумма;
		ТабДок.Вывести(ОбластьВсего);
		
		СуммаПрописью = ЧислоПрописью(ВсегоСумма,"Л=ru_RU; ДП=Ложь","рубль, рубля, рублей, м, копейка, копейки, копеек, ж" );
		ОбластьПодвал.Параметры.Заполнить(Выборка);
		ОбластьПодвал.Параметры.СуммаПрописью = СуммаПрописью;
		ТабДок.Вывести(ОбластьПодвал);
		
		ВставлятьРазделительСтраниц = Истина;
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, МассивДокументов);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
	
КонецФункции // ПечататьТорг12()

// Возвращает параметры начислений для зарплаты
Функция ПолучитьЗначениеПараметров(МассивПараметров, Подразделение, Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыНачисленийСрезПоследних.Параметр,
	|	ПараметрыНачисленийСрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.ПараметрыНачислений.СрезПоследних(
	|			&ОкончаниеПериода,
	|			Подразделение = &Подразделение
	|				И Параметр В (&МассивПараметров)) КАК ПараметрыНачисленийСрезПоследних";
	
	Запрос.УстановитьПараметр("МассивПараметров", МассивПараметров);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Дата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьЗначениеПараметров()

// Возвращает внешнего пользователя соответствующего конгтрагенту
//
// Параметры
//  КонтрагентСсылка  - СправочникСсылка.Контрагент - Ссылка на контрагента
//
// Возвращаемое значение:
//   СправочникСсылка.ВнешнийПользователь   - Ссылка на соответствующегов нешнего пользователя
//
Функция ПолучитьВнешнегоПользователяПоКонтрагенту(КонтрагентСсылка) Экспорт
	
	ВнешнийПользователь = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ОбъектАвторизации = &Контрагент";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВнешнийПользователь = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат ВнешнийПользователь;
	
КонецФункции

Функция ГрупповаяСменаСтатуса(МассивСпецификаций, НовыйСтатус, ПроверяемыйСтатус = Неопределено) Экспорт
	
	Если ПроверяемыйСтатус <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПроверяемыйСтатус", ПроверяемыйСтатус);
		Запрос.УстановитьПараметр("МассивСпецификаций", МассивСпецификаций);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусСпецификацииСрезПоследних.Спецификация
		|ИЗ
		|	РегистрСведений.СтатусСпецификации.СрезПоследних КАК СтатусСпецификацииСрезПоследних
		|ГДЕ
		|	СтатусСпецификацииСрезПоследних.Спецификация В (&МассивСпецификаций)
		|	И СтатусСпецификацииСрезПоследних.Статус = &ПроверяемыйСтатус";
		
		Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Спецификация");
		
	Иначе
		
		Массив = МассивСпецификаций;
		
	КонецЕсли;
	
	Если Массив.Количество() > 0 Тогда
		
		ДатаВремя = ТекущаяДата();
		
		НаборЗаписей = РегистрыСведений.СтатусСпецификации.СоздатьНаборЗаписей();	
		
		Для Каждого Элемент Из Массив Цикл
			
			Запись = НаборЗаписей.Добавить();
			Запись.Статус = НовыйСтатус;
			Запись.Спецификация = Элемент;
			Запись.Период = ДатаВремя;
			Запись.Автор = ПользователиКлиентСервер.АвторизованныйПользователь();
			
			Если НовыйСтатус = Перечисления.СтатусыСпецификации.Отгружен Тогда
				Документы.Спецификация.ОчиститьРаскрой(Элемент);	
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать(Ложь);
		
	КонецЕсли;
	
КонецФункции

// Возвращает примечание для печати Чертежа Двери
//
Функция УстановитьПримечание() Экспорт
	
	ПримечаниеДляПечати = "";
	
	Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	ПользовательДизайнер = РольДоступна("ПользовательДизайнер");
	ПользовательАдминистратор = РольДоступна("АдминистраторСистемы");
	
	Если ПользовательДизайнер ИЛИ ПользовательАдминистратор Тогда
		ПримечаниеДляПечати = "Размеры, указанные в эскизе могут отличаться от фактических по высоте до 3%, по ширине до 5%. Размеры элементов дверей указываются от края двери (центра стыковочного профиля) до центра стыковочного профиля (края двери)При использовании изогнутых стыковочных профилей размеры их присоединения могут отличаться от фактических до 10%";
	КонецЕсли;
	Возврат ПримечаниеДляПечати;
	
КонецФункции

//Устанавливает дату изготовления для спецификации
Процедура УстановитьДатуИзготовленияСпецификации(Спецификация) Экспорт
	
	ДатаОтгрузки = НачалоДня(Спецификация.ДатаОтгрузки);
	ДатаДокумента = НачалоДня(Спецификация.Дата);
	Подразделение = Спецификация.Подразделение;
	ДнейНаИзготовлениеИзделие = Спецификация.Изделие.ДнейНаИзготовление;
	
	ДокументПлановыйЛимит = Документы.ПлановыйЛимит.ПолучитьДокументЗаПериод(Подразделение, ДатаОтгрузки, Истина);
	
	Если ЗначениеЗаполнено(ДатаОтгрузки) И ЗначениеЗаполнено(ДокументПлановыйЛимит) Тогда
		
		ДнейНаИзготовление = ДнейНаИзготовлениеИзделие;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
		Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦеховойЛимит.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ЦеховойЛимит КАК ЦеховойЛимит
		|ГДЕ
		|	ЦеховойЛимит.СтоимостьУслуг > 0
		|	И ЦеховойЛимит.Период < &ДатаОтгрузки
		|	И ЦеховойЛимит.Период > &ДатаДокумента
		|	И ЦеховойЛимит.Подразделение = &Подразделение";
		
		РабочихДнейДоОтгрузки = Запрос.Выполнить().Выбрать().Количество();
		
		Если РабочихДнейДоОтгрузки < ДнейНаИзготовление Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
			Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
			|	ЦеховойЛимит.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ЦеховойЛимит КАК ЦеховойЛимит
			|ГДЕ
			|	ЦеховойЛимит.СтоимостьУслуг > 0
			|	И ЦеховойЛимит.Период <= &ДатаОтгрузки
			|	И ЦеховойЛимит.Период >= &ДатаДокумента
			|	И ЦеховойЛимит.Подразделение = &Подразделение
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() > 0 Тогда
				ДеньИзготовления = Результат[0].Период;
				Спецификация.ДатаИзготовления = НачалоДня(ДеньИзготовления);
			Иначе
				Спецификация.ДатаИзготовления = ДатаДокумента;
			КонецЕсли;
			
		Иначе // РабочихДнейДоОтгрузки < ДнейНаИзготовление
			
			ДнейНаИзготовление = ДнейНаИзготовлениеИзделие;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ %1
			|	ЦеховойЛимит.Период КАК Период
			|ПОМЕСТИТЬ Дни
			|ИЗ
			|	РегистрНакопления.ЦеховойЛимит КАК ЦеховойЛимит
			|ГДЕ
			|	ЦеховойЛимит.СтоимостьУслуг > 0
			|	И ЦеховойЛимит.Период <= &ДатаОтгрузки
			|	И ЦеховойЛимит.Подразделение = &Подразделение
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ
			|;
			|////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Дни.Период КАК Период
			|ИЗ
			|	Дни КАК Дни
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";
			
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ДнейНаИзготовление+1);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() > 0 Тогда
				ДеньИзготовления = Результат[0].Период;
				Спецификация.ДатаИзготовления = НачалоДня(ДеньИзготовления);
			Иначе
				Спецификация.ДатаИзготовления = ДатаОтгрузки - 86400*ДнейНаИзготовление;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // RonEXI: Если не установлен лимит
		
		ДнейНаИзготовление = ДнейНаИзготовлениеИзделие;
		РабочихДнейДоОтгрузки = Число(ДатаОтгрузки - ДатаДокумента) / 86400;
		
		Если РабочихДнейДоОтгрузки < ДнейНаИзготовление Тогда
			
			Спецификация.ДатаИзготовления = ДатаДокумента;
			
		Иначе
			
			ДнейНаИзготовление = ДнейНаИзготовлениеИзделие;
			Спецификация.ДатаИзготовления = ДатаОтгрузки - 86400 * ДнейНаИзготовление;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Спецификация.ДатаИзготовления < НачалоДня(ТекущаяДата()) Тогда
		Спецификация.ДатаИзготовления = НачалоДня(ТекущаяДата());	
	КонецЕсли;
	
КонецПроцедуры

Функция НоменклатураПодЗаказ(Номенклатура, Подразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НастройкиНоменклатуры.ПодЗаказ, ИСТИНА) КАК ПодЗаказ
	|ИЗ
	|	РегистрСведений.НастройкиНоменклатуры.СрезПоследних(, Подразделение = &Подразделение) КАК НастройкиНоменклатуры
	|ГДЕ
	|	НастройкиНоменклатуры.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат ИСТИНА;
		
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.ПодЗаказ;
		
	КонецЕсли;
	
КонецФункции

Функция ВыборМакетов(Договоры, ДоговорДилера) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договоры", Договоры);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(Договор.Спецификация) КАК Спецификация,
	|	Договор.Ссылка КАК Договор,
	|	МАКСИМУМ(Договор.Спецификация.Изделие.ИмяМакетаПаспорта) КАК Инструкция,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Договор.Спецификация.Изделие.ВидИзделия = ЗНАЧЕНИЕ(Перечисление.ВидыИзделий.ШкафКупе)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Шкаф,
	|	КОЛИЧЕСТВО(СпецификацияСписокИзделийПоКаталогу.Ссылка) КАК ИзделийПоКаталогу
	|ПОМЕСТИТЬ ВТ_Договоры
	|ИЗ
	|	Документ.Договор КАК Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокИзделийПоКаталогу КАК СпецификацияСписокИзделийПоКаталогу
	|		ПО Договор.Спецификация = СпецификацияСписокИзделийПоКаталогу.Ссылка
	|ГДЕ
	|	Договор.Ссылка В(&Договоры)
	|
	|СГРУППИРОВАТЬ ПО
	|	Договор.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Договоры.Спецификация,
	|	ВТ_Договоры.Договор КАК Договор,
	|	ВТ_Договоры.Инструкция КАК Инструкция,
	|	ВТ_Договоры.Шкаф,
	|	ВТ_Договоры.ИзделийПоКаталогу,
	|	ВЫБОР
	|		КОГДА ВТ_Договоры.Шкаф
	|				И ВТ_Договоры.ИзделийПоКаталогу > 0
	|			ТОГДА ""ШкафПоКаталогу""
	|		КОГДА НЕ ВТ_Договоры.Шкаф
	|				И ВТ_Договоры.ИзделийПоКаталогу > 0
	|			ТОГДА ""ПоКаталогу""
	|	КОНЕЦ КАК ПоКаталогу,
	|	ВЫБОР
	|		КОГДА Файлы.Ссылка ССЫЛКА Справочник.ФайлыЛекс
	|			ТОГДА ""ЭскизнаяЗаявка""
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЭскизнаяЗаявка,
	|	СпецификацияСписокДверей.Двери
	|ПОМЕСТИТЬ ВТ_ДоговорДвери
	|ИЗ
	|	ВТ_Договоры КАК ВТ_Договоры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФайлыЛекс КАК Файлы
	|		ПО (НЕ Файлы.ПометкаУдаления)
	|			И (Файлы.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.Эскиз))
	|			И (ВТ_Договоры.Договор.Спецификация = (ВЫРАЗИТЬ(Файлы.ВладелецФайла КАК Документ.Спецификация)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокДверей КАК СпецификацияСписокДверей
	|		ПО ВТ_Договоры.Спецификация = СпецификацияСписокДверей.Ссылка
	|			И ВТ_Договоры.Спецификация = СпецификацияСписокДверей.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДоговорДвери.Спецификация,
	|	ВТ_ДоговорДвери.Договор КАК Договор,
	|	ВТ_ДоговорДвери.Инструкция КАК Инструкция,
	|	ВТ_ДоговорДвери.Шкаф,
	|	ВТ_ДоговорДвери.ИзделийПоКаталогу,
	|	ВТ_ДоговорДвери.ПоКаталогу КАК ПоКаталогу,
	|	ВТ_ДоговорДвери.ЭскизнаяЗаявка КАК ЭскизнаяЗаявка,
	|	спрДвери.СтрокаДляФлэш КАК СтрокаДляФлэш,
	|	спрДвери.Ссылка КАК Дверь
	|ИЗ
	|	ВТ_ДоговорДвери КАК ВТ_ДоговорДвери
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Двери КАК спрДвери
	|		ПО ВТ_ДоговорДвери.Двери = спрДвери.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(Инструкция),
	|	МАКСИМУМ(ПоКаталогу),
	|	МАКСИМУМ(ЭскизнаяЗаявка),
	|	КОЛИЧЕСТВО(СтрокаДляФлэш)
	|ПО
	|	Договор";
	
	Если ДоговорДилера Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Договор КАК Договор", "Документ.ДоговорДилера КАК Договор");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаГруппа = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Договор");
	
	МассивДокументов = Новый Массив;
	
	Пока ВыборкаГруппа.Следующий() Цикл
		СтруктураДоговора = Новый Структура;	
		СтруктураДоговора.Вставить("Договор", ВыборкаГруппа.Договор);
		СтруктураДоговора.Вставить("Инструкция", ВыборкаГруппа.Инструкция);
		СтруктураДоговора.Вставить("ПоКаталогу", ?(ЗначениеЗаполнено(ВыборкаГруппа.ПоКаталогу), ВыборкаГруппа.ПоКаталогу, Неопределено));
		СтруктураДоговора.Вставить("ЭскизнаяЗаявка", ?(ЗначениеЗаполнено(ВыборкаГруппа.ЭскизнаяЗаявка), ВыборкаГруппа.ЭскизнаяЗаявка, Неопределено));
		
		СтруктураДоговора.Вставить("ЧертежДвери", Неопределено);
		
		Если ЗначениеЗаполнено(ВыборкаГруппа.СтрокаДляФлэш) Тогда
			СтруктураДоговора.Вставить("ЧертежДвери", "ЧертежДвери");
			СтруктураДоговора.Вставить("ДвериФлэш", Новый Массив);
			СтруктураДоговора.Вставить("ДвериСсылка", Новый Массив);
			ЗаписьПоДоговору = ВыборкаГруппа.Выбрать();	
			Пока ЗаписьПоДоговору.Следующий() Цикл
				СтруктураДоговора.ДвериФлэш.Добавить(ЗаписьПоДоговору.СтрокаДляФлэш);
				СтруктураДоговора.ДвериСсылка.Добавить(ЗаписьПоДоговору.Дверь);
			КонецЦикла;
			
		КонецЕсли;
		
		МассивДокументов.Добавить(СтруктураДоговора);
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция ПолучитьЛоготипДилера(Спецификация) Экспорт
	
	ИмяФайла = "";
	
	Если ЗначениеЗаполнено(Спецификация)
		И ЗначениеЗаполнено(Спецификация.Контрагент)
		И ЗначениеЗаполнено(Спецификация.Контрагент.Логотип) Тогда
		
		ИмяФайла = ЛексСервер.ПолучитьИмяПрисоединенногоФайла(Перечисления.ВидыПрисоединенныхФайлов.Логотип, Спецификация.Контрагент);
		
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ПолучитьЛоготипОфиса(Спецификация) Экспорт
	
	ИмяФайла = "";
	
	Если ЗначениеЗаполнено(Спецификация) И ЗначениеЗаполнено(Спецификация.Офис) И ЗначениеЗаполнено(Спецификация.Офис.Логотип) Тогда
		Логотип = Спецификация.Офис.Логотип;
		ИмяФайла = Логотип.Наименование + Логотип.Расширение;	
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ПолучитьЛоготипПодразделения(Спецификация) Экспорт
	
	ИмяФайла = "";
	
	Если ЗначениеЗаполнено(Спецификация) И ЗначениеЗаполнено(Спецификация.Подразделение) И ЗначениеЗаполнено(Спецификация.Подразделение.Логотип) Тогда
		Логотип = Спецификация.Подразделение.Логотип;
		ИмяФайла = Логотип.Наименование + Логотип.Расширение;	
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ПолучитьЛоготипСервер(Спецификация, ДляКомплектации = Ложь) Экспорт
	
	СсылкаЛоготип = Неопределено;
	
	Если ЗначениеЗаполнено(Спецификация) Тогда
		
		Если Спецификация.Дилерский
			И ЗначениеЗаполнено(Спецификация.Контрагент) 
			И ЗначениеЗаполнено(Спецификация.Контрагент.Логотип) Тогда
			СсылкаЛоготип = Спецификация.Контрагент.Логотип;
		КонецЕсли;
		
		Если ДляКомплектации И Спецификация.Дилерский И (НЕ ЗначениеЗаполнено(СсылкаЛоготип))  Тогда
			СсылкаЛоготип = Неопределено;
		Иначе	
			
			Если НЕ ЗначениеЗаполнено(СсылкаЛоготип)
				И ЗначениеЗаполнено(Спецификация.Офис)
				И ЗначениеЗаполнено(Спецификация.Офис.Логотип) Тогда
				СсылкаЛоготип = Спецификация.Офис.Логотип;
			Иначе
				Если НЕ ЗначениеЗаполнено(СсылкаЛоготип) 
					И ЗначениеЗаполнено(Спецификация.Подразделение) 
					И ЗначениеЗаполнено(Спецификация.Подразделение.Логотип) Тогда
					СсылкаЛоготип = Спецификация.Подразделение.Логотип;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Конецесли;
	
	Если ЗначениеЗаполнено(СсылкаЛоготип) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаЛоготип", СсылкаЛоготип);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файл.Данные КАК Данные
		|ИЗ
		|	Справочник.ФайлыЛекс КАК Файл
		|ГДЕ
		|	Файл.Ссылка = &СсылкаЛоготип";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Логотип = Выборка.Данные.Получить();
		
	Иначе
		
		Логотип = Ложь;
		
	КонецЕсли;
	
	Возврат Логотип;
	
КонецФункции

Функция ПолучитьЛоготипПоСсылке(СсылкаЛоготип) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаЛоготип) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаЛоготип", СсылкаЛоготип);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файл.Данные КАК Данные
		|ИЗ
		|	Справочник.ФайлыЛекс КАК Файл
		|ГДЕ
		|	Файл.Ссылка = &СсылкаЛоготип";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Логотип = Выборка.Данные.Получить();
		
	Иначе
		
		Логотип = Ложь;
		
	КонецЕсли;
	
	Возврат Логотип;
	
КонецФункции

Функция ЗаписатьДействиеПользователя(фнКомпьютер, фнДействие) Экспорт
	
	НоваяЗапись = РегистрыСведений.ЖурналАктивностиПользователей.СоздатьМенеджерЗаписи();
	НоваяЗапись.Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	НоваяЗапись.Действие = фнДействие;
	НоваяЗапись.Компьютер = фнКомпьютер;
	НоваяЗапись.Дата = ТекущаяДата();
	НоваяЗапись.Записать();
	
КонецФункции

Функция ОпределитьКомпьютер(СерийныйНомер, ИмяКомпьютера) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Ссылка", Справочники.Компьютеры.ПустаяСсылка());
	Структура.Вставить("Одобренный", Ложь);
	Структура.Вставить("ЧерныйСписок", Ложь);
	
	СерийныйНомер = СокрЛП(СерийныйНомер);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Компьютеры.Ссылка,
	|	Компьютеры.Одобренный,
	|	Компьютеры.ЧерныйСписок
	|ИЗ
	|	Справочник.Компьютеры КАК Компьютеры
	|ГДЕ
	|	Компьютеры.СерийныйНомерДиска = &СерийныйНомер";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Компьютер = Справочники.Компьютеры.СоздатьЭлемент();
		Компьютер.Имя = ИмяКомпьютера;
		Компьютер.Наименование = ИмяКомпьютера;
		Компьютер.СерийныйНомерДиска = СерийныйНомер;
		Компьютер.Записать();
		
		Структура.Ссылка = Компьютер.Ссылка;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
		
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьНомераПередлокИСрочек(фнПользователь) Экспорт
	
	ФизЛицо = фнПользователь.ФизическоеЛицо;
	Подразделение = ФизЛицо.Подразделение;
	Управляющий = Подразделение.Управляющий;
	
	Результат = Новый Массив;
	
	Если ФизЛицо <> Управляющий Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусСпецификацииСрезПоследних.Спецификация.Ссылка КАК Спецификация
	|ИЗ
	|	РегистрСведений.СтатусСпецификации.СрезПоследних(
	|			&Период,
	|			Спецификация.Проведен
	|				И (Спецификация.Изделие = ЗНАЧЕНИЕ(Справочник.Изделия.Переделка)
	|					ИЛИ Спецификация.Срочный)
	|				И Спецификация.Подразделение = &Подразделение) КАК СтатусСпецификацииСрезПоследних
	|ГДЕ
	|	НЕ СтатусСпецификацииСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.Отгружен)
	|	И НЕ СтатусСпецификацииСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.Изготовлен)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Спецификация");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьУправляющегоПроизводством()

Функция ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(Номенклатура, Подразделение) Экспорт
	
	Возврат РегистрыСведений.СоответствиеНоменклатуры.ПолучитьСтруктуруСоответствий(Номенклатура, Подразделение);
	
КонецФункции // ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП()

Функция ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуПоГруппе(Номенклатура, НоменклатурнаяГруппа, Подразделение) Экспорт
	
	Возврат РегистрыСведений.СоответствиеНоменклатуры.ПолучитьСоответствие(Номенклатура, НоменклатурнаяГруппа, Подразделение);
	
КонецФункции // ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуПоГруппе()

Функция ПолучитьДоступностьРолиДляНеполноправногоПользователя(Знач Роль, Пользователь = Неопределено) Экспорт
	
	Доступна = Ложь;
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь(Пользователь, , Ложь) Тогда
		
		Доступна = РольДоступна(СокрЛП(Роль));
		
	КонецЕсли;
	
	Возврат Доступна;	
	
КонецФункции

Функция ПолучитьОсновнуюПоСкладу(фПодразделение, фНоменклатура) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", фНоменклатура);
	Запрос.УстановитьПараметр("Подразделение", фПодразделение);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиНоменклатуры.ОсновнаяПоСкладу
	|ИЗ
	|	РегистрСведений.НастройкиНоменклатуры.СрезПоследних(, Подразделение = &Подразделение) КАК НастройкиНоменклатуры
	|ГДЕ
	|	НастройкиНоменклатуры.Номенклатура = &Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.ОсновнаяПоСкладу;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ТекущийПользовательАдминистратор() Экспорт
	
	Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	ПрофильАдминистратор = Справочники.ПрофилиГруппДоступа.Администратор;
	Возврат ЛексСервер.ЕстьДоступКПрофилюГруппДоступа(Пользователь, ПрофильАдминистратор);
	
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ТекущийПользовательПечатьЭтикеток() Экспорт
	
	Возврат РольДоступна("ПечатьЭтикеток");
	
КонецФункции

// Для сохранения наименования файла.
// Т.к. файлы потом сохраняются на диск, будем формировать имя,
// для последующей синхронизации
// Параметры
//  ВидФайла  - ПеречислениеСсылка.ВидыПр исоединенныхФайлов - вид присоединенного файла
//  ВладелецФайла  - ЛюбаяСсылка - ссылка на владельца файла (Номенклатура, Контрагент, Изделие и т.п.)
//  Расширение  - Строка - расширение файла
//
// Возвращаемое значение:
//   Строка   - сформированное полное имя файла или пустая строка.
//
Функция ПолучитьИмяПрисоединенногоФайла(ВидФайла, ВладелецФайла, Расширение = "") Экспорт
	
	Результат = "";
	
	Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.Номенклатура")
		И ВидФайла = Перечисления.ВидыПрисоединенныхФайлов.ТекстураНоменклатуры Тогда
		
		Результат = ЗначениеРеквизитаОбъекта(ВладелецФайла, "Код");
		
	ИначеЕсли ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.КаталогИзделий") Тогда
		
		ВидыФайлов = Новый Массив;
		ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.ОсновнаяКартинка);
		ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая);
		ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КартинкаПравая);
		ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КрышаЛевая);
		ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КрышаПравая);
		
		Если ВидыФайлов.Найти(ВидФайла) <> Неопределено Тогда
			Результат = "" + ВидФайла + ЗначениеРеквизитаОбъекта(ВладелецФайла, "Код");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Результат = "Логотип_" + ВладелецФайла.Префикс;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступноПринятиеБухгалтером(Документ) Экспорт
	
	ЕстьДоступ = Ложь;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВыпускПродукции") Тогда
		
		ЕстьДоступ = РольДоступна("ДобавлениеИзменениеВыпускаПродукцииБух") ИЛИ РольДоступна("ПолныеПрава");
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияГотовойПродукции") Тогда
		
		ЕстьДоступ = РольДоступна("ДобавлениеИзменениеРеализацияГотовойПродукцииБух") ИЛИ РольДоступна("ПолныеПрава");
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ТребованиеНакладная")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеМатериаловУслуг")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеМатериалов")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеМатериалов")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.Комплектация")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПереводНоменклатуры") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияМатериалов") Тогда
		
		ЕстьДоступ = РольДоступна("ПринятиеБухгалтером") ИЛИ РольДоступна("ПолныеПрава");
		
	КонецЕсли;
	
	Возврат ЕстьДоступ; 
	
КонецФункции

Функция ДоступностьФормыСкладскиеДокументы(Документ) Экспорт
	
	ТолькоПросмотр = Ложь;
	
	Если Документ.СданВАрхив И НЕ ЛексСервер.ДоступноПринятиеБухгалтером(Документ) Тогда
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	Возврат ТолькоПросмотр; 
	
КонецФункции

Функция ДоступнаОтменаПроведения(Документ) Экспорт
	
	Отказ = Ложь;
	
	Если Документ.СданВАрхив Тогда
		
		ДоступноПринятие = ЛексСервер.ДоступноПринятиеБухгалтером(Документ);
		
		Если НЕ ДоступноПринятие Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ сдан в архив. Обратитесь в бухгалтерию.");
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция ПолучитьАвансДилера(Дилер, Подразделение, Период) Экспорт
	
	Возврат ПолучитьПредоплату(Дилер, Подразделение, Период);
	
КонецФункции

Функция ПолучитьАвансПоДокументу(Контрагент, Подразделение, Период, ДокументВзаиморасчетов) Экспорт
	
	Возврат ПолучитьПредоплату(Контрагент, Подразделение, Период, ДокументВзаиморасчетов);
	
КонецФункции

Функция ПолучитьПредоплату(Контрагент, Подразделение, Период, ДокументВзаиморасчетов = Неопределено)
	
	Сумма = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", Период);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Субконто1", Контрагент);
	Запрос.УстановитьПараметр("Субконто2", ДокументВзаиморасчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УправленческийОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.Остатки(
	|			&МоментВремени,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВзаиморасчетыСПокупателями),
	|			,
	|			Подразделение = &Подразделение
	|				И Субконто1 = &Субконто1
	|				И Субконто2 = &Субконто2) КАК УправленческийОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Сумма = Выборка.Сумма;
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

Функция ЗачестьАвансДилера(Движения, Дилер, Подразделение, Период, ДокументВзаиморасчетов, Сумма) Экспорт
	
	Движение = Движения.Управленческий.Добавить();
	Движение.Период = Период;
	Движение.Сумма = -Сумма;
	Движение.Подразделение = Подразделение;
	Движение.Содержание = "Дилер разместил " + Строка(ДокументВзаиморасчетов);
	
	Движение.СчетДт = ПланыСчетов.Управленческий.ВспомогательныйСчет;
	
	Движение.СчетКт = ПланыСчетов.Управленческий.ВзаиморасчетыСПокупателями;
	Движение.СубконтоКт.Контрагенты = Дилер;
	
	Движение = Движения.Управленческий.Добавить();
	Движение.Период = Период;
	Движение.Сумма = Сумма;
	Движение.Подразделение = Подразделение;
	Движение.Содержание = "Дилер разместил " + Строка(ДокументВзаиморасчетов);
	
	Движение.СчетДт = ПланыСчетов.Управленческий.ВспомогательныйСчет;
	
	Движение.СчетКт = ПланыСчетов.Управленческий.ВзаиморасчетыСПокупателями;
	Движение.СубконтоКт.Контрагенты = Дилер;
	Движение.СубконтоКт.ДокументВзаиморасчетов = ДокументВзаиморасчетов;
	
КонецФункции

Функция ПолучитьРазмерыЛиста(ТекущаяНоменклатура, Подразделение) Экспорт
	
	СтруктураРазмеровЛиста = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НастройкиНоменклатуры.ОсновнаяПоСкладу.ДлинаДетали, СпрНом.ДлинаДетали) КАК ВысотаЛиста,
	|	ЕСТЬNULL(НастройкиНоменклатуры.ОсновнаяПоСкладу.ШиринаДетали, СпрНом.ШиринаДетали) КАК ШиринаЛиста
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНом
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиНоменклатуры.СрезПоследних(, Подразделение = &Подразделение) КАК НастройкиНоменклатуры
	|		ПО (НастройкиНоменклатуры.Номенклатура = СпрНом.Ссылка)
	|ГДЕ
	|	СпрНом.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", ТекущаяНоменклатура);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтруктураРазмеровЛиста.Вставить("ВысотаЛиста", ВыборкаДетальныеЗаписи.ВысотаЛиста);
		СтруктураРазмеровЛиста.Вставить("ШиринаЛиста", ВыборкаДетальныеЗаписи.ШиринаЛиста);
		
	КонецЦикла;
	
	Возврат СтруктураРазмеровЛиста;
	
КонецФункции

Функция ПолучитьОстаткиВДругихЕдиницах(Номенклатура, Склад, Период, Подразделение) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Количество");
	
	Массив = Новый Массив;
	
	Если Номенклатура.Базовый Тогда
		ОтборНоменклатура = Номенклатура;
	Иначе
		ОтборНоменклатура = Номенклатура.БазоваяНоменклатура;
		Массив.Добавить(ОтборНоменклатура);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборНоменклатура", ОтборНоменклатура);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|Номенклатура.БазоваяНоменклатура = &ОтборНоменклатура";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Массив.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Склады);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Массив", Массив);
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УправленческийОстатки.Субконто2 КАК Номенклатура,
	|	УправленческийОстатки.КоличествоОстатокДт КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.МатериалыНаСкладе),
	|			&МассивСубконто,
	|			Подразделение = &Подразделение
	|				И Субконто1 = &Склад
	|				И Субконто2 В (&Массив)) КАК УправленческийОстатки";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция УстановитьОрганизацию(ДокОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ДокОбъект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ДокОбъект.Подразделение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ПриходДенежныхСредств") Тогда
		Основание = ДокОбъект.Субконто2Кт;
	ИначеЕсли ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.РасходДенежныхСредств") Тогда
		Основание = ДокОбъект.Субконто2Дт;
	КонецЕсли;
	
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.Договор") И Основание.Спецификация.Контрагент.ЮридическоеЛицо)
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияМатериалов") Тогда
		ИмяРеквизита = "ОрганизацияДляЮрЛиц";
	Иначе
		ИмяРеквизита = "ОрганизацияДляФизЛиц";
	КонецЕсли;
	
	ДокОбъект.Организация = ДокОбъект.Подразделение[ИмяРеквизита]
	
КонецФункции

Функция ДобавитьПоказателиСотрудникам(ДокОбъект, Движения) Экспорт
	
	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.РасходДенежныхСредств") Тогда
		ДокОснование = ДокОбъект.Субконто2Дт;
	ИначеЕсли ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ПриходДенежныхСредств") Тогда
		ДокОснование = ДокОбъект.Субконто2Кт;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокОснование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДокОснование.Автор) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипДокОснование = ТипЗнч(ДокОснование);
	
	Выручка = Перечисления.ВидыПоказателейСотрудников.Выручка;
	ВыручкаЗаДетали = Перечисления.ВидыПоказателейСотрудников.ВыручкаЗаДетали;
	ВыручкаЗаМатериалы = Перечисления.ВидыПоказателейСотрудников.ВыручкаЗаМатериалы;
	
	ФизЛицо = ДокОснование.Автор.ФизическоеЛицо;
	
	Если ТипДокОснование = Тип("ДокументСсылка.Договор") Тогда
		ДобавитьПоказательСотруднику(ФизЛицо, Выручка, ДокОбъект, Движения);
	ИначеЕсли ТипДокОснование = Тип("ДокументСсылка.ДополнительноеСоглашение") Тогда
		ФизЛицо = ДокОснование.Договор.Автор.ФизическоеЛицо;
		ДобавитьПоказательСотруднику(ФизЛицо, Выручка, ДокОбъект, Движения);
	ИначеЕсли ТипДокОснование = Тип("ДокументСсылка.Спецификация") Тогда
		ДобавитьПоказательСотруднику(ФизЛицо, Выручка, ДокОбъект, Движения);
		ДобавитьПоказательСотруднику(ФизЛицо, ВыручкаЗаДетали, ДокОбъект, Движения);
	ИначеЕсли ТипДокОснование = Тип("ДокументСсылка.РеализацияМатериалов") Тогда
		ДобавитьПоказательСотруднику(ФизЛицо, ВыручкаЗаМатериалы, ДокОбъект, Движения);
	КонецЕсли;
	
КонецФункции

Функция ДобавитьПоказательСотруднику(ФизЛицо, ВидПоказателя, ДокОбъект, Движения)
	
	Проводка = Движения.Управленческий.Добавить();
	Проводка.Период = ДокОбъект.Дата;
	Проводка.Подразделение = ДокОбъект.Подразделение;
	Проводка.Сумма = ДокОбъект.СуммаДокумента;
	
	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.РасходДенежныхСредств") Тогда
		
		Проводка.СчетКт = ПланыСчетов.Управленческий.ПоказателиСотрудника;
		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ВидыПоказателейСотрудников] = ВидПоказателя;
		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ФизическиеЛица] = ФизЛицо;
		
	ИначеЕсли ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ПриходДенежныхСредств") Тогда
		
		Проводка.СчетДт = ПланыСчетов.Управленческий.ПоказателиСотрудника;
		Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ВидыПоказателейСотрудников] = ВидПоказателя;
		Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФизическиеЛица] = ФизЛицо;
		
	КонецЕсли;
	
КонецФункции

Функция ОчисткаНеактуальныхРаскроев() Экспорт
	
	//ПО СПЕЦИФИКАЦИЯМ
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусСпец.Спецификация КАК Спецификация
	|ИЗ
	|	РегистрСведений.СтатусСпецификации.СрезПоследних(, ) КАК СтатусСпец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаскройДеталей КАК Раскрой
	|		ПО СтатусСпец.Спецификация = Раскрой.Объект
	|ГДЕ
	|	НЕ Раскрой.Объект ЕСТЬ NULL 
	|	И (СтатусСпец.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.Изготовлен)
	|			ИЛИ СтатусСпец.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.Отгружен)
	|			ИЛИ СтатусСпец.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.Установлен)
	|			ИЛИ СтатусСпец.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.Сохранен))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Документы.Спецификация.ОчиститьРаскрой(Выборка.Спецификация);
		
	КонецЦикла;
	
	//ПО НАРЯДАМ
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НарядСписокСпец.Ссылка КАК Наряд,
	|	КОЛИЧЕСТВО(НарядСписокСпец.Спецификация) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА СтатусСпец.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.Изготовлен)
	|					ИЛИ СтатусСпец.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.Отгружен)
	|					ИЛИ СтатусСпец.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификации.Установлен)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоГотовых
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	Документ.НарядЗадание.СписокСпецификаций КАК НарядСписокСпец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусСпецификации.СрезПоследних(, ) КАК СтатусСпец
	|		ПО НарядСписокСпец.Спецификация = СтатусСпец.Спецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаскройДеталей КАК Раскрой
	|		ПО НарядСписокСпец.Ссылка = Раскрой.Объект
	|ГДЕ
	|	НЕ Раскрой.Объект ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НарядСписокСпец.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Наряд КАК Наряд
	|ИЗ
	|	втДанные КАК Данные
	|ГДЕ
	|	Данные.Количество = Данные.КоличествоГотовых";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Документы.Спецификация.ОчиститьРаскрой(Выборка.Наряд);
		
	КонецЦикла;
	
	//УДАЛЕННЫЕ СПЕЦУХИ И СПЕЦУХИ БЕЗ СТАТУСА
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Рас.Объект КАК Об
	|ИЗ
	|	РегистрСведений.РаскройДеталей КАК Рас
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусСпецификации.СрезПоследних(, ) КАК СтатусСпец
	|		ПО Рас.Объект = СтатусСпец.Спецификация
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(Рас.Объект КАК Документ.Спецификация) ЕСТЬ NULL 
	|	И СтатусСпец.Статус ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Документы.Спецификация.ОчиститьРаскрой(Выборка.Об);
		
	КонецЦикла;
	
КонецФункции

Процедура УведомлениеОПросроченныхСлужебныхЗаписках() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура УстановитьПрефиксКонтрагента(Источник, Префикс) Экспорт
	
	Префикс = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Префикс, 2, "0", "Слева");
	
	Разделитель = "-";
	
	Префикс = Префикс + Разделитель;
	
КонецПроцедуры

Процедура ИзменитьВремяДокумента(Источник,Приращение) Экспорт
	
	Источник.Дата = НачалоДня(ТекущаяДата()) + Приращение;
	
КонецПроцедуры

Функция ПолучитьХэшСумму(Данные) Экспорт
	
	Хеш = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеш.Добавить(Данные);
	
	Возврат Хеш.ХешСумма;
	
КонецФункции

Функция ПолучитьСпецификациюДвери(ДверьСсылка) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Двери", ДверьСсылка);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СпецификацияСписокДверей.Ссылка
	|ИЗ
	|	Документ.Спецификация.СписокДверей КАК СпецификацияСписокДверей
	|ГДЕ
	|	СпецификацияСписокДверей.Двери = &Двери";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	Иначе
		
		Возврат Документы.Спецификация.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьФайл(СтруктураФайла) Экспорт
	
	Файл = Справочники.ФайлыЛекс.СоздатьЭлемент();
	Файл.ВладелецФайла = СтруктураФайла.ВладелецФайла;
	Файл.Наименование = СтруктураФайла.Наименование;
	Файл.Данные = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтруктураФайла.АдресВременногоХранилищаФайла));
	Файл.Дата = СтруктураФайла.Дата;
	Файл.Размер = СтруктураФайла.Размер;
	Файл.Автор = СтруктураФайла.Автор;
	Файл.Хэш = ЛексСервер.ПолучитьХэшСумму(Файл.Данные.Получить());
	Файл.Расширение = СтруктураФайла.Расширение;
	Файл.Пиктограмма = СтруктураФайла.Пиктограмма;
	
	Файл.Записать();
	
	Возврат Файл.Ссылка;
	
КонецФункции

Функция ПолучитьДанныеФайла(ФайлСсылка) Экспорт
	
	ДанныеФайла = Новый Структура();
	ДанныеФайла.Вставить("ВладелецФайла", ФайлСсылка.ВладелецФайла);
	ДанныеФайла.Вставить("Наименование", ФайлСсылка.Наименование);
	ДанныеФайла.Вставить("Дата", ФайлСсылка.Дата);
	ДанныеФайла.Вставить("Размер", ФайлСсылка.Размер);
	ДанныеФайла.Вставить("Автор", ФайлСсылка.Автор);
	ДанныеФайла.Вставить("Хэш", ФайлСсылка.Хэш);
	ДанныеФайла.Вставить("Расширение", ФайлСсылка.Расширение);
	ДанныеФайла.Вставить("Пиктограмма", ФайлСсылка.Пиктограмма);
	
	Возврат ДанныеФайла;
	
КонецФункции

Функция ПолучитьДанныеФайлаВХранилище(Файл) Экспорт
	
	
	Возврат ПоместитьВоВременноеХранилище(Файл.Данные.Получить());
	
КонецФункции

Функция ПроверятьСпецификациюДилера(Контрагент) Экспорт
	
	Проверять = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыДилеров.ПроверкаСпецификации
	|ИЗ
	|	РегистрСведений.ПараметрыДилеров.СрезПоследних(, Контрагент = &Контрагент) КАК ПараметрыДилеров";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Проверять = Выборка.ПроверкаСпецификации;
		
	КонецЕсли;
	
	Возврат Проверять;
	
КонецФункции

Функция ПолучитьНоменклатуру(ОбщНоменклатура, ВыбраннаяНоменклатура) Экспорт
	
	Ном = ВыбраннаяНоменклатура;
	
	Если Тип("СправочникСсылка.ОбщаяНоменклатура") = ТипЗнч(ВыбраннаяНоменклатура) Тогда
		Ном = ОбщНоменклатура[Справочники.ОбщаяНоменклатура.ПолучитьИмяПредопределенного(ВыбраннаяНоменклатура)];			
	КонецЕсли;
	
	Возврат Ном;
	
КонецФункции

Функция ПроверитьПодразделение(Документы) Экспорт
	
	Разные = Ложь;
	Подразделение = Документы[0].Подразделение;
	
	Для Каждого Док ИЗ Документы Цикл
		
		Если Док.Подразделение <> Подразделение Тогда
			Разные = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Разные;
	
КонецФункции

Процедура УстановкаПараметраСеансаТекущийКонтрагент(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра <> "ТекущийКонтрагент"
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыСеанса.ТекущийВнешнийПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСеанса.ТекущийКонтрагент = ПараметрыСеанса.ТекущийВнешнийПользователь.ОбъектАвторизации;
	
	УстановленныеПараметры.Добавить("ТекущийКонтрагент");
	
КонецПроцедуры

Процедура УстановкаПараметраСеансаТекущееПодразделение(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяПараметра <> "ТекущееПодразделение" Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
		Подразделение = ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо.Подразделение;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСеанса.ТекущийВнешнийПользователь) Тогда
		Подразделение = ПараметрыСеанса.ТекущийВнешнийПользователь.ОбъектАвторизации.Подразделение;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыСеанса.ТекущееПодразделение = Подразделение;
	УстановленныеПараметры.Добавить("ТекущееПодразделение");
	
КонецПроцедуры

Функция ЕстьДоступКПрофилюГруппДоступа(Пользователь, Профиль) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Профиль", Профиль);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь КАК Пользователь,
	|	ГруппыДоступаПользователи.Ссылка.Профиль
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Пользователь = &Пользователь
	|	И ГруппыДоступаПользователи.Ссылка.Профиль = &Профиль";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьВремяНовогоДокумента(Документ) Экспорт
	
	тз = ПолучитьТаблицуТиповИВремени();
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипДокумента", ТипЗнч(Документ));
	НайденныеСтроки = тз.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		НоваяДата = НайденныеСтроки[0].ВремяДокумента;
	Иначе
		НоваяДата = ТекущаяДата();
	КонецЕсли;
	
	Возврат НоваяДата;
	
КонецФункции

Функция ПолучитьТаблицуТиповИВремени()
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("ТипДокумента");
	тз.Колонки.Добавить("ВремяДокумента");
	
	Часов = 60 * 60;
	Полночь = НачалоДня(ТекущаяДата());
	
	ДобавитьСтрокуТипВремя(тз, "ПоступлениеМатериаловУслуг", Полночь + 9 * Часов);
	ДобавитьСтрокуТипВремя(тз, "АвансовыйОтчет", Полночь + 9 * Часов);
	ДобавитьСтрокуТипВремя(тз, "ПеремещениеМатериалов", Полночь + 9.5 * Часов);
	ДобавитьСтрокуТипВремя(тз, "ПереводНоменклатуры", Полночь + 10 * Часов);
	ДобавитьСтрокуТипВремя(тз, "ТребованиеНакладная", Полночь + 11 * Часов);
	ДобавитьСтрокуТипВремя(тз, "ИнвентаризацияМатериалов", Полночь + 16 * Часов);
	
	ДобавитьСтрокуТипВремя(тз, "НачислениеАмортизации", КонецМесяца(ТекущаяДата()));
	ДобавитьСтрокуТипВремя(тз, "ПлановыйЛимит", КонецМесяца(ТекущаяДата()));
	ДобавитьСтрокуТипВремя(тз, "ЗакрытиеМесяца", КонецМесяца(ТекущаяДата()));
	ДобавитьСтрокуТипВремя(тз, "ВстречаСКлиентом", НачалоЧаса(ТекущаяДата()));
	
	Возврат тз;
	
КонецФункции

Функция ДобавитьСтрокуТипВремя(тз, ИмяДокумента, ВремяДокумента)
	
	НоваяСтрока = тз.Добавить();
	НоваяСтрока.ТипДокумента = Тип("ДокументОбъект." + ИмяДокумента);
	НоваяСтрока.ВремяДокумента = ВремяДокумента;
	
КонецФункции
