//{ Васильев Александр Леонидович [27.08.2013]
// тут проёб. судя по названию модуля он должен быть ТОЛЬКО серверным
// у нас же стоит флаг Вызов сервера :(
// } Васильев Александр Леонидович [27.08.2013]

// Возвращает массив документов
// подвязанных к указанному
// dmn 2011_11_01
Функция НайтиПодчиненныеДокументы(ОснованиеСсылка, СтрокаМетаданные, ИмяРеквизита) Экспорт
	
	Если ОснованиеСсылка.Пустая() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	" + СтрокаМетаданные + " КАК Таблица
	|ГДЕ
	|	Таблица."+ИмяРеквизита+" = &ОснованиеСсылка";
	Запрос.УстановитьПараметр("ОснованиеСсылка", ОснованиеСсылка);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // НайтиПодчиненныеДокументы()

// Формирует реквизиты организации.
// В основном для печатных форм
//
// Параметры
//  Организация  - СправочникСсылкаОрганизация - организация
//                 реквизиты которой получаем
//
// Возвращаемое значение:
//   Структура   - структура с реквизитами организации
//
Функция ПолучитьРеквизитыОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Справочник.Организации
	|ГДЕ
	|	Ссылка = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Результат.Вставить("ОГРН", Выборка.ОГРН);
	Результат.Вставить("ДействуетНаОсновании", Выборка.ДействуетНаОсновании);
	Результат.Вставить("ДатаВыдачиОГРН", Формат(Выборка.ДатаВыдачиОГРН, "ДЛФ=DD"));
	Результат.Вставить("ИНН", Выборка.ИНН);
	Результат.Вставить("КПП", Выборка.КПП);
	Результат.Вставить("БИК", Выборка.БИК);
	Результат.Вставить("РасчетныйСчет", Выборка.РасчетныйСчет);
	Результат.Вставить("КорреспондирующийСчет", Выборка.КорреспондирующийСчет);
	Результат.Вставить("ПочтовыйИндекс", Выборка.ПочтовыйИндекс);
	Результат.Вставить("ЮридическийАдрес", Выборка.ЮридическийАдрес);
	Результат.Вставить("Банк", Выборка.Банк);
	Результат.Вставить("ПолноеНаименованиеОрганизации", Выборка.ПолноеНаименование);
	Результат.Вставить("КраткоеНаименование", Выборка.Наименование);
	Результат.Вставить("НаселенныйПункт", Выборка.НаселенныйПункт);
	Результат.Вставить("ТелефонОрганизации", Выборка.ТелефонОфиса);
	
	Возврат Результат;
	
КонецФункции // ПолучитьРеквизитыОрганизации()

Функция НастройкаПользователя(Пользователь, ИмяПараметра) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Значения.Значение,
	|	Настройки.ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК Значения
	|		ПО (Значения.Настройка = Настройки.Ссылка)
	|ГДЕ
	|	Значения.Пользователь = &Пользователь
	|	И Настройки.Наименование = &ИмяПараметра";
	Запрос.Параметры.Вставить("Пользователь",Пользователь);
	Запрос.Параметры.Вставить("ИмяПараметра",ИмяПараметра);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Если ТаблицаЗначений.Количество()>0 Тогда
		СтрокаТаблицы = ТаблицаЗначений[0];
		Если СтрокаТаблицы.Значение=Null Или СтрокаТаблицы.Значение=Неопределено Тогда
			Значение = СтрокаТаблицы.ТипЗначения.ПривестиЗначение(Значение);
		Иначе
			Значение = СтрокаТаблицы.Значение;
		КонецЕсли;
	Иначе
		Значение = Неопределено;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьДолгКонтрагентаНаДату(Контрагент, Период, СписокПодразделений) Экспорт
	
	Ответ = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			&Период,
	|			Контрагент = &Контрагент
	|				И Подразделение В (&СписокПодразделений)) КАК ВзаиморасчетыСКонтрагентамиОстатки";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Ответ = Выборка.СуммаОстаток;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции // ПолучитьДолгКонтрагентаНаДату()

Функция УстановитьНастройкуПользователя(Пользователь, ИмяНастройки, Значение) Экспорт
	
	Настройка = ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию(ИмяНастройки);
	Если Настройка <> ПланыВидовХарактеристик.НастройкиПользователей.ПустаяСсылка() Тогда
		
		Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
		Набор.Отбор.Пользователь.Установить(Пользователь);
		Набор.Отбор.Настройка.Установить(Настройка);
		Запись = Набор.Добавить();
		Запись.Пользователь = Пользователь;
		Запись.Настройка = Настройка;
		Запись.Значение = Значение;
		Набор.Записать();
		
	КонецЕсли;
	
КонецФункции // УстановитьНастройкуПользователя()

Функция ПолучитьДоверенностьСотрудника(Сотрудник, Организация) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НомерДоверенности", "Нет");
	Результат.Вставить("ДатаДоверенности", "Нет");
	
	#Если Никогда Тогда
		Сотрудник = Справочники.ФизическиеЛица.НайтиПоКоду();
	#КонецЕсли
	
	СтрокаДоверенность = Сотрудник.Доверенности.Найти(Организация);
	Если НЕ СтрокаДоверенность = Неопределено Тогда
		Результат.НомерДоверенности = СтрокаДоверенность.НомерДоверенности;
		Результат.ДатаДоверенности = Формат(СтрокаДоверенность.ДатаДоверенности, "ДЛФ=D");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьДоверенностьСотрудника()

// для формирования строки в раскрой
Функция СоздатьТаблицу(Строка) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	ЧислоКолонок = СтрЧислоВхождений(Строка,",");
	К = 0;
	Пока К <= ЧислоКолонок Цикл
		Инд = Найти(Строка,",");
		Если Инд <> 0 Тогда
			НазвКолонки = Лев(Строка,Инд-1);
			Строка = Сред(Строка,Инд+1);
		Иначе
			НазвКолонки = Строка;
		КонецЕсли;
		Таблица.Колонки.Добавить(НазвКолонки);
		К=К+1;
	КонецЦикла;
	Возврат Таблица;
	
КонецФункции

Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции

Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	Возврат Результат;
	
КонецФункции

// Формирует структуру со списоком всей доступной номенклатуры для деталей и 3д редактора
Функция ОтборФиксированныхНоменклатурныхГрупп(Подразделение) Экспорт
	
	СписокНоменклатурныхГрупп = Новый СписокЗначений;
	
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП16);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЛДСП10);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КантТ);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка045_19);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_19);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_35);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ДВП);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Столешница);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_45);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кромка2_42);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Гравировка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Зеркало);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Стекло);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиБезДоводчика);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиДляСтеколБезДоводчика);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиДляСтеколСДоводчиком);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиСДоводчиком);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Ручка);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.АГТПрофиль);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КромкаМДФ);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.КантАлюминиевый);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.МДФ8);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.МДФ18);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.АГТПанель);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ЩитМебельный);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Кожа);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.РамочныйАлюминий);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.Пристенок);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПетлиПоворотные);
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.СтеклоДляСкругляемогоФасада);
	
	МассивыНоменклатурныхГрупп = ОтборНоменклатурныхГрупп(СписокНоменклатурныхГрупп, Подразделение);
	
	Возврат МассивыНоменклатурныхГрупп;
	
КонецФункции // ОтборФиксированныхНоменклатурныхГрупп()

// Формирует структуру со списоком доступной номенклатуры
// Параметры
// СписокНоменклатурныхГрупп  - СписокЗначений
// Подразделение  - Справочник.Подразделение
Функция ОтборНоменклатурныхГрупп(СписокНоменклатурныхГрупп, Подразделение) Экспорт
	
	Если Подразделение.ВидПодразделения <> Перечисления.ВидыПодразделений.Производство Тогда
		фПодразделение = ПолучитьОсновноеПроизводство(Подразделение);
	Иначе
		фПодразделение = Подразделение;
	КонецЕсли;
	
	СтруктураМассивов = Новый Структура;
	Для каждого НоменклатурнаяГруппа Из СписокНоменклатурныхГрупп Цикл
		ИмяГруппы = Справочники.НоменклатурныеГруппы.ПолучитьИмяПредопределенного(НоменклатурнаяГруппа.Значение);
		СтруктураМассивов.Вставить(ИмяГруппы, Новый Массив);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатурныхГрупп", СписокНоменклатурныхГрупп);
	Запрос.УстановитьПараметр("Подразделение", фПодразделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО (НоменклатураПодразделений.Подразделение = &Подразделение)
	|			И НоменклатураПодразделений.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СпрНоменклатура.НоменклатурнаяГруппа В(&СписокНоменклатурныхГрупп)
	|	И СпрНоменклатура.Базовый
	|	И НоменклатураПодразделений.Доступность
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпрНоменклатура.Наименование
	|ИТОГИ ПО
	|	НоменклатурнаяГруппа";
	
	Результат = Запрос.Выполнить();
	ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИтоги.Следующий() Цикл
		
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ИмяГруппы = Справочники.НоменклатурныеГруппы.ПолучитьИмяПредопределенного(ВыборкаИтоги.НоменклатурнаяГруппа);
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураМассивов[ИмяГруппы].Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтруктураМассивов;
	
КонецФункции // ОтборНоменклатурныхГрупп()

Функция ПолучитьИмяХТМЛ (Значение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХранимыеФайлыВерсий.ХранимыйФайл,
	|	ХранимыеФайлыВерсий.ВерсияФайла.Владелец КАК Владелец,
	|	ХранимыеФайлыВерсий.ВерсияФайла.Владелец.ТекущаяВерсияРасширение КАК Расширение
	|ИЗ
	|	РегистрСведений.ХранимыеФайлыВерсий КАК ХранимыеФайлыВерсий
	|ГДЕ
	|	ХранимыеФайлыВерсий.ВерсияФайла.Владелец.ВладелецФайла = ЗНАЧЕНИЕ(Справочник.ПапкиФайлов.Html)
	|	И ХранимыеФайлыВерсий.ВерсияФайла.Владелец.ТекущаяВерсия.НомерВерсии = ХранимыеФайлыВерсий.ВерсияФайла.НомерВерсии
	|	И ХранимыеФайлыВерсий.ВерсияФайла.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Значение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ПутьХТМЛ = "Рабочий_" + Строка(Выборка.Владелец)+"."+Выборка.Расширение;
	Выборка.Сбросить();
	
	Возврат ПутьХТМЛ;
	
КонецФункции

Функция РасчитатьНорматив(Подразделение, Дата) Экспорт 
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= 
	"ВЫБРАТЬ
	|	ПлановыйЛимит.Норматив,
	|	ПлановыйЛимит.НормативныйМаксимум,
	|	ПлановыйЛимит.КоэффициентСверхнорматива
	|ИЗ
	|	РегистрСведений.ПлановыйЛимит.СрезПоследних(&Период, Подразделение = &Подразделение) КАК ПлановыйЛимит";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Выборка 	= Запрос.Выполнить().Выбрать();
	Норматив 	= Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Норматив = Новый Структура;
		
		Норматив.Вставить("Норматив", Выборка.Норматив);
		Норматив.Вставить("НормативныйМаксимум", Выборка.НормативныйМаксимум);
		Норматив.Вставить("КоэффициентСверхнорматива", Выборка.КоэффициентСверхнорматива);
		
	КонецЦикла;
	
	Возврат Норматив;
	
КонецФункции 

Функция ПроверитьЛимит(Подразделение, Дата, ЗарплатаЦеха, Стоимость) Экспорт 
	
	Лимит	 	= ЛексСервер.РасчитатьНорматив(Подразделение, Дата);
	Норматив	= Новый Структура;
	Норматив.Вставить("КоэффициентСверхнорматива", 1);
	Норматив.Вставить("ПревышенМаксимум", Ложь);
	Норматив.Вставить("Сверхнормативный", Ложь);
	
	Если Лимит <> Неопределено Тогда
		
		РаботНаДень = Лимит.СуммаОборот;
		
		Если РаботНаДень + ЗарплатаЦеха > Лимит.Норматив и РаботНаДень + ЗарплатаЦеха < Лимит.НормативныйМаксимум Тогда
			
			Норматив.Вставить("КоэффициентСверхнорматива", Лимит.НормативныйМаксимум);
			Норматив.Вставить("СуммаСверхнорматива", Стоимость * (Норматив.КоэффициентСверхнорматива-1));
			Норматив.Вставить("Сверхнормативный", Истина);
			
		ИначеЕсли РаботНаДень + ЗарплатаЦеха > Лимит.Максимум Тогда
			
			Норматив.Вставить("ПревышенМаксимум", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Норматив;
	
КонецФункции

Функция ПолучитьПредставлениеДокумента(Данные, Представление, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Данные.Номер);
	Дата = Формат(Данные.Дата, "ДФ=dd.MM.yy");
	ИмяДокумента = Данные.Ссылка.Метаданные().Синоним;
	Представление = ИмяДокумента + " № " + Номер + " от " + Дата;
	
КонецФункции

Функция ПолучитьОстатокОперационнойКассыНаДату(Период, ОперационнаяКасса, Подразделение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат 0;
	КонецЕсли;
	
	Ответ = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ОперационнаяКасса", ОперационнаяКасса);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УправленческийОстатки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ОперационнаяКасса),
	|			,
	|			Субконто2 = &ОперационнаяКасса
	|				И Подразделение = &Подразделение) КАК УправленческийОстатки";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Ответ = Выборка.СуммаОстаток;
	КонецЕсли;
	
	Возврат Ответ;
	
	
КонецФункции

Функция ПолучитьОсновноеПроизводство(Подразделение) Экспорт
	
	Регион = ЛексСервер.ЗначениеРеквизитаОбъекта(Подразделение, "Регион");
	
	Возврат ПолучитьПодразделениеПоРегиону(Регион, Перечисления.ВидыПодразделений.Производство);
	
КонецФункции

Функция ПолучитьОсновнуюРозницу(Подразделение) Экспорт
	
	Регион = ЛексСервер.ЗначениеРеквизитаОбъекта(Подразделение, "Регион");
	
	Возврат ПолучитьПодразделениеПоРегиону(Регион, Перечисления.ВидыПодразделений.Розница);
	
КонецФункции

Функция ПолучитьПодразделениеПоРегиону(Регион, ВидПодразделения) Экспорт
	
	Подразделение = Справочники.Подразделения.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регион", Регион);
	Запрос.УстановитьПараметр("ВидПодразделения", ВидПодразделения);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Подразделения.Ссылка
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Регион = &Регион
	|	И Подразделения.ВидПодразделения = &ВидПодразделения";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Подразделение = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции

Функция ПрисвоитьФискальныйНомер(Документ) Экспорт
	
	// { Васильев Александр Леонидович [19.04.2014]
	// Миша, а если нет договора?
	// ну совсем, левый платеж какой-нить
	// } Васильев Александр Леонидович [19.04.2014]
	
	РасходДенежныхСредств = ТипЗнч(Документ.ссылка) = Тип("ДокументСсылка.РасходДенежныхСредств");
	
	Если РасходДенежныхСредств Тогда
		Реквизит = Документ.Субконто2Дт;
	Иначе
		Реквизит = Документ.Субконто2Кт;
	КонецЕсли;
	
	Договор = Неопределено;
	Если ТипЗнч(Реквизит) = Тип("ДокументСсылка.Договор") Тогда
		Договор = Реквизит;
	ИначеЕсли ТипЗнч(Реквизит) = Тип("ДокументСсылка.ДополнительноеСоглашение") Тогда
		Договор = Реквизит.Договор;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПриходДенежныхСредств.Ссылка) КАК Количество
	|ИЗ
	|	Документ.ПриходДенежныхСредств КАК ПриходДенежныхСредств
	|ГДЕ
	|	ПриходДенежныхСредств.Субконто2Кт = &Договор";
	
	// в запросе тоже доп.соглашения учесть надо
	
	Если РасходДенежныхСредств Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриходДенежныхСредств", "РасходДенежныхСредств");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Субконто2Кт", "Субконто2Дт");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		КоличествоДокументов = 0;
		
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	НомерДоговора = "";
	
	НомерДоговора = Договор.Номер;
	
	НадоПрисвоитьНомер = СтрДлина(НомерДоговора) > 0;
	
	Если НадоПрисвоитьНомер Тогда
		
		ВыборкаДетальныеЗаписи.Следующий();
		КоличествоДокументов = Формат(ВыборкаДетальныеЗаписи.Количество + 1, "ЧЦ=3; ЧВН=; ЧГ=0");
		Документ.ФискальныйНомер = НомерДоговора + "_" + КоличествоДокументов;
		
	КонецЕсли;
	
КонецФункции

// Списывает материалы со склада, приходует в цех или на склад готовой продукции
//
// Параметры
//  Ссылка - ссылка на документ Наряд, ТребованиеНакладная или Комплектация
//  Движения - коллекция движений проводимого документа
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с недостающими материалами
//
Функция ПеремещениеМатериаловСЛогистики(Ссылка, Движения) Экспорт
	
	Отказ = Ложь;
	Комплектация = ТипЗнч(Ссылка) = Тип("ДокументСсылка.Комплектация");
	ИтогСуммаРеализации = 0;
	
	НехваткаМатериалов = Новый ТаблицаЗначений;
	НехваткаМатериалов.Колонки.Добавить("Номенклатура");
	НехваткаМатериалов.Колонки.Добавить("КоличествоТребуется");
	НехваткаМатериалов.Колонки.Добавить("КоличествоОстаток");
	НехваткаМатериалов.Колонки.Добавить("НомерСтроки");
	
	Если Комплектация Тогда
		
		СвойстваДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Подразделение, Дата");
		СвойстваДокумента.Вставить("Склад", Ссылка.Склад);
		Спецификация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Спецификация");
		ПодразделениеПроизводство = Спецификация.Производство;
	Иначе
		
		СвойстваДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Подразделение, Дата, Склад");
		ПодразделениеПроизводство = Ссылка.Подразделение;
		
	КонецЕсли;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Склады);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(СписокНоменклатуры.НомерСтроки) КАК НомерСтроки,
	|	СписокНоменклатуры.Номенклатура КАК Номенклатура,
	|	СУММА(СписокНоменклатуры.Количество) КАК Количество
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	Документ.НарядЗадание.СписокНоменклатуры КАК СписокНоменклатуры
	|ГДЕ
	|	СписокНоменклатуры.Ссылка В(&Ссылка) И СписокНоменклатуры.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокНоменклатуры.НомерСтроки,
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.Количество
	|ИЗ
	|	СписокНоменклатуры КАК СписокНоменклатуры";
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НарядЗадание", "ТребованиеНакладная");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА(СписокНоменклатуры.Количество)", "СУММА(СписокНоменклатуры.Отпущено)");
	ИначеЕсли Комплектация Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НарядЗадание", "Комплектация");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА(СписокНоменклатуры.Количество)", "СУММА(СписокНоменклатуры.КоличествоСклад + СписокНоменклатуры.КоличествоЦех)");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат НехваткаМатериалов;
	КонецЕсли;
	
	ТЗНоменклатура = РезультатЗапроса.Выгрузить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Управленческий");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Подразделение", Справочники.Подразделения.Логистика);
	ЭлементБлокировки.УстановитьЗначение("Счет", ПланыСчетов.Управленческий.МатериалыНаСкладе);
	ЭлементБлокировки.УстановитьЗначение(ПланыВидовХарактеристик.ВидыСубконто.Склады, СвойстваДокумента.Склад);
	
	ЭлементБлокировки.ИсточникДанных = ТЗНоменклатура;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура, "Номенклатура");
	Блокировка.Заблокировать();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокНоменклатуры.НомерСтроки,
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.Номенклатура.Базовый КАК Базовый,
	|	СписокНоменклатуры.Номенклатура.БазоваяНоменклатура КАК БазоваяНоменклатура,
	|	СписокНоменклатуры.Количество,
	|	ЕСТЬNULL(УправленческийОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|	ЕСТЬNULL(УправленческийОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА СписокНоменклатуры.Номенклатура.КоэффициентБазовых = 0
	|			ТОГДА 1
	|		ИНАЧЕ СписокНоменклатуры.Номенклатура.КоэффициентБазовых
	|	КОНЕЦ КАК КоэффициентБазовых,
	|	СписокНоменклатуры.Количество * ВЫБОР
	|		КОГДА СписокНоменклатуры.Номенклатура.КоэффициентБазовых = 0
	|			ТОГДА 1
	|		ИНАЧЕ СписокНоменклатуры.Номенклатура.КоэффициентБазовых
	|	КОНЕЦ * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Внутренняя, 0) КАК СуммаРеализации
	|ИЗ
	|	СписокНоменклатуры КАК СписокНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(
	|				&МоментВремени,
	|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.МатериалыНаСкладе),
	|				&ВидыСубконто,
	|				Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.Логистика)
	|					И Субконто1 = &Склад
	|					И Субконто2 В
	|						(ВЫБРАТЬ
	|							СписокНоменклатуры.Номенклатура
	|						ИЗ
	|							СписокНоменклатуры)) КАК УправленческийОстатки
	|		ПО СписокНоменклатуры.Номенклатура = УправленческийОстатки.Субконто2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&МоментВремени,
	|				Регион = &Регион
	|					И (Номенклатура В
	|							(ВЫБРАТЬ
	|								СписокНоменклатуры.Номенклатура
	|							ИЗ
	|								СписокНоменклатуры)
	|						ИЛИ Номенклатура В
	|							(ВЫБРАТЬ
	|								СписокНоменклатуры.Номенклатура.БазоваяНоменклатура
	|							ИЗ
	|								СписокНоменклатуры))) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (СписокНоменклатуры.Номенклатура.БазоваяНоменклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|				ИЛИ СписокНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура)";
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("МоментВремени", Ссылка.МоментВремени());
	Запрос.УстановитьПараметр("Регион", Ссылка.Подразделение.Регион);
	Запрос.УстановитьПараметр("Склад", СвойстваДокумента.Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоОстаток < Выборка.Количество Тогда
			
			НоваяСтрока = НехваткаМатериалов.Добавить();
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.НомерСтроки = Выборка.НомерСтроки;
			НоваяСтрока.КоличествоТребуется = Выборка.Количество;
			НоваяСтрока.КоличествоОстаток = Выборка.КоличествоОстаток;
			
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		////////////
		// ЛОГИСТИКА
		
		// Списывам материал со склада, увеличиваем расходы
		
		Если Выборка.КоличествоОстаток < Выборка.Количество ИЛИ Выборка.КоличествоОстаток = 0 Тогда
			
			Себестоимость = 0;
			
		Иначе
			
			Себестоимость = Выборка.Количество / Выборка.КоличествоОстаток * Выборка.СуммаОстаток;
			
		КонецЕсли;
		
		Движение = Движения.Управленческий.Добавить();
		Движение.Период = СвойстваДокумента.Дата;
		Движение.Подразделение = Справочники.Подразделения.Логистика;
		Движение.СчетКт = ПланыСчетов.Управленческий.МатериалыНаСкладе;
		Движение.СубконтоКт.Склады = СвойстваДокумента.Склад;
		Движение.СубконтоКт.Номенклатура = Выборка.Номенклатура;
		Движение.КоличествоКт = Выборка.Количество;
		Движение.СчетДт = ПланыСчетов.Управленческий.Расходы;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Справочники.СтатьиДоходовРасходов.РасходыСебестоимостьМатериалаЛогистика;
		Движение.Сумма = Себестоимость;
		
		////////////////
		// ПРОИЗВОДСТВО
		
		// { Васильев Александр Леонидович [13.12.2013]
		// списываем себестоимость материалов на расходы
		// при передаче в цех или на склад готовой продукции
		// } Васильев Александр Леонидович [13.12.2013]
		
		//Если НЕ Комплектация Тогда
		// Оприходуем материалы в цех по внутренней цене
		Движение = Движения.Управленческий.Добавить();
		Движение.Период = СвойстваДокумента.Дата;
		Движение.Подразделение = ПодразделениеПроизводство;
		Движение.Сумма = Выборка.СуммаРеализации;
		Движение.СчетДт = ПланыСчетов.Управленческий.ОсновноеПроизводство;
		Движение.СубконтоДт.Номенклатура = ?(Выборка.Базовый, Выборка.Номенклатура, Выборка.БазоваяНоменклатура);
		Движение.КоличествоДт = Выборка.Количество * Выборка.КоэффициентБазовых;
		Движение.СчетКт = ПланыСчетов.Управленческий.ВзаиморасчетыСПодразделениями;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = Справочники.Подразделения.Логистика;
		
		// расходы сразу же
		Движение = Движения.Управленческий.Добавить();
		Движение.Период = СвойстваДокумента.Дата;
		Движение.Подразделение = ПодразделениеПроизводство;
		Движение.Сумма = Выборка.СуммаРеализации;
		Движение.СчетДт = ПланыСчетов.Управленческий.Расходы;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Справочники.СтатьиДоходовРасходов.РасходыНаПроизводственныйМатериал;
		Движение.СчетКт = ПланыСчетов.Управленческий.ОсновноеПроизводство;
		Движение.СубконтоКт.Номенклатура = ?(Выборка.Базовый, Выборка.Номенклатура, Выборка.БазоваяНоменклатура);
		
		ИтогСуммаРеализации = Выборка.СуммаРеализации + ИтогСуммаРеализации;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		// ДОХОДЫ ЛОГИСТИКА
		
		// Доходы, взаиморасчетыСПроизводством
		
		Движение = Движения.Управленческий.Добавить();
		Движение.Период = СвойстваДокумента.Дата;
		Движение.Подразделение = Справочники.Подразделения.Логистика;
		
		Движение.СчетДт = ПланыСчетов.Управленческий.ВзаиморасчетыСПодразделениями;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = ПодразделениеПроизводство;
		
		Движение.СчетКт = ПланыСчетов.Управленческий.Доходы;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Справочники.СтатьиДоходовРасходов.ДоходыЛогистаОтПроизводства;
		
		Движение.Сумма = ИтогСуммаРеализации;
		
	КонецЕсли;
	
	Возврат НехваткаМатериалов;
	
КонецФункции

// Перемещает материалы со склада в производство, и тут же принимает расходы
//
// Параметры
//  <ТаблицаМатериалов>  - <ТаблицаЗначений> - <материалы для перемещения>
//  <Подразделение>  - <СправочникСсылка.Подразделения> - <подразделение>
//  <Склад>  - <СправочникСсылка.Склады> - <склад>
//  <Движения>  - <КоллекцияДвижений> - <коллекция движений регистратор>
//  <МоментВремени>  - <МоментВремени> - <момент времени регистратора>
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   - <таблица с недостающими материалами>
//
Функция ПеремещениеМатериаловВПроизводство(ТаблицаМатериалов, Подразделение, Склад, Движения, МоментВремени) Экспорт
	
	Отказ = Ложь;
	
	НехваткаМатериалов = Новый ТаблицаЗначений;
	НехваткаМатериалов.Колонки.Добавить("Номенклатура");
	НехваткаМатериалов.Колонки.Добавить("КоличествоТребуется");
	НехваткаМатериалов.Колонки.Добавить("КоличествоОстаток");
	НехваткаМатериалов.Колонки.Добавить("НомерСтроки");
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Склады);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Управленческий");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Период", МоментВремени.Дата);
	ЭлементБлокировки.УстановитьЗначение("Подразделение", Подразделение);
	ЭлементБлокировки.УстановитьЗначение("Счет", ПланыСчетов.Управленческий.МатериалыНаСкладе);
	ЭлементБлокировки.УстановитьЗначение(ПланыВидовХарактеристик.ВидыСубконто.Склады, Склад);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ТЗ", ТаблицаМатериалов);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СписокМатериалов.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	СписокМатериалов.Количество,
	|	СписокМатериалов.НомерСтроки
	|ПОМЕСТИТЬ СписокМатериалов
	|ИЗ
	|	&ТЗ КАК СписокМатериалов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокМатериалов.Номенклатура,
	|	СписокМатериалов.Количество,
	|	СписокМатериалов.НомерСтроки,
	|	ЕСТЬNULL(УправленческийОстатки.СуммаОстаток, 0) КАК СтоимостьОстаток,
	|	ЕСТЬNULL(УправленческийОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	СписокМатериалов.Номенклатура.БазоваяНоменклатура КАК БазоваяНоменклатура,
	|	СписокМатериалов.Номенклатура.Базовый КАК Базовый,
	|	СписокМатериалов.Номенклатура.КоэффициентБазовых КАК КоэффициентБазовых
	|ИЗ
	|	СписокМатериалов КАК СписокМатериалов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(
	|				&МоментВремени,
	|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.МатериалыНаСкладе),
	|				&ВидыСубконто,
	|				Подразделение = &Подразделение
	|					И Субконто2 = &Склад
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							т.Номенклатура
	|						ИЗ
	|							СписокМатериалов КАК т)) КАК УправленческийОстатки
	|		ПО СписокМатериалов.Номенклатура = УправленческийОстатки.Субконто1";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоОстаток < Выборка.Количество Тогда
			
			НоваяСтрока = НехваткаМатериалов.Добавить();
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.НомерСтроки = Выборка.НомерСтроки;
			НоваяСтрока.КоличествоТребуется = Выборка.Количество;
			НоваяСтрока.КоличествоОстаток = Выборка.КоличествоОстаток;
			
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			Если Выборка.КоличествоОстаток <> 0 Тогда
				Себестоимость = Выборка.Количество / Выборка.КоличествоОстаток * Выборка.СтоимостьОстаток;
			Иначе
				Себестоимость = 0;
			КонецЕсли;
			
			Если Выборка.Базовый Тогда
				Номенклатура = Выборка.Номенклатура;
				Количество = Выборка.Количество;
			Иначе
				Номенклатура = Выборка.БазоваяНоменклатура;
				Количество = Выборка.Количество * Выборка.КоэффициентБазовых;
			КонецЕсли;
			
			// перевод на основное производство
			
			Проводка = Движения.Управленческий.Добавить();
			Проводка.Подразделение = Подразделение;
			Проводка.Период = МоментВремени.Дата;
			
			Проводка.СчетДт = ПланыСчетов.Управленческий.ОсновноеПроизводство;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = Номенклатура;
			Проводка.КоличествоДт = Количество;
			
			Проводка.СчетКт = ПланыСчетов.Управленческий.МатериалыНаСкладе;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = Выборка.Номенклатура;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Склады] = Склад;
			Проводка.КоличествоКт = Выборка.Количество;
			
			Проводка.Сумма = Себестоимость;
			
			// и сразу же расходы, но без количества
			
			Проводка = Движения.Управленческий.Добавить();
			
			Проводка.Подразделение = Подразделение;
			Проводка.Период = МоментВремени.Дата;
			
			Проводка.СчетДт = ПланыСчетов.Управленческий.Расходы;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Справочники.СтатьиДоходовРасходов.РасходыСебестоимостьМатериалаПроизводство;
			
			Проводка.СчетКт = ПланыСчетов.Управленческий.ОсновноеПроизводство;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = Номенклатура;
			
			Проводка.Сумма = Себестоимость;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НехваткаМатериалов;
	
КонецФункции

// Добавление показателей сотрудникам за договоры
//
// Параметры:
//  Движение  - РегистрБухгалтерииНаборЗаписей.Управленческий
//
//  Договор  - Документ.Договор - Если проводится договор - то ссылка на него, если соглашение - реквизит "договор"
//
//  Сумма  - Число - Сумма проводимого документа
//
//  Коментарий  - Строка - Коментарий проводимого документа
//
Процедура СформироватьПоказателиСотрудников(Движения, Ссылка) Экспорт
	
	Дата = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Дата");
	Сумма = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "СуммаДокумента");
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Договор") Тогда
		
		Договор = Ссылка;
		Соглашение = Ложь;
		
	Иначе
		
		Договор = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Договор");
		Соглашение = Истина;
		
	КонецЕсли;
	
	СвойстваДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Договор, "Подразделение, Автор, Поделиться, ПроцентПоделиться, Комментарий, Спецификация");
	
	// показатели автору договора
	
	ОставшийсяПроцент = 100 - СвойстваДокумента.ПроцентПоделиться;
	СуммаСотруднику = Сумма /100 * ОставшийсяПроцент;
	Количество = 0.01 * ОставшийсяПроцент; 
	
	ДобавитьПоказательСотрудника(СвойстваДокумента.Подразделение, Договор.Автор.ФизическоеЛицо, Движения, Дата, СуммаСотруднику, Количество, Соглашение);
	
	// { Васильев Александр Леонидович [24.11.2014]
	// Это зачем здесь?
	
	// Показатели по замеру
	
	//Замер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СвойстваДокумента.Спецификация, "ДокументОснование");
	//
	//Если НЕ Соглашение И ТипЗнч(Замер) = Тип("ДокументСсылка.Замер") И НЕ Замер = Документы.Замер.ПустаяСсылка() Тогда
	//	
	//	Агент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Замер, "Агент");
	//	Проводка = Движения.Управленческий.Добавить();
	//	Проводка.Подразделение = СвойстваДокумента.Подразделение;
	//	Проводка.Период = Дата;
	//	Проводка.Сумма = 1;
	//	Проводка.СчетДт = ПланыСчетов.Управленческий.ПоказателиСотрудника;
	//	Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ВидыПоказателейСотрудников] = Перечисления.ВидыПоказателейСотрудников.КоличествоЗамеров;
	//	Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФизическиеЛица] = Агент;
	//	
	//КонецЕсли;
	
	// } Васильев Александр Леонидович [24.11.2014]
	
	// показатели "Поделиться"
	
	Если ЗначениеЗаполнено(СвойстваДокумента.Поделиться) И СвойстваДокумента.ПроцентПоделиться > 0 Тогда
		
		СуммаСотруднику = Сумма / 100 * СвойстваДокумента.ПроцентПоделиться;
		Количество = 0.01*СвойстваДокумента.ПроцентПоделиться;
		
		ДобавитьПоказательСотрудника(СвойстваДокумента.Подразделение, СвойстваДокумента.Поделиться, Движения, Дата, СуммаСотруднику, Количество, Соглашение);
		
	КонецЕсли;
	
КонецПроцедуры // ПроведениеДоговораИлиДопСоглашения()

// <Описание процедуры>
//
// Параметры:
//  Ссылка  - Документы.Договор, Документы.ДополнительноеСоглашение
//
//  СвойстваДокумента  - Структура - Значения реквизитов передаваемого документа
//
//  Проводки  - РегистрБухгалтерииНаборЗаписей.Управленческий - новая строка
//
//  Дата  - Дата - Дата проводимого документа
//
// Соглашение  - Булево - Договор или ДопСоглашение
//
Процедура ДобавитьПоказательСотрудника(Подразделение, ФизическоеЛицо, Движения, Дата, Сумма, Количество, Соглашение)
	
	// { Васильев Александр Леонидович [21.10.2013]
	// изменилась логика
	// Количество заключенных договоров отдельно, стоимость отдельно (разные показатели)
	// значение показателя -- ресурс регистра Сумма
	// } Васильев Александр Леонидович [21.10.2013]
	
	Проводки = Движения.Управленческий.Добавить();
	Проводки.Период = Дата;
	Проводки.Подразделение = Подразделение;
	Проводки.СчетДт = ПланыСчетов.Управленческий.ПоказателиСотрудника;
	
	Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ВидыПоказателейСотрудников] = Перечисления.ВидыПоказателейСотрудников.СтоимостьЗаключенныхДоговоров;
	Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФизическиеЛица] = ФизическоеЛицо;
	
	Проводки.Сумма = Сумма;
	
	Если НЕ Соглашение Тогда
		Проводки = Движения.Управленческий.Добавить();
		Проводки.Период = Дата;
		Проводки.Подразделение = Подразделение;
		Проводки.СчетДт = ПланыСчетов.Управленческий.ПоказателиСотрудника;
		
		Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ВидыПоказателейСотрудников] = Перечисления.ВидыПоказателейСотрудников.КоличествоЗаключенныхДоговоров;
		Проводки.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ФизическиеЛица] = ФизическоеЛицо;
		
		Проводки.Сумма = Количество;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПроведениеДоговора()

Функция ЗаполнитьРеквизитОтверстиями(Данные, СтрокаОтверстий, ШиринаДетали, ВысотаДетали, ПоворотДетали = Неопределено) Экспорт 
	
	Если (ПоворотДетали <> Неопределено) И ПоворотДетали Тогда
		ТаблицаОтверстий = ОпределитьШагОтверстия(ЗначениеИзСтрокиВнутр(СтрокаОтверстий), ВысотаДетали, ШиринаДетали);
	Иначе
		ТаблицаОтверстий = ОпределитьШагОтверстия(ЗначениеИзСтрокиВнутр(СтрокаОтверстий), ШиринаДетали, ВысотаДетали);
	КонецЕсли;
	
	СтрокаСверху = ТаблицаОтверстий.Найти("Сверху", "РасположениеОтверстия");
	СтрокаСнизу = ТаблицаОтверстий.Найти("Снизу", "РасположениеОтверстия");
	СтрокаСлева = ТаблицаОтверстий.Найти("Слева", "РасположениеОтверстия");
	СтрокаСправа = ТаблицаОтверстий.Найти("Справа", "РасположениеОтверстия");
	СтрокаЦентр = ТаблицаОтверстий.Найти("Центр", "РасположениеОтверстия");
	СтрокаЦентр7 = ТаблицаОтверстий.Найти("Центр7", "РасположениеОтверстия");
	СтрокаЦентр8 = ТаблицаОтверстий.Найти("Центр8", "РасположениеОтверстия");
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Данные.Вставить("Разделитель", "☻");
		ЭтоСтруктура = Истина;
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		Данные = "";
		ЭтоСтруктура = Ложь;
	КонецЕсли;
	
	Европаз = ТаблицаОтверстий.НайтиСтроки(Новый Структура ("ВидОтверстий", Перечисления.ВидыОтверстий.Европаз));
	Для Каждого Строка Из Европаз Цикл
		Если Строка.РасположениеОтверстия = "Сверху" Тогда
			Если ЭтоСтруктура Тогда
				Данные.ЕвроПазВерх = "1";
			Иначе
				Данные = ""; 
			КонецЕсли;
			СтрокаСверху = Неопределено;
		ИначеЕсли Строка.РасположениеОтверстия = "Снизу" Тогда
			Если ЭтоСтруктура Тогда
				Данные.ЕвроПазНиз = "1";
			Иначе
				Данные = "";
			КонецЕсли;	
			СтрокаСнизу = Неопределено;
		ИначеЕсли Строка.РасположениеОтверстия = "Слева" Тогда
			Если ЭтоСтруктура Тогда
				Данные.ЕвроПазЛево = "1";
			Иначе
				Данные = "";
			КонецЕсли;
			СтрокаСлева = Неопределено;
		ИначеЕсли Строка.РасположениеОтверстия = "Справа" Тогда
			Если ЭтоСтруктура Тогда
				Данные.ЕвроПазПраво = "1";
			Иначе
				Данные = "";
			КонецЕсли;
			СтрокаСправа = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаСверху) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаСверху.ВидОтверстий);
		Если ЭтоСтруктура Тогда
			Данные.Вставить("Сторона1", ВидОтверстийЗначение + "_1_" + СтрокаСверху.Количество + "_" + СтрокаСверху.Смещение + "_" + СтрокаСверху.Шаг + "_" + СтрокаСверху.Отступ);	
		Иначе
			Данные = Данные + ВидОтверстийЗначение + "_1_" + СтрокаСверху.Количество + "_" + СтрокаСверху.Смещение + "_" + СтрокаСверху.Шаг + "_" + СтрокаСверху.Отступ + "#";	
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаСнизу) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаСнизу.ВидОтверстий);
		Если ЭтоСтруктура Тогда
			Данные.Вставить("Сторона2", ВидОтверстийЗначение + "_2_" + СтрокаСнизу.Количество + "_" + СтрокаСнизу.Смещение + "_" + СтрокаСнизу.Шаг + "_" + СтрокаСнизу.Отступ);	
		Иначе
			Данные = Данные + ВидОтверстийЗначение + "_2_" + СтрокаСнизу.Количество + "_" + СтрокаСнизу.Смещение + "_" + СтрокаСнизу.Шаг + "_" + СтрокаСнизу.Отступ + "#";	
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаСлева) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаСлева.ВидОтверстий);
		Если ЭтоСтруктура Тогда
			Данные.Вставить("Сторона3", ВидОтверстийЗначение + "_3_" + СтрокаСлева.Количество + "_" + СтрокаСлева.Смещение + "_" + СтрокаСлева.Шаг + "_" + СтрокаСлева.Отступ);	
		Иначе
			Данные = Данные + ВидОтверстийЗначение + "_3_" + СтрокаСлева.Количество + "_" + СтрокаСлева.Смещение + "_" + СтрокаСлева.Шаг + "_" + СтрокаСлева.Отступ + "#";	
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаСправа) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаСправа.ВидОтверстий);
		Если ЭтоСтруктура Тогда
			Данные.Вставить("Сторона4", ВидОтверстийЗначение + "_4_" + СтрокаСправа.Количество + "_" + СтрокаСправа.Смещение + "_" + СтрокаСправа.Шаг + "_" + СтрокаСправа.Отступ);	
		Иначе
			Данные = Данные + ВидОтверстийЗначение + "_4_" + СтрокаСправа.Количество + "_" + СтрокаСправа.Смещение + "_" + СтрокаСправа.Шаг + "_" + СтрокаСправа.Отступ + "#";	
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЦентр) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаЦентр.ВидОтверстий);
		ДопСтрока = Строка(СтрокаЦентр.ВысотаПервойЛинии);
		Если ВидОтверстийЗначение = "1" Тогда
			Если СтрокаЦентр.ВысотаВторойЛинии > 0 Тогда
				ДопСтрока = ДопСтрока + "_" + Строка(СтрокаЦентр.ВысотаВторойЛинии);
			КонецЕсли;
		ИначеЕсли ВидОтверстийЗначение = "5" Тогда
			ДопСтрока = ДопСтрока + "_" + Строка(СтрокаЦентр.КоличествоКолонок);
		КонецЕсли;
		Если ЭтоСтруктура Тогда
			Данные.Вставить("Сторона5", ВидОтверстийЗначение + "_5_" + СтрокаЦентр.Количество + "_" + СтрокаЦентр.Смещение + "_" + СтрокаЦентр.Шаг + "_" + ДопСтрока + "_" + СтрокаЦентр.Отступ);
		Иначе
			Данные = Данные + ВидОтверстийЗначение + "_5_" + СтрокаЦентр.Количество + "_" + СтрокаЦентр.Смещение + "_" + СтрокаЦентр.Шаг + "_" + ДопСтрока + "_" + СтрокаЦентр.Отступ + "#";
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЦентр7) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаЦентр7.ВидОтверстий);
		Если СтрокаЦентр7.ВысотаПервойЛинии > 0 Тогда
			Если ЭтоСтруктура Тогда
				Данные.Вставить("Сторона6", ВидОтверстийЗначение + "_5_" + СтрокаЦентр7.Количество + "_" + СтрокаЦентр7.Смещение + "_" + СтрокаЦентр7.Шаг + "_" + СтрокаЦентр7.ВысотаПервойЛинии + "_1_" + СтрокаЦентр7.Отступ);
			Иначе
				Данные = Данные + ВидОтверстийЗначение + "_5_" + СтрокаЦентр7.Количество + "_" + СтрокаЦентр7.Смещение + "_" + СтрокаЦентр7.Шаг + "_" + СтрокаЦентр7.ВысотаПервойЛинии + "_1_" + СтрокаЦентр7.Отступ + "#";
			КонецЕсли;
		КонецЕсли;
		Если СтрокаЦентр7.ВысотаВторойЛинии > 0 Тогда
			Если ЭтоСтруктура Тогда
				Данные.Вставить("Сторона7", ВидОтверстийЗначение + "_5_" + СтрокаЦентр7.Количество + "_" + СтрокаЦентр7.Смещение + "_" + СтрокаЦентр7.Шаг + "_" + СтрокаЦентр7.ВысотаВторойЛинии + "_1_" + СтрокаЦентр7.Отступ);
			Иначе
				Данные = Данные + ВидОтверстийЗначение + "_5_" + СтрокаЦентр7.Количество + "_" + СтрокаЦентр7.Смещение + "_" + СтрокаЦентр7.Шаг + "_" + СтрокаЦентр7.ВысотаВторойЛинии + "_1_" + СтрокаЦентр7.Отступ + "#";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЦентр8) Тогда
		ВидОтверстийЗначение = ПолучитьВидОтверстийЗначение(СтрокаЦентр8.ВидОтверстий);
		Если СтрокаЦентр8.ВысотаПервойЛинии > 0 Тогда
			Если ЭтоСтруктура Тогда
				Данные.Вставить("Сторона8", ВидОтверстийЗначение + "_5_" + СтрокаЦентр8.Количество + "_" + СтрокаЦентр8.Смещение + "_" + СтрокаЦентр8.Шаг + "_" + СтрокаЦентр8.ВысотаПервойЛинии + "_1_" + СтрокаЦентр8.Отступ);
			Иначе
				Данные = Данные + ВидОтверстийЗначение + "_5_" + СтрокаЦентр8.Количество + "_" + СтрокаЦентр8.Смещение + "_" + СтрокаЦентр8.Шаг + "_" + СтрокаЦентр8.ВысотаПервойЛинии + "_1_" + СтрокаЦентр8.Отступ + "#";
			КонецЕсли;
		КонецЕсли;
		Если СтрокаЦентр8.ВысотаВторойЛинии > 0 Тогда
			Если ЭтоСтруктура Тогда
				Данные.Вставить("Сторона9", ВидОтверстийЗначение + "_5_" + СтрокаЦентр8.Количество + "_" + СтрокаЦентр8.Смещение + "_" + СтрокаЦентр8.Шаг + "_" + СтрокаЦентр8.ВысотаВторойЛинии + "_1_" + СтрокаЦентр8.Отступ);
			Иначе
				Данные = Данные + ВидОтверстийЗначение + "_5_" + СтрокаЦентр8.Количество + "_" + СтрокаЦентр8.Смещение + "_" + СтрокаЦентр8.Шаг + "_" + СтрокаЦентр8.ВысотаВторойЛинии + "_1_" + СтрокаЦентр8.Отступ + "#";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьСтруктуруЕвропазов(СтруктураОтверстий) Экспорт
	
	ТаблицаОтверстий = ЗначениеИзСтрокиВнутр(СтруктураОтверстий);
	
	СтруктураПоиска = Новый Структура("ВидОтверстий", Перечисления.ВидыОтверстий.Европаз);
	Европаз = ТаблицаОтверстий.НайтиСтроки(СтруктураПоиска);
	
	СтруктураЕвропазов = Новый Структура;
	СтруктураЕвропазов.Вставить("Сверху","0");
	СтруктураЕвропазов.Вставить("Снизу","0");
	СтруктураЕвропазов.Вставить("Слева","0");
	СтруктураЕвропазов.Вставить("Справа","0");
	
	Для Каждого Элемент Из Европаз Цикл
		Если Элемент.РасположениеОтверстия = "Сверху" Тогда
			СтруктураЕвропазов.Удалить("Сверху");
			СтруктураЕвропазов.Вставить("Сверху","1");
		ИначеЕсли Элемент.РасположениеОтверстия = "Снизу" Тогда
			СтруктураЕвропазов.Удалить("Снизу");
			СтруктураЕвропазов.Вставить("Снизу","1");
		ИначеЕсли Элемент.РасположениеОтверстия = "Слева" Тогда
			СтруктураЕвропазов.Удалить("Слева");
			СтруктураЕвропазов.Вставить("Слева","1");
		ИначеЕсли Элемент.РасположениеОтверстия = "Справа" Тогда
			СтруктураЕвропазов.Удалить("Справа");
			СтруктураЕвропазов.Вставить("Справа","1");
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураЕвропазов;
	
КонецФункции

Функция ПолучитьВидОтверстийЗначение(ВидОтверстий)
	
	Если ВидОтверстий = Перечисления.ВидыОтверстий.ПазыПетель Тогда Возврат "3";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.ТорцеваяПрисадка Тогда Возврат "2";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.ПрисадкаПодЕвровинт Тогда Возврат "1";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.ПрисадкаПодСтяжки Тогда Возврат "4";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.ПрисадкаПодПолкодержательАвто Тогда Возврат "5";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.Европаз Тогда Возврат "6";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.ПрисадкаПодПолкодержатель Тогда Возврат "7";
	ИначеЕсли ВидОтверстий = Перечисления.ВидыОтверстий.ОбратнаяПрисадка Тогда Возврат "8";
	КонецЕсли;		
КонецФункции

Функция ОпределитьШагОтверстия(ТаблицаОтверстий, ШиринаДетали, ВысотаДетали) 
	
	Для Каждого СтрокаОтверстий Из ТаблицаОтверстий Цикл
		РасположениеОтверстия = СтрокаОтверстий.РасположениеОтверстия;
		Если РасположениеОтверстия = "Слева" ИЛИ РасположениеОтверстия = "Справа" Тогда 
			Размер = ВысотаДетали;
		КонецЕсли;
		Если РасположениеОтверстия = "Сверху" ИЛИ РасположениеОтверстия = "Снизу" ИЛИ РасположениеОтверстия = "Центр" 
			ИЛИ РасположениеОтверстия = "Центр7" ИЛИ РасположениеОтверстия = "Центр8" Тогда 
			Размер = ШиринаДетали;
		КонецЕсли;
		
		Если СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ПазыПетель") 
			ИЛИ СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ТорцеваяПрисадка") Тогда
			Если СтрокаОтверстий.Количество > 1 И СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ПазыПетель") Тогда
				СреднийИнтервал = Цел((Размер  - (СтрокаОтверстий.Смещение + 50)) / (СтрокаОтверстий.Количество - 1));
			ИначеЕсли СтрокаОтверстий.Количество > 1 И СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ТорцеваяПрисадка") Тогда	
				СреднийИнтервал = Цел((Размер - (СтрокаОтверстий.Смещение + СтрокаОтверстий.Смещение)) / (СтрокаОтверстий.Количество - 1));
			Иначе
				СреднийИнтервал = ?(СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ТорцеваяПрисадка"), 32, 0);
			КонецЕсли;
			Если СреднийИнтервал < 32 Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Нет возможности расположить количество отверстий равное - %1 на стороне размером - %2 и смещением - %3", СтрокаОтверстий.Количество, Размер, СтрокаОтверстий.Смещение);
				ВызватьИсключение Текст;
				ТаблицаОтверстий.Удалить(СтрокаОтверстий);
			Иначе
				Шаг = Цел(СреднийИнтервал / 32);
				СтрокаОтверстий.Шаг = Шаг * 32;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ПрисадкаПодЕвровинт") 
			ИЛИ СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ПрисадкаПодСтяжки") Тогда
			СтрокаОтверстий.Смещение = ВернутьСмещение(Размер);
			Если СтрокаОтверстий.Количество > 1 Тогда
				СтрокаОтверстий.Шаг = Окр((Размер - 2 * СтрокаОтверстий.Смещение) / (СтрокаОтверстий.Количество - 1), 0);
			Иначе
				СтрокаОтверстий.Шаг = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если РасположениеОтверстия = "Центр" И СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ПрисадкаПодПолкодержательАвто") Тогда
			Если СтрокаОтверстий.Количество > Цел((ВысотаДетали - 200) / 50) + 1 Тогда
				СтрокаОтверстий.Количество = Цел((ВысотаДетали - 200) / 50) + 1; 
			КонецЕсли;
			СтрокаОтверстий.КоличествоКолонок = СтрокаОтверстий.Количество;
			СтрокаОтверстий.ВысотаПервойЛинии = ВысотаДетали - 50 - СтрокаОтверстий.КоличествоКолонок * 50;
			СтрокаОтверстий.Смещение = 64;
			Если Размер >= 255 И Размер <= 285  Тогда СтрокаОтверстий.Шаг = 160; СтрокаОтверстий.Количество = 2;
			ИначеЕсли Размер >= 286 И Размер <= 320  Тогда СтрокаОтверстий.Шаг = 192; СтрокаОтверстий.Количество = 2;
			ИначеЕсли Размер >= 321 И Размер <= 350  Тогда СтрокаОтверстий.Шаг = 224; СтрокаОтверстий.Количество = 2;
			ИначеЕсли Размер >= 351 И Размер <= 384  Тогда СтрокаОтверстий.Шаг = 256; СтрокаОтверстий.Количество = 2;
			ИначеЕсли Размер >= 385 И Размер <= 416  Тогда СтрокаОтверстий.Шаг = 288; СтрокаОтверстий.Количество = 2;
			ИначеЕсли Размер >= 417 И Размер <= 477  Тогда СтрокаОтверстий.Шаг = 160; СтрокаОтверстий.Количество = 3;
			ИначеЕсли Размер >= 478 И Размер <= 541  Тогда СтрокаОтверстий.Шаг = 192; СтрокаОтверстий.Количество = 3;
			ИначеЕсли Размер >= 542 И Размер <= 605  Тогда СтрокаОтверстий.Шаг = 224; СтрокаОтверстий.Количество = 3;
			ИначеЕсли Размер >= 606 И Размер <= 650  Тогда СтрокаОтверстий.Шаг = 256; СтрокаОтверстий.Количество = 3;
			Иначе 
				СтрокаОтверстий.Шаг = 0; 
				СтрокаОтверстий.Количество = 0;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Размещение типа элементов Х для данного размера не установлено!", , "Элементы.Детали.ТекущиеДанные.ВысотаДетали");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Размещение типа элементов Х для данного размера не установлено!", , "Элементы.Детали.ТекущиеДанные.ШиринаДетали");
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ПрисадкаПодПолкодержатель")
			ИЛИ СтрокаОтверстий.ВидОтверстий = ПредопределенноеЗначение("Перечисление.ВидыОтверстий.ОбратнаяПрисадка")Тогда
			Если СтрокаОтверстий.Количество > 1 Тогда
				СтрокаОтверстий.Шаг = Окр((Размер - 2 * СтрокаОтверстий.Смещение) / (СтрокаОтверстий.Количество - 1), 0);
			Иначе
				СтрокаОтверстий.Шаг = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОтверстий;
	
КонецФункции

Функция ВернутьСмещение(Размер)
	
	Если Размер > 1800 Тогда Возврат 150;
	ИначеЕсли Размер > 900 Тогда Возврат 120;
	ИначеЕсли Размер > 600 Тогда Возврат 70;
	ИначеЕсли Размер > 300 Тогда Возврат 64;
	ИначеЕсли Размер > 200 Тогда Возврат 50;
	Иначе Возврат 45;
	КонецЕсли;
	
КонецФункции

// Возвращает скидку контрагента для подразделения на конкретную дату
//
// Параметры
//  <Подразделение>  - <СправочникСсылка.Подразделение> - <Подразделение которое предоставляет скидку>
//  <Период>  - <Дата> - <Период которому соответствует ссылка>
//  <Контрагент>  - <СправочникСсылка.Контрагент> - <Контрагент которому предоставляется ссылка>
//
// Возвращаемое значение:
//   <Структура>   - <структура со скидками на услуги и на материалы>
//
Функция ПолучитьСкидкуКонтрагента(Подразделение, Период, Контрагент) Экспорт
	
	Ответ = Новый Структура("СкидкаНаМатериалы, СкидкаНаУслуги", 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизвольныеСкидкиКонтрагентамСрезПоследних.СкидкаНаМатериалы,
	|	ПроизвольныеСкидкиКонтрагентамСрезПоследних.СкидкаНаУслуги
	|ИЗ
	|	РегистрСведений.ПроизвольныеСкидкиКонтрагентам.СрезПоследних(
	|			&Период,
	|			Подразделение = &Подразделение
	|				И Контрагент = &Контрагент) КАК ПроизвольныеСкидкиКонтрагентамСрезПоследних";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ответ.СкидкаНаМатериалы = Выборка.СкидкаНаМатериалы;
		Ответ.СкидкаНаУслуги = Выборка.СкидкаНаУслуги;
	КонецЕсли;
	
	Если Ответ.СкидкаНаМатериалы + Ответ.СкидкаНаУслуги = 0 Тогда
		
		// произвольная скидка не установлена
		// смотрим по обороту (только нужно решить -- принесённые деньги или отгруженные изделия)
		
		НачалоПериода = НачалоМесяца(ДобавитьМесяц(Период, -1));
		КонецПериода = КонецМесяца(ДобавитьМесяц(Период, -1));
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УправленческийОбороты.СуммаОборот
		|ПОМЕСТИТЬ втОборотЗаМесяц
		|ИЗ
		|	РегистрБухгалтерии.Управленческий.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Месяц,
		|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ДенежныеСредства)),
		|			,
		|			Подразделение = &Подразделение
		|				И КорСубконто1 = &Контрагент,
		|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВзаиморасчетыСПокупателями),
		|			) КАК УправленческийОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втОборотЗаМесяц.СуммаОборот, 0) КАК СуммаОборот,
		|	ЕСТЬNULL(ДилерскиеСкидкиСрезПоследних.ПервыйПределСумма, 0) КАК ПервыйПределСумма,
		|	ЕСТЬNULL(ДилерскиеСкидкиСрезПоследних.ПервыйПределСкидкаМатериалы, 0) КАК ПервыйПределСкидкаМатериалы,
		|	ЕСТЬNULL(ДилерскиеСкидкиСрезПоследних.ПервыйПределСкидкаУслуги, 0) КАК ПервыйПределСкидкаУслуги,
		|	ЕСТЬNULL(ДилерскиеСкидкиСрезПоследних.ВторойПределСумма, 0) КАК ВторойПределСумма,
		|	ЕСТЬNULL(ДилерскиеСкидкиСрезПоследних.ВторойПределСкидкаМатериалы, 0) КАК ВторойПределСкидкаМатериалы,
		|	ЕСТЬNULL(ДилерскиеСкидкиСрезПоследних.ВторойПределСкидкаУслуги, 0) КАК ВторойПределСкидкаУслуги,
		|	ЕСТЬNULL(ДилерскиеСкидкиСрезПоследних.ТретийПределСумма, 0) КАК ТретийПределСумма,
		|	ЕСТЬNULL(ДилерскиеСкидкиСрезПоследних.ТретийПределСкидкаМатериалы, 0) КАК ТретийПределСкидкаМатериалы,
		|	ЕСТЬNULL(ДилерскиеСкидкиСрезПоследних.ТретийПределСкидкаУслуги, 0) КАК ТретийПределСкидкаУслуги
		|ИЗ
		|	РегистрСведений.ДилерскиеСкидки.СрезПоследних(&КонецПериода, Подразделение = &Подразделение) КАК ДилерскиеСкидкиСрезПоследних
		|		ПОЛНОЕ СОЕДИНЕНИЕ втОборотЗаМесяц КАК втОборотЗаМесяц
		|		ПО (ИСТИНА)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если Выборка.СуммаОборот >= Выборка.ТретийПределСумма Тогда
				Ответ.СкидкаНаМатериалы = Выборка.ТретийПределСкидкаМатериалы;
				Ответ.СкидкаНаУслуги = Выборка.ТретийПределСкидкаУслуги;
			ИначеЕсли Выборка.СуммаОборот >= Выборка.ВторойПределСумма Тогда
				Ответ.СкидкаНаМатериалы = Выборка.ВторойПределСкидкаМатериалы;
				Ответ.СкидкаНаУслуги = Выборка.ВторойПределСкидкаУслуги;
			ИначеЕсли Выборка.СуммаОборот >= Выборка.ПервыйПределСумма Тогда
				Ответ.СкидкаНаМатериалы = Выборка.ПервыйПределСкидкаМатериалы;
				Ответ.СкидкаНаУслуги = Выборка.ПервыйПределСкидкаУслуги;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьОборотДилераЗаМесяц(Период, Контрагент, Подразделение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Оборот = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УправленческийОбороты.СуммаОборотКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Месяц,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВзаиморасчетыСПокупателями),
	|			,
	|			Подразделение = &Подразделение
	|				И Субконто1 = &Контрагент,
	|			,
	|			) КАК УправленческийОбороты";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Оборот = Выборка.Сумма;
	КонецЕсли;
	
	Возврат Оборот;
	
КонецФункции

Функция ПолучитьСпецификацииПоСтатусу (Подразделение, Статус) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусСпецификацииСрезПоследних.Спецификация
	|ИЗ
	|	РегистрСведений.СтатусСпецификации.СрезПоследних(, ) КАК СтатусСпецификацииСрезПоследних
	|ГДЕ
	|	СтатусСпецификацииСрезПоследних.Спецификация.Проведен
	|	И СтатусСпецификацииСрезПоследних.Спецификация.Производство = &Производство
	|	И СтатусСпецификацииСрезПоследних.Статус = &Статус
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусСпецификацииСрезПоследних.Спецификация.ДатаИзготовления";
	
	Запрос.УстановитьПараметр("Производство", Подразделение);
	Запрос.УстановитьПараметр("Статус", Статус);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция РеализацияИзделийРозничныеПроводки(МассивСпецификаций, Дата, Движения, ВызовИзАкта = Ложь) Экспорт
	
	// эта жи пиздец полный стал
	// переделай!!! будь мужиком блеать, признай что говно полное!!!!!1111один
	
	Если МассивСпецификаций.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого Спецификация Из МассивСпецификаций Цикл
		
		СвойстваСпецификации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Спецификация, "Контрагент, Подразделение, СуммаДокумента, ВнутренняяСтоимостьСпецификации, Производство, Дилерский");
		
		ДоговорСпецификация = Документы.Спецификация.ПолучитьДоговор(Спецификация); // запросом бы по всем
		ЕстьДоговор = ЗначениеЗаполнено(ДоговорСпецификация);
		
		Если НЕ ЗначениеЗаполнено(ДоговорСпецификация) Тогда
			ДоговорСпецификация = Спецификация;
		КонецЕсли;
		
		СуммаВзаиморасчетов = ДоговорСпецификация.СуммаДокумента;
		
		Если СвойстваСпецификации.Дилерский Тогда
			СтатьяДохода = Справочники.СтатьиДоходовРасходов.ДоходыОтДилеровПоСпецификациям;
			СтатьяРасхода = Справочники.СтатьиДоходовРасходов.РасходПоСпецификациямДилеров;
		ИначеЕсли ЕстьДоговор Тогда
			СтатьяДохода = Справочники.СтатьиДоходовРасходов.ДоходыОтРозничныхКлиентов;
			СтатьяРасхода = Справочники.СтатьиДоходовРасходов.РасходНаПроизводствоМебельногоКомплекта;
		Иначе
			СтатьяДохода = Справочники.СтатьиДоходовРасходов.ДоходыОтЧастныхЛицПоСпецификациям;
			СтатьяРасхода = Справочники.СтатьиДоходовРасходов.РасходПоСпецификациямЧастныхЛиц;
		КонецЕсли;
		
		Если НЕ (СвойстваСпецификации.Подразделение.СвоиМонтажи И ВызовИзАкта) Тогда // на это условие я убил 2 часа :(
			
			// Оприходование изделия от производства
			Проводка = Движения.Управленческий.Добавить();
			Проводка.Период = Дата;
			Проводка.Подразделение = СвойстваСпецификации.Подразделение;
			Проводка.Сумма = СвойстваСпецификации.ВнутренняяСтоимостьСпецификации;
			Проводка.СчетДт = ПланыСчетов.Управленческий.ГотоваяПродукция;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СпецификацияДоговор] = ДоговорСпецификация;
			Проводка.КоличествоДт = 1;
			Проводка.СчетКт = ПланыСчетов.Управленческий.ВзаиморасчетыСПодразделениями;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = СвойстваСпецификации.Производство;
			
		КонецЕсли;
		
		Если НЕ СвойстваСпецификации.Подразделение.СвоиМонтажи ИЛИ ВызовИзАкта Тогда
			
			// Расходы
			Проводка = Движения.Управленческий.Добавить();
			Проводка.Период = Дата;
			Проводка.Подразделение = СвойстваСпецификации.Подразделение;
			Проводка.Сумма = СвойстваСпецификации.ВнутренняяСтоимостьСпецификации;
			Проводка.СчетДт = ПланыСчетов.Управленческий.Расходы;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = СтатьяРасхода;
			Проводка.СчетКт = ПланыСчетов.Управленческий.ГотоваяПродукция;
			Проводка.КоличествоКт = 1;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СпецификацияДоговор] = ДоговорСпецификация;
			
			// Доходы
			Проводка = Движения.Управленческий.Добавить();
			Проводка.Период = Дата;
			Проводка.Подразделение = СвойстваСпецификации.Подразделение;
			Проводка.Сумма = СуммаВзаиморасчетов;
			Проводка.СчетДт = ПланыСчетов.Управленческий.ВзаиморасчетыСПокупателями;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагенты] = ДоговорСпецификация.Контрагент;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СпецификацияДоговор] = ДоговорСпецификация;
			Проводка.СчетКт = ПланыСчетов.Управленческий.Доходы;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = СтатьяДохода;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СпецификацияДоговор] = ДоговорСпецификация;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

// Процедура Регламентного задания
//
//  перепроведение всех проведенных документов
// 
//  
Процедура Перепроведение() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ИсточникиДанныхТаблиц = ДатыЗапретаИзмененияПовтИсп.ИсточникиДанныхДляПроверкиЗапретаИзменения();
	ИсточникиДанныхТаблиц.Колонки.Добавить("ПланыВидовХарактеристик", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.РазделыДатЗапретаИзменения"));
	
	Для Каждого Элемент Из ИсточникиДанныхТаблиц Цикл
		
		Элемент.ПланыВидовХарактеристик = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения[Элемент.Раздел]
		
	КонецЦикла;
	
	НоваяДатаЗапрета = НачалоДня(ТекущаяДата()) - 4 * 86400;
	
	ЗапросНаДатыЗапрета = Новый Запрос;
	ЗапросНаДатыЗапрета.УстановитьПараметр("ИсточникиДанныхТаблиц", ИсточникиДанныхТаблиц);
	ЗапросНаДатыЗапрета.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	ЗапросНаДатыЗапрета.УстановитьПараметр("НоваяДатаЗапрета", НоваяДатаЗапрета);	
	ЗапросНаДатыЗапрета.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ИсточникиДанныхТаблиц.ПланыВидовХарактеристик КАК ПланВидовХарактеристик.РазделыДатЗапретаИзменения) КАК Объект,
	|	ИсточникиДанныхТаблиц.Раздел,
	|	ИсточникиДанныхТаблиц.Таблица КАК Имя
	|ПОМЕСТИТЬ ИсточникиДанныхТаблиц
	|ИЗ
	|	&ИсточникиДанныхТаблиц КАК ИсточникиДанныхТаблиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникиДанныхТаблиц.Объект,
	|	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета,
	|	&НоваяДатаЗапрета,
	|	ИсточникиДанныхТаблиц.Имя
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсточникиДанныхТаблиц КАК ИсточникиДанныхТаблиц
	|		ПО ИсточникиДанныхТаблиц.Объект = ДатыЗапретаИзменения.Раздел
	|ГДЕ
	|	(ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
	|			ИЛИ (ВЫРАЗИТЬ(ДатыЗапретаИзменения.Пользователь КАК Справочник.Пользователи)) = &ТекущийПользователь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗапрета";
	
	ТаблицаДатЗапрета = ЗапросНаДатыЗапрета.Выполнить().Выгрузить();
	МассивОбщейДатыЗпарета = ТаблицаДатЗапрета.НайтиСтроки(Новый Структура("Объект", null));
	
	ДатаЗапретаРедактирования = ?(МассивОбщейДатыЗпарета.Количество() = 1, МассивОбщейДатыЗпарета[0].ДатаЗапрета, Дата(1,1,1));
	
	Запрос = Новый Запрос;
	Текст = "";
	Для Каждого Документ Из Метаданные.Документы Цикл
		
		МассивДатЗапрета = ТаблицаДатЗапрета.НайтиСтроки(Новый Структура("Имя", Документ.ПолноеИмя()));
		Если МассивДатЗапрета.Количество() > 0 Тогда
			ДатаЗапретаРедактирования = МассивДатЗапрета[0].ДатаЗапрета + 86400;		
		КонецЕсли;
		
		УсловиеНаДату = " ДАТАВРЕМЯ(" + Формат(Год(ДатаЗапретаРедактирования), "ЧГ=0") + "," + Месяц(ДатаЗапретаРедактирования) + "," + День(ДатаЗапретаРедактирования) + ")";
		
		Текст = Текст + "ВЫБРАТЬ
		|	нДокумент.Ссылка,
		|	нДокумент.Дата
		|ИЗ
		|	Документ." + Документ.Имя + " КАК нДокумент
		|ГДЕ
		|	нДокумент.Проведен
		|	И нДокумент.Дата >=" + УсловиеНаДату + "
		|
		|ОБЪЕДИНИТЬ ВСЕ ";
		
	КонецЦикла;
	Запрос.Текст = Лев(Текст,СтрДлина(Текст) - СтрДлина(" ОБЪЕДИНИТЬ ВСЕ "));
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстПроведения = "Всего документов: " + Выборка.Количество() + ",   Непроведенных документов: КоличествоНепроведенныхДокументов";
	КоличествоСОшибками = 0;
	
	Пока Выборка.Следующий() Цикл                          
		
		Док = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			
			Док.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			
			МассивОшибки = ПолучитьСообщенияПользователю();
			
			Если ТипЗнч(МассивОшибки) = Тип("ФиксированныйМассив") Тогда
				Если МассивОшибки.Количество() > 0 Тогда      
					
					КоличествоСОшибками = КоличествоСОшибками + 1;
					ТекстПроведения = СокрЛП(ТекстПроведения) + Символы.ПС + Символы.ВК + Док + " - " + МассивОшибки[0].Текст;
					
					СтрокаПоиска = ТаблицаДатЗапрета.Найти(Док.Метаданные().Полноеимя(), "Имя");
					
					Если (СтрокаПоиска <> Неопределено) И (Выборка.Дата <= СтрокаПоиска.НоваяДатаЗапрета) Тогда
						
						СтрокаПоиска.НоваяДатаЗапрета = НачалоДня(Выборка.Дата) - 86400;
						
					КонецЕсли;	
					
				КонецЕсли;
			КонецЕсли;			
			
			ПолучитьСообщенияПользователю(Истина);
			
		КонецПопытки;
		
	КонецЦикла;
	
	ТекстПроведения = СтрЗаменить(ТекстПроведения, "КоличествоНепроведенныхДокументов", КоличествоСОшибками); 
	
	НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если Запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка() 
			ИЛИ Запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.Спецификация
			ИЛИ Запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.СлужебнаяЗаписка Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПоиска = ТаблицаДатЗапрета.Найти(Запись.Объект, "Объект");
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
			
			Запись.ДатаЗапрета = СтрокаПоиска.НоваяДатаЗапрета;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	Если ЗначениеЗаполнено(ТекстПроведения) Тогда
		
		ПараметрыПисьма = Новый Структура;
		
		СтрокаБазы = СтрокаСоединенияИнформационнойБазы();
		
		ПараметрыПисьма.Вставить("Тема", "Ошибки при перепроведении документа за " + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") + " (" + СтрокаБазы + ")");
		ПараметрыПисьма.Вставить("Тело", ТекстПроведения);
		ПараметрыПисьма.Вставить("Кому", Справочники.УчетныеЗаписиЭлектроннойПочты.УчетнаяЗаписьГлБухгалтера.АдресЭлектроннойПочты);
		ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);		
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокНеОзнакомленныхСлужебок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НеОзнакомленныеСлужебныеЗаписки.СлужебнаяЗаписка
	|ИЗ
	|	РегистрСведений.НеОзнакомленныеСлужебныеЗаписки КАК НеОзнакомленныеСлужебныеЗаписки
	|ГДЕ
	|	НеОзнакомленныеСлужебныеЗаписки.Пользователь = &Пользователь";
	
	МассивСлужебок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СлужебнаяЗаписка");
	
	Возврат МассивСлужебок;	
	
КонецФункции

Функция ПолучитьСписокНеОзнакомленныхСообщенийДилерам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дилер", ПользователиКлиентСервер.ТекущийВнешнийПользователь());
	Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(ТекущаяДата(),-1) );
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеДилеру.Ссылка,
	|	СообщениеДилеру.Номер,
	|	СообщениеДилеру.Тема,
	|	СообщениеДилеру.Дата
	|ИЗ
	|	Документ.СообщениеДилеру КАК СообщениеДилеру
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОзнакомленСообщенияДилеру КАК ОзнакомленСообщенияДилеру
	|		ПО СообщениеДилеру.Ссылка = ОзнакомленСообщенияДилеру.Сообщение
	|			И (ОзнакомленСообщенияДилеру.Дилер = &Дилер)
	|			И (ОзнакомленСообщенияДилеру.Ознакомлен)
	|ГДЕ
	|	ОзнакомленСообщенияДилеру.Дилер ЕСТЬ NULL
	|	И СообщениеДилеру.Дата > &Дата";
	
	МассивСообщений = Запрос.Выполнить().Выгрузить();
	Количество = МассивСообщений.Количество();
	АдресТаблицы = ПоместитьВоВременноеХранилище(МассивСообщений);
	
	Параметры = Новый Структура;
	Параметры.Вставить("АдресТаблицы", АдресТаблицы);
	Параметры.Вставить("Количество", Количество);
	
	Возврат Параметры;
	
КонецФункции

// Формирует структуру из строки адреса
Функция ПолучитьСтруктуруИзАдреса(Адрес) Экспорт
	
	СтруктураАдреса = Новый Структура;
	
	СтруктураАдреса.Вставить("НаселенныйПункт", "");
	СтруктураАдреса.Вставить("Улица", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Подъезд", "");
	СтруктураАдреса.Вставить("КодПодъезда", "");
	СтруктураАдреса.Вставить("Этаж", "");
	СтруктураАдреса.Вставить("Квартира", "");
	
	//Разбираем старый адрес на сотовляющие и определяем город или населенный пункт
	Если ЗначениеЗаполнено(Адрес) Тогда
		СтарыйАдрес = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Адрес, ", ");
		
		Для каждого Элемент Из СтарыйАдрес Цикл
			
			СтруктураАдреса.Вставить("Улица", ?( Найти(Элемент, "ул. ") > 0, СтрЗаменить(Элемент, "ул. ",""),СтруктураАдреса.Улица));
			СтруктураАдреса.Вставить("Дом", ?( Найти(Элемент, "дом. ") > 0, СтрЗаменить(Элемент, "дом. ",""),СтруктураАдреса.Дом));
			СтруктураАдреса.Вставить("Подъезд", ?( Найти(Элемент, "подъезд. ") > 0, СтрЗаменить(Элемент, "подъезд. ",""),СтруктураАдреса.Подъезд));
			СтруктураАдреса.Вставить("КодПодъезда", ?( Найти(Элемент, "код подъезда. ") > 0, СтрЗаменить(Элемент, "код подъезда. ",""),СтруктураАдреса.КодПодъезда));
			СтруктураАдреса.Вставить("Этаж", ?( Найти(Элемент, "этаж. ") > 0, СтрЗаменить(Элемент, "этаж. ",""),СтруктураАдреса.Этаж));
			СтруктураАдреса.Вставить("Квартира", ?( Найти(Элемент, "кв. ") > 0, СтрЗаменить(Элемент, "кв. ",""),СтруктураАдреса.Квартира));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Функция возвращает скидку договора
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   Структура.РазмерСкидки - размер скидки в процентах (прим. 22)
//   Структура.ЭтоПостоянныйКлиент - Истина, в случае если имеются проведенные Договоры с данным контрагентом
//
Функция ПолучитьСкидкуДоговора(Подразделение, Период, Сумма, ВидОплаты, Офис, Контрагент, Договор = Ложь) Экспорт
	
	СтруктураСкидка = Новый Структура("РазмерСкидки, РазмерСкидкиПостоянногоКлиента, ЭтоПостоянныйКлиент", 0, 0, Ложь);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ЧастноеЛицо", Справочники.Контрагенты.ЧастноеЛицо);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Договор.Ссылка
	|ИЗ
	|	Документ.Договор КАК Договор
	|ГДЕ
	|	Договор.Проведен
	|	И Договор.Контрагент = &Контрагент
	|	И Договор.Контрагент <> &ЧастноеЛицо
	|	И Договор.Ссылка <> &Договор";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтруктураСкидка.РазмерСкидкиПостоянногоКлиента = 2;
		СтруктураСкидка.ЭтоПостоянныйКлиент = Истина;
	КонецЕсли;
	
	// { Васильев Александр Леонидович [18.11.2014]
	// Теперь даже на заводской офис даём скидку
	// } Васильев Александр Леонидович [18.11.2014]
	
	// проверим офис на принадлженость производству
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Офис", Офис);
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	Подразделения.ОсновнойОфис
	//|ИЗ
	//|	Справочник.Подразделения КАК Подразделения
	//|ГДЕ
	//|	Подразделения.ВидПодразделения = ЗНАЧЕНИЕ(Перечисление.ВидыПодразделений.Производство)
	//|	И Подразделения.ОсновнойОфис = &Офис";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	Возврат СтруктураСкидка;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОплатыДоговора", ВидОплаты);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиДоговоровСрезПоследних.ВторойПределСкидка,
	|	СкидкиДоговоровСрезПоследних.ВторойПределСумма,
	|	СкидкиДоговоровСрезПоследних.ПервыйПределСкидка,
	|	СкидкиДоговоровСрезПоследних.ПервыйПределСумма
	|ИЗ
	|	РегистрСведений.СкидкиДоговоров.СрезПоследних(
	|			&Период,
	|			Подразделение = &Подразделение
	|				И ВидыОплатыДоговоров = &ВидОплатыДоговора) КАК СкидкиДоговоровСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Сумма >= Выборка.ВторойПределСумма Тогда
			СтруктураСкидка.РазмерСкидки = СтруктураСкидка.РазмерСкидкиПостоянногоКлиента + Выборка.ВторойПределСкидка;
		ИначеЕсли Сумма >= Выборка.ПервыйПределСумма Тогда
			СтруктураСкидка.РазмерСкидки = СтруктураСкидка.РазмерСкидкиПостоянногоКлиента + Выборка.ПервыйПределСкидка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураСкидка;
	
КонецФункции
//Записыват в Регистр сведений текущий статус СлужебнойЗаписки
//Параметры
// МассивЗаписок - Массив - Массив ссылок на служебные записки для которых меняем статус
Функция ОбработатьСтатусыМассиваСлужебныхЗаписок(МассивЗаписок) Экспорт
	
	ДатаВремя = ТекущаяДата();
	СтатусыСлужебнойЗаписки = Перечисления.СтатусыСлужебнойЗаписки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаписок", МассивЗаписок);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СлужебнаяЗаписка.Ссылка,
	|	СлужебнаяЗаписка.Дата,
	|	СлужебнаяЗаписка.Ознакомлен,
	|	СлужебнаяЗаписка.Утверждаю,
	|	СлужебнаяЗаписка.ДатаКонтроля,
	|	СлужебнаяЗаписка.НеСогласен,
	|	СлужебнаяЗаписка.Проведен,
	|	СлужебнаяЗаписка.Виновный,
	|	СлужебнаяЗаписка.ДатаОзнакомления,
	|	СлужебнаяЗаписка.ДатаВыполнения,
	|	СлужебнаяЗаписка.ВидСлужебнойЗаписки
	|ИЗ
	|	Документ.СлужебнаяЗаписка КАК СлужебнаяЗаписка
	|ГДЕ
	|	СлужебнаяЗаписка.Ссылка В(&МассивЗаписок)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Записка = ВыборкаДетальныеЗаписи.Ссылка;
		НаборЗаписей = РегистрыСведений.СтатусыСлужебныхЗаписок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СлужебнаяЗаписка.Установить(Записка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			Запись = НаборЗаписей.Добавить();
			
		Иначе
			
			Запись = НаборЗаписей[0];
			
		КонецЕсли;
		
		ВидСлужебнойЗаписки = ВыборкаДетальныеЗаписи.ВидСлужебнойЗаписки;
		
		Если НЕ ВыборкаДетальныеЗаписи.Ознакомлен и НЕ ВыборкаДетальныеЗаписи.Утверждаю и НЕ ВыборкаДетальныеЗаписи.НеСогласен и НачалоДня(ДатаВремя) < ВыборкаДетальныеЗаписи.ДатаКонтроля Тогда
			
			НовыйСтатус = СтатусыСлужебнойЗаписки.Новая;
			
		ИначеЕсли НачалоДня(ДатаВремя) < ВыборкаДетальныеЗаписи.ДатаКонтроля Тогда
			
			НовыйСтатус = СтатусыСлужебнойЗаписки.Прочитана;
			
		ИначеЕсли ВидСлужебнойЗаписки = Перечисления.ВидыСлужебнойЗаписки.ИнформированиеЗаявка или ВидСлужебнойЗаписки = Перечисления.ВидыСлужебнойЗаписки.Заявка Тогда
			
			Если НЕ ВыборкаДетальныеЗаписи.Ознакомлен и НЕ ВыборкаДетальныеЗаписи.Утверждаю и НЕ ВыборкаДетальныеЗаписи.НеСогласен Тогда
				
				НовыйСтатус = СтатусыСлужебнойЗаписки.Просрочена;
				
			ИначеЕсли ВыборкаДетальныеЗаписи.ДатаОзнакомления > ВыборкаДетальныеЗаписи.ДатаКонтроля Тогда
				
				НовыйСтатус = СтатусыСлужебнойЗаписки.Просрочена;
				
			Иначе
				//////////////////После первого проведения по всем запискам можно эту строку убрать
				НовыйСтатус = СтатусыСлужебнойЗаписки.Прочитана;
				
			КонецЕсли;
			
		ИначеЕсли ВидСлужебнойЗаписки = Перечисления.ВидыСлужебнойЗаписки.НарушенияВРаботе Тогда
			
			Если ВыборкаДетальныеЗаписи.ДатаВыполнения <> Дата("01.01.0001 0:00:00") Тогда
				
				Если ВыборкаДетальныеЗаписи.ДатаВыполнения > ВыборкаДетальныеЗаписи.ДатаКонтроля Тогда
					
					НовыйСтатус = СтатусыСлужебнойЗаписки.Просрочена;
					
				КонецЕсли;
				
			Иначе
				
				НовыйСтатус = СтатусыСлужебнойЗаписки.Просрочена;
				
			КонецЕсли;
			
		ИначеЕсли ВидСлужебнойЗаписки = Перечисления.ВидыСлужебнойЗаписки.ПретензияЗаявление Тогда
			
			ДеньНеделиКонтроля = ДеньНедели(ВыборкаДетальныеЗаписи.ДатаКонтроля);
			
			ДатаКонтроля = ?(ДеньНеделиКонтроля > 2, ВыборкаДетальныеЗаписи.ДатаКонтроля + 86400 * 6, ВыборкаДетальныеЗаписи.ДатаКонтроля + 86400 * 5);
			
			Если ДатаКонтроля < НачалоДня(ДатаВремя) Тогда
				
				НовыйСтатус = СтатусыСлужебнойЗаписки.Просрочена;
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		
		
		//Если ВыборкаДетальныеЗаписи.ДатаКонтроля < НачалоДня(ДатаВремя) Тогда
		//	
		//	НовыйСтатус = СтатусыСлужебнойЗаписки.Просрочена;
		//	
		//ИначеЕсли НЕ ВыборкаДетальныеЗаписи.Ознакомлен и НЕ ВыборкаДетальныеЗаписи.Утверждаю и НЕ ВыборкаДетальныеЗаписи.НеСогласен Тогда
		//	
		//	НовыйСтатус = СтатусыСлужебнойЗаписки.Новая;
		
		//Иначе
		//	
		//	НовыйСтатус = СтатусыСлужебнойЗаписки.Прочитана;
		//	
		//КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Проведен Тогда
			
			НовыйСтатус = СтатусыСлужебнойЗаписки.Архивная;
			
		КонецЕсли;
		
		Запись.Статус = НовыйСтатус;
		Запись.СлужебнаяЗаписка = Записка;
		Запись.Период = ДатаВремя;
		
		Запись.Ответственный = ВыборкаДетальныеЗаписи.Виновный;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецФункции // ОбработатьСтатусыСлужебныхЗаписок()

// Увеличивает дополнительный лимит цеха на количество требуемое по
// переданным спецификациям
//
// Параметры
//  МассивСпецификаций  - Массив - Массив спецификаций для которых увеличить лимит
//  Движения  - КоллекцияДвижений - коллекция движений регистратор
//  Дата  - Дата - дата регистратора
//  Подразделение  - СправочникСсылка.Подразделения - подразделение регистратора
//
// Возвращаемое значение:
//   нет   - 
//
Функция УвеличитьДополнительныйЛимит(МассивСпецификаций, Движения, Дата, Подразделение) Экспорт
	
	Счет = ПланыСчетов.Управленческий.ДополнительныйЛимитЦеха;
	ПВХНоменклатура = ПланыВидовХарактеристик.ВидыСубконто.Номенклатура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСпецификаций", МассивСпецификаций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацияСписокНоменклатуры.Номенклатура,
	|	СУММА(СпецификацияСписокНоменклатуры.Количество) КАК Количество
	|ИЗ
	|	Документ.Спецификация.СписокНоменклатуры КАК СпецификацияСписокНоменклатуры
	|ГДЕ
	|	СпецификацияСписокНоменклатуры.Ссылка В(&МассивСпецификаций)
	|	И СпецификацияСписокНоменклатуры.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацияСписокНоменклатуры.Номенклатура";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Проводка = Движения.Управленческий.Добавить();
		Проводка.Период = Дата;
		Проводка.Подразделение = Подразделение;
		Проводка.СчетДт = Счет;
		Проводка.СубконтоДт[ПВХНоменклатура] = Выборка.Номенклатура;
		Проводка.КоличествоДт = Выборка.Количество;
		
	КонецЦикла;
	
	
КонецФункции

// Возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - Справочник.Пользователи - пользователь, значение по умолчанию для которого необходимо получить
//  Настройка    - ПВХ.Настройки пользователей - вид настройки, значение по умолчанию которой необходимо получить
//
// Возвращаемое значение:
//  Как повезёт, там разные настройки.
//
Функция ПолучитьЗначениеНастройкиПользователя(Пользователь, Настройка) Экспорт
	
	Результат = Неопределено;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") 
		И ТипЗнч(Настройка) = Тип("ПланВидовХарактеристикСсылка.НастройкиПользователей") Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Пользователь", Пользователь);
		Отбор.Вставить("Настройка", Настройка);
		
		Запись = РегистрыСведений.НастройкиПользователей.Получить(Отбор);
		
		Если Запись.Свойство("Значение") Тогда
			Результат = Запись.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройку подразделения из регистра НастройкиПодразделений
//
// Параметры
//  Подразделение  - СправочникСсылка.Подразделения - подразделение для которого получаем настройку
//  ВидНастройки  - ПеречислениеСсылка.ВидыНастроекПодразделений - вид получаемой настройки
//
// Возвращаемое значение:
//   число   - значение настройки (пока требуется только число, возможно в будущем понадобится ПВХ)
//
Функция ПолучитьНастройкуПодразделения(Подразделение, ВидНастройки, Период) Экспорт
	
	Значение = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ВидНастройки", ВидНастройки);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиПодразделенийСрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПодразделений.СрезПоследних(
	|			&Период,
	|			Подразделение = &Подразделение
	|				И ВидНастройки = &ВидНастройки) КАК НастройкиПодразделенийСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Значение = ВыборкаДетальныеЗаписи.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Двигает взаиморасчеты между подразделением и управлением.
// По отгрузке изделий или после установки акта о выполнении.
//
// Параметры
//  Регистратор  - ДокументСсылка.РеализацияГотовойПродукции, ДокументСсылка.АктВыполненияДоговора  - ссылка на документ регистратор
//
//  Движения  - КоллекцияДвижений  - коллекция движений документа
//
//  Сумма  - Число - сумма начисляемая управлению
//
// Возвращаемое значение:
//   Булево   - всегда истина
//
Функция НачислитьСуммуУправлению(Подразделение, Движения, Сумма, Дата, Комментарий = "") Экспорт
	
	ПодразделениеУправление = Константы.Управление.Получить();
	
	СоздатьПроводкуВзаиморасчетыСПодразделением(Движения,
	ПодразделениеУправление,
	Подразделение,
	Справочники.СтатьиДоходовРасходов.ДоходыПроцентСЗаказа,
	ВидДвиженияБухгалтерии.Дебет,
	Дата,
	Сумма,
	Комментарий);
	
	СоздатьПроводкуВзаиморасчетыСПодразделением(Движения,
	Подразделение,
	ПодразделениеУправление,
	Справочники.СтатьиДоходовРасходов.РасходыНаСопровождениеТехнологии,
	ВидДвиженияБухгалтерии.Кредит,
	Дата,
	Сумма,
	Комментарий);
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьПроводкуВзаиморасчетыСПодразделением(Движения, ИзмерениеПодразделение, СубконтоПодразделение, Статья, ДебетКредит, Дата, Сумма, Содержание = "")
	
	Проводка = Движения.Управленческий.Добавить();
	Проводка.Период = Дата;
	Проводка.Сумма = Сумма;
	Проводка.Подразделение = ИзмерениеПодразделение;
	Проводка.Содержание = Содержание;
	
	Если ВидДвиженияБухгалтерии.Дебет = ДебетКредит Тогда
		
		Проводка.СчетДт = ПланыСчетов.Управленческий.ВзаиморасчетыСПодразделениями;
		Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = СубконтоПодразделение;
		
		Проводка.СчетКт = ПланыСчетов.Управленческий.Доходы;
		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Статья;
		
	ИначеЕсли ВидДвиженияБухгалтерии.Кредит = ДебетКредит Тогда
		
		Проводка.СчетКт = ПланыСчетов.Управленческий.ВзаиморасчетыСПодразделениями;
		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = СубконтоПодразделение;
		
		Проводка.СчетДт = ПланыСчетов.Управленческий.Расходы;
		Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Статья;
		
	КонецЕсли;
	
	Возврат Проводка;
	
КонецФункции

Функция ПосчитатьКратность(Номенклатура, Количество) Экспорт
	
	Кратность = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Номенклатура, "Кратность");
	КоличествоМатериала = Количество;
	
	Если ТипЗнч(Кратность) = Тип("Число") и Кратность > 0 Тогда
		
		КоличествоМатериала = Кратность * Окр(КоличествоМатериала / Кратность + 0.5, 0, РежимОкругления.Окр15как10);
		
	КонецЕсли;
	
	СтруктураКратности = Новый Структура;
	СтруктураКратности.Вставить("Кратность", Кратность);
	СтруктураКратности.Вставить("КоличествоМатериала", КоличествоМатериала);
	
	Возврат СтруктураКратности;
	
КонецФункции

Функция ДоступностьСпецификации(Спецификация) Экспорт
	
	СтатусСпецификации = Документы.Спецификация.ПолучитьСтатусСпецификации(Спецификация);
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ПользовательТехнолог = УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.Инженер) 
	ИЛИ УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.ИнженерТехнолог)
	ИЛИ УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.СупервайзерПроизводственныхПродаж);
	ПользовательАдминистратор = УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.Администратор);
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.Сохранен);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.ПроверенТехнологом);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.ЕстьОшибки);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.ПроверяетсяТехнологом);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.ПроверяетсяЛогистом);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.ПроверенЛогистом);
	
	// Технологам и админам можно больше
	Если ПользовательТехнолог ИЛИ ПользовательАдминистратор Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.Размещен);
		МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.Рассчитывается);
	КонецЕсли;
	
	СпецификацияДоступна = Ложь;
	
	Для каждого Статус Из МассивСтатусов Цикл
		
		Если СтатусСпецификации = Статус Тогда
			СпецификацияДоступна = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СпецификацияДоступна;
	
КонецФункции // ДоступностьСпецификации()

Функция СпецификацияПроверенаЛогистом(СтатусСпецификации) Экспорт 
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.ПроверенЛогистом);	
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.ПроверяетсяТехнологом);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.ПроверенТехнологом);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.Рассчитывается);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.Размещен);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.ПереданВЦех);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.Изготовлен);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.Отгружен);
	МассивСтатусов.Добавить(Перечисления.СтатусыСпецификации.Установлен);
	
	
	ПроверенаЛогистом = Ложь;
	
	Для каждого Статус Из МассивСтатусов Цикл
		
		Если СтатусСпецификации = Статус Тогда
			ПроверенаЛогистом = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПроверенаЛогистом;
	
КонецФункции 

Функция ПечататьТорг12(МассивДокументов, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_РеализацияМатериалов";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = ПолучитьОбщийМакет("ТОРГ12");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовокТаб = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьВсего = Макет.ПолучитьОбласть("Всего");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("МассивДокументов", МассивДокументов);
	Спецификация = ТипЗнч(МассивДокументов[0].Ссылка) = Тип("ДокументСсылка.Спецификация");
	
	Если Спецификация Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Спецификация.Автор,
		|	Спецификация.Дата КАК ДатаДокумента,
		|	Спецификация.Контрагент,
		|	Спецификация.Номер КАК НомерДокумента,
		|	Спецификация.Подразделение,
		|	Спецификация.Подразделение.ОсновнойСклад,
		|	Спецификация.СуммаДокумента,
		|	1 КАК Номер,
		|	""Мебельный комплект"" КАК Номенклатура,
		|	Спецификация.Контрагент.ПолноеНаименование КАК ПолноеНаименование,
		|	"""" КАК АдресДоставки,
		|	Спецификация.Контрагент.Телефон КАК Телефон,
		|	Спецификация.Контрагент.БанковскиеРеквизиты КАК БанковскиеРеквизиты,
		|	1 КАК Количество,
		|	Спецификация.СуммаДокумента КАК Цена,
		|	Спецификация.СуммаДокумента КАК СуммаБезНДС,
		|	Спецификация.СуммаДокумента КАК СуммаСНДС,
		|	""Шт."" КАК ЕдиницаИзмерения,
		|	""Шт."" КАК ЕдиницаНаименование,
		|	""Без НДС"" КАК СтавкаНДС,
		|	0 КАК СуммаНДС,
		|	Спецификация.Производство.ФактическийАдрес КАК ФактическийАдрес,
		|	Спецификация.Производство.Организация.ЮридическийАдрес КАК ПодразделениеЮридическийАдресОрганизации,
		|	Спецификация.Производство.Организация КАК Организация,
		|	Спецификация.Производство.Организация.ОКПО КАК ОрганизацияПоОКПО
		|ИЗ
		|	Документ.Спецификация КАК Спецификация
		|ГДЕ
		|	Спецификация.Ссылка В(&МассивДокументов)"
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияМатериалов.Автор,
		|	РеализацияМатериалов.Дата КАК ДатаДокумента,
		|	РеализацияМатериалов.Контрагент,
		|	РеализацияМатериалов.Номер КАК НомерДокумента,
		|	РеализацияМатериалов.Подразделение,
		|	РеализацияМатериалов.Склад,
		|	РеализацияМатериалов.СуммаДокумента,
		|	РеализацияМатериалов.СписокНоменклатуры.(
		|		НомерСтроки КАК Номер,
		|		Номенклатура,
		|		Номенклатура.КоэффициентБазовых КАК Коэффициент,
		|		Номенклатура.Код КАК ТоварКод,
		|		Количество,
		|		Цена,
		|		Сумма КАК СуммаБезНДС,
		|		Сумма КАК СуммаСНДС,
		|		""Без НДС"" КАК СтавкаНДС,
		|		0 КАК СуммаНДС,
		|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаНаименование,
		|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаКодПоОКЕИ
		|	),
		|	РеализацияМатериалов.Подразделение.Организация.ПолноеНаименование + "", ИНН "" + РеализацияМатериалов.Подразделение.Организация.ИНН + "", "" + РеализацияМатериалов.Подразделение.Организация.ЮридическийАдрес + "", р/с "" + РеализацияМатериалов.Подразделение.Организация.РасчетныйСчет + "", БИК "" + РеализацияМатериалов.Подразделение.Организация.БИК + "", корр/с "" + РеализацияМатериалов.Подразделение.Организация.КорреспондирующийСчет КАК ПредставлениеПоставщика,
		|	РеализацияМатериалов.Подразделение.Организация.ПолноеНаименование + "", ИНН "" + РеализацияМатериалов.Подразделение.Организация.ИНН + "", "" + РеализацияМатериалов.Подразделение.Организация.ЮридическийАдрес + "", р/с "" + РеализацияМатериалов.Подразделение.Организация.РасчетныйСчет + "", БИК "" + РеализацияМатериалов.Подразделение.Организация.БИК + "", корр/с "" + РеализацияМатериалов.Подразделение.Организация.КорреспондирующийСчет КАК ПредставлениеОрганизации,
		|	РеализацияМатериалов.Контрагент.ПолноеНаименование КАК ПолноеНаименование,
		|	РеализацияМатериалов.Контрагент.ЮридическийАдрес КАК АдресДоставки,
		|	РеализацияМатериалов.Контрагент.Телефон КАК Телефон,
		|	РеализацияМатериалов.Контрагент.БанковскиеРеквизиты КАК БанковскиеРеквизиты
		|ИЗ
		|	Документ.РеализацияМатериалов КАК РеализацияМатериалов
		|ГДЕ
		|	РеализацияМатериалов.Ссылка В(&МассивДокументов)
		|	И РеализацияМатериалов.Проведен";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВставлятьРазделительСтраниц = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		ВсегоКоличество = 0;
		ВсегоСумма = 0;
		
		Если ВставлятьРазделительСтраниц Тогда
			
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		Если Спецификация Тогда
			
			Вяс = Выборка.Организация;
			СтруктураРеквизитовВяса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Вяс, "ПолноеНаименование, ИНН, РасчетныйСчет, БИК, КорреспондирующийСчет, Банк");
			ЧастноеЛицо = Справочники.Контрагенты.ЧастноеЛицо;
			ПредставлениеОрганизации = СтруктураРеквизитовВяса.ПолноеНаименование + ", ИНН " + СтруктураРеквизитовВяса.ИНН + ", " + Выборка.ФактическийАдрес + ", р/с " + СтруктураРеквизитовВяса.РасчетныйСчет + ", Банк/БИК " +СтруктураРеквизитовВяса.Банк + "/"+ СтруктураРеквизитовВяса.БИК + ", корр/с " + СтруктураРеквизитовВяса.КорреспондирующийСчет;
			ПредставлениеГрузоотпрвителя = СтруктураРеквизитовВяса.ПолноеНаименование + ", ИНН " + СтруктураРеквизитовВяса.ИНН + ", " + Выборка.ПодразделениеЮридическийАдресОрганизации + ", р/с " + СтруктураРеквизитовВяса.РасчетныйСчет + ", Банк/БИК " +СтруктураРеквизитовВяса.Банк + "/"+ СтруктураРеквизитовВяса.БИК + ", корр/с " + СтруктураРеквизитовВяса.КорреспондирующийСчет;
			ОбластьШапка.Параметры.Заполнить(Выборка);
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.НомерДокумента);
			ОбластьШапка.Параметры.НомерДокумента = НомерДокумента;
			ОбластьШапка.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
			ОбластьШапка.Параметры.Основание = "Заказ №" + НомерДокумента + " от " + Формат(Выборка.ДатаДокумента,"ДЛФ=Д");
			ОбластьШапка.Параметры.ПредставлениеПоставщика = ПредставлениеГрузоотпрвителя;
			ОбластьШапка.Параметры.ПредставлениеПлательщика = ЧастноеЛицо;
			ОбластьШапка.Параметры.ПредставлениеГрузополучателя = ЧастноеЛицо;
			ТабДок.Вывести(ОбластьШапка);
			ТабДок.Вывести(ОбластьЗаголовокТаб);
			ВсегоКоличество = 1;
			ВсегоСумма = Выборка.СуммаДокумента;
			ОбластьСтрока.Параметры.Заполнить(Выборка);
			ТабДок.Вывести(ОбластьСтрока);
			
		Иначе
			
			ПредставлениеГрузополучателя = "" + Выборка.ПолноеНаименование + ?(ЗначениеЗаполнено(Выборка.АдресДоставки), ", адрес: " + Выборка.АдресДоставки, "") 
			+ ?(ЗначениеЗаполнено(Выборка.Телефон), ", тел: " + Выборка.Телефон, "") + ?(ЗначениеЗаполнено(Выборка.БанковскиеРеквизиты), ", " + Выборка.БанковскиеРеквизиты, "");
			ОбластьШапка.Параметры.Заполнить(Выборка);
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.НомерДокумента);
			ОбластьШапка.Параметры.НомерДокумента = НомерДокумента;
			ОбластьШапка.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
			ТабДок.Вывести(ОбластьШапка);
			ТабДок.Вывести(ОбластьЗаголовокТаб);
			ВыборкаСписокНоменклатуры = Выборка.СписокНоменклатуры.Выбрать();
			
			Пока ВыборкаСписокНоменклатуры.Следующий() Цикл
				
				ВсегоКоличество = ВыборкаСписокНоменклатуры.Количество + ВсегоКоличество;
				ВсегоСумма = ВыборкаСписокНоменклатуры.СуммаБезНДС + ВсегоСумма;;
				
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьВсего.Параметры.Заполнить(Выборка);
		ОбластьВсего.Параметры.ИтогКоличество = ВсегоКоличество;
		ОбластьВсего.Параметры.ИтогСуммыСНДС = ВсегоСумма;
		ОбластьВсего.Параметры.ИтогСуммы = ВсегоСумма;
		ТабДок.Вывести(ОбластьВсего);
		
		СуммаПрописью = ЧислоПрописью(ВсегоСумма,"Л=ru_RU; ДП=Ложь","рубль, рубля, рублей, м, копейка, копейки, копеек, ж" );
		ОбластьПодвал.Параметры.Заполнить(Выборка);
		ОбластьПодвал.Параметры.СуммаПрописью = СуммаПрописью;
		ТабДок.Вывести(ОбластьПодвал);
		
		ВставлятьРазделительСтраниц = Истина;
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, МассивДокументов);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
	
КонецФункции // ПечататьТорг12()

// Возвращает параметры начислений для зарплаты
Функция ПолучитьЗначениеПараметров(МассивПараметров, Подразделение, Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыНачисленийСрезПоследних.Параметр,
	|	ПараметрыНачисленийСрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.ПараметрыНачислений.СрезПоследних(
	|			&ОкончаниеПериода,
	|			Подразделение = &Подразделение
	|				И Параметр В (&МассивПараметров)) КАК ПараметрыНачисленийСрезПоследних";
	
	Запрос.УстановитьПараметр("МассивПараметров", МассивПараметров);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Дата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьЗначениеПараметров()

// Формирует проводки по закрытию доп. соглашений (вызывается из ОбработкаПроведения)
//
// Параметры
//  Движения  - КоллекцияДвижений - коллекция движений регистратора
//  ДоговорСсылка  - ДокументСсылка.Договор - ссылка на закрываемый Договор
//
Функция ЗакрытьДопСоглашенияДоговора(Движения, ДоговорСсылка, ДатаПроведения) Экспорт
	
	Если ТипЗнч(ДоговорСсылка) <> Тип("ДокументСсылка.Договор") ИЛИ ТипЗнч(Движения) <> Тип("КоллекцияДвижений") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДоговорСсылка, "Дата, Контрагент, Подразделение");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договор", ДоговорСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительноеСоглашение.СуммаДокумента КАК Сумма,
	|	ДополнительноеСоглашение.Ссылка,
	|	ДополнительноеСоглашение.Договор
	|ИЗ
	|	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	|ГДЕ
	|	ДополнительноеСоглашение.Договор = &Договор
	|	И ДополнительноеСоглашение.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Проводка = Движения.Управленческий.Добавить();
		Проводка.Период = ДатаПроведения;
		Проводка.Подразделение = РеквизитыДоговора.Подразделение;
		
		Если Выборка.Сумма > 0 Тогда
			Проводка.Сумма = Выборка.Сумма;
			Проводка.СчетДт = ПланыСчетов.Управленческий.ВзаиморасчетыСПокупателями;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагенты] = РеквизитыДоговора.Контрагент;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СпецификацияДоговор] = Выборка.Ссылка;
			Проводка.СчетКт = ПланыСчетов.Управленческий.Доходы;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Справочники.СтатьиДоходовРасходов.ДоходыОтРозничныхКлиентов;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СпецификацияДоговор] = Выборка.Договор;
		Иначе
			Проводка.Сумма = -Выборка.Сумма;
			Проводка.СчетКт = ПланыСчетов.Управленческий.ВзаиморасчетыСПокупателями;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагенты] = РеквизитыДоговора.Контрагент;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СпецификацияДоговор] = Выборка.Ссылка;
			Проводка.СчетДт = ПланыСчетов.Управленческий.Расходы;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = Справочники.СтатьиДоходовРасходов.ПрочиеХозяйственныеРасходы; // ох и сраться будем по этому поводу
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

// Возвращает внешнего пользователя соответствующего конгтрагенту
//
// Параметры
//  КонтрагентСсылка  - СправочникСсылка.Контрагент - Ссылка на контрагента
//
// Возвращаемое значение:
//   СправочникСсылка.ВнешнийПользователь   - Ссылка на соответствующегов нешнего пользователя
//
Функция ПолучитьВнешнегоПользователяПоКонтрагенту(КонтрагентСсылка) Экспорт
	
	ВнешнийПользователь = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ОбъектАвторизации = &Контрагент";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВнешнийПользователь = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат ВнешнийПользователь;
	
КонецФункции

Функция ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуЛДСП(ЛДСП, Подразделение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПроверяемоеПодразделение = ЛексСервер.ПолучитьОсновноеПроизводство(Подразделение);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦветаЛДСП.НоменклатурнаяГруппа,
	|	НоменклатураПодразделений.Номенклатура
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	РегистрСведений.ЦветаЛДСП КАК ЦветаЛДСП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
	|		ПО ЦветаЛДСП.ПодставляемаяНоменклатура = НоменклатураПодразделений.Номенклатура
	|ГДЕ
	|	ЦветаЛДСП.Номенклатура = &Номенклатура
	|	И НоменклатураПодразделений.Доступность
	|	И НоменклатураПодразделений.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатурныеГруппы.Ссылка КАК НоменклатурнаяГруппа,
	|	втНоменклатура.Номенклатура
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО (втНоменклатура.НоменклатурнаяГруппа = НоменклатурныеГруппы.Ссылка)
	|ГДЕ
	|	НЕ НоменклатурныеГруппы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Номенклатура", ЛДСП);
	Запрос.УстановитьПараметр("Подразделение", ПроверяемоеПодразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураПодставляяемойНоменклатуры = Новый Структура();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		////СтруктураПодчиненностиПереопределяемый.Вставить("Кромка
		//Возврат Справочники.Номенклатура.ПустаяСсылка();
		
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Имя = Справочники.НоменклатурныеГруппы.ПолучитьИмяПредопределенного(ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа);
		Номенклатура = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура), ВыборкаДетальныеЗаписи.Номенклатура, Справочники.Номенклатура.ПустаяСсылка());
		СтруктураПодставляяемойНоменклатуры.Вставить(Имя, Номенклатура);
		
	КонецЦикла;
	
	Возврат СтруктураПодставляяемойНоменклатуры;
	
КонецФункции // ПолучитьКромкуПоЦвету()

Функция ПолучитьСтруктуруПодставляемойНоменклатурыПоЦветуПоГруппе(ЛДСП, Группа, Подразделение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПроверяемоеПодразделение = ЛексСервер.ПолучитьОсновноеПроизводство(Подразделение);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦветаЛДСП.НоменклатурнаяГруппа,
	|	НоменклатураПодразделений.Номенклатура
	|ИЗ
	|	РегистрСведений.ЦветаЛДСП КАК ЦветаЛДСП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
	|		ПО ЦветаЛДСП.ПодставляемаяНоменклатура = НоменклатураПодразделений.Номенклатура
	|ГДЕ
	|	ЦветаЛДСП.Номенклатура = &Номенклатура
	|	И ЦветаЛДСП.НоменклатурнаяГруппа = &Группа
	|	И НоменклатураПодразделений.Доступность
	|	И НоменклатураПодразделений.Подразделение = &Подразделение";
	
	Запрос.УстановитьПараметр("Номенклатура", ЛДСП);
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.УстановитьПараметр("Подразделение", ПроверяемоеПодразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Справочники.Номенклатура.ПустаяСсылка();
		
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Номенклатура;
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
КонецФункции // ПолучитьКромкуПоЦвету()

// Добавляет к Движениям проводки по доходам подразделения.
// По отгрузке или акту установки, в разрезе статьи дохода номенклатуры спецификации
//
// Параметры
//  СпецификацияСсылка  - ДокументСсылка.Спецификация - Ссылка на спецификацию
//  Движения  - КоллекцияДвижений - Коллекция движений регистратора
//
Функция СформироватьПроводкиПрибыльПроизводства(СпецификацияСсылка, Движения) Экспорт
	
	// { Васильев Александр Леонидович [02.07.2014]
	// Пока по одному документу.
	// Ну его нахуй чудеса эти.
	// } Васильев Александр Леонидович [02.07.2014]
	
	СвойстваСпецификации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СпецификацияСсылка, "Дата, Производство, Подразделение");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СпецификацияСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(СпецификацияСписокНоменклатуры.ВнутренняяСтоимость) КАК Сумма,
	|	СпецификацияСписокНоменклатуры.Номенклатура.СтатьяДохода КАК Статья
	|ИЗ
	|	Документ.Спецификация.СписокНоменклатуры КАК СпецификацияСписокНоменклатуры
	|ГДЕ
	|	СпецификацияСписокНоменклатуры.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацияСписокНоменклатуры.Номенклатура.СтатьяДохода";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Проводка =Движения.Управленческий.Добавить();
		
		Проводка.Период = СвойстваСпецификации.Дата;
		Проводка.Подразделение = СвойстваСпецификации.Производство;
		Проводка.Сумма = Выборка.Сумма;
		
		Проводка.СчетДт = ПланыСчетов.Управленческий.ВзаиморасчетыСПодразделениями;
		Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = СвойстваСпецификации.Подразделение;
		
		Проводка.СчетКт = ПланыСчетов.Управленческий.Доходы;
		Если НЕ ЗначениеЗаполнено(Выборка.Статья) Тогда
			Если СвойстваСпецификации.Подразделение.БрендДилер Тогда
				СтатьяДохода = Справочники.СтатьиДоходовРасходов.ДоходыПроизводстваОтБрендДилера;
			Иначе
				СтатьяДохода = Справочники.СтатьиДоходовРасходов.ДоходыПроизводстваОтРозницы;
			КонецЕсли;
			
		Иначе
			СтатьяДохода = Выборка.Статья;
		КонецЕсли;
		
		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДР] = СтатьяДохода;
		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СпецификацияДоговор] = СпецификацияСсылка;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ГрупповаяСменаСтатуса(МассивСпецификаций, НовыйСтатус, ПроверяемыйСтатус = Неопределено) Экспорт
	
	Если ПроверяемыйСтатус <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПроверяемыйСтатус", ПроверяемыйСтатус);
		Запрос.УстановитьПараметр("МассивСпецификаций", МассивСпецификаций);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусСпецификацииСрезПоследних.Спецификация
		|ИЗ
		|	РегистрСведений.СтатусСпецификации.СрезПоследних КАК СтатусСпецификацииСрезПоследних
		|ГДЕ
		|	СтатусСпецификацииСрезПоследних.Спецификация В (&МассивСпецификаций)
		|	И СтатусСпецификацииСрезПоследних.Статус = &ПроверяемыйСтатус";
		
		Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Спецификация");
		
	Иначе
		
		Массив = МассивСпецификаций;
		
	КонецЕсли;
	
	Если Массив.Количество() > 0 Тогда
		
		ДатаВремя = ТекущаяДата();
		
		НаборЗаписей = РегистрыСведений.СтатусСпецификации.СоздатьНаборЗаписей();	
		
		Для Каждого Элемент Из Массив Цикл
			
			Запись = НаборЗаписей.Добавить();
			Запись.Статус = НовыйСтатус;
			Запись.Спецификация = Элемент;
			Запись.Период = ДатаВремя;
			Запись.Автор = ПользователиКлиентСервер.ТекущийПользователь();
			
		КонецЦикла;
		
		НаборЗаписей.Записать(Ложь);
		
	КонецЕсли;
	
КонецФункции

// Возвращает примечание для печати Чертежа Двери
//
Функция УстановитьПримечание() Экспорт
	
	ПримечаниеДляПечати = "";
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ПользовательДизайнер = УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.ДизайнерКонсультант);
	ПользовательАдминистратор = УправлениеДоступомПереопределяемый.ЕстьДоступКПрофилюГруппДоступа(Пользователь, Справочники.ПрофилиГруппДоступа.Администратор);
	
	Если ПользовательДизайнер ИЛИ ПользовательАдминистратор Тогда
		ПримечаниеДляПечати = "Размеры, указанные в эскизе могут отличаться от фактических по высоте до 3%, по ширине до 5%.
		|Размеры элементов дверей указываются от края двери (центра стыковочного профиля) до центра
		|стыковочного профиля (края двери)При использовании изогнутых стыковочных профилей размеры их
		|присоединения могут отличаться от фактических до 10%";
	КонецЕсли;
	Возврат ПримечаниеДляПечати; 	
КонецФункции

//Устанавливает дату изготовления для спецификации
Процедура УстановитьДатуИзготовленияСпецификации(Спецификация) Экспорт
	
	// { Васильев Александр Леонидович [07.08.2014]
	// Договор с открытой датой монтажа.
	// Изготавливать и отгружать пока не требуется.
	// } Васильев Александр Леонидович [07.08.2014]
	
	Строка = Спецификация.СписокНоменклатуры.Найти(Справочники.Номенклатура.НаклеиваниеПленкиФотопечати, "Номенклатура");
	ЕстьФотопечать = Строка <> Неопределено;
	ЕстьУпаковка = Спецификация.Упаковка;
	
	Если ЗначениеЗаполнено(Спецификация.ДатаОтгрузки) Тогда
		
		ДатаОтгрузки = Спецификация.ДатаОтгрузки;
		ДатаДокумента = НачалоДня(Спецификация.Дата);
		
		ЕстьВоскресеньеОтСоздания = ДеньНедели(ДатаДокумента) > ДеньНедели(ДатаОтгрузки);
		
		РазностьВДнях = (ДатаОтгрузки - ДатаДокумента) / 86400;
		Если РазностьВДнях < (3 + ЕстьВоскресеньеОтСоздания + (Спецификация.ЭтоКухня ИЛИ ЕстьФотопечать ИЛИ ЕстьУпаковка)) Тогда
			// Быстрый заказ
			Спецификация.Быстрый = Истина;
			Спецификация.Срочный = (Спецификация.Изделие = Справочники.Изделия.Детали ИЛИ Спецификация.Дилерский);
			Спецификация.ДатаИзготовления = Спецификация.ДатаОтгрузки;
		Иначе
			// Обычный заказ
			Спецификация.Быстрый = Ложь;
			Спецификация.Срочный = Ложь;
			
			КоличествоДней = 1 + Число(Спецификация.ЭтоКухня ИЛИ ЕстьФотопечать ИЛИ ЕстьУпаковка);
			ДатаИзготовления = ДатаОтгрузки - КоличествоДней * 86400;
			
			ЕстьВоскресеньеОтИзготовления = ДеньНедели(ДатаИзготовления) > ДеньНедели(ДатаОтгрузки);
			
			Если ДеньНедели(ДатаИзготовления) = 7 ИЛИ ЕстьВоскресеньеОтИзготовления Тогда
				ДатаИзготовления = ДатаИзготовления - 86400;
			КонецЕсли;
			
			Спецификация.ДатаИзготовления = ДатаИзготовления;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НоменклатураПодЗаказ(Номенклатура, Подразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураПодразделений.ПодЗаказ
	|ИЗ
	|	РегистрСведений.НоменклатураПодразделений КАК НоменклатураПодразделений
	|ГДЕ
	|	НоменклатураПодразделений.Подразделение = &Подразделение
	|	И НоменклатураПодразделений.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.ПодЗаказ;
		
	КонецЕсли;
	
КонецФункции

Функция ВыборМакетов(Договоры, ДоговорДилера) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договоры", Договоры);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(Договор.Спецификация) КАК Спецификация,
	|	Договор.Ссылка КАК Договор,
	|	МАКСИМУМ("","" + Договор.Спецификация.Изделие.ИмяМакетаПаспорта) КАК Инструкция,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Договор.Спецификация.Изделие.ВидИзделия = ЗНАЧЕНИЕ(Перечисление.ВидыИзделий.ШкафКупе)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Шкаф,
	|	КОЛИЧЕСТВО(СпецификацияСписокИзделийПоКаталогу.Ссылка) КАК ИзделийПоКаталогу
	|ПОМЕСТИТЬ ВТ_Договоры
	|ИЗ
	|	Документ.Договор КАК Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокИзделийПоКаталогу КАК СпецификацияСписокИзделийПоКаталогу
	|		ПО Договор.Спецификация = СпецификацияСписокИзделийПоКаталогу.Ссылка
	|ГДЕ
	|	Договор.Ссылка В(&Договоры)
	|
	|СГРУППИРОВАТЬ ПО
	|	Договор.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Договоры.Спецификация,
	|	ВТ_Договоры.Договор КАК Договор,
	|	ВТ_Договоры.Инструкция КАК Инструкция,
	|	ВТ_Договоры.Шкаф,
	|	ВТ_Договоры.ИзделийПоКаталогу,
	|	ВЫБОР
	|		КОГДА ВТ_Договоры.Шкаф
	|				И ВТ_Договоры.ИзделийПоКаталогу > 0
	|			ТОГДА "",ШкафПоКаталогу""
	|		КОГДА НЕ ВТ_Договоры.Шкаф
	|				И ВТ_Договоры.ИзделийПоКаталогу > 0
	|			ТОГДА "",ПоКаталогу""
	|	КОНЕЦ КАК ПоКаталогу,
	|	ВЫБОР
	|		КОГДА Файлы.Ссылка ССЫЛКА Справочник.Файлы
	|			ТОГДА "",ЭскизнаяЗаявка""
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЭскизнаяЗаявка,
	|	СпецификацияСписокДверей.Двери
	|ПОМЕСТИТЬ ВТ_ДоговорДвери
	|ИЗ
	|	ВТ_Договоры КАК ВТ_Договоры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО (НЕ Файлы.ПометкаУдаления)
	|			И (Файлы.ВидФайла = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.Эскиз))
	|			И (ВТ_Договоры.Договор.Спецификация = (ВЫРАЗИТЬ(Файлы.ВладелецФайла КАК Документ.Спецификация)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спецификация.СписокДверей КАК СпецификацияСписокДверей
	|		ПО ВТ_Договоры.Спецификация = СпецификацияСписокДверей.Ссылка
	|			И ВТ_Договоры.Спецификация = СпецификацияСписокДверей.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДоговорДвери.Спецификация,
	|	ВТ_ДоговорДвери.Договор КАК Договор,
	|	ВТ_ДоговорДвери.Инструкция КАК Инструкция,
	|	ВТ_ДоговорДвери.Шкаф,
	|	ВТ_ДоговорДвери.ИзделийПоКаталогу,
	|	ВТ_ДоговорДвери.ПоКаталогу КАК ПоКаталогу,
	|	ВТ_ДоговорДвери.ЭскизнаяЗаявка КАК ЭскизнаяЗаявка,
	|	спрДвери.СтрокаДляФлэш КАК СтрокаДляФлэш,
	|	спрДвери.Ссылка КАК Дверь
	|ИЗ
	|	ВТ_ДоговорДвери КАК ВТ_ДоговорДвери
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Двери КАК спрДвери
	|		ПО ВТ_ДоговорДвери.Двери = спрДвери.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(Инструкция),
	|	МАКСИМУМ(ПоКаталогу),
	|	МАКСИМУМ(ЭскизнаяЗаявка),
	|	КОЛИЧЕСТВО(СтрокаДляФлэш)
	|ПО
	|	Договор";
	
	Если ДоговорДилера Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Договор КАК Договор", "Документ.ДоговорДилера КАК Договор");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаГруппа = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Договор");
	
	МассивДокументов = Новый Массив;
	
	Пока ВыборкаГруппа.Следующий() Цикл
		СтруктураДоговора = Новый Структура;	
		СтруктураДоговора.Вставить("Договор", ВыборкаГруппа.Договор);
		СтруктураДоговора.Вставить("Инструкция", ВыборкаГруппа.Инструкция);
		СтруктураДоговора.Вставить("ПоКаталогу", ?(ЗначениеЗаполнено(ВыборкаГруппа.ПоКаталогу), ВыборкаГруппа.ПоКаталогу, Неопределено));
		СтруктураДоговора.Вставить("ЭскизнаяЗаявка", ?(ЗначениеЗаполнено(ВыборкаГруппа.ЭскизнаяЗаявка), ВыборкаГруппа.ЭскизнаяЗаявка, Неопределено));
		СтруктураДоговора.Вставить("ЧертежДвери", Неопределено);
		//littox Литус Антон - 19.08.2014
		//Проблема с флешем возникла на договоре 965
		//19.08.2014 - littox Литус Антон 
		Если ЗначениеЗаполнено(ВыборкаГруппа.СтрокаДляФлэш) Тогда
			СтруктураДоговора.Вставить("ЧертежДвери", ",ЧертежДвери"); 
			СтруктураДоговора.Вставить("ДвериФлэш", Новый Массив);
			СтруктураДоговора.Вставить("ДвериСсылка", Новый Массив);
			ЗаписьПоДоговору = ВыборкаГруппа.Выбрать();	
			Пока ЗаписьПоДоговору.Следующий() Цикл
				СтруктураДоговора.ДвериФлэш.Добавить(ЗаписьПоДоговору.СтрокаДляФлэш);
				СтруктураДоговора.ДвериСсылка.Добавить(ЗаписьПоДоговору.Дверь);
			КонецЦикла;
			
		КонецЕсли;
		МассивДокументов.Добавить(СтруктураДоговора);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция ПолучитьЛоготипОфиса(Спецификация) Экспорт
	
	ИмяФайла = "";
	
	Если ЗначениеЗаполнено(Спецификация) И ЗначениеЗаполнено(Спецификация.Офис) И ЗначениеЗаполнено(Спецификация.Офис.Логотип) Тогда
		 ИмяФайла = Спецификация.Офис.Логотип.Наименование + "." + Спецификация.Офис.Логотип.ТекущаяВерсияРасширение;	
	 КонецЕсли;
	 
	 Возврат ИмяФайла;
	
 КонецФункции
 
 Функция ПолучитьЛоготипПодразделения(Спецификация) Экспорт
	
	ИмяФайла = "";
	
	Если ЗначениеЗаполнено(Спецификация) И ЗначениеЗаполнено(Спецификация.Подразделение) И ЗначениеЗаполнено(Спецификация.Подразделение.Логотип) Тогда
		 ИмяФайла = Спецификация.Подразделение.Логотип.Наименование + "." + Спецификация.Подразделение.Логотип.ТекущаяВерсияРасширение;	
	 КонецЕсли;
	 
	 Возврат ИмяФайла;
	
КонецФункции