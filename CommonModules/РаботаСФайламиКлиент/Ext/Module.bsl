////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функция для работы со сканером

// Открывает форму настройки сканирования.
Процедура ОткрытьФормуНастройкиСканирования() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		ТекстСообщения = НСтр("ru = 'Сканирование не поддерживается в клиенте под управлением ОС Linux.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСФайламиСлужебныйКлиент.ПроинициализироватьКомпоненту();
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КомпонентаУстановлена", КомпонентаУстановлена);
	ПараметрыФормы.Вставить("ИдентификаторКлиента",  ИдентификаторКлиента);
	
	ОткрытьФорму("Справочник.Файлы.Форма.НастройкаСканирования", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с файлами

// Открывает файл для просмотра.
Процедура Открыть(ДанныеФайла) Экспорт
	
	РаботаСФайламиСлужебныйКлиент.ОткрытьФайлСОповещением(Неопределено, ДанныеФайла);
	
КонецПроцедуры

// Открывает каталог на локальном компьютере в котором размещен этот файл.
Процедура ОткрытьКаталогФайла(ДанныеФайла) Экспорт
	
	РаботаСФайламиСлужебныйКлиент.КаталогФайла(Неопределено, ДанныеФайла);
	
КонецПроцедуры

// Создает новый файл интерактивно.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения - Необязательный. Описание процедуры, принимающей результат работы метода.
//   ВладелецФайла - ЛюбаяСсылка - Необязательный. Определяет группу, в которой создается Элемент.
//       Если группа неизвестна в момент вызова этого метода - там будет Неопределено.
//   ФормаВладелец - УправляемаяФорма - Необязательный. Форма, из которой вызвано создание файла.
//   РежимСоздания - Необязательный. Режим создания файла.
//       - Неопределено - Значение по умолчанию. Показать диалог выбора режима создания файла.
//       - Число - Создать файл указанным способом:
//           * 1 - из шаблона (копированием другого файла),
//           * 2 - с диска (из файловой системы клиента),
//           * 3 - со сканера.
//   НеОткрыватьКарточку - Булево - Необязательный. Действие после создания.
//       * Ложь - Значение по умолчанию. Открывать карточку файла после создания.
//       * Истина - Не открывать карточку файла после создания.
//
// Возвращаемое значение:
//   Неопределено
//
Процедура ДобавитьФайл(
	ОбработчикРезультата = Неопределено,
	ВладелецФайла = Неопределено,
	ФормаВладелец = Неопределено,
	РежимСоздания = Неопределено,
	НеОткрыватьКарточку = Ложь) Экспорт
	
	Если РежимСоздания = Неопределено Тогда
		РаботаСФайламиСлужебныйКлиент.ДобавитьФайл(ОбработчикРезультата, ВладелецФайла, ФормаВладелец, , НеОткрыватьКарточку);
	Иначе
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		ПараметрыВыполнения.Вставить("ВладелецФайла", ВладелецФайла);
		ПараметрыВыполнения.Вставить("ФормаВладелец", ФормаВладелец);
		ПараметрыВыполнения.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", НеОткрыватьКарточку);
		РаботаСФайламиСлужебныйКлиент.ДобавитьПослеВыбораРежимаСоздания(РежимСоздания, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Дополнительные процедуры и функции для работы с файлами

// Открывает форму для настройки рабочего каталога.
Процедура ОткрытьФормуНастройкиРабочегоКаталога() Экспорт
	
	ОткрытьФорму("ОбщаяФорма.НастройкаОсновногоРабочегоКаталога");
	
КонецПроцедуры

// Задает вопрос о продолжении закрытия формы если в форме остались захваченные файлы.
//   Вызывается из ПередЗакрытием форм с файлами.
//
// Параметры:
//   Форма        - УправляемаяФорма - Форма, в которой можно редактировать файл.
//   Отказ        - Булево           - Параметр события ПередЗакрытием.
//   ОбъектСсылка - ЛюбаяСсылка      - Ссылка владельца файла.
//   ИмяРеквизита - Строка           - Необязательный. Имя реквизита типа Булево,
//       в котором хранится признак того, что вопрос уже выводился.
//
// Описание:
//   По ссылке объекта проверяет остались ли захваченные файлы.
//   Если захваченные файлы остались:
//   - В параметре Отказ устанавливается значение Истина,
//   - Пользователю задается вопрос.
//   Если пользователь ответил утвердительно, тогда форма снова закрывается.
//
// Например:
//  &НаКлиенте
//  Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
//  	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, Объект.Ссылка);
//  	// <Если есть другой код:>
//  	Если Отказ Тогда
//  		Возврат;
//  	КонецЕсли;
//  	// <Другой прикладной код...>
//  КонецПроцедуры
//
Процедура ПоказатьПодтверждениеЗакрытияФормыСФайлами(Форма, Отказ, ОбъектСсылка, ИмяРеквизита = "МожноЗакрытьФормуСФайлами") Экспорт
	Если Форма[ИмяРеквизита] Тогда
		Возврат;
	КонецЕсли;
	
	Количество = РаботаСФайламиСлужебныйВызовСервера.КоличествоФайловЗанятыхТекущимПользователем(ОбъектСсылка);
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ТекстВопроса = НСтр("ru = 'Один или несколько файлов заняты вами для редактирования.
	                          |
	                          |Продолжить?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(Форма, Отказ, ТекстВопроса, ИмяРеквизита);
КонецПроцедуры

// Копирует существующий файл.
//
// Параметры:
//  ВладелецФайла - ЛюбаяСсылка - владелец файла.
//  ФайлОснование - СправочникСсылка - откуда копируется Файл.
//
Процедура СкопироватьФайл(ВладелецФайла, ФайлОснование) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФайлОснование", ФайлОснование);
	ПараметрыФормы.Вставить("ВладелецФайла", ВладелецФайла);
	
	ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти
