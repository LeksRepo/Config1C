////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает признак, является ли конфигурация базовой.
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт

	Возврат СтандартныеПодсистемыПереопределяемый.ЭтоБазоваяВерсияКонфигурации();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает тип ссылки или ключа записи указанного объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных – ОбъектМетаданных - регистр или ссылочный объект.
// 
//  Возвращаемое значение:
//   Тип ссылки или ключа записи.
//
Функция ТипСсылкиИлиКлючаЗаписиОбъектаМетаданных(ОбъектМетаданных) Экспорт
	
	Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрСведений";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрНакопления";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрБухгалтерии";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрРасчета";
		КонецЕсли;
		Тип = Тип(ВидРегистра + "КлючЗаписи." + ОбъектМетаданных.Имя);
	Иначе
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Тип = ТипЗнч(Менеджер.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Тип;
	
КонецФункции

// Возвращает тип объекта или набора записей указанного объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных – ОбъектМетаданных - регистр или ссылочный объект.
// 
//  Возвращаемое значение:
//   Тип объекта или набора записей.
//
Функция ТипОбъектаИлиНабораЗаписейОбъектаМетаданных(ОбъектМетаданных) Экспорт
	
	Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрСведений";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрНакопления";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрБухгалтерии";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрРасчета";
		КонецЕсли;
		Тип = Тип(ВидРегистра + "НаборЗаписей." + ОбъектМетаданных.Имя);
	Иначе
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(ТипЗнч(Менеджер.ПустаяСсылка()));
		Тип = Тип(ВидОбъекта + "Объект." + ОбъектМетаданных.Имя);
	КонецЕсли;
	
	Возврат Тип;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые при обмене данными

// Выполняет проверку состава плана обмена на наличие обязательных объектов метаданных
// и объектов-исключений из состава плана обмена.
//
// Параметры:
//  ИмяПланаОбмена – Строка, ПланОбменаСсылка. Имя плана обмена или ссылка на узел плана обмена,
//  для которого необходимо выполнить проверку.
//
Процедура ПроверитьСоставПланаОбмена(Знач ИмяПланаОбмена) Экспорт
	
	Если ТипЗнч(ИмяПланаОбмена) <> Тип("Строка") Тогда
		ИмяПланаОбмена = ИмяПланаОбмена.Метаданные().Имя;
	КонецЕсли;
	
	РаспределеннаяИнформационнаяБаза = Метаданные.ПланыОбмена[ИмяПланаОбмена].РаспределеннаяИнформационнаяБаза;
	
	Если Не РаспределеннаяИнформационнаяБаза Тогда
		Возврат;
	КонецЕсли;
	
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	ВключитьВСостав = Новый Массив;
	ИсключитьИзСостава = Новый Массив;
	ОтключитьАвторегистрацию = Новый Массив;
	
	// Получаем список обязательных объектов и объектов-исключений
	ОбязательныеОбъекты = Новый Массив;
	ОбъектыИсключения = Новый Массив;
	
	// Получаем обязательные объекты
	ОбязательныеОбъекты.Добавить(Метаданные.Справочники.ИдентификаторыОбъектовМетаданных);
	
	// Получаем объекты-исключения
	ОбъектыИсключения.Добавить(Метаданные.Константы.ЗаголовокСистемы);
	ОбъектыИсключения.Добавить(Метаданные.Константы.ИспользоватьРазделениеПоОбластямДанных);
	ОбъектыИсключения.Добавить(Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанных);
	ОбъектыИсключения.Добавить(Метаданные.Константы.ЭтоАвтономноеРабочееМесто);
	ОбъектыИсключения.Добавить(Метаданные.Константы.КаталогВременныхФайловДляWindows);
	ОбъектыИсключения.Добавить(Метаданные.Константы.КаталогВременныхФайловДляLinux);
	ОбъектыИсключения.Добавить(Метаданные.Константы.ПараметрыБазовойФункциональности);
	ОбъектыИсключения.Добавить(Метаданные.РегистрыСведений.КэшПрограммныхИнтерфейсов);
	ОбъектыИсключения.Добавить(Метаданные.РегистрыСведений.НеразделенныеПользователи);
	
	// Проверяем список обязательных объектов для состава плана обмена
	Для Каждого Объект Из ОбязательныеОбъекты Цикл
		
		Если СоставПланаОбмена.Найти(Объект) = Неопределено Тогда
			
			ВключитьВСостав.Добавить(Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем список объектов-исключений из состава плана обмена
	Для Каждого Объект Из ОбъектыИсключения Цикл
		
		Если СоставПланаОбмена.Найти(Объект) <> Неопределено Тогда
			
			ИсключитьИзСостава.Добавить(Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Формируем и выводим текст исключения при необходимости
	Если ВключитьВСостав.Количество() <> 0
		ИЛИ ИсключитьИзСостава.Количество() <> 0
		ИЛИ ОтключитьАвторегистрацию.Количество() <> 0 Тогда
		
		Если ВключитьВСостав.Количество() <> 0 Тогда
			
			ОписаниеИсключения1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В состав плана обмена %1 должны входить следующие объекты метаданных: %2'"),
				ИмяПланаОбмена,
				СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПредставлениеОбъектовМетаданных(ВключитьВСостав), ", ")
			);
			
		КонецЕсли;
		
		Если ИсключитьИзСостава.Количество() <> 0 Тогда
			
			ОписаниеИсключения2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В состав плана обмена %1 НЕ должны входить следующие объекты метаданных: %2'"),
				ИмяПланаОбмена,
				СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПредставлениеОбъектовМетаданных(ИсключитьИзСостава), ", ")
			);
			
		КонецЕсли;
		
		Если ОтключитьАвторегистрацию.Количество() <> 0 Тогда
			
			ОписаниеИсключения3 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В составе плана обмена %1 не должно быть объектов с установленным признаком авторегистрации.
				|Требуется запретить авторегистрацию для следующих объектов метаданных: %2'"),
				ИмяПланаОбмена,
				СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПредставлениеОбъектовМетаданных(ОтключитьАвторегистрацию), ", ")
			);
			
		КонецЕсли;
		
		ОписаниеИсключения = "[ОписаниеИсключения1]
		|
		|[ОписаниеИсключения2]
		|
		|[ОписаниеИсключения3]
		|";
		
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения1]", ОписаниеИсключения1);
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения2]", ОписаниеИсключения2);
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения3]", ОписаниеИсключения3);
		
		ВызватьИсключение СокрЛП(ОписаниеИсключения);
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет стандартное поведение при загрузке данных.
Процедура ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, ОтПодчиненного) Экспорт
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		
		// Стандартная обработка не переопределяется.
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("КонстантаМенеджерЗначения.ПараметрыБазовойФункциональности") Тогда
		
		// Эти данные не участвуют в обмене данными (как метаданные).
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Неинтерактивное обновление данных ИБ при смене версии библиотеки
// Обязательная "точка входа" обновления ИБ в библиотеке.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления("СтандартныеПодсистемы", 
		ВерсияБиблиотеки(), СтандартныеПодсистемыПереопределяемый.ОбработчикиОбновленияСтандартныхПодсистем());
	
КонецПроцедуры

// Возвращает номер версии Библиотеки стандартных подсистем.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.1.2.34";
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	// Проверка продолжения работы.
	Параметры.Вставить("ИнформационнаяБазаЗаблокированаДляОбновления",
		ОбновлениеИнформационнойБазы.ИнформационнаяБазаЗаблокированаДляОбновления(, Истина));
	
	Если ЗначениеЗаполнено(Параметры.ИнформационнаяБазаЗаблокированаДляОбновления) Тогда
		// Работа будет заверешена.
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка необходимости предварительного обновления параметров работы программы.
	Если СтандартныеПодсистемыПовтИсп.НеобходимоОбновлениеПараметровРаботыПрограммы().Количество() = 0 Тогда
		Параметры.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы", Ложь);
	Иначе
		Параметры.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы", Истина);
		// Будет выполнено предварительное обновление.
		Возврат Ложь;
	КонецЕсли;
	
	// Обязательные параметры для всех режимов работы
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных",
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
	
	Параметры.Вставить("ПервыйЗапускИнформационнойБазы",
		ОбновлениеИнформационнойБазы.ПервыйЗапускИнформационнойБазы());
	
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначенияПовтИсп.РазделениеВключено());
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	
	Параметры.Вставить("НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы",
		ОбновлениеИнформационнойБазы.НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы());
	
	// При входе неразделенным пользователем в неразделенный сеанс ошибки авторизации нет.
	Параметры.Вставить("ОшибкаАвторизации", "");
	
	Если Параметры.РазделениеВключено И Не Параметры.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметры для работы в локальном режиме или в сеансе с установленными значениями разделителей в модели сервиса
	Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы",
		ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы());
		
	Параметры.Вставить("ЭтоРазделеннаяКонфигурация", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
	
	ПараметрыПроверки = Новый ФиксированнаяСтруктура("МинимальноНеобходимаяВерсияПлатформы,РаботаВПрограммеЗапрещена",
		"8.2.16.368", Ложь);
	ОбщегоНазначенияВызовСервераПереопределяемый.ПолучитьМинимальноНеобходимуюВерсиюПлатформы(ПараметрыПроверки);
	ОбщегоНазначенияПереопределяемый.ПолучитьМинимальноНеобходимуюВерсиюПлатформы(ПараметрыПроверки);
	Параметры.Вставить("МинимальноНеобходимаяВерсияПлатформы", ПараметрыПроверки.МинимальноНеобходимаяВерсияПлатформы);
	Параметры.Вставить("РаботаВПрограммеЗапрещена", ПараметрыПроверки.РаботаВПрограммеЗапрещена);
	Параметры.Вставить("ЕстьДоступДляОбновленияВерсииПлатформы", ПравоДоступа("Администрирование", Метаданные));
	
	Параметры.Вставить("ОшибкаАвторизации", ПользователиСлужебный.АвторизоватьТекущегоПользователя(Истина));
	Если Параметры.ОшибкаАвторизации <> "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИнформационнаяБазаЗаблокированаДляОбновления) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);
	
	Возврат Истина;
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных", 
		ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначенияПовтИсп.РазделениеВключено());
		
	ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);
	
	Параметры.Вставить("ИмяКонфигурации",     Метаданные.Имя);
	Параметры.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	Параметры.Вставить("ВерсияКонфигурации",  Метаданные.Версия);
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	
	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
		ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());
	
	// Параметры для внешних подключений пользователей
	Параметры.Вставить("ИнформацияОПользователе", ПолучитьИнформациюОПользователе());
	Параметры.Вставить("ИмяCOMСоединителя", ОбщегоНазначения.ИмяCOMСоединителя());
	
	Параметры.Вставить("ПоправкаКВремениСеанса", ТекущаяДатаСеанса()); // записываем серверное время для последующей замены его на разницу с клиентом.
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации и в дальнейшем во время работы с ней. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьОбщиеПараметрыРаботыКлиента(Параметры) 
	
	Если Не Параметры.РазделениеВключено Или Параметры.ДоступноИспользованиеРазделенныхДанных Тогда
		
		Параметры.Вставить("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
		Параметры.Вставить("ПредставлениеПользователя", Строка(Параметры.АвторизованныйПользователь));
		
		УстановитьПривилегированныйРежим(Истина);
		Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Параметры.Вставить("ЭтоГлавныйУзел", НЕ ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ());
	Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	Параметры.Вставить("ТребуетсяОбновлениеКонфигурацииУзлаРИБ",
		ОбновлениеИнформационнойБазы.ТребуетсяОбновлениеКонфигурацииУзлаРИБ());
	
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", ЭтоБазоваяВерсияКонфигурации());
	
КонецПроцедуры

// Возвращает массив поддерживаемых подсистемой ИмяПодсистемы названий номеров версий.
//
// Параметры:
// ИмяПодсистемы - Строка - Имя подсистемы.
//
// Возвращаемое значение:
// Массив строк.
//
Функция ПоддерживаемыеВерсии(ИмяПодсистемы) Экспорт
	
	МассивВерсий = Неопределено;
	
	СтруктураПоддерживаемыхВерсий = Новый Структура;
	СтандартныеПодсистемыПереопределяемый.ПолучитьПоддерживаемыеВерсииПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	
	СтруктураПоддерживаемыхВерсий.Свойство(ИмяПодсистемы, МассивВерсий);
	
	Если МассивВерсий = Неопределено Тогда
		Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Новый Массив);
	Иначе
		Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(МассивВерсий);
	КонецЕсли;
	
КонецФункции

// Получает объекты метаданных, которые используются для хранения параметров работы программы.
//
Процедура ПолучитьПараметрыРаботыПрограммы(Параметры) Экспорт
	
	Параметры.Добавить(Метаданные.Справочники.ИдентификаторыОбъектовМетаданных);
	
КонецПроцедуры

// Только для внутреннего использования.
Функция НеобходимоОбновлениеПараметровРаботыПрограммы() Экспорт
	
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			// Обновление в модели сервиса.
			Возврат НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
				И ОбновлениеИнформационнойБазы.НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы();
		Иначе
			// Обновление в локальном режиме.
			Возврат ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы();
		КонецЕсли;
		
		Попытка
			ПользователиСлужебныйПовтИсп.Параметры();
		Исключение
			Возврат Истина;
		КонецПопытки;
		
		Если СтандартныеПодсистемыПереопределяемый.НастройкаПодчиненногоУзлаРИБ() Тогда
			Возврат Истина;
		КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Только для внутреннего использования.
Процедура ЗагрузитьИлиОбновитьПараметрыРаботыПрограммы(Знач Принудительно = Ложь) Экспорт
	
	ОбновитьПараметрыРаботыПрограммыБезЗагрузки = Ложь;
	
	Если НЕ НеобходимоОбновлениеПараметровРаботыПрограммы() Тогда
		Попытка
			ПользователиСлужебныйПовтИсп.Параметры();
		Исключение
			ОбновитьПараметрыРаботыПрограммыБезЗагрузки = Истина;
		КонецПопытки;
		
		Если СтандартныеПодсистемыПереопределяемый.НастройкаПодчиненногоУзлаРИБ() Тогда
			ОбновитьПараметрыРаботыПрограммыБезЗагрузки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Принудительно
	   И НЕ НеобходимоОбновлениеПараметровРаботыПрограммы()
	   И НЕ ОбновитьПараметрыРаботыПрограммыБезЗагрузки Тогда
		
		Возврат;
	КонецЕсли;
	
	СнятьМонопольныйРежим = Ложь;
	Если НЕ МонопольныйРежим() Тогда
		Попытка
			УстановитьМонопольныйРежим(Истина);
			СнятьМонопольныйРежим = Истина;
		Исключение
			ВызватьИсключение
				НСтр("ru = 'Невозможно выполнить обновление информационной базы:
				           |- Невозможно установить монопольный режим
				           |- Версия конфигурации не предусматривает обновление без установки монопольного режима.'");
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Если ОбновитьПараметрыРаботыПрограммыБезЗагрузки Тогда
			// Обновление при первом запуске без заполненных параметров работы программы и
			// без необходимости обновления (например, первый запуск подчиненного узла).
			ОбновитьПараметрыРаботыПрограммы();
			
		ИначеЕсли НЕ ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
			// Нет РИБ-обмена данными или обновление в главном узле ИБ.
			ОбновитьПараметрыРаботыПрограммы();
		Иначе
			// Есть РИБ-обмен данными и обновление в подчиненном узле ИБ.
			Отказ = Ложь;
			Попытка
				// Загрузка параметров работы программы из главного узла.
				СтандартныеПодсистемыПереопределяемый.ПриОбновленииПараметровРаботыПрограммы(Отказ);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обмен данными.Загрузка справочника Идентификаторы объектов метаданных'"),
					УровеньЖурналаРегистрации.Ошибка, , ,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
				СтандартныеПодсистемыПереопределяемый.ПриОшибкеПолученияПараметровРаботыПрограммы();
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Из главного узла не загружены изменения справочника ""Идентификаторы объектов метаданных""
					           |В главном узле выполните обновление информационной базы,
					           |повторите синхронизацию и после этого нажмите кнопку Перезапустить.
					           |
					           |Произошла ошибка:
					           |""%1"".
					           |
					           |Чтобы выполнить обновление информационной базы в главном узле,
					           |включите константу ""Требуется обновление информационной базы""
					           |через меню ""Все функции"" и перезапустите программу.
					           |Выключение константы произойдет автоматически.'"),
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
			
			Если КонфигурацияИзменена() Тогда
				ВызватьИсключение
					НСтр("ru = 'Найдены изменения программы, полученные из главного узла.
					           |Завершите работу программы. Откройте программу в конфигураторе и
					           |выполните команду ""Обновить конфигурацию базы данных (F7)"".
					           |
					           |После этого запустите программу.'");
			КонецЕсли;
			
			// Проверка загрузки параметров работы программы из главного узла.
			Попытка
				ОбновитьПараметрыРаботыПрограммы();
			Исключение
				ТекстОшибки =
					НСтр("ru = 'Из главного узла не загружены изменения справочника ""Идентификаторы объектов метаданных"" .'");
				
				Если Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти("ОбменДанными") <> Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС +
						НСтр("ru = 'В главном узле выполните обновление информационной базы,
						           |повторите синхронизацию и после этого нажмите кнопку Перезапустить.'");
					
					Если Отказ Тогда
						ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС +
							НСтр("ru = 'Ошибка загрузки данных. См. подробности в журнале регистрации.'");
					КонецЕсли;
					
					ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС +
						НСтр("ru = 'Чтобы выполнить обновление информационной базы в главном узле,
						           |включите константу ""Требуется обновление информационной базы""
						           |через меню ""Все функции"" и перезапустите программу.
						           |Выключение константы произойдет автоматически.'");
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обмен данными.Загрузка справочника Идентификаторы объектов метаданных'"),
					УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
				
				СтандартныеПодсистемыПереопределяемый.ПриОшибкеПолученияПараметровРаботыПрограммы();
				ВызватьИсключение ТекстОшибки;
			КонецПопытки;
		КонецЕсли;
	Исключение
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Инициализации параметров сеанса

// Инициализация параметров сеанса.
// Параметры
//  ИменаПараметровСеанса - массив, неопределено - 
//                         в массиве имена параметров сеанса для инициализации
//
//  Возвращает массив имен установленных параметров сеанса
//
Функция УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	Перем ТекстСообщения;
	
	// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
	// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
	// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры
	УстановленныеПараметры = Новый Массив;
	
	Если ИменаПараметровСеанса = Неопределено Тогда
		// Начальное выполнение на сервере перед запуском программы.
		ПередЗапускомПрограммы();
		Возврат УстановленныеПараметры;
	КонецЕсли;
	
	Обработчики = СтандартныеПодсистемыПереопределяемый.ОбработчикиИнициализацииПараметровСеансаСтандартныхПодсистем();
	ОбработчикиСобственные = ОбщегоНазначенияПереопределяемый.ОбработчикиИнициализацииПараметровСеанса();
	
	Для Каждого Запись Из ОбработчикиСобственные Цикл
		Обработчики.Вставить(Запись.Ключ, Запись.Значение);
	КонецЦикла;
	
	// массив с ключами параметров сеанса
	// задаются начальным словом в имени параметра сеанса и символом "*"
	ПараметрыСеансаКлючи = Новый Массив;
	
	Для Каждого Запись Из Обработчики Цикл
		Если Найти(Запись.Ключ, "*") > 0 Тогда
			КлючПараметра = СокрЛП(Запись.Ключ);
			ПараметрыСеансаКлючи.Добавить(Лев(КлючПараметра, СтрДлина(КлючПараметра)-1));
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
		Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Обработчик = Обработчики.Получить(ИмяПараметра);
		Если Обработчик <> Неопределено Тогда
			Если Не ОбщегоНазначения.ПроверитьИмяЭкспортнойПроцедуры(Обработчик, ТекстСообщения) Тогда
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Выполнить Обработчик + "(ИмяПараметра, УстановленныеПараметры)";
			Продолжить;
		КонецЕсли;
		Для Каждого ИмяКлючаПараметра Из ПараметрыСеансаКлючи Цикл
			Если Лев(ИмяПараметра, СтрДлина(ИмяКлючаПараметра)) = ИмяКлючаПараметра Тогда
				Обработчик = Обработчики.Получить(ИмяКлючаПараметра+"*");
				Если Не ОбщегоНазначения.ПроверитьИмяЭкспортнойПроцедуры(Обработчик, ТекстСообщения) Тогда
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				Выполнить Обработчик + "(ИмяПараметра, УстановленныеПараметры)";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат УстановленныеПараметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.УстановитьКонстантуНеИспользоватьРазделениеПоОбластямДанных";
	Обработчик.Приоритет = 99;
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.ПометитьЗаписиКэшаВерсийНеактуальными";
	Обработчик.Приоритет = 99;
	Обработчик.ОбщиеДанные = Истина;
	
КонецПроцедуры

// Устанавливает корректное значение константе НеИспользоватьРазделениеПоОбластямДанных
//
Процедура УстановитьКонстантуНеИспользоватьРазделениеПоОбластямДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		
		Константы.НеИспользоватьРазделениеПоОбластямДанных.Установить(Ложь);
		Константы.ЭтоАвтономноеРабочееМесто.Установить(Ложь);
		
	ИначеЕсли Константы.ЭтоАвтономноеРабочееМесто.Получить() Тогда
		
		Константы.НеИспользоватьРазделениеПоОбластямДанных.Установить(Ложь);
		
	Иначе
		
		Константы.НеИспользоватьРазделениеПоОбластямДанных.Установить(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Сбрасывает дату обновления всех записей кэша версий, таким
// образом все записи кэша начинают считаться неактуальными.
//
Процедура ПометитьЗаписиКэшаВерсийНеактуальными() Экспорт
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.КэшПрограммныхИнтерфейсов.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для каждого Запись Из НаборЗаписей Цикл
		Запись.ДатаОбновления = Неопределено;
	КонецЦикла;
	НаборЗаписей.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подтверждение завершения работы программы

// Прочитать настройку подтверждения завершения работы программы
// для текущего пользователя.
// 
// Возвращаемое значение:
//   Булево   - значение настройки.
// 
Функция ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
	Если Результат = Неопределено Тогда
		Результат = Истина;
		СтандартныеПодсистемыВызовСервера.СохранитьНастройкуПодтвержденияПриЗавершенииПрограммы(Результат);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка подписок на события планов обмена

// Процедура-обработчик подписки на событие ПередЗаписью для ПланОбменаОбъект
// Используется для вызова обработчика события ПослеПолученияДанных при обмене в распределенной ИБ.
//
Процедура ПослеПолученияДанных(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Загрузка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Метаданные().РаспределеннаяИнформационнаяБаза Тогда
		
		Если Источник.НомерПринятого <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "НомерПринятого") Тогда
			
			Если ПланыОбмена.ГлавныйУзел() = Источник.Ссылка Тогда
				
				СтандартныеПодсистемыПереопределяемый.ПослеПолученияДанныхОтГлавного(Источник, Отказ);
				
			Иначе
				
				СтандартныеПодсистемыПереопределяемый.ПослеПолученияДанныхОтПодчиненного(Источник, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик подписки на событие ПередЗаписью для ПланОбменаОбъект
// Используется для вызова обработчика события ПослеОтправкиДанных при обмене в распределенной ИБ.
//
Процедура ПослеОтправкиДанных(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Загрузка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Метаданные().РаспределеннаяИнформационнаяБаза Тогда
		
		Если Источник.НомерОтправленного <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "НомерОтправленного") Тогда
			
			Если ПланыОбмена.ГлавныйУзел() = Источник.Ссылка Тогда
				
				СтандартныеПодсистемыПереопределяемый.ПослеОтправкиДанныхГлавному(Источник, Отказ);
				
			Иначе
				
				СтандартныеПодсистемыПереопределяемый.ПослеОтправкиДанныхПодчиненному(Источник, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ПередЗапускомПрограммы()
	
	Если НеобходимоОбновлениеПараметровРаботыПрограммы() Тогда
		СтандартныеПодсистемыПовтИсп.НеобходимоОбновлениеПараметровРаботыПрограммы().Вставить("Да");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыРаботыПрограммы()
	
	Если МонопольныйРежим() Тогда
		СтандартныеПодсистемыПереопределяемый.ОбновитьПараметрыРаботыПрограммы();
	Иначе
		Попытка
			УстановитьМонопольныйРежим(Истина);
		Исключение
			ВызватьИсключение
				НСтр("ru = 'Невозможно выполнить обновление информационной базы:
				           |- Невозможно установить монопольный режим
				           |- Версия конфигурации не предусматривает обновление без установки монопольного режима.'");
		КонецПопытки;
		
		Попытка
			СтандартныеПодсистемыПереопределяемый.ОбновитьПараметрыРаботыПрограммы();
		Исключение
			УстановитьМонопольныйРежим(Ложь);
			ВызватьИсключение;
		КонецПопытки;
		
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИнформациюОПользователе()
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Информация = Новый Структура;
	Информация.Вставить("Имя",                       ТекущийПользователь.Имя);
	Информация.Вставить("ПолноеИмя",                 ТекущийПользователь.ПолноеИмя);
	Информация.Вставить("ПарольУстановлен",          ТекущийПользователь.ПарольУстановлен);
	Информация.Вставить("АутентификацияOpenID",      ТекущийПользователь.АутентификацияOpenID);
	Информация.Вставить("АутентификацияСтандартная", ТекущийПользователь.АутентификацияСтандартная);
	Информация.Вставить("АутентификацияОС",          ТекущийПользователь.АутентификацияОС);
	
	Возврат Информация;
	
КонецФункции

Функция ПредставлениеОбъектовМетаданных(Объекты)
	
	Результат = Новый Массив;
	
	Для Каждого Объект Из Объекты Цикл
		
		Результат.Добавить(Объект.ПолноеИмя());
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
