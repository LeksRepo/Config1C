////////////////////////////////////////////////////////////////////////////////
// Подсистема "Информационный центр".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями\ПриОпределенииОбработчиковКаналовСообщений"].Добавить(
			"ИнформационныйЦентрСлужебный");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные\ПриОпределенииОбработчиковПоставляемыхДанных"].Добавить(
			"ИнформационныйЦентрСлужебный");
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"ИнформационныйЦентрСлужебный");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса\ПриЗаполненииТаблицыПараметровИБ"].Добавить(
				"ИнформационныйЦентрСлужебный");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий подсистем БСП

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ()
//
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	МодульРаботаВМоделиСервиса = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаВМоделиСервиса");
	МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресУправленияКонференцией");
	МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИмяПользователяКонференцииИнформационногоЦентра");
	МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ПарольПользователяКонференцииИнформационногоЦентра");
	
КонецПроцедуры

// Получает список обработчиков сообщений, которые обрабатывают подсистемы библиотеки.
// 
// Параметры:
//  Обработчики - ТаблицаЗначений - состав полей см. в ОбменСообщениями.НоваяТаблицаОбработчиковСообщений
// 
Процедура ПриОпределенииОбработчиковКаналовСообщений(Обработчики) Экспорт
	
	СообщенияИнформационногоЦентраОбработчикСообщения.ПолучитьОбработчикиКаналовСообщений(Обработчики);
	
КонецПроцедуры

// Зарегистрировать обработчики поставляемых данных
//
// При получении уведомления о доступности новых общих данных, вызывается процедуры
// ДоступныНовыеДанные модулей, зарегистрированных через ПолучитьОбработчикиПоставляемыхДанных.
// В процедуру передается Дескриптор - ОбъектXDTO Descriptor.
// 
// В случае, если ДоступныНовыеДанные устанавливает аргумент Загружать в значение Истина, 
// данные загружаются, дескриптор и путь к файлу с данными передаются в процедуру 
// ОбработатьНовыеДанные. Файл будет автоматически удален после завершения процедуры.
// Если в менеджере сервиса не был указан файл - значение аргумента равно Неопределено.
//
// Параметры: 
//   Обработчики, ТаблицаЗначений - таблица для добавления обработчиков. 
//       Колонки:
//        ВидДанных, строка - код вида данных, обрабатываемый обработчиком
//        КодОбработчика, строка(20) - будет использоваться при восстановлении обработки данных после сбоя
//        Обработчик,  ОбщийМодуль - модуль, содержащий следующие процедуры:
//          ДоступныНовыеДанные(Дескриптор, Загружать) Экспорт  
//          ОбработатьНовыеДанные(Дескриптор, ПутьКФайлу) Экспорт
//          ОбработкаДанныхОтменена(Дескриптор) Экспорт
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	
КонецПроцедуры

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
КонецПроцедуры

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик                  = Обработчики.Добавить();
	Обработчик.Версия           = "*";
	Обработчик.МонопольныйРежим = Ложь;
	Обработчик.ОбщиеДанные      = Истина;
	Обработчик.Процедура        = "ИнформационныйЦентрСлужебный.СформироватьСловарьПолныхПутейКФормам";
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Обработчик                  = Обработчики.Добавить();
		Обработчик.Версия           = "*";
		Обработчик.МонопольныйРежим = Ложь;
		Обработчик.ОбщиеДанные      = Истина;
		Обработчик.Процедура        = "ИнформационныйЦентрСлужебный.ОбновитьИнформационныеСсылкиДляФормВМоделиСервиса";
	Иначе
		Обработчик                  = Обработчики.Добавить();
		Обработчик.Версия           = "*";
		Обработчик.МонопольныйРежим = Ложь;
		Обработчик.Процедура        = "ИнформационныйЦентрСлужебный.ОбновитьИнформационныеСсылкиДляФормВЛокальномРежиме";
	КонецЕсли;
	
КонецПроцедуры

// Заполяет справочник "ПолныеПутиКФормам" полными путями к формам.
//
Процедура СформироватьСловарьПолныхПутейКФормам() Экспорт
	
	// Формирование таблицы со списком полных форм конфигурации
	ТаблицаФорм = Новый ТаблицаЗначений;
	ТаблицаФорм.Колонки.Добавить("ПолныйПутьКФорме", Новый ОписаниеТипов("Строка"));
	
	ДобавитьФормыВСправочник(ТаблицаФорм, "ОбщиеФормы");
	ДобавитьФормыВСправочник(ТаблицаФорм, "ПланыОбмена");
	ДобавитьФормыВСправочник(ТаблицаФорм, "Справочники");
	ДобавитьФормыВСправочник(ТаблицаФорм, "Документы");
	ДобавитьФормыВСправочник(ТаблицаФорм, "ЖурналыДокументов");
	ДобавитьФормыВСправочник(ТаблицаФорм, "Перечисления");
	ДобавитьФормыВСправочник(ТаблицаФорм, "Отчеты");
	ДобавитьФормыВСправочник(ТаблицаФорм, "Обработки");
	ДобавитьФормыВСправочник(ТаблицаФорм, "ПланыВидовХарактеристик");
	ДобавитьФормыВСправочник(ТаблицаФорм, "ПланыСчетов");
	ДобавитьФормыВСправочник(ТаблицаФорм, "ПланыВидовРасчета");
	ДобавитьФормыВСправочник(ТаблицаФорм, "РегистрыСведений");
	ДобавитьФормыВСправочник(ТаблицаФорм, "РегистрыНакопления");
	ДобавитьФормыВСправочник(ТаблицаФорм, "РегистрыБухгалтерии");
	ДобавитьФормыВСправочник(ТаблицаФорм, "РегистрыРасчета");
	ДобавитьФормыВСправочник(ТаблицаФорм, "БизнесПроцессы");
	ДобавитьФормыВСправочник(ТаблицаФорм, "Задачи");
	ДобавитьФормыВСправочник(ТаблицаФорм, "ХранилищаНастроек");
	ДобавитьФормыВСправочник(ТаблицаФорм, "КритерииОтбора");
	
	// Заполнение справочника "ПолныеПутиКФормам"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФорм", ТаблицаФорм);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаФорм.ПолныйПутьКФорме КАК ПолныйПутьКФорме
	|ПОМЕСТИТЬ ТаблицаФорм
	|ИЗ
	|	&ТаблицаФорм КАК ТаблицаФорм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолныеПутиКФормам.Ссылка КАК Ссылка,
	|	ТаблицаФорм.ПолныйПутьКФорме КАК ПолныйПутьКФорме
	|ИЗ
	|	Справочник.ПолныеПутиКФормам КАК ПолныеПутиКФормам
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаФорм КАК ТаблицаФорм
	|		ПО (ПОДСТРОКА(ПолныеПутиКФормам.ПолныйПутьКФорме, 1, 1000) = ПОДСТРОКА(ТаблицаФорм.ПолныйПутьКФорме, 1, 1000))
	|ГДЕ
	|	ПолныеПутиКФормам.Ссылка ЕСТЬ NULL ";
	ВыборкаФорм = Запрос.Выполнить().Выбрать();
	Пока ВыборкаФорм.Следующий() Цикл 
		ДобавитьПолноеИмяВСправочник(ВыборкаФорм.ПолныйПутьКФорме);
	КонецЦикла;
	
КонецПроцедуры

// При обновлении конфигурации необходимо обновить список Информационных ссылок для форм.
// Это происходит через Менеджер сервиса.
//
Процедура ОбновитьИнформационныеСсылкиДляФормВМоделиСервиса() Экспорт
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ИмяКонфигурации = Метаданные.Имя;
		УстановитьПривилегированныйРежим(Ложь);
		ПроксиВебСервиса = ИнформационныйЦентрСервер.ПолучитьПроксиИнформационногоЦентра_1_0_1_1();
		Результат = ПроксиВебСервиса.UpdateInfoReference(ИмяКонфигурации);
		Если Результат Тогда 
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = НСтр("ru = 'Не удалось обновить Информационные ссылки'");
		ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	Исключение
		ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// При обновлении конфигурации необходимо обновить список Информационных ссылок для форм.
// Это происходит через Менеджер сервиса.
//
Процедура ОбновитьИнформационныеСсылкиДляФормВЛокальномРежиме() Экспорт
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
	Если ПустаяСтрока(ПутьКФайлу) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = ПолучитьОбщийМакет("ИнформационныеСсылки");
	ТекстовыйДокумент.Записать(ПутьКФайлу);
	Попытка
		ЗагрузитьИнформационныеСсылки(ПутьКФайлу);
	Исключение
		ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Возвращает строковое представление версии в числовом диапазоне.
//
// Параметры:
//	Версия - Строка - версия.
//
// Возвращаемое значение:
//	Число - представление версии числом.
//
Функция ПолучитьВерсиюЧислом(Версия) Экспорт
	
	МассивЧисел = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Версия, ".");
	
	Итерация           = 1;
	ВерсияЧислом       = 0;
	КоличествоВМассиве = МассивЧисел.Количество();
	
	Если КоличествоВМассиве = 0 Тогда 
		Возврат 0;
	КонецЕсли;
	
	Для Каждого ЧислоВерсии Из МассивЧисел Цикл 
		
		Попытка
			ТекущееЧисло = Число(ЧислоВерсии);
			ВерсияЧислом = ВерсияЧислом + ТекущееЧисло * ВозвестиЧислоВПоложительнуюСтепень(1000, КоличествоВМассиве - Итерация);
		Исключение
			Возврат 0;
		КонецПопытки;
		
		Итерация = Итерация + 1;
		
	КонецЦикла;
	
	Возврат ВерсияЧислом;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОЛУЧЕНИЯ ПОСТАВЛЯЕМЫХ ДАННЫХ

// Регистрирует обработчики поставляемых данных за день и за все время
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	Обработчик                = Обработчики.Добавить();
	Обработчик.ВидДанных      = "ИнформационныеСсылки";
	Обработчик.КодОбработчика = "ИнформационныеСсылки";
	Обработчик.Обработчик     = ИнформационныйЦентрСлужебный;
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению, 
// и если да - установить флажок Загружать
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = "ИнформационныеСсылки" Тогда
		
		ИмяКонфигурации = ПолучитьИмяКонфигурацииПоДескриптору(Дескриптор);
		Если ИмяКонфигурации = Неопределено Тогда 
			Загружать = Ложь;
			Возврат;
		КонецЕсли;
		
		Загружать = ?(ВРег(Метаданные.Имя) = ВРег(ИмяКонфигурации), Истина, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - Строка или Неопределено. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры. Если в менеджере сервиса не был
//                  указан файл - значение аргумента равно Неопределено.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType = "ИнформационныеСсылки" Тогда
		ОбработатьИнформационныеСсылки(Дескриптор, ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработатьИнформационныеСсылки(Дескриптор, ПутьКФайлу)
	
	ЗагрузитьИнформационныеСсылки(ПутьКФайлу);
	
КонецПроцедуры

Функция ПолучитьИмяКонфигурацииПоДескриптору(Дескриптор)
	
	Для Каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "ОбъектРазмещения" Тогда
			Попытка
				Возврат Характеристика.Value;
			Исключение
				ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Неопределено;
			КонецПопытки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗагрузитьИнформационныеСсылки(ПутьКФайлу)
	
	// Формирование дерева тегов
	ДеревоТегов = ПолучитьДеревоТегов();
	
	ДатаОбновления = ТекущаяДата(); // Проектное решение БСП
	
	ТипИнформационнойСсылки    = ФабрикаXDTO.Тип("http://www.1c.ru/SaaS/1.0/XMLSchema/ManageInfoCenter/InformationReferences", "reference"); 
	ЧтениеИнформационныхСсылок = Новый ЧтениеXML; 
	ЧтениеИнформационныхСсылок.ОткрытьФайл(ПутьКФайлу); 
	
	ЧтениеИнформационныхСсылок.ПерейтиКСодержимому();
	ЧтениеИнформационныхСсылок.Прочитать();
	
	Пока ЧтениеИнформационныхСсылок.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл 
		
		ИнформационнаяСсылка = ФабрикаXDTO.ПрочитатьXML(ЧтениеИнформационныхСсылок, ТипИнформационнойСсылки);
		
		// Предопределенный элемент
		Если Не ПустаяСтрока(ИнформационнаяСсылка.namePredifined) Тогда 
			Попытка
				ЗаписатьПредопределеннуюИнформационнуюСсылку(ИнформационнаяСсылка);
			Исключение
				ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			Продолжить;
		КонецЕсли;
		
		// Обыкновенный элемент
		Если ТипЗнч(ИнформационнаяСсылка.context) = Тип("СписокXDTO") Тогда 
			Для Каждого Контекст из ИнформационнаяСсылка.context Цикл 
				Попытка
					ЗаписатьСсылкуПоКонтекстам(ДеревоТегов, ИнформационнаяСсылка, Контекст, ДатаОбновления);
				Исключение
					ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЦикла;
		Иначе
			ЗаписатьСсылкуПоКонтекстам(ДеревоТегов, ИнформационнаяСсылка, ИнформационнаяСсылка.context, ДатаОбновления);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеИнформационныхСсылок.Закрыть();
	
	ОчиститьНеОбновленныеСсылки(ДатаОбновления);
	
КонецПроцедуры

Процедура ЗаписатьПредопределеннуюИнформационнуюСсылку(ОбъектСсылки)
	
	Попытка
		ЭлементСправочника = Справочники.ИнформационныеСсылкиДляФорм[ОбъектСсылки.namePredifined].ПолучитьОбъект();
	Исключение
		ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	ЭлементСправочника.Адрес                     = ОбъектСсылки.address;
	ЭлементСправочника.ДатаНачалаАктуальности    = ОбъектСсылки.dateFrom;
	ЭлементСправочника.ДатаОкончанияАктуальности = ОбъектСсылки.dateTo;
	ЭлементСправочника.Наименование              = ОбъектСсылки.name;
	ЭлементСправочника.Подсказка                 = ОбъектСсылки.helpText;
	ЭлементСправочника.Записать();
	
КонецПроцедуры

Процедура ОчиститьНеОбновленныеСсылки(ДатаОбновления)
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаСправочника = Справочники.ИнформационныеСсылкиДляФорм.Выбрать();
	Пока ВыборкаСправочника.Следующий() Цикл 
		
		Если ВыборкаСправочника.Предопределенный Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаСправочника.ДатаОбновления = ДатаОбновления Тогда 
			Продолжить;
		КонецЕсли;
		
		Объект = ВыборкаСправочника.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСсылкуПоКонтекстам(ДеревоТегов, ОбъектСсылки, Контекст, ДатаОбновления)
	
	Результат = ПроверитьНаличиеИмениФормыПоТегу(Контекст.tag);
	Если Результат.ЭтоПутьКФорме Тогда 
		ЗаписатьСсылкуПоКонтексту(ОбъектСсылки, Контекст, Результат.ПутьКФорме, ДатаОбновления);
		Возврат;
	КонецЕсли;
	
	Тег             = Контекст.tag;
	НайденнаяСтрока = ДеревоТегов.Строки.Найти(Тег, "Имя");
	Если НайденнаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева из НайденнаяСтрока.Строки Цикл 
		
		ИмяФормы = СтрокаДерева.Имя;
		СсылкаНаПутьКФорме = СсылкаПутиКФормеВСправочнике(ИмяФормы);
		Если СсылкаНаПутьКФорме.Пустая() Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗаписатьСсылкуПоКонтексту(ОбъектСсылки, Контекст, СсылкаНаПутьКФорме, ДатаОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСсылкуПоКонтексту(ОбъектСсылки, Контекст, СсылкаНаПутьКФорме, ДатаОбновления)
	
	Ссылка = ИмеетсяИнформационнаяСсылкаДляДаннойФормы(ОбъектСсылки.address, СсылкаНаПутьКФорме);
	
	Если Ссылка = Неопределено Тогда 
		ЭлементСправочника = Справочники.ИнформационныеСсылкиДляФорм.СоздатьЭлемент();
	Иначе
		ЭлементСправочника = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЭлементСправочника.Адрес                     = ОбъектСсылки.address;
	ЭлементСправочника.Вес                       = Контекст.weight;
	ЭлементСправочника.ДатаНачалаАктуальности    = ОбъектСсылки.dateFrom;
	ЭлементСправочника.ДатаОкончанияАктуальности = ОбъектСсылки.dateTo;
	ЭлементСправочника.Наименование              = ОбъектСсылки.name;
	ЭлементСправочника.Подсказка                 = ОбъектСсылки.helpText;
	ЭлементСправочника.ПолныйПутьКФорме          = СсылкаНаПутьКФорме;
	ЭлементСправочника.ВерсияКонфигурацииОт      = ПолучитьВерсиюЧислом(Контекст.versionFrom);
	ЭлементСправочника.ВерсияКонфигурацииДо      = ПолучитьВерсиюЧислом(Контекст.versionTo);
	ЭлементСправочника.ДатаОбновления            = ДатаОбновления;
	ЭлементСправочника.Записать();
	
КонецПроцедуры

Функция ИмеетсяИнформационнаяСсылкаДляДаннойФормы(Адрес, СсылкаНаПутьКФорме)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПолныйПутьКФорме", СсылкаНаПутьКФорме);
	Запрос.УстановитьПараметр("Адрес",            Адрес);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформационныеСсылкиДляФорм.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ИнформационныеСсылкиДляФорм КАК ИнформационныеСсылкиДляФорм
	               |ГДЕ
	               |	ИнформационныеСсылкиДляФорм.ПолныйПутьКФорме = &ПолныйПутьКФорме
	               |	И ИнформационныеСсылкиДляФорм.Адрес ПОДОБНО &Адрес";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроверитьНаличиеИмениФормыПоТегу(Тег)
	
	Результат = Новый Структура("ЭтоПутьКФорме", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПолныйПутьКФорме", Тег);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолныеПутиКФормам.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПолныеПутиКФормам КАК ПолныеПутиКФормам
	|ГДЕ
	|	ПолныеПутиКФормам.ПолныйПутьКФорме ПОДОБНО &ПолныйПутьКФорме";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Результат.ЭтоПутьКФорме = Истина;
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл 
		Результат.Вставить("ПутьКФорме", ВыборкаЗапроса.Ссылка);
		Возврат Результат;
	КонецЦикла;
	
КонецФункции

Функция ПолучитьДеревоТегов()
	
	ДеревоТегов = Новый ДеревоЗначений;
	ДеревоТегов.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	
	// Чтение общего макета
	ИмяФайлаМакета = ПолучитьИмяВременногоФайла("xml");
	ПолучитьОбщийМакет("СоответствиеТэговОбщимФормам").Записать(ИмяФайлаМакета);
	
	ЗаписиСоответствияТеговИФорм = Новый ЧтениеXML;
	ЗаписиСоответствияТеговИФорм.ОткрытьФайл(ИмяФайлаМакета);
	
	ТекущийТегВДереве = Неопределено;
	Пока ЗаписиСоответствияТеговИФорм.Прочитать() Цикл
		// Чтение текущего тега
		ЭтоТег = ЗаписиСоответствияТеговИФорм.ТипУзла = ТипУзлаXML.НачалоЭлемента и ВРег(СокрЛП(ЗаписиСоответствияТеговИФорм.Имя)) = ВРег("tag");
		Если ЭтоТег Тогда 
			Пока ЗаписиСоответствияТеговИФорм.ПрочитатьАтрибут() Цикл 
				Если ВРег(ЗаписиСоответствияТеговИФорм.Имя) = ВРег("name") тогда
					ТекущийТегВДереве     = ДеревоТегов.Строки.Добавить();
					ТекущийТегВДереве.Имя = ЗаписиСоответствияТеговИФорм.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Чтение формы
		ЭтоФорма = ЗаписиСоответствияТеговИФорм.ТипУзла = ТипУзлаXML.НачалоЭлемента и ВРег(СокрЛП(ЗаписиСоответствияТеговИФорм.Имя)) = ВРег("form");
		Если ЭтоФорма Тогда 
			Пока ЗаписиСоответствияТеговИФорм.ПрочитатьАтрибут() Цикл 
				Если ВРег(ЗаписиСоответствияТеговИФорм.Имя) = ВРег("path") тогда
					Если ТекущийТегВДереве = Неопределено Тогда 
						Прервать;
					КонецЕсли;
					ТекущийЭлементДерева     = ТекущийТегВДереве.Строки.Добавить();
					ТекущийЭлементДерева.Имя = ЗаписиСоответствияТеговИФорм.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоТегов;
	
КонецФункции

Процедура ДобавитьФормыВСправочник(ТаблицаФорм, ИмяКлассаМетаданного)
	
	КлассМетаданных     = Метаданные[ИмяКлассаМетаданного];
	КоличествоЭлементов = КлассМетаданных.Количество();
	Если ИмяКлассаМетаданного = "ОбщиеФормы" Тогда 
		Для ИтерацияЭлементов = 0 По КоличествоЭлементов - 1 Цикл 
			
			ПолныйПутьКФорме = КлассМетаданных.Получить(ИтерацияЭлементов).ПолноеИмя();
			
			ЭлементТаблицы                  = ТаблицаФорм.Добавить();
			ЭлементТаблицы.ПолныйПутьКФорме = ПолныйПутьКФорме;
			
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для ИтерацияЭлементов = 0 По КоличествоЭлементов - 1 Цикл 
		ФормыКлассаМетаданных = КлассМетаданных.Получить(ИтерацияЭлементов).Формы;
		КоличествоФорм        = ФормыКлассаМетаданных.Количество();
		Для ИтерацияФорм = 0 По КоличествоФорм - 1 Цикл 
			
			ПолныйПутьКФорме = ФормыКлассаМетаданных.Получить(ИтерацияФорм).ПолноеИмя();
			
			ЭлементТаблицы                  = ТаблицаФорм.Добавить();
			ЭлементТаблицы.ПолныйПутьКФорме = ПолныйПутьКФорме;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПолноеИмяВСправочник(ПолноеИмяФормы)
	
	ЭлементСправочника = Справочники.ПолныеПутиКФормам.СоздатьЭлемент();
	ЭлементСправочника.Наименование     = ПолноеИмяФормы;
	ЭлементСправочника.ПолныйПутьКФорме = ПолноеИмяФормы;
	ЭлементСправочника.Записать();
	
КонецПроцедуры

Функция СсылкаПутиКФормеВСправочнике(ПолноеИмяФормы)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПолныйПутьКФорме", ПолноеИмяФормы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолныеПутиКФормам.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПолныеПутиКФормам КАК ПолныеПутиКФормам
	|ГДЕ
	|	ПолныеПутиКФормам.ПолныйПутьКФорме ПОДОБНО &ПолныйПутьКФорме";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.ПолныеПутиКФормам.ПустаяСсылка();
	
КонецФункции

// Возводит число в степень.
//
// Параметры:
//	Число - Число - число, возводимое в степень.
//	Степень - Число - степень, в которую необходимо возвести число.
//
// Возвращаемое значение:
//	Число - возведенное в степень число.
//
Функция ВозвестиЧислоВПоложительнуюСтепень(Число, Степень)
	
	Если Степень = 0 Тогда 
		Возврат 1;
	КонецЕсли;
	
	Если Степень = 1 Тогда 
		Возврат Число;
	КонецЕсли;
	
	ВозвращаемоеЧисло = Число;
	
	Для Итерация = 2 по Степень Цикл 
		ВозвращаемоеЧисло = ВозвращаемоеЧисло * Число;
	КонецЦикла;
	
	Возврат ВозвращаемоеЧисло;
	
КонецФункции

