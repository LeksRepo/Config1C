Функция СкопироватьФлэш(Ссылка) Экспорт

    Данные = ЛексСервер.ПолучитьДанныеВнешнегоФайла(Ссылка);

    КаталогВременныхФайлов = ПолучитьКаталогВременныхФайлов();

    СохранитьФайлВКаталогВременных(Ссылка, ".swf");
    
    // сохранение HTML
    
    ИмяХТМЛ = КаталогВременныхФайлов + Данные.Имя + ".htm";

    КодХТМЛ = Данные.HTML;
    КодХТМЛ = СтрЗаменить(КодХТМЛ, "%ЛОКАЛЬНЫЙ_ПУТЬ_К_ФАЙЛУ%", КаталогВременныхФайлов);

    ТекстХТМЛ = Новый ТекстовыйДокумент;
    ТекстХТМЛ.УстановитьТекст(КодХТМЛ);
    ТекстХТМЛ.Записать(ИмяХТМЛ);
    
КонецФункции // СкопироватьВТемп()

// Функция копирует хранимый файл в каталог временных файлов
//
// Параметры
//  ХранимыйФайлСсылка  - СправочникСсылка.ХранимыйФайл
Функция СкопироватьФайлВКаталогВременных(ХранимыйФайлСсылка) Экспорт

    КаталогВременныхФайлов = ПолучитьКаталогВременныхФайлов();
	
    ИмяХранимогоФайла = ЛексСервер.ЗначениеРеквизитаОбъекта(ХранимыйФайлСсылка, "ИмяФайла");   //

    ИмяФайла = КаталогВременныхФайлов + ИмяХранимогоФайла;
    
	АдресХранилища = ЛексСервер.ПолучитьАдресХранилищаВнешнегоФайла(ХранимыйФайлСсылка);    
    ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
    ДвоичныеДанные.Записать(ИмяФайла);
    
    Возврат ИмяФайла;

КонецФункции

Функция СохранитьФайлВКаталогВременных(Ссылка, Расширение) Экспорт
		
    Данные = ЛексСервер.ПолучитьДанныеВнешнегоФайла(Ссылка);

    КаталогВременныхФайлов = ПолучитьКаталогВременныхФайлов();

    // сохранение флэшки
    
    ИмяФайла = КаталогВременныхФайлов + Данные.Имя + Расширение;
    
    ДвоичныеДанные = ПолучитьИзВременногоХранилища(Данные.Адрес);
    ДвоичныеДанные.Записать(ИмяФайла);
	
КонецФункции

Функция ПолучитьКаталогВременныхФайлов() Экспорт

    ИмяКаталога = КаталогВременныхФайлов() + "LEKS\";
    Каталог = Новый Файл(ИмяКаталога);

    Если НЕ Каталог.Существует() Тогда
        СоздатьКаталог(ИмяКаталога);
    КонецЕсли;

	ИмяКаталога = СтрЗаменить(ИмяКаталога, "\", "\\");
	
	Возврат ИмяКаталога;

КонецФункции // ПолучитьКаталогВременныхФайлов()

// используется для старого хранения файлов
// в справочнике ВнешниеФайлы
// в 8.3 удалить
Функция ПолучтьХТМЛВнешнегоФайла(ВнешнийФайлСсылка) Экспорт

    КаталогВременныхФайлов = ЛексКлиент.ПолучитьКаталогВременныхФайлов();
    ВнешнийФайлСтруктура = ЛексСервер.ПолучитьАдресХранилищаВнешнегоФайла(ВнешнийФайлСсылка, "Имя, Хэш");
    
    ФайлХТМЛ = Новый Файл(КаталогВременныхФайлов + ВнешнийФайлСтруктура.Имя + ".htm");
    ФайлSWF = Новый Файл(КаталогВременныхФайлов + ВнешнийФайлСтруктура.Имя + ".swf");
    
    ЗагружатьФайлы = Ложь;
    // проверка, все ли файлы существуют во временном каталоге
    Если ФайлХТМЛ.Существует() И ФайлSWF.Существует() Тогда
        // проверим Хэш
        ХэшЛокальногоФайла = ЛексКлиентСервер.Хэш(Новый ДвоичныеДанные(ФайлSWF.ПолноеИмя));
        ЗагружатьФайлы = НЕ ВнешнийФайлСтруктура.Хэш = ХэшЛокальногоФайла;
    Иначе
        ЗагружатьФайлы = Истина;
    КонецЕсли;
    
    Если ЗагружатьФайлы Тогда
    
        // пробуем сохранить требуемые файл
        Попытка
            ЛексКлиент.СкопироватьФлэш(ВнешнийФайлСсылка);
        Исключение
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
            Отказ = Истина;
        КонецПопытки;
    
    КонецЕсли;
    
    Возврат ФайлХТМЛ.ПолноеИмя;

КонецФункции // ПолучтьХТМЛВнешнегоФайла()

Функция ПолучитьВнешнийФайл(СсылкаВнешнийФайл, Расширение) Экспорт
		
    КаталогВременныхФайлов = ЛексКлиент.ПолучитьКаталогВременныхФайлов();
    ВнешнийФайлСтруктура = ЛексСервер.ПолучитьАдресХранилищаВнешнегоФайла(СсылкаВнешнийФайл, "Имя, Хэш");
    
    Файл = Новый Файл(КаталогВременныхФайлов + ВнешнийФайлСтруктура.Имя + Расширение);
    
    ЗагружатьФайлы = Ложь;
    // проверка, все ли файлы существуют во временном каталоге
    Если Файл.Существует() Тогда
        // проверим Хэш
        ХэшЛокальногоФайла = ЛексКлиентСервер.Хэш(Новый ДвоичныеДанные(Файл.ПолноеИмя));
        ЗагружатьФайлы = НЕ ВнешнийФайлСтруктура.Хэш = ХэшЛокальногоФайла;
    Иначе
        ЗагружатьФайлы = Истина;
    КонецЕсли;
    
    Если ЗагружатьФайлы Тогда
    
        // пробуем сохранить требуемые файл
        Попытка
            ЛексКлиент.СохранитьФайлВКаталогВременных(СсылкаВнешнийФайл, Расширение);
        Исключение
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
            Отказ = Истина;
        КонецПопытки;
    
    КонецЕсли;
    
    Возврат Файл.ПолноеИмя;
	
КонецФункции

Функция ПолучитьСтрокуРаскроя(СсылкаРасчетИнженера, ПутьЛоготипа = Неопределено) Экспорт

	Если ПутьЛоготипа = Неопределено Тогда
		ПутьЛоготипа = ПолучитьПутьЛоготипаРасчетаИнженера(СсылкаРасчетИнженера);
	КонецЕсли;
    
    СтрокаДляФлэшРаскрой = ЛексСервер.СформироватьСтрокуРаскроя(СсылкаРасчетИнженера, ПутьЛоготипа);
    
    Возврат СтрокаДляФлэшРаскрой;

КонецФункции

Функция ПолучитьПутьЛоготипаРасчетаИнженера(СсылкаРасчетИнженера) Экспорт
		
    Логотип = ЛексСервер.ОпределитьЛоготипРасчетИнженера(СсылкаРасчетИнженера);

	Если ЗначениеЗаполнено(Логотип) Тогда
		ПутьЛоготипа = ПолучитьВнешнийФайл(Логотип, ".jpg");
	Иначе
		ПутьЛоготипа = "";
	КонецЕсли;
   
    Возврат СтрЗаменить(ПутьЛоготипа, "\", "\\");;
	
КонецФункции

Функция ПолучитьПутьHTML(ФлэшСсылка, ХТМЛСсылка) Экспорт

	КаталогВременныхФайлов = ПолучитьКаталогВременныхФайлов();
	
	ИмяФайлаХТМЛ = ЛексСервер.ПолучитьЗначениеРеквизита(ХТМЛСсылка, "ИмяФайла");   // ПолучитьАдресХранилищаВнешнегоФайла
	ПутьХТМЛ = КаталогВременныхФайлов + ИмяФайлаХТМЛ;

	Если НЕ АктуальныйФайл(ФлэшСсылка) Тогда
        Попытка
            ПутьХТМЛ = ЛексКлиент.СкопироватьФайлВКаталогВременных(ХТМЛСсылка);
            ТекстХТМЛ = Новый ТекстовыйДокумент;
            ТекстХТМЛ.Прочитать(ПутьХТМЛ);
            Текст = ТекстХТМЛ.ПолучитьТекст();
            Текст = СтрЗаменить(Текст, "%ЛОКАЛЬНЫЙ_ПУТЬ_К_ФАЙЛУ%", КаталогВременныхФайлов);
            ТекстХТМЛ.УстановитьТекст(Текст);
            ТекстХТМЛ.Записать(ПутьХТМЛ);
        Исключение
        	ПутьХТМЛ = Неопределено;
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
        КонецПопытки;
	КонецЕсли;
	
	Возврат ПутьХТМЛ;
	
КонецФункции

// Проверяет хранимый файл в каталоге временных файлов
// Если файл изменен, копирует новый
//
// Параметры
//  ХранимыйФайлСсылка  - СправочникСсылка.ХранимыйФайл
//
// Возвращаемое значение:
//   Булево   - <описание возвращаемого значения>
//
Функция АктуальныйФайл(ХранимыйФайлСсылка) Экспорт
	
	ФайлАктуален = Истина;
	
	КаталогВременныхФайлов = ЛексКлиент.ПолучитьКаталогВременныхФайлов();
	ХранимыйФайлСтруктура = ЛексСервер.ПолучитьЗначенияРеквизитов(ХранимыйФайлСсылка, "ИмяФайла, Хэш");  // 
	
	Файл = Новый Файл(КаталогВременныхФайлов + ХранимыйФайлСтруктура.ИмяФайла);    //  
	
	Если Файл.Существует() Тогда
		// проверим Хэш
		ХэшЛокальногоФайла = ЛексКлиентСервер.Хэш(Новый ДвоичныеДанные(Файл.ПолноеИмя));
		ЗагружатьФайл = НЕ ХранимыйФайлСтруктура.Хэш = ХэшЛокальногоФайла;
	Иначе
		ЗагружатьФайл = Истина;
	КонецЕсли;
	
	Если ЗагружатьФайл Тогда
		
		ФайлАктуален = Ложь;
		
		// пробуем сохранить требуемые файл
		Попытка
			ЛексКлиент.СкопироватьФайлВКаталогВременных(ХранимыйФайлСсылка);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ФайлАктуален;
	
КонецФункции

Функция ПутьHTML (ИмяHTML) Экспорт
	
	РабочийКаталог = ФайловыеФункцииСлужебныйКлиент.ВыбратьПутьККаталогуДанныхПользователя();	
	ПутьHTML = РабочийКаталог + ИмяHTML;
	
	Файл = Новый Файл(ПутьHTML);
	
	Если Файл.Существует() Тогда
		Возврат ПутьHTML;
	КонецЕсли;
	
КонецФункции	