////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Устаревший модуль. Будет удален в следующей редакции БСП.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
// Возвращаемое значение:
//   Структура - структура параметров работы клиента при запуске.
//
Функция ПараметрыРаботыКлиентаПриЗапуске() Экспорт
	
	Параметры = Новый Структура();
	
	Возврат Параметры;
	
КонецФункции

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
// Возвращаемое значение:
//   Структура - структура параметров работы клиента.
//
Функция ПараметрыРаботыКлиента() Экспорт
	
	Параметры = Новый Структура();
	
	Возврат Параметры;
	
КонецФункции

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации при завершении, т.е. в обработчиках:
// - ПередЗавершениемРаботыСистемы,
// - ПриЗавершенииРаботыСистемы
//
// Пример реализации:
//   Для установки параметров работы клиента при завершении можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
// Возвращаемое значение:
//   Структура - структура параметров работы клиента при завершении.
//
Функция ПараметрыРаботыКлиентаПриЗавершении() Экспорт
	
	Параметры = Новый Структура();
	
	Возврат Параметры;
	
КонецФункции


// Вызывается при необходимости переопределить минимально необходимую версию платформы для запуска.
//
// Параметры: 
//   ПараметрыПроверки - ФиксированнаяСтруктура - 
//     МинимальноНеобходимаяВерсияПлатформы   - Строка - номер версии платформы для запуска программы
//     РаботаВПрограммеЗапрещена              - Булево - по умолчанию Ложь
//							
Процедура ПолучитьМинимальноНеобходимуюВерсиюПлатформы(ПараметрыПроверки) Экспорт
		
КонецПроцедуры	

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры:
//  СписокСведений - список значений со значениями параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организации
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	Если ПустаяСтрока(Список) Тогда

		Список = "ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
		Если НЕ СписокСведений.Свойство("НаименованиеДляПечатныхФорм") Тогда
			Список = "НаименованиеПолное," + Список;
		Иначе
			Список = "НаименованиеДляПечатныхФорм," + Список;
		КонецЕсли;

	КонецЕсли;

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование",			" ");
	СоответствиеПараметров.Вставить("СокращенноеНаименование",		" ");
	СоответствиеПараметров.Вставить("НаименованиеДляПечатныхФорм",	" ");
	СоответствиеПараметров.Вставить("ИНН",							" ИНН ");
	СоответствиеПараметров.Вставить("КПП",							" КПП ");
	СоответствиеПараметров.Вставить("Свидетельство",				" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",		" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",				" ");
	СоответствиеПараметров.Вставить("Телефоны",						" тел.: ");
	СоответствиеПараметров.Вставить("Факс",							" факс: ");
	СоответствиеПараметров.Вставить("НомерСчета",					" р/с ");
	СоответствиеПараметров.Вставить("Банк",               			" в банке ");
	СоответствиеПараметров.Вставить("БИК",                			" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           			" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          			" Код по ОКПО ");

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 По ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли;

				Результат = Результат + ?(СПрефиксом = Истина, ?(ПустаяСтрока(Результат), СокрЛ(Префикс), Префикс), "") + СтрокаДополнения;

			Исключение

				ТекстСообщения = НСТр("ru = 'Не удалось определить значение параметра организации:'") + " " + ИмяПараметра;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

				ОписаниеОшибки = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);

			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции // ОписаниеОрганизации()

Процедура ЗаполнитьСписокОрганизаций(ЭлементПолеОрганизация, СоответствиеОрганизаций) Экспорт
	
	//СоответствиеОрганизаций = Новый Структура;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	НаборОрганизаций.Организация КАК Организация,
	//|	НаборОрганизаций.ОрганизацияПредставление КАК ОрганизацияПредставление,
	//|	НаборОрганизаций.ВключатьОбособленныеПодразделения
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		Организации.Ссылка КАК Организация,
	//|		Организации.Наименование КАК ОрганизацияПредставление,
	//|		ЛОЖЬ КАК ВключатьОбособленныеПодразделения
	//|	ИЗ
	//|		Справочник.Организации КАК Организации
	//|";
	//
	//Если БухгалтерскиеОтчетыВызовСервераПовтИсп.ДоступностьУчетаПоПодразделениям() Тогда
	//	Запрос.Текст = Запрос.Текст +
	//	"
	//	|	ОБЪЕДИНИТЬ ВСЕ
	//	|" + "
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|		Организации.ГоловнаяОрганизация,
	//	|		Организации.ГоловнаяОрганизация.Наименование + "" с обособленными подразделениями"",
	//	|		ИСТИНА
	//	|	ИЗ
	//	|		Справочник.Организации КАК Организации
	//	|	ГДЕ
	//	|		Организации.ОбособленноеПодразделение";
	//КонецЕсли;
	//
	//Запрос.Текст = Запрос.Текст +
	//	") КАК НаборОрганизаций
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ОрганизацияПредставление";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//ЭлементПолеОрганизация.СписокВыбора.Очистить();
	//МаксКоличествоСимволов = 40;
	//Пока Выборка.Следующий() Цикл
	//	Ключ     = СтрЗаменить(Строка(Выборка.ВключатьОбособленныеПодразделения) + Выборка.Организация.УникальныйИдентификатор(), "-", "");
	//	Значение = Новый Структура("Организация,ВключатьОбособленныеПодразделения", Выборка.Организация, Выборка.ВключатьОбособленныеПодразделения);
	//	СоответствиеОрганизаций.Вставить(Ключ, Значение);
	//	ЭлементПолеОрганизация.СписокВыбора.Добавить(Ключ, Выборка.ОрганизацияПредставление);
	//	
	//	МаксКоличествоСимволов = Макс(МаксКоличествоСимволов, СтрДлина(Выборка.ОрганизацияПредставление));
	//КонецЦикла;
	//
	//ЭлементПолеОрганизация.ШиринаСпискаВыбора = Окр(?(МаксКоличествоСимволов > 200, 200, МаксКоличествоСимволов) * 1.3);
	//ЭлементПолеОрганизация.ВысотаСпискаВыбора = ?(ЭлементПолеОрганизация.СписокВыбора.Количество() > 15, 15, ЭлементПолеОрганизация.СписокВыбора.Количество());

КонецПроцедуры
