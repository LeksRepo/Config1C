&НаКлиенте
Перем ЗакрытьФормуБезусловно;

////////////////////////////////////////////////////////////////////////////////////////////////////
// Ожидаются параметры формы:
//
//     УзелИнформационнойБазы  - ПланОбменаСсылка  - Ссылка на узле плана обмена, для которого 
//                                                   выполняется помощник (корреспондент обмена)
//
//     ЗапретитьВыгрузкуТолькоИзмененного - Булево - Если установлено в Истина, то вариант отправки 
//                                                   только измененного будет недоступен
//

////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = Неопределено;
	
	Если Не ОбменДаннымиВМоделиСервисаПовтИсп.СинхронизацияДанныхПоддерживается() Тогда
		ТекстОшибки = НСтр("ru='Синхронизация данных для конфигурации не поддерживается!'");
		
	ИначеЕсли Не Параметры.Свойство("УзелИнформационнойБазы", Объект.УзелИнформационнойБазы) Тогда
		ТекстОшибки = НСтр("ru='Обработка не предназначена для непосредственного использования.'");
		
	ИначеЕсли Объект.УзелИнформационнойБазы.Пустая() Тогда
		ТекстОшибки = НСтр("ru='Настройка обмена данными не найдена.'");
		
	КонецЕсли;
	
	Если ТекстОшибки <> Неопределено Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Устанавливаем заголовки, зависящие от узла
	УстановитьКорреспондентаВЗаголовок(ЭтаФорма);
	
	// Дополнение выгрузки
	ДополнениеВыгрузкиИнициализировать();
	
	// Устанавливаем таблицу переходов в зависимости от параметров
	ПорядковыйНомерПерехода = 0;
	
	Если ДополнениеВыгрузки.ВариантВыгрузки = -1 Тогда
		СценарийБезДобавления();
	Иначе
		СценарийПолныйВручную();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗакрытьФормуБезусловно = Ложь;
	
	// На первый шаг
	УстановитьПорядковыйНомерПерехода(1);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекстПодтверждения = НСтр("ru='Прервать синхронизацию данных?'");
	
	ОбщегоНазначенияКлиент.ЗапроситьПодтверждениеЗакрытияФормы(Отказ, , ЗакрытьФормуБезусловно, ТекстПодтверждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// Проверяем на событие дополнения выгрузки. 
	Если ОбменДаннымиКлиент.ОбработкаВыбораДополненияВыгрузки(ВыбранноеЗначение, ИсточникВыбора, ДополнениеВыгрузки) Тогда
		// Событие обработано, обновим отображение типовых
		УстановитьОписаниеОтборовДополненияВыгрузки();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
//

&НаКлиенте
Процедура КомандаДалее(Команда)
	ПерейтиДалее();
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	ПерейтиНазад();
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	ЗакрытьФормуБезусловно = Истина;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОчисткаОбщегоОтбора(Команда)
	
	ТекстЗаголовка = НСтр("ru='Подтверждение'");
	ТекстВопроса   = НСтр("ru='Очистить общий отбор?'");
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,ТекстЗаголовка);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнениеВыгрузкиОчисткаОбщегоОтбораСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОчисткаДетальногоОтбора(Команда)
	ТекстЗаголовка = НСтр("ru='Подтверждение'");
	ТекстВопроса   = НСтр("ru='Очистить детальный отбор?'");
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,ТекстЗаголовка);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнениеВыгрузкиОчисткаДетальногоОтбораСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиСоставВыгрузки(Команда)
	
	ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиСоставДанных(ДополнениеВыгрузки, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиИсторияОтборов(Команда)
	
	// Организуем выбор из меню-списка, все варианты сохраненных настроек
	СписокВариантов = ДополнениеВыгрузкиИсторияНастроекСервер();
	
	// Добавляем вариант сохранения текущих
	Текст = НСтр("ru='Сохранить текущую настройку...'");
	СписокВариантов.Добавить(1, Текст, , БиблиотекаКартинок.СохранитьНастройкиОтчета);
	
	ВыбранныйВариант = ВыбратьИзМеню(СписокВариантов, Элементы.ДополнениеВыгрузкиИсторияОтборов);
	Если ВыбранныйВариант=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеНастройки = ВыбранныйВариант.Значение;
	Если ТипЗнч(ПредставлениеНастройки)=Тип("Строка") Тогда
		// Выбрали вариант - имя ранее сохраненной настройки
		
		ТекстЗаголовка = НСтр("ru='Подтверждение'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Восстановить настройки ""%1""?'"), ПредставлениеНастройки);
			
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,ТекстЗаголовка);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ДополнениеВыгрузкиУстановитьНастройкиСервер(ПредставлениеНастройки);
			ДополнениеВыгрузкиВариантВыгрузкиУстановитьВидимость();
		КонецЕсли;
		
	ИначеЕсли ПредставлениеНастройки = 1 Тогда
		// Выбран вариант сохранения, открываем форму всех настроек
		ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиСохранениеНастроек(ДополнениеВыгрузки, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ
//

// Страница "ИзменениеСоставаВыгрузки"

&НаКлиенте
Процедура ДополнениеВыгрузкиВариантВыгрузкиПриИзменении(Элемент)
	ДополнениеВыгрузкиВариантВыгрузкиУстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОбщийОтборДокументовНажатие(Элемент)
	ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиВсеДокументы(ДополнениеВыгрузки, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиДетальныйОтборНажатие(Элемент)
	ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиДетальныйОтбор(ДополнениеВыгрузки, ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

&НаСервере
Процедура УстановитьКорреспондентаВЗаголовок(ВладелецЗаголовка)
	ВладелецЗаголовка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВладелецЗаголовка.Заголовок, Строка(Объект.УзелИнформационнойБазы));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	ОчиститьСообщения();
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки( Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода) );
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
	Иначе
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		Если КнопкаГотово <> Неопределено Тогда
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки( Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1) );
		Если СтрокиПерехода.Количество() > 0 Тогда
			СтрокаПерехода = СтрокиПерехода[0];
			// обработчик ПриПереходеДалее
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) И Не СтрокаПерехода.ДлительнаяОперация Тогда
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				Отказ = Ложь;
				
				А = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	Иначе
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура( "ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1) );
		Если СтрокиПерехода.Количество() > 0 Тогда
			СтрокаПерехода = СтрокиПерехода[0];
			// обработчик ПриПереходеНазад
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) И Не СтрокаПерехода.ДлительнаяОперация Тогда
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				Отказ = Ложь;
				
				А = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода) );
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура(
        "ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПерейтиДалее Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			Возврат;
		КонецЕсли;
		
	Иначе
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//
//  Добавляет новую строку в конец текущей таблицы переходов
//
//  Параметры:
//      ПорядковыйНомерПерехода             (Число)     Порядковый номер перехода, который соответствует текущему шагу перехода
//      ИмяОсновнойСтраницы                 (Строка)    Имя страницы панели "ПанельОсновная", которая соответствует текущему номеру перехода
//      ИмяСтраницыНавигации                (Строка)    Имя страницы панели "ПанельНавигации", которая соответствует текущему номеру перехода
//      ИмяСтраницыДекорации                (Строка)    Имя страницы панели "ПанельДекорации", которая соответствует текущему номеру перехода
//      ИмяОбработчикаПриОткрытии           (Строка)    Имя функции-обработчика события открытия текущей страницы помощника
//      ИмяОбработчикаПриПереходеДалее      (Строка)    Имя функции-обработчика события перехода на следующую страницу помощника
//      ИмяОбработчикаПриПереходеНазад      (Строка)    Имя функции-обработчика события перехода на предыдущую страницу помощника
//      ДлительнаяОперация                  (Булево)    Признак отображения страницы длительной операции. Ложь - отображается обычная страница.
//      ИмяОбработчикаДлительнойОперации    (Строка)    Имя функции-обработчика длительной операции
//
&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода, ИмяОсновнойСтраницы, ИмяСтраницыНавигации, 
    ИмяСтраницыДекорации = "",
    ИмяОбработчикаПриОткрытии = "", ИмяОбработчикаПриПереходеДалее = "", ИмяОбработчикаПриПереходеНазад = "",
	ДлительнаяОперация = Ложь, ИмяОбработчикаДлительнойОперации = "")

	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			Если ЭлементФормыПоИмениКоманды<>Неопределено Тогда
				Возврат ЭлементФормыПоИмениКоманды;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент)=Тип("КнопкаФормы") И Найти(Элемент.ИмяКоманды, ИмяКоманды)>0 Тогда
			Возврат Элемент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ПерейтиДалее()
	ИзменитьПорядковыйНомерПерехода(+1);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНазад()
	ИзменитьПорядковыйНомерПерехода(-1);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕОПРЕДЕЛЯЕМАЯ ЧАСТЬ: Инициализация переходов помощника
//

&НаСервере
Процедура СценарийПолныйВручную()
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "ИзменениеСоставаВыгрузки", "СтраницаНавигацииНачало", , ,);
	ТаблицаПереходовНоваяСтрока(2, "Окончание", "СтраницаНавигацииОкончание", , "Окончание_ПриОткрытии", );
КонецПроцедуры

&НаСервере
Процедура СценарийБезДобавления()
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "Окончание", "СтраницаНавигацииОкончание", , "Окончание_ПриОткрытии", );
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Обработчики событий перехода и вспомогательное
//
Функция Подключаемый_Окончание_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	// Регистрируем все, что выбрано
	ДополнениеВыгрузкиЗарегистрироватьДанные();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Дополнение выгрузки
//

&НаСервере
Процедура ДополнениеВыгрузкиИнициализировать()
	
	НастройкиДополненияВыгрузки = ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузки(Объект.УзелИнформационнойБазы, ЭтаФорма.УникальныйИдентификатор, Ложь);
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиРеквизитПоНастройкам(ЭтаФорма, НастройкиДополненияВыгрузки, "ДополнениеВыгрузки");
	
	// С настройками можно работать только есть право
	ЕстьПравоНаНастройки = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
	Элементы.ДополнениеВыгрузкиИсторияОтборов.Видимость = ЕстьПравоНаНастройки;
	Элементы.Декорация25.Видимость                      = ЕстьПравоНаНастройки;
	
	Если ЕстьПравоНаНастройки Тогда
		УстанавливатьПервыйЭлемент = Не ДополнениеВыгрузкиУстановитьНастройкиСервер(ОбменДаннымиСервер.ДополнениеВыгрузкиИмяАвтоСохраненияНастроек());
		ДополнениеВыгрузки.ПредставлениеТекущейНастройки = "";
	КонецЕсли;
	
	УстановитьОписаниеОтборовДополненияВыгрузки();
	ДополнениеВыгрузкиВариантВыгрузкиУстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеОтборовДополненияВыгрузки()
	УстановитьОписаниеДополненияОбщегоОтбора();
	УстановитьОписаниеДополненияДетально();
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеДополненияОбщегоОтбора()
	
	Текст = ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиОписаниеДополненияОбщегоОтбора(ДополнениеВыгрузки);
	НетОтбора = ПустаяСтрока(Текст);
	Если НетОтбора Тогда
		Текст = НСтр("ru='Все документы'");
	КонецЕсли;
	
	Элементы.ДополнениеВыгрузкиОбщийОтборДокументов.Заголовок = Текст;
	Элементы.ДополнениеВыгрузкиОчисткаОбщегоОтбора.Видимость = Не НетОтбора;
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеДополненияДетально()
	
	Текст = ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиОписаниеДетальногоОтбора(ДополнениеВыгрузки);
	НетОтбора = ПустаяСтрока(Текст);
	Если НетОтбора Тогда
		Текст = НСтр("ru='Дополнительные данные не выбраны'");
	КонецЕсли;
	
	Элементы.ДополнениеВыгрузкиДетальныйОтбор.Заголовок = Текст;
	Элементы.ДополнениеВыгрузкиОчисткаДетальногоОтбора.Видимость = Не НетОтбора;
КонецПроцедуры

&НаСервере
Процедура ДополнениеВыгрузкиОчисткаОбщегоОтбораСервер()
	
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиОчисткаОбщегоОтбора(ДополнениеВыгрузки);
	УстановитьОписаниеДополненияОбщегоОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ДополнениеВыгрузкиОчисткаДетальногоОтбораСервер()
	
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиОчисткаДетально(ДополнениеВыгрузки);
	УстановитьОписаниеДополненияДетально();
	
КонецПроцедуры

&НаСервере
Функция ДополнениеВыгрузкиИсторияНастроекСервер()
	
	Возврат ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиИсторияНастроек(ДополнениеВыгрузки);
	
КонецФункции

&НаСервере
Функция ДополнениеВыгрузкиУстановитьНастройкиСервер(ПредставлениеНастройки)
	Результат = ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиВосстановитьНастройки(ДополнениеВыгрузки, ПредставлениеНастройки);
	УстановитьОписаниеОтборовДополненияВыгрузки();
	
	Если Не ЗначениеЗаполнено(ДополнениеВыгрузки.УзелИнформационнойБазы)
		Или Не ОбщегоНазначения.СсылкаСуществует(ДополнениеВыгрузки.УзелИнформационнойБазы) Тогда
		
		ДополнениеВыгрузки.УзелИнформационнойБазы = Объект.УзелИнформационнойБазы;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ДополнениеВыгрузкиВариантВыгрузкиУстановитьВидимость()

	Элементы.ГруппаОтборВсеДокументы.Доступность = ДополнениеВыгрузки.ВариантВыгрузки = 1;
	Элементы.ГруппаОтборДетальный.Доступность    = ДополнениеВыгрузки.ВариантВыгрузки = 2;

КонецПроцедуры

&НаСервере 
Процедура ДополнениеВыгрузкиЗарегистрироватьДанные()
	
	Если ДополнениеВыгрузки.ВариантВыгрузки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Оперируем с объектом, в реквизите остаются текущие настройки!
	ДополнениеВыгрузкиОбъект = РеквизитФормыВЗначение("ДополнениеВыгрузки");    
	Если ДополнениеВыгрузки.ВариантВыгрузки = 1 Тогда
		// За период с отбором, очищаем дополнительную
		ДополнениеВыгрузкиОбъект.ДополнительнаяРегистрация.Очистить();
	ИначеЕсли ДополнениеВыгрузки.ВариантВыгрузки = 2 Тогда
		// Детально настроено, очищаем общее
		ДополнениеВыгрузкиОбъект.КомпоновщикОтбораВсехДокументов = Неопределено;
		ДополнениеВыгрузкиОбъект.ПериодОтбораВсехДокументов      = Неопределено;
	КонецЕсли;
	
	// Сохраняем настройки дополнения выгрузки
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиСохранитьНастройки(ДополнениеВыгрузки, 
		ОбменДаннымиСервер.ДополнениеВыгрузкиИмяАвтоСохраненияНастроек());
	
	ДополнениеВыгрузкиОбъект.ЗарегистрироватьДополнительныеИзменения();
КонецПроцедуры

