
#Область События_формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФайлыОбновлены = Ложь;
	Если Параметры.Свойство("ЗапускПрограммы") Тогда
		ЗапускПрограммы = Параметры.ЗапускПрограммы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоказатьОповещениеПользователя("Проверка файлов",, "Поиск обновлённых изображений");
	РабочийКаталог = ФайловыеФункцииСлужебныйКлиент.ВыбратьПутьККаталогуДанныхПользователя();
	
	Если ЗапускПрограммы Тогда
		Таймер = 30;
		ПодключитьОбработчикОжидания("Таймер", 1);
		
		// Костыль, убрать чем быстрее тем лучше.
		
		ФайлФлаг = Новый XBase;
		ФайлФлаг.ОткрытьФайл(РабочийКаталог + "flag.dbf");
		
		Если НЕ ФайлФлаг.Открыта() Тогда
			
			МассивФайлов = НайтиФайлы(РабочийКаталог, "*", Истина);
			Для Каждого Файл Из МассивФайлов Цикл
				Файл.УстановитьТолькоЧтение(Ложь);
			КонецЦикла;
			
			Попытка
				УдалитьФайлы(РабочийКаталог);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			СоздатьКаталог(РабочийКаталог);
			
			ФайлФлаг.поля.Добавить("N", "S", 1);
			ФайлФлаг.СоздатьФайл(РабочийКаталог + "flag.dbf");
			ФайлФлаг.Записать();
			ФайлФлаг.ЗакрытьФайл();
			
		КонецЕсли;
		// Костыль.
		
		СинхронизацияОбязательныхФайлов(Ложь);
		
	КонецЕсли;
	
	ОбновлениеФайлов.ЗаполнитьТаблицуИзКаталога(ТаблицаЗначений, "hash");
	
	ДополнитьТаблицу();
	
	Если ЗапускПрограммы Тогда
		Если ИтогКоличество = 0 Тогда
			ПоказатьОповещениеПользователя("Проверка файлов",, "Все файлы актуальны");
			Отказ = Истина;
		ИначеЕсли ИтогРазмер < 0.5 Тогда
			ПоказатьОповещениеПользователя("Проверка файлов",, "Обновлено несколько файлов");
			ОбновитьФайлы("hash");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура Обновить(Команда = Неопределено)
	
	ОбновитьФайлы("hash");
	
КонецПроцедуры

&НаКлиенте
Процедура Пропустить(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеОбновление(Команда)
	
	МассивФайлов = НайтиФайлы(РабочийКаталог, "*", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		Файл.УстановитьТолькоЧтение(Ложь);
	КонецЦикла;
	
	Попытка
		УдалитьФайлы(РабочийКаталог);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ОбновлениеФайлов.СоздатьКаталогНаДиске(РабочийКаталог);
	
	СинхронизацияОбязательныхФайлов(Истина);
	
	// синхронизация картинок
	
	ФайлДБФ = Новый XBase;
	ОбновлениеФайлов.СоздатьФайлДБФ(ФайлДБФ, РабочийКаталог, "hash");
	//ФайлДБФ.Записать();
	ФайлДБФ.ЗакрытьФайл();
	ТаблицаЗначений.Очистить();
	ДополнитьТаблицу();
	ОбновитьФайлы("hash");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция СинхронизацияОбязательныхФайлов(ПолноеОбновление)
	
	Если ПолноеОбновление Тогда
		ТаблицаОбязательныхФайлов.Очистить();
		ДополнитьТаблицуОбязательныхФайлов();
	КонецЕсли;
	
	ОбновлениеФайлов.ЗаполнитьТаблицуИзКаталога(ТаблицаОбязательныхФайлов, "required");
	ДополнитьТаблицуОбязательныхФайлов();
	КоличествоФайлов = ТаблицаОбязательныхФайлов.Количество();
	
	Если КоличествоФайлов > 0 Тогда
		
		ЗагрузкаДвоичныхДанных("ТаблицаОбязательныхФайлов", КоличествоФайлов);
		
		ФайлДБФ = Новый XBase(РабочийКаталог + "required.dbf", "required.cdx");
		ФайлДБФ.АвтоСохранение = Истина;
		
		СохранитьНаКлиенте(ФайлДБФ, "ТаблицаОбязательныхФайлов", КоличествоФайлов);
		ФайлДБФ.ЗакрытьФайл();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗагрузкаДвоичныхДанных(ИмяТаблицы, ОбработатьСтрок)
	
	Для Индекс = 0 По ОбработатьСтрок - 1 Цикл
		Строка = ЭтаФорма[ИмяТаблицы][Индекс];
		Отбор = Новый Структура("ВерсияФайла", Строка.ВерсияФайла);
		Файл = РегистрыСведений.ХранимыеФайлыВерсий.Получить(Отбор);
		Строка.Данные = Файл.ХранимыйФайл.Получить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(ФайлДБФ, ИмяТаблицы, ОбработатьСтрок)
	
	МассивСтрокДляУдаления = Новый Массив;
	
	Для Индекс = 0 По ОбработатьСтрок - 1 Цикл
		
		Строка = ЭтаФорма[ИмяТаблицы][Индекс];
		МассивСтрокДляУдаления.Добавить(Строка);
		Путь = РабочийКаталог + Строка.Имя;
		ПапкаHTML = ПредопределенноеЗначение("Справочник.ПапкиФайлов.Html");
		
		// Для нормального поиска нужен индекс.
		// Сейчас нет времени с этим разбираться.
		
		//Если НЕ ФайлДБФ.Найти(Строка.Имя) Тогда
		//	ФайлДБФ.Добавить();
		//КонецЕсли;
		
		ЗаписьНайдена = Ложь;
		
		Если ФайлДБФ.Открыта() Тогда
			
			ФайлДБФ.Первая();
			Пока НЕ ФайлДБФ.ВКонце() Цикл
				
				Если СокрЛП(ФайлДБФ.NAME) = Строка.Имя Тогда
					ЗаписьНайдена = Истина;
					Прервать;
				КонецЕсли;
				
				ФайлДБФ.Следующая();
				
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЗаписьНайдена Тогда
			ФайлДБФ.Добавить();
			ФайлДБФ.NAME = Строка.Имя;
		КонецЕсли;
		
		ФайлДБФ.SUM = Строка.ХэшБазы;
		
		Если Строка.Размер > 0 Тогда
			
			ФайлВКаталоге = Новый Файл(Путь);
			Если ФайлВКаталоге.Существует() Тогда
				ФайлВКаталоге.УстановитьТолькоЧтение(Ложь);
			КонецЕсли;
			
			Строка.Данные.Записать(Путь);
			
			Если Строка.ВладелецФайла = ПапкаHTML Тогда
				
				ТекстHTML = Новый ТекстовыйДокумент;
				ТекстHTML.Прочитать(Путь);
				Текст = ТекстHTML.ПолучитьТекст();
				
				ИмяКаталога = СтрЗаменить(РабочийКаталог, "\", "\\");
				
				Текст = СтрЗаменить(Текст, "%ЛОКАЛЬНЫЙ_ПУТЬ_К_ФАЙЛУ%", ИмяКаталога);
				ТекстHTML.УстановитьТекст(Текст);
				ПутьНовыйHTML = РабочийКаталог + "Рабочий_" + Строка.Имя;
				ТекстHTML.Записать(ПутьНовыйHTML);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из МассивСтрокДляУдаления Цикл
		ЭтаФорма[ИмяТаблицы].Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицу()
	
	тз = РеквизитФормыВЗначение("ТаблицаЗначений", Тип("ТаблицаЗначений"));
	тз.Индексы.Добавить("Имя");
	
	ВидыФайлов = Новый Массив;
	
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.ТекстураНоменклатуры);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.ОсновнаяКартинка);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КартинкаПравая);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КрышаЛевая);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КрышаПравая);
	
	ОбновлениеФайлов.ЗаполнитьТаблицуИзБазы(тз, ВидыФайлов);
	
	// Теперь в ТаблицаЗначений хранятся ТОЛЬКО файлы которые отсутствуют
	// или различаются, т.е. требуется синхронизация.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("тз", тз);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тз.ВладелецФайла,
	|	1 КАК Количество,
	|	тз.Размер
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&тз КАК тз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА вт.ВладелецФайла ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ВЫРАЗИТЬ(вт.ВладелецФайла КАК Справочник.Номенклатура).НоменклатурнаяГруппа
	|		КОГДА вт.ВладелецФайла ССЫЛКА Справочник.КаталогИзделий
	|			ТОГДА ВЫРАЗИТЬ(вт.ВладелецФайла КАК Справочник.КаталогИзделий).ВидИзделияПоКаталогу
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК Группа,
	|	вт.Количество,
	|	вт.Размер
	|ПОМЕСТИТЬ втГрупп
	|ИЗ
	|	вт КАК вт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Группа,
	|	СУММА(вт.Размер) КАК Размер,
	|	СУММА(вт.Количество) КАК Количество
	|ИЗ
	|	втГрупп КАК вт
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Группа
	|ИТОГИ
	|	СУММА(Размер),
	|	СУММА(Количество)
	|ПО
	|	ОБЩИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаИтог.Следующий();
		
		ИтогКоличество = ВыборкаИтог.Количество;
		ИтогРазмер = ВыборкаИтог.Размер / 1024; // Перевод в мегабайты
		
		Выборка = ВыборкаИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ВидимаяТаблица.Добавить();
			НоваяСтрока.Группа = Выборка.Группа;
			НоваяСтрока.Количество = Выборка.Количество;
			НоваяСтрока.Размер = Выборка.Размер;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(тз, "ТаблицаЗначений");
	
КонецПроцедуры

&НаСервере
Функция ДополнитьТаблицуОбязательныхФайлов()
	
	тз = РеквизитФормыВЗначение("ТаблицаОбязательныхФайлов", Тип("ТаблицаЗначений"));
	ОбновлениеФайлов.ЗаполнитьТаблицуОбязательныхФайлов(тз);
	ЗначениеВРеквизитФормы(тз, "ТаблицаОбязательныхФайлов");
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ФайлыОбновлены Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстВопроса = "Настоятельно рекомендуется обновить файлы." + Символы.ПС + "Продолжить работу без обновления?" ;
		Ответ = Вопрос(ТекстВопроса, Режим, 0);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ОбновитьФайлы("hash");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьФайлы(ИмяФайла)
	
	ФайлыОбновлены = Истина;
	Заголовок = "Обновление началось";
	ДатаНачалаПроцесса = ТекущаяДата();
	
	КоличествоОбновить = ТаблицаЗначений.Количество();
	
	// Сделать.
	// Более адекватную шкалу.
	// Когда файлов много, можно отображать каждый процент.
	// Когда мало, наоборот шаг сделать побольше.
	// На вскидку не разобрался как исправить.
	
	//Если КоличествоОбновить >= 100 Тогда
	//	ШагПрогресса = 1;
	//Иначе
	//	ШагПрогресса = Цел(100 / КоличествоОбновить);
	//КонецЕсли;
	//
	//ШагОбновления = КоличествоОбновить * ШагПрогресса / 100;
	
	Шаг = Окр((КоличествоОбновить / 10) + 0.5, 0, РежимОкругления.Окр15как20);
	ШагОбновления = Макс(Шаг, 10);
	ШагПрогресса = Мин(Шаг, 10);
	
	Если КоличествоОбновить > 0 Тогда
		
		ФайлДБФ = Новый XBase(РабочийКаталог + ИмяФайла + ".dbf", ИмяФайла + ".cdx");
		ФайлДБФ.АвтоСохранение = Истина;
		
		// Костыль.
		
		Если НЕ ФайлДБФ.Открыта() Тогда
			ОбновлениеФайлов.СоздатьФайлДБФ(ФайлДБФ, РабочийКаталог, ИмяФайла);
		КонецЕсли;
		
		// Костыль.
		
		//ФайлДБФ.ТекущийИндекс = ФайлДБФ.индексы.NAME;
		
		ТекстСостояния = "Выполняется синхронизация файлов";
		Состояние(ТекстСостояния, 0, "Оценка времени загрузки", БиблиотекаКартинок.Синхронизация);
		
		Для Индекс = 1 по ШагПрогресса Цикл
			
			Если ТаблицаЗначений.Количество() > 0 Тогда
				
				ОбработатьСтрок = Мин(ШагОбновления, ТаблицаЗначений.Количество());
				
				ЗагрузкаДвоичныхДанных("ТаблицаЗначений", ОбработатьСтрок);
				СохранитьНаКлиенте(ФайлДБФ, "ТаблицаЗначений", ОбработатьСтрок);
				
				ОбработкаПрерыванияПользователя();
				
				ПрошлоВремени = ТекущаяДата() - ДатаНачалаПроцесса;
				Осталось = ПрошлоВремени * (КоличествоОбновить / Мин(ОбработатьСтрок * Индекс, КоличествоОбновить) - 1);
				Часов = Цел(Осталось / 3600);
				Осталось = Осталось - (Часов * 3600);
				Минут = Цел(Осталось / 60);
				Секунд = Цел(Цел(Осталось - (Минут * 60)));
				ОсталосьВремени = Формат(Часов, "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Минут, "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Секунд, "ЧЦ=2; ЧН=00; ЧВН=");
				ТекстОсталось = "Осталось: ~" + ОсталосьВремени;
				ТекстСостояния = ("Выполняется обновление файлов");
				Состояние(ТекстСостояния, (100 * Индекс) / ШагПрогресса, ТекстОсталось, БиблиотекаКартинок.Синхронизация);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
		
		ПоказатьОповещениеПользователя("Обновление файлов.", , "Обновление файлов прошло успешно.", БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Таймер()
	
	Таймер = Таймер - 1;
	Заголовок = "Обновление через " + Таймер + " сек.";
	Если Таймер = 0 Тогда
		ОтключитьОбработчикОжидания("Таймер");
		ОбновитьФайлы("hash");
	КонецЕсли;
	
КонецФункции

