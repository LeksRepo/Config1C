
#Область События_формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФайлыОбновлены = Ложь;
	
	Если Параметры.Свойство("ЗапускПрограммы") Тогда
		ЗапускПрограммы = Параметры.ЗапускПрограммы;
		ПечатьЭтикеток = ЛексСервер.ТекущийПользовательПечатьЭтикеток();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущийХэшВсехФайлов()
	
	ВидыФайлов = Новый Массив;
	
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.ТекстураНоменклатуры);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.ОсновнаяКартинка);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КартинкаПравая);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КрышаЛевая);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КрышаПравая);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.Логотип);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.СистемныйФайл);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыФайлов", ВидыФайлов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(Файлы.Хэш) КАК Хэш
	|ИЗ
	|	Справочник.ФайлыЛекс КАК Файлы
	|ГДЕ
	|	НЕ Файлы.ПометкаУдаления
	|	И (Файлы.Вид В (&ВидыФайлов)
	|			ИЛИ Файлы.ВладелецФайла ССЫЛКА Справочник.ПапкиФайлов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Хэш;
	
КонецФункции

&НаКлиенте
Функция НужноОбновлятьФайлы()
	
	НужноОбновлять = Ложь;
	
	ОбщийПредыдущийХэш = 0;
	
	Попытка 
		ФайлХэш = Новый ЧтениеТекста(ФайлОбщегоХэша, КодировкаТекста.UTF8);
		ОбщийПредыдущийХэш = Число(ФайлХэш.ПрочитатьСтроку());
	Исключение
		ОбщийПредыдущийХэш = 0;
	КонецПопытки;
	
	Если ОбщийПредыдущийХэш > 0 Тогда 
	
		ОбщийТекущийХэш = ПолучитьТекущийХэшВсехФайлов();
		
		Если ОбщийПредыдущийХэш <> ОбщийТекущийХэш Тогда
			 НужноОбновлять = Истина;
		КонецЕсли;
		
	Иначе
		НужноОбновлять = Истина;
	КонецЕсли;
	
	Возврат НужноОбновлять; 
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьТекущийОбщийХэш()
	
	Если ОбщийТекущийХэш = 0 Тогда 
		ОбщийТекущийХэш = ПолучитьТекущийХэшВсехФайлов();
	КонецЕсли;	
	
	Док = Новый ТекстовыйДокумент();
	Док.ДобавитьСтроку(Строка(ОбщийТекущийХэш));
	Док.Записать(ФайлОбщегоХэша, КодировкаТекста.UTF8);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РабочийКаталог = ЛексКлиент.ПолучитьПутьКаталогаФайлов();
	ФайлОбщегоХэша = РабочийКаталог + "hashchksum.dat";
	
	Если НЕ НужноОбновлятьФайлы() Тогда
		 Отказ = Истина;
		 Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя("Проверка файлов",, "Поиск обновлённых изображений");
	
	Если ЗапускПрограммы Тогда
		
		Таймер = 30;
		ПодключитьОбработчикОжидания("Таймер", 1);
		
		СинхронизацияОбязательныхФайлов(Ложь);
		
	КонецЕсли;
	
	Если ПечатьЭтикеток Тогда
		ПоказатьОповещениеПользователя("Проверка файлов",, "Все файлы актуальны");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуИзКаталога(ТаблицаЗначений, "hash");
	
	ДополнитьТаблицу();
	
	Если ЗапускПрограммы Тогда
		
		Если ИтогКоличество = 0 Тогда
			ПоказатьОповещениеПользователя("Проверка файлов",, "Все файлы актуальны");
			Отказ = Истина;
		ИначеЕсли ИтогРазмер < 0.5 Тогда
			ПоказатьОповещениеПользователя("Проверка файлов",, "Обновлено несколько файлов");
			ОбновитьФайлы("hash");
		КонецЕсли;
		
		ЗаписатьТекущийОбщийХэш();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура Обновить(Команда = Неопределено)
	
	ОбновитьФайлы("hash");
	
КонецПроцедуры

&НаКлиенте
Процедура Пропустить(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеОбновление(Команда)
	
	МассивФайлов = НайтиФайлы(РабочийКаталог, "*", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		Файл.УстановитьТолькоЧтение(Ложь);
	КонецЦикла;
	
	Попытка
		УдалитьФайлы(РабочийКаталог);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	СоздатьКаталогНаДиске(РабочийКаталог);
	
	СинхронизацияОбязательныхФайлов(Истина);
	
	// синхронизация картинок
	
	ФайлДБФ = СоздатьФайлДБФ("hash", Истина);	
	ФайлДБФ.ЗакрытьФайл();
	
	ТаблицаЗначений.Очистить();
	ДополнитьТаблицу();
	ОбновитьФайлы("hash");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция СинхронизацияОбязательныхФайлов(ПолноеОбновление)
	
	Если ПолноеОбновление Тогда
		ТаблицаОбязательныхФайлов.Очистить();
		ДополнитьТаблицуОбязательныхФайлов();
	КонецЕсли;
	
	ЗаполнитьТаблицуИзКаталога(ТаблицаОбязательныхФайлов, "required");
	ДополнитьТаблицуОбязательныхФайлов();
	КоличествоФайлов = ТаблицаОбязательныхФайлов.Количество();
	
	Если КоличествоФайлов > 0 Тогда
		
		ЗагрузкаДвоичныхДанных("ТаблицаОбязательныхФайлов", КоличествоФайлов);
		
		ФайлДБФ = СоздатьФайлДБФ("required" , Ложь);
		
		СохранитьНаКлиенте(ФайлДБФ, "ТаблицаОбязательныхФайлов", КоличествоФайлов);
		
		ФайлДБФ.Записать();
		ФайлДБФ.ЗакрытьФайл();
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузкаДвоичныхДанныхСервер(МассивСсылок)
	
	МассивДанных = Новый Массив();
	
	Для Каждого ФайлСсылка ИЗ МассивСсылок Цикл
		МассивДанных.Добавить(ФайлСсылка.Данные.Получить());
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузкаДвоичныхДанных(ИмяТаблицы, ОбработатьСтрок)
	
	МассивСсылок = Новый Массив();
	
	Для Индекс = 0 По ОбработатьСтрок - 1 Цикл
		Строка = ЭтаФорма[ИмяТаблицы][Индекс];
		МассивСсылок.Добавить(Строка.ФайлСсылка);
	КонецЦикла;
	
	Данные = ЗагрузкаДвоичныхДанныхСервер(МассивСсылок);
	
	Для Индекс = 0 По ОбработатьСтрок - 1 Цикл
		Строка = ЭтаФорма[ИмяТаблицы][Индекс];
		Строка.Данные = Данные[Индекс];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(ФайлДБФ, ИмяТаблицы, ОбработатьСтрок)
	
	МассивСтрокДляУдаления = Новый Массив;
	
	Для Индекс = 0 По ОбработатьСтрок - 1 Цикл
		
		Строка = ЭтаФорма[ИмяТаблицы][Индекс];
		
		МассивСтрокДляУдаления.Добавить(Строка);
		Путь = РабочийКаталог + Строка.Имя;

		ФайлДБФ.ТекущийИндекс = ФайлДБФ.Индексы.Name;

		ЗаписьНайдена = ФайлДБФ.Найти(Строка.Имя, "=");

		Если НЕ ЗаписьНайдена Тогда
			ФайлДБФ.Добавить();
			ФайлДБФ.NAME = Строка.Имя;
		КонецЕсли;
		
		ФайлДБФ.SUM = Строка.ХэшБазы;
		
		Если Строка.Размер > 0 Тогда
			
			ФайлВКаталоге = Новый Файл(Путь);
			Если ФайлВКаталоге.Существует() Тогда
				ФайлВКаталоге.УстановитьТолькоЧтение(Ложь);
			КонецЕсли;
			
			Строка.Данные.Записать(Путь);
	
		КонецЕсли;
	
	КонецЦикла;
	
	Для каждого Строка Из МассивСтрокДляУдаления Цикл
		ЭтаФорма[ИмяТаблицы].Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицу()
	
	тз = РеквизитФормыВЗначение("ТаблицаЗначений", Тип("ТаблицаЗначений"));
	тз.Индексы.Добавить("Имя");
	
	ЗаполнитьТаблицуИзБазы(тз);
	
	// Теперь в ТаблицаЗначений хранятся ТОЛЬКО файлы которые отсутствуют
	// или различаются, т.е. требуется синхронизация.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("тз", тз);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тз.ВладелецФайла,
	|	1 КАК Количество,
	|	тз.Размер
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&тз КАК тз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА вт.ВладелецФайла ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ВЫРАЗИТЬ(вт.ВладелецФайла КАК Справочник.Номенклатура).НоменклатурнаяГруппа
	|		КОГДА вт.ВладелецФайла ССЫЛКА Справочник.КаталогИзделий
	|			ТОГДА ВЫРАЗИТЬ(вт.ВладелецФайла КАК Справочник.КаталогИзделий).ВидИзделияПоКаталогу
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК Группа,
	|	вт.Количество,
	|	вт.Размер
	|ПОМЕСТИТЬ втГрупп
	|ИЗ
	|	вт КАК вт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Группа,
	|	СУММА(вт.Размер) КАК Размер,
	|	СУММА(вт.Количество) КАК Количество
	|ИЗ
	|	втГрупп КАК вт
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Группа
	|ИТОГИ
	|	СУММА(Размер),
	|	СУММА(Количество)
	|ПО
	|	ОБЩИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаИтог.Следующий();
		
		ИтогКоличество = ВыборкаИтог.Количество;
		ИтогРазмер = ВыборкаИтог.Размер / 1024; // Перевод в мегабайты
		
		Выборка = ВыборкаИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ВидимаяТаблица.Добавить();
			НоваяСтрока.Группа = Выборка.Группа;
			НоваяСтрока.Количество = Выборка.Количество;
			НоваяСтрока.Размер = Выборка.Размер;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(тз, "ТаблицаЗначений");
	
КонецПроцедуры

&НаСервере
Функция ДополнитьТаблицуОбязательныхФайлов()
	
	тз = РеквизитФормыВЗначение("ТаблицаОбязательныхФайлов", Тип("ТаблицаЗначений"));
	ЗаполнитьТаблицуОбязательныхФайлов(тз);
	ЗначениеВРеквизитФормы(тз, "ТаблицаОбязательныхФайлов");
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ФайлыОбновлены Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстВопроса = "Настоятельно рекомендуется обновить файлы." + Символы.ПС + "Продолжить работу без обновления?" ;
		Ответ = Вопрос(ТекстВопроса, Режим, 0);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ОбновитьФайлы("hash");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФайлыОбновлены Тогда
		 ЗаписатьТекущийОбщийХэш();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьФайлы(ИмяФайла)
	
	ФайлыОбновлены = Истина;
	Заголовок = "Обновление началось";
	
	КоличествоОбновить = ТаблицаЗначений.Количество();
	
	Если КоличествоОбновить > 0 Тогда
		
		ДатаНачалаПроцесса = ТекущаяДата();
	
		ОбщийРазмерФайлов = ТаблицаЗначений.Итог("Размер") / 1024;
		
		Если ОбщийРазмерФайлов < 1 Тогда
			ОбщийРазмерФайлов = 1;	
		КонецЕсли;
		
		ОбновленныйРазмерФайлов = 0;
		
		МбЗаШаг = Окр((ОбщийРазмерФайлов/20)+0.5, 0, РежимОкругления.Окр15как20);

		Если МбЗаШаг < 2 Тогда	
			МбЗаШаг = 2; 	
		КонецЕсли;
		
		ФайлДБФ = СоздатьФайлДБФ(ИмяФайла, Ложь);;
				
		ТекстСостояния = "Выполняется синхронизация файлов";
		Состояние(ТекстСостояния, 0, "Оценка времени загрузки", БиблиотекаКартинок.Синхронизация);
		
		Пока ТаблицаЗначений.Количество() > 0 Цикл
			
			ОбработатьСтрок = 0;
			РазмерФайловЗаРаз = 0;
			
			Для Каждого Стр ИЗ ТаблицаЗначений Цикл
				
				 ОбработатьСтрок = ОбработатьСтрок + 1;
				 РазмерФайловЗаРаз = РазмерФайловЗаРаз + Стр.Размер/1024;
				 
				 Если РазмерФайловЗаРаз > МбЗаШаг Тогда
					Прервать;	 
				 КонецЕсли;
				
			КонецЦикла;
			
			ЗагрузкаДвоичныхДанных("ТаблицаЗначений", ОбработатьСтрок);
			СохранитьНаКлиенте(ФайлДБФ, "ТаблицаЗначений", ОбработатьСтрок);
			
			ОбработкаПрерыванияПользователя();
			
			ОбновленныйРазмерФайлов = ОбновленныйРазмерФайлов + РазмерФайловЗаРаз;
			
			ПроцентВыполнения = ОбновленныйРазмерФайлов / ОбщийРазмерФайлов; 
			
			Если ПроцентВыполнения <= 0 Тогда
				ПроцентВыполнения = 0.01;	
			КонецЕсли;
			
			ПрошлоВремени = ТекущаяДата() - ДатаНачалаПроцесса;
			Осталось = Цел(ПрошлоВремени * ((1/ПроцентВыполнения) - 1));
			
			Часов = Цел(Осталось / 3600);
			Осталось = Осталось - (Часов * 3600);
			Минут = Цел(Осталось / 60);
			Секунд = Цел(Цел(Осталось - (Минут * 60)));
			
			ОсталосьВремени = Формат(Часов, "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Минут, "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Секунд, "ЧЦ=2; ЧН=00; ЧВН=");
			ТекстОсталось = "Осталось: ~" + ОсталосьВремени;
			
			ТекстСостояния = ("Выполняется обновление файлов");
			Состояние(ТекстСостояния, Цел(100 * ПроцентВыполнения), ТекстОсталось, БиблиотекаКартинок.Синхронизация);

		КонецЦикла;
		
		ФайлДБФ.Записать();
		ФайлДБФ.ЗакрытьФайл();
		
		ПоказатьОповещениеПользователя("Обновление файлов.", , "Обновление файлов прошло успешно.", БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Таймер()
	
	Таймер = Таймер - 1;
	Заголовок = "Обновление через " + Таймер + " сек.";
	Если Таймер = 0 Тогда
		ОтключитьОбработчикОжидания("Таймер");
		ОбновитьФайлы("hash");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуИзКаталога(фнТаблица, ИмяФайла) Экспорт
	
	РабочийКаталог = ЛексКлиент.ПолучитьПутьКаталогаФайлов();
	СоздатьКаталогНаДиске(РабочийКаталог);
	
	Попытка
		
		ФайлДБФ = СоздатьФайлДБФ(ИмяФайла, Ложь);
		
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Ошибка при открытии файла ""%1"":%2""%3"".'",
		ФайлДБФ,
		Символы.ПС,
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
	ФайлДБФ.Первая();
	
	Пока НЕ ФайлДБФ.ВКонце() Цикл
		
		Если ЗначениеЗаполнено(ФайлДБФ.NAME)
			И ЗначениеЗаполнено(ФайлДБФ.SUM) Тогда
			НоваяСтрока = фнТаблица.Добавить();
			НоваяСтрока.Имя = СокрЛП(ФайлДБФ.NAME);
			НоваяСтрока.ХэшКаталога = ФайлДБФ.SUM;
		Иначе
			ФайлДБФ.Удалить();
		КонецЕсли;
		
		ФайлДБФ.Следующая();
		
	КонецЦикла;
	
	ФайлДБФ.ЗакрытьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогНаДиске(фнКаталог) Экспорт
	
	КаталогНаДиске = Новый Файл(фнКаталог);
	Если НЕ КаталогНаДиске.Существует() Тогда
		
		Попытка
			СоздатьКаталог(фнКаталог);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Ошибка при создании каталога ""%1"":%2""%3"".'",
			фнКаталог,
			Символы.ПС,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьФайлДБФ(ИмяФайла, НовыйФайл) Экспорт
	
	Если НовыйФайл Тогда
		ФайлДБФ = Новый XBase();
	Иначе
		ФайлДБФ = Новый XBase(РабочийКаталог + ИмяФайла + ".dbf", РабочийКаталог + ИмяФайла + ".cdx");
	КонецЕсли;
	
	Если НовыйФайл ИЛИ (НЕ ФайлДБФ.Открыта()) Тогда
	
		ФайлДБФ.Поля.Добавить("NAME", "S", 100);
		ФайлДБФ.Поля.Добавить("SUM", "N", 15);
		ФайлДБФ.Индексы.Добавить("NAME", "NAME", Истина);
		
		ФайлДБФ.СоздатьФайл(РабочийКаталог + ИмяФайла +".dbf", РабочийКаталог + ИмяФайла + ".cdx");
		
	КонецЕсли;
	
	ФайлДБФ.АвтоСохранение = Истина;
	
	Возврат ФайлДБФ;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуИзБазы(фнТаблица) Экспорт
	
	ВидыФайлов = Новый Массив;
	
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.ТекстураНоменклатуры);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.ОсновнаяКартинка);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КартинкаЛевая);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КартинкаПравая);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КрышаЛевая);
	ВидыФайлов.Добавить(Перечисления.ВидыПрисоединенныхФайлов.КрышаПравая);
	
	ПользовательАдминистратор = РольДоступна("АдминистраторСистемы");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыФайлов", ВидыФайлов);
	Запрос.УстановитьПараметр("Администратор", ПользовательАдминистратор);
	Запрос.УстановитьПараметр("Подразделение", ПараметрыСеанса.ТекущееПодразделение);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК ФайлСсылка,
	|	Файлы.Вид КАК ВидФайла,
	|	Файлы.ВладелецФайла КАК ВладелецФайла,
	|	Файлы.Размер КАК Размер,
	|	Файлы.Хэш КАК ХэшБазы
	|ИЗ
	|	Справочник.ФайлыЛекс КАК Файлы
	|ГДЕ
	|	НЕ Файлы.ПометкаУдаления
	|	И Файлы.Вид В(&ВидыФайлов)
	|	И ВЫБОР
	|			КОГДА Файлы.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыПрисоединенныхФайлов.ТекстураНоменклатуры)
	|					И НЕ &Администратор
	|				ТОГДА Файлы.ВладелецФайла.Подразделение = &Подразделение
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Размер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ХэшБазы = Выборка.ХэшБазы;
		
		Если НЕ ЗначениеЗаполнено(ХэшБазы) ИЛИ ХэшБазы = 0 Тогда
			ХэшБазы = ОбновитьХэшФайла(Выборка.ФайлСсылка);
		КонецЕсли;
		
		Имя = ЛексСервер.ПолучитьИмяПрисоединенногоФайла(Выборка.ВидФайла, Выборка.ВладелецФайла);
		
		НайденныеСтроки = фнТаблица.НайтиСтроки(Новый Структура("Имя", Имя));
		КоличествоСтрок = НайденныеСтроки.Количество();

		Если КоличествоСтрок = 1 Тогда
			
			Строка = НайденныеСтроки[0];

			Если ХэшБазы = Строка.ХэшКаталога Тогда
				фнТаблица.Удалить(Строка);
			Иначе
				Строка.ХэшБазы = ХэшБазы;
				Строка.ВладелецФайла = Выборка.ВладелецФайла;
				Строка.ФайлСсылка = Выборка.ФайлСсылка;
				Строка.Размер = Выборка.Размер;
			КонецЕсли;
			
		ИначеЕсли КоличествоСтрок = 0 И Имя <> "" Тогда
			
			Строка = фнТаблица.Добавить();
			Строка.Имя = Имя;
			Строка.ХэшБазы = ХэшБазы;
			Строка.ВладелецФайла = Выборка.ВладелецФайла;
			Строка.ФайлСсылка = Выборка.ФайлСсылка;
			Строка.Размер = Выборка.Размер;
			
		Иначе
			
			// Ошибка, несколько файлов с одинаковым именем.
			// Обработать, внести инфу в журнал регистрации, сообщить админам.
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуОбязательныхФайлов(фнТаблица) Экспорт
	
	ЭтоДилер = ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();
	ВерсияЛоготип = Неопределено;
	Логотипы = Неопределено;
	ПользовательАдминистратор = РольДоступна("АдминистраторСистемы");
	
	Запрос = Новый Запрос;
	
	Если ЭтоДилер Тогда
		ВерсияЛоготип = ПользователиКлиентСервер.ТекущийВнешнийПользователь().ОбъектАвторизации.Логотип;
	Иначе
		Логотипы = Перечисления.ВидыПрисоединенныхФайлов.Логотип;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Логотипы", Логотипы);
	Запрос.УстановитьПараметр("ВерсияЛоготип", ВерсияЛоготип);
	Запрос.УстановитьПараметр("Администратор", ПользовательАдминистратор);
	Запрос.УстановитьПараметр("Подразделение", ПараметрыСеанса.ТекущееПодразделение);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК ФайлСсылка,
	|	Файлы.Вид КАК ВидФайла,
	|	Файлы.ВладелецФайла КАК ВладелецФайла,
	|	Файлы.Размер КАК Размер,
	|	Файлы.Хэш КАК ХэшБазы,
	|	Файлы.Наименование КАК Наименование,
	|	Файлы.Расширение КАК Расширение
	|ИЗ
	|	Справочник.ФайлыЛекс КАК Файлы
	|ГДЕ
	|	НЕ Файлы.ПометкаУдаления
	|	И (Файлы.ВладелецФайла ССЫЛКА Справочник.ПапкиФайлов
	|			ИЛИ ВЫБОР
	|				КОГДА &Администратор
	|					ТОГДА Файлы.Вид = &Логотипы
	|				ИНАЧЕ (Файлы.Вид = &Логотипы
	|						ИЛИ Файлы.Ссылка = &ВерсияЛоготип)
	|						И Файлы.ВладелецФайла.Подразделение = &Подразделение
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Размер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ХэшБазы = Выборка.ХэшБазы;
		
		Если НЕ ЗначениеЗаполнено(ХэшБазы) ИЛИ ХэшБазы = 0 Тогда
			ХэшБазы = ОбновитьХэшФайла(Выборка.ФайлСсылка);
		КонецЕсли;

		Если ТипЗнч(Выборка.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			Имя = Выборка.Наименование + Выборка.Расширение;
		Иначе
			Имя = ЛексСервер.ПолучитьИмяПрисоединенногоФайла(Выборка.ВидФайла, Выборка.ВладелецФайла);
		КонецЕсли;
		
		НайденныеСтроки = фнТаблица.НайтиСтроки(Новый Структура("Имя", Имя));
		КоличествоСтрок = НайденныеСтроки.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			
			Строка = НайденныеСтроки[0];
			
			Если ХэшБазы = Строка.ХэшКаталога Тогда
				фнТаблица.Удалить(Строка);
			Иначе
				Строка.ХэшБазы = ХэшБазы;
				Строка.ВладелецФайла = Выборка.ВладелецФайла;
				Строка.ФайлСсылка = Выборка.ФайлСсылка;
				Строка.Размер = Выборка.Размер;
			КонецЕсли;
			
		ИначеЕсли КоличествоСтрок = 0 И Имя <> "" Тогда
			
			Строка = фнТаблица.Добавить();
			Строка.Имя = Имя;
			Строка.ХэшБазы = ХэшБазы;
			Строка.ВладелецФайла = Выборка.ВладелецФайла;
			Строка.ФайлСсылка = Выборка.ФайлСсылка;
			Строка.Размер = Выборка.Размер;
			
		Иначе
			
			Сообщить("Требуется удалить задублированный файл.");
			Сообщить(Выборка.ВладелецФайла);
			// Ошибка, несколько файлов с одинаковым именем.
			// Обработать, внести инфу в журнал регистрации, сообщить админам.
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ОбновитьХэшФайла(ФайлСсылка)
	
	ФайлОб = ФайлСсылка.Получить.ПолучитьОбъект();
	ФайлОб.Хэш = ЛексСервер.ПолучитьХэшСумму(ФайлОб.Данные.Получить());
	ФайлОб.Записать();
	
	Возврат ФайлОб.Хэш;
	
КонецФункции